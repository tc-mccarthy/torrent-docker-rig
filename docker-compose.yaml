version: "3"
services:
  vpn:
    image: ghcr.io/bubuntux/nordlynx
    container_name: nordlynx
    cap_add:
      - NET_ADMIN # Required
    environment:
      - ALLOWED_IPS=0.0.0.0/0 # So this docker network can access it
      - NET_LOCAL=172.16.0.0/16 # So it can be accessed within the local network
      - PRIVATE_KEY=${NORDVPN_PRIVATE_KEY} # Your NordLynx private key. You can obtain this by running the get_nordvpn_private_key script
      - QUERY="filters\[servers_groups\]\[identifier\]=legacy_p2p&filters\[country_id\]=228" # narrow the list of servers to US-based P2P servers
      - TZ # Timezone used for logging
    ports:
      - 8088:8088 ## qbittorrent web ui
      - 6881:6881 ## qbittorrent
      - 6881:6881/udp ## qbittorrent udp
      - 7878:7878 ## radarr
      - 8989:8989 ## sonarr
      - 9696:9696 ## prowlarr
      - 4000:4000 ## tmm VNC
      - 9443:9443 ## portainer
      - 6767:6767 ## bazarr
      - 8090:8080 ## usenet
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1 # Recommended if using ipv4 only
      - net.ipv4.conf.all.rp_filter=2
    volumes:
      - ./scripts:/scripts # health check script and more
    restart: unless-stopped
    labels:
      - "autoheal=true" # include in autoheal check
    healthcheck:
      test: bash ./scripts/vpn-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 30s
    networks:
      - default

  torrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - WEBUI_PORT=${QBIT_WEB_UI_PORT}
      - PUID=1000
      - GUID=1000
      - Umask=022
      - TZ # Timezone used for logging
    volumes:
      - ${TORRENT_STORAGE}:${TORRENT_STORAGE} # path to my volumes for download storage
      - ./config:/config # qbittorrent config -- this mount allows you to script your own config and preserve the changes you make between container instances
      - ./scripts:/scripts # health check script and more
      - ./vuetorrent:/vuetorrent
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
    labels:
      - "autoheal=true" # include in autoheal check
    restart: unless-stopped
    healthcheck:
      test: bash ./scripts/torrent-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 0
      timeout: 5s
      start_period: 30s

  autoheal:
    image: willfarrell/autoheal:latest
    tty: true
    container_name: autoheal
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  proxy:
    image: nginx:1.23.3-alpine
    container_name: proxy
    restart: unless-stopped
    volumes:
      - ./nginx/sites-available:/etc/nginx/templates
      - ./certbot/etc:/ssl
      - ./transcode/output:/public/transcode
    ports:
      - "8080:80"
    environment:
      - NGINX_PORT=80
      - WEBUI_PORT=${QBIT_WEB_UI_PORT}
      - SSL_HOST=${TORRENT_SSL_HOST}
    depends_on:
      - torrent
    networks:
      - default

  certbot:
    container_name: certbot
    image: certbot/dns-cloudflare # Generates a cert for qbittorrent reverse proxy.
    # This expects cloudflare to be your DNS provider but certbot supports multiple providers. Google is your friend here.
    volumes:
      - ./certbot/etc:/etc/letsencrypt
      - ./certbot/cloudflare.ini:/root/cloudflare.ini
    command: >-
      certonly --dns-cloudflare
      --dns-cloudflare-credentials /root/cloudflare.ini
      --dns-cloudflare-propagation-seconds 15
      --email ${CLOUDFLARE_EMAIL}
      --agree-tos --no-eff-email
      --force-renewal
      -d ${TORRENT_SSL_HOST}

  ddns:
    container_name: ddns
    restart: unless-stopped
    image: oznu/cloudflare-ddns
    environment:
      - API_KEY=${CLOUDFLARE_API_KEY}
      - ZONE=${DDNS_ZONE}
      - SUBDOMAIN=${DDNS_SUBDOMAIN}

  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=1000
      - PGID=1000
      - TZ
    volumes:
      - ./duplicati/config:/config
      - ${BACKUP_DESTINATION}:/backups
      - ${BACKUP_SOURCE}:/source
    ports:
      - 8200:8200
    restart: unless-stopped

  transcode:
    container_name: transcode
    build:
      context: ./transcode
    environment:
      - TZ
      - TRANSCODE_PATHS
    volumes:
      - ${TRANSCODE_STORAGE}:/source_media # path to my volumes for download storage
      - ./transcode:/usr/app
      - /usr/app/node_modules
    restart: unless-stopped

  plex:
    container_name: plex
    image: lscr.io/linuxserver/plex:latest
    network_mode: host
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ${TRANSCODE_STORAGE}:${TRANSCODE_STORAGE} # path to my volumes for download storage
      - ./plex:/config
    restart: unless-stopped

  mongo:
    container_name: torrent-mongo-local
    image: mongo:3.6.23-xenial
    hostname: torrent-mongo-local
    ports:
      - 27017:27017
    volumes:
      - mongo_db:/data/db
    restart: always

  sonarr:
    container_name: sonarr
    image: lscr.io/linuxserver/sonarr:latest
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - SERVICE_NAME=${SONARR_SERVICE_NAME}
      - SERVICE_PORT=${SONARR_SERVICE_PORT}
      - API_KEY=${SONARR_API_KEY}
    volumes:
      - ${SONARR_STORAGE}:${SONARR_STORAGE} # path to my volumes for download storage
      - ./sonarr:/config
      - ./scripts:/scripts # health check script and more
    healthcheck:
      test: bash /scripts/arr-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 30s
    restart: unless-stopped
    labels:
      - "autoheal=true" # include in autoheal check
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
      prowlarr: # wait for index service to start before starting
        condition: service_healthy
      torrent: # wait for download client to start before starting
        condition: service_healthy

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - SERVICE_NAME=${RADARR_SERVICE_NAME}
      - SERVICE_PORT=${RADARR_SERVICE_PORT}
      - API_KEY=${RADARR_API_KEY}
    volumes:
      - ${RADARR_STORAGE}:${RADARR_STORAGE} # path to my volumes for download storage
      - ./radarr:/config
      - ./scripts:/scripts # health check script and more
    healthcheck:
      test: bash /scripts/arr-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 10s
    restart: unless-stopped
    labels:
      - "autoheal=true" # include in autoheal check
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
      prowlarr: # wait for index service to start before starting
        condition: service_healthy
      torrent: # wait for download client to start before starting
        condition: service_healthy

  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - SERVICE_NAME=${BAZARR_SERVICE_NAME}
      - SERVICE_PORT=${BAZARR_SERVICE_PORT}
      - API_KEY=${BAZARR_API_KEY}
    volumes:
      - ${BAZARR_STORAGE}:${BAZARR_STORAGE} # path to my volumes for download storage
      - ./bazarr:/config
      - ./scripts:/scripts # health check script and more
    healthcheck:
      test: bash /scripts/arr-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 10s
    restart: unless-stopped
    labels:
      - "autoheal=true" # include in autoheal check
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
      radarr: # wait for index service to start before starting
        condition: service_healthy
      sonarr: # wait for download client to start before starting
        condition: service_healthy

  prowlarr:
    container_name: prowlarr
    image: lscr.io/linuxserver/prowlarr:latest
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - TZ
      - PUID=1000
      - PGID=1000
      - SERVICE_NAME=${PROWLARR_SERVICE_NAME}
      - SERVICE_PORT=${PROWLARR_SERVICE_PORT}
      - API_KEY=${PROWLARR_API_KEY}
    volumes:
      - ${PROWLARR_STORAGE}:${PROWLARR_STORAGE} # path to my volumes for download storage
      - ./prowlarr:/config
      - ./scripts:/scripts # health check script and more
    healthcheck:
      test: bash /scripts/arr-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 10s
    labels:
      - "autoheal=true" # include in autoheal check
    restart: unless-stopped
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
      torrent: # wait for vpn to start before starting
        condition: service_healthy

  tmm:
    container_name: tinymediamanager
    image: tinymediamanager/tinymediamanager:latest
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - TZ
      - USER_ID=1000
      - GROUP_ID=1000
      - PASSWORD=${TMM_PASSWORD}
    volumes:
      - ${TMM_STORAGE}:${TMM_STORAGE} # path to my volumes for download storage
      - ./tmm:/data
      - ./scripts:/scripts
      - ./tmm/launcher-extra.yml:/app/launcher-extra.yml
    restart: unless-stopped
    healthcheck:
      test: bash /scripts/tmm-health-check # health check script confirms protected vpn connection and a connected qbittorrent
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 30s
    labels:
      - "autoheal=true" # include in autoheal check
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy

  portainer:
    container_name: portainer
    hostname: portainer
    image: portainer/portainer-ce:latest
    network_mode: service:vpn # all traffic goes through vpn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_db:/data
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
    restart: unless-stopped

  usenet:
    image: linuxserver/sabnzbd
    container_name: usenet
    network_mode: service:vpn # all traffic goes through vpn
    environment:
      - PUID=1000
      - GUID=1000
      - Umask=022
      - TZ # Timezone used for logging
    volumes:
      - ${USENET_STORAGE}:${USENET_STORAGE} # path to my volumes for download storage
      - ./sabnzbd:/config # qbittorrent config -- this mount allows you to script your own config and preserve the changes you make between container instances
      - ./scripts:/scripts # health check script and more
    depends_on:
      vpn: # wait for vpn to start before starting
        condition: service_healthy
    labels:
      - "autoheal=true" # include in autoheal check
    restart: unless-stopped
    # healthcheck:
    #   test: bash ./scripts/torrent-health-check # health check script confirms protected vpn connection and a connected qbittorrent
    #   interval: 10s
    #   retries: 0
    #   timeout: 5s
    #   start_period: 30s
volumes:
  mongo_db:
  portainer_db:

networks:
  default:
    name: torrent-rig
