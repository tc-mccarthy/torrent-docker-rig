/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={249:function(e,t,n){var r;e.exports=(r=r||function(e,t){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==n.g&&n.g.crypto&&(r=n.g.crypto),!r)try{r=n(480)}catch(e){}var a=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),i={},l=i.lib={},u=l.Base={extend:function(e){var t=o(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=l.WordArray=u.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||f).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,a=e.sigBytes;if(this.clamp(),r%4)for(var o=0;o<a;o++){var i=n[o>>>2]>>>24-o%4*8&255;t[r+o>>>2]|=i<<24-(r+o)%4*8}else for(var l=0;l<a;l+=4)t[r+l>>>2]=n[l>>>2];return this.sigBytes+=a,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=u.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(a());return new s.init(t,e)}}),c=i.enc={},f=c.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],a=0;a<n;a++){var o=t[a>>>2]>>>24-a%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new s.init(n,t/2)}},d=c.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],a=0;a<n;a++){var o=t[a>>>2]>>>24-a%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new s.init(n,t)}},p=c.Utf8={stringify:function(e){try{return decodeURIComponent(escape(d.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return d.parse(unescape(encodeURIComponent(e)))}},m=l.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=p.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,a=r.words,o=r.sigBytes,i=this.blockSize,l=o/(4*i),u=(l=t?e.ceil(l):e.max((0|l)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var f=0;f<u;f+=i)this._doProcessBlock(a,f);n=a.splice(0,u),r.sigBytes-=c}return new s.init(n,c)},clone:function(){var e=u.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),h=(l.Hasher=m.extend({cfg:u.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){m.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new h.HMAC.init(e,n).finalize(t)}}}),i.algo={});return i}(Math),r)},214:function(e,t,n){var r;e.exports=(r=n(249),function(e){var t=r,n=t.lib,a=n.WordArray,o=n.Hasher,i=t.algo,l=[];!function(){for(var t=0;t<64;t++)l[t]=4294967296*e.abs(e.sin(t+1))|0}();var u=i.MD5=o.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,a=e[r];e[r]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}var o=this._hash.words,i=e[t+0],u=e[t+1],p=e[t+2],m=e[t+3],h=e[t+4],g=e[t+5],y=e[t+6],v=e[t+7],b=e[t+8],w=e[t+9],k=e[t+10],x=e[t+11],S=e[t+12],A=e[t+13],C=e[t+14],E=e[t+15],_=o[0],P=o[1],O=o[2],$=o[3];_=s(_,P,O,$,i,7,l[0]),$=s($,_,P,O,u,12,l[1]),O=s(O,$,_,P,p,17,l[2]),P=s(P,O,$,_,m,22,l[3]),_=s(_,P,O,$,h,7,l[4]),$=s($,_,P,O,g,12,l[5]),O=s(O,$,_,P,y,17,l[6]),P=s(P,O,$,_,v,22,l[7]),_=s(_,P,O,$,b,7,l[8]),$=s($,_,P,O,w,12,l[9]),O=s(O,$,_,P,k,17,l[10]),P=s(P,O,$,_,x,22,l[11]),_=s(_,P,O,$,S,7,l[12]),$=s($,_,P,O,A,12,l[13]),O=s(O,$,_,P,C,17,l[14]),_=c(_,P=s(P,O,$,_,E,22,l[15]),O,$,u,5,l[16]),$=c($,_,P,O,y,9,l[17]),O=c(O,$,_,P,x,14,l[18]),P=c(P,O,$,_,i,20,l[19]),_=c(_,P,O,$,g,5,l[20]),$=c($,_,P,O,k,9,l[21]),O=c(O,$,_,P,E,14,l[22]),P=c(P,O,$,_,h,20,l[23]),_=c(_,P,O,$,w,5,l[24]),$=c($,_,P,O,C,9,l[25]),O=c(O,$,_,P,m,14,l[26]),P=c(P,O,$,_,b,20,l[27]),_=c(_,P,O,$,A,5,l[28]),$=c($,_,P,O,p,9,l[29]),O=c(O,$,_,P,v,14,l[30]),_=f(_,P=c(P,O,$,_,S,20,l[31]),O,$,g,4,l[32]),$=f($,_,P,O,b,11,l[33]),O=f(O,$,_,P,x,16,l[34]),P=f(P,O,$,_,C,23,l[35]),_=f(_,P,O,$,u,4,l[36]),$=f($,_,P,O,h,11,l[37]),O=f(O,$,_,P,v,16,l[38]),P=f(P,O,$,_,k,23,l[39]),_=f(_,P,O,$,A,4,l[40]),$=f($,_,P,O,i,11,l[41]),O=f(O,$,_,P,m,16,l[42]),P=f(P,O,$,_,y,23,l[43]),_=f(_,P,O,$,w,4,l[44]),$=f($,_,P,O,S,11,l[45]),O=f(O,$,_,P,E,16,l[46]),_=d(_,P=f(P,O,$,_,p,23,l[47]),O,$,i,6,l[48]),$=d($,_,P,O,v,10,l[49]),O=d(O,$,_,P,C,15,l[50]),P=d(P,O,$,_,g,21,l[51]),_=d(_,P,O,$,S,6,l[52]),$=d($,_,P,O,m,10,l[53]),O=d(O,$,_,P,k,15,l[54]),P=d(P,O,$,_,u,21,l[55]),_=d(_,P,O,$,b,6,l[56]),$=d($,_,P,O,E,10,l[57]),O=d(O,$,_,P,y,15,l[58]),P=d(P,O,$,_,A,21,l[59]),_=d(_,P,O,$,h,6,l[60]),$=d($,_,P,O,x,10,l[61]),O=d(O,$,_,P,p,15,l[62]),P=d(P,O,$,_,w,21,l[63]),o[0]=o[0]+_|0,o[1]=o[1]+P|0,o[2]=o[2]+O|0,o[3]=o[3]+$|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,a=8*t.sigBytes;n[a>>>5]|=128<<24-a%32;var o=e.floor(r/4294967296),i=r;n[15+(a+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),n[14+(a+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),t.sigBytes=4*(n.length+1),this._process();for(var l=this._hash,u=l.words,s=0;s<4;s++){var c=u[s];u[s]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return l},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});function s(e,t,n,r,a,o,i){var l=e+(t&n|~t&r)+a+i;return(l<<o|l>>>32-o)+t}function c(e,t,n,r,a,o,i){var l=e+(t&r|n&~r)+a+i;return(l<<o|l>>>32-o)+t}function f(e,t,n,r,a,o,i){var l=e+(t^n^r)+a+i;return(l<<o|l>>>32-o)+t}function d(e,t,n,r,a,o,i){var l=e+(n^(t|~r))+a+i;return(l<<o|l>>>32-o)+t}t.MD5=o._createHelper(u),t.HmacMD5=o._createHmacHelper(u)}(Math),r.MD5)},312:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@import url(https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css);"]),i.push([e.id,'*{box-sizing:border-box}body,html{font-size:16px;font-family:"Lato",sans-serif;background-color:#0f1419;color:#f0f3f6}figure,img{width:100%;display:block;margin:0 auto}p{line-height:1.2em}.caption,figcaption{font-size:.9rem;color:#f0f3f6;padding:5px 0}.container{width:100%;max-width:800px;padding:10px;margin:0 auto}.container.image{max-width:800px;padding:0}.container.image .caption,.container.image figcaption{padding:5px 10px}.desktop{display:none}.mobile{display:block}#app{padding:10px}@media(min-width: 681px){#app{padding:0}}.overall>div{margin-bottom:-8px}.overall>div:first-child{margin-top:-25%}.overline{max-width:20%;height:1px;border-bottom:5px solid #3792cb;margin:10px 0 -10px 0}.screen{width:100%;min-height:100vh}.screen.padd{padding-top:25%}.video{position:relative;width:100%;height:0;padding-bottom:56.25%}.video.vertical{padding-bottom:177.7777777778%}.video iframe,.video video{position:absolute;width:100%;height:100%;top:0;left:0;border:0}.widget{background-color:#1c2128;color:#f0f3f6;border-radius:5px;padding:10px;max-width:800px;margin-bottom:10px;text-align:center}.widget .overflow{overflow-x:auto}.widget.center{margin:0 auto 10px}.widget.list ol,.widget.list ul{text-align:left}.widget.list ol li,.widget.list ul li{padding-left:10px}.widget strong,.widget em{display:block}.widget em{font-size:.9rem}.widget table{border-collapse:collapse}.widget table tr{background-color:#1c2128}.widget table tr td{padding:5px}.widget table tr:nth-child(even){background-color:#262b33}.disks .widget .danger>*{background-color:red}@media(min-width: 681px){.desktop{display:block}.mobile{display:none}.flex{display:flex;text-align:center;flex-wrap:wrap;gap:10px;max-width:800px;margin:0 auto}.flex>div{flex:1}.flex.quarter>div{flex-basis:25%}.circle{max-width:40px;margin:0 auto}}@media(min-width: 805px){.container{padding:0}}@media(min-width: 1205px){.container.image .caption,.container.image figcaption{padding:5px 0}}',"",{version:3,sources:["webpack://./src/components/Home/Home.scss"],names:[],mappings:"AA+CA,EACE,qBAAA,CAGF,UAGE,cAAA,CACA,6BAAA,CACA,wBAtCwB,CAuCxB,aAlCwB,CAqC1B,WAGE,UAAA,CACA,aAAA,CACA,aAAA,CAGF,EACE,iBAAA,CAGF,oBAEE,eAAA,CACA,aApDwB,CAqDxB,aAAA,CAKF,WACE,UAAA,CACA,eAAA,CACA,YAAA,CACA,aAAA,CAGF,iBACE,eAAA,CACA,SAAA,CAGF,sDAEE,gBAAA,CAGF,SACE,YAAA,CAGF,QACE,aAAA,CAGF,KACE,YAAA,CAEA,yBAHF,KAII,SAAA,CAAA,CAKF,aACE,kBAAA,CAEA,yBACE,eAAA,CAKN,UACE,aAAA,CACA,UAAA,CACA,+BAAA,CACA,qBAAA,CAIF,QACE,UAAA,CACA,gBAAA,CAGF,aACE,eAAA,CAGF,OACE,iBAAA,CACA,UAAA,CACA,QAAA,CACA,qBAAA,CAGF,gBACE,8BAAA,CAGF,2BAEE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CAGF,QACE,wBAhJwB,CAiJxB,aA7IwB,CA8IxB,iBAAA,CACA,YAAA,CACA,eAAA,CACA,kBAAA,CACA,iBAAA,CAEA,kBACE,eAAA,CAGF,eACE,kBAAA,CAIA,gCAEE,eAAA,CACA,sCACE,iBAAA,CAKN,0BAEE,aAAA,CAGF,WACE,eAAA,CAGF,cACE,wBAAA,CACA,iBAIE,wBAzLoB,CAsLpB,oBACE,WAAA,CAGF,iCACE,wBA1LkB,CAmMpB,yBACE,oBAAA,CAQR,yBAGE,SACE,aAAA,CAGF,QACE,YAAA,CAGF,MACE,YAAA,CACA,iBAAA,CACA,cAAA,CACA,QAAA,CACA,eAAA,CACA,aAAA,CAEA,UACE,MAAA,CAIA,kBACE,cAAA,CAKN,QACE,cAAA,CACA,aAAA,CAAA,CAaJ,yBAGE,WACE,SAAA,CAAA,CAMJ,0BAGE,sDAEE,aAAA,CAAA",sourcesContent:["/*\nThis is a good layout for a mobile-first CSS template.\nFollowing this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.\nMost of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.\n\nSometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.\nYou will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.\n*/\n/*********************************************************************\n LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES\n*********************************************************************/\n@import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css');\n\n/* VARIABLES */\n\n// 🌘 Dark Mode SCSS Variables (Lighter Surfaces)\n\n// Base Backgrounds\n$color-background:        #0F1419;\n$color-surface:           #1C2128;\n$color-surface-elevated:  #262B33;\n\n// Text\n$color-text-primary:      #F0F3F6;\n$color-text-secondary:    #B1B7C0;\n$color-text-tertiary:     #8D94A0;\n\n// Accents\n$color-accent-primary:    #2D7FF9;\n$color-accent-success:    #28C37B;\n$color-accent-warning:    #FFB72C;\n$color-accent-error:      #F85757;\n\n// UI Elements\n$color-border:            #323843;\n$color-focus-ring:        #3A99FF;\n\n// Extras\n$color-overlay:           rgba(15, 20, 25, 0.85);\n$color-scrollbar-thumb:   #2C313A;\n$color-scrollbar-hover:   #3B424E;\n\n\n/*********************************************************************\n  YOUR MOBILE/BASE STYLES GO HERE\n*********************************************************************/\n/** SET BORDER BOX EVERYWHERE */\n* {\n  box-sizing: border-box;\n}\n/** APPLY BASE TAG STYLES */\nbody,\nhtml {\n  /* Sets default font-size to 16px, ensuring 1em = 16px; */\n  font-size: 16px;\n  font-family: 'Lato', sans-serif;\n  background-color: $color-background;\n  color: $color-text-primary;\n}\n/** RESPONSIVE IMAGES */\nfigure,\nimg {\n  /* Sets image width to match parent */\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\np {\n  line-height: 1.2em;\n}\n/** Caption styles */\n.caption,\nfigcaption {\n  font-size: 0.9rem;\n  color: $color-text-primary;\n  padding: 5px 0;\n}\n/** BASE CLASSES */\n/** Container styles to keep content from becoming too wide or coming too close to\n* mobile edge */\n.container {\n  width: 100%;\n  max-width: 800px;\n  padding: 10px;\n  margin: 0 auto;\n}\n/** Images are allowed to be a little wider when broken out into their own container */\n.container.image {\n  max-width: 800px;\n  padding: 0;\n}\n\n.container.image .caption,\n.container.image figcaption {\n  padding: 5px 10px;\n}\n\n.desktop {\n  display: none;\n}\n\n.mobile {\n  display: block;\n}\n\n#app {\n  padding: 10px;\n\n  @media (min-width: 681px) {\n    padding: 0;\n  }\n}\n\n.overall {\n  > div {\n    margin-bottom: -8px;\n\n    &:first-child {\n      margin-top: -25%;\n    }\n  }\n}\n\n.overline {\n  max-width: 20%;\n  height: 1px;\n  border-bottom: 5px solid #3792cb;\n  margin: 10px 0 -10px 0;\n}\n\n/** Screens are the size of at least one device screen */\n.screen {\n  width: 100%;\n  min-height: 100vh;\n}\n/** for vertical centering */\n.screen.padd {\n  padding-top: 25%;\n}\n/** video setup */\n.video {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: calc(9 / 16 * 100%);\n}\n\n.video.vertical {\n  padding-bottom: calc(16 / 9 * 100%);\n}\n\n.video iframe,\n.video video {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  border: 0;\n}\n\n.widget {\n  background-color: $color-surface;\n  color: $color-text-primary;\n  border-radius: 5px;\n  padding: 10px;\n  max-width: 800px;\n  margin-bottom: 10px;\n  text-align: center;\n\n  .overflow {\n    overflow-x: auto;\n  }\n\n  &.center {\n    margin: 0 auto 10px;\n  }\n\n  &.list {\n    ol,\n    ul {\n      text-align: left;\n      li {\n        padding-left: 10px;\n      }\n    }\n  }\n\n  strong,\n  em {\n    display: block;\n  }\n\n  em {\n    font-size: 0.9rem;\n  }\n\n  table {\n    border-collapse: collapse;\n    tr {\n      td {\n        padding: 5px;\n      }\n      background-color: $color-surface;\n      &:nth-child(even) {\n        background-color: $color-surface-elevated;\n      }\n    }\n  }\n}\n\n.disks {\n  .widget {\n    .danger {\n      > * {\n        background-color: #f00;\n      }\n    }\n  }\n}\n/*********************************************************************\n  YOUR TABLET/DESKTOP STYLES GO HERE\n*********************************************************************/\n@media (min-width: 681px) {\n  /* Any adjustments for tablets and larger go here.\n    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */\n  .desktop {\n    display: block;\n  }\n\n  .mobile {\n    display: none;\n  }\n\n  .flex {\n    display: flex;\n    text-align: center;\n    flex-wrap: wrap;\n    gap: 10px;\n    max-width: 800px;\n    margin: 0 auto;\n\n    > div {\n      flex: 1;\n    }\n\n    &.quarter {\n      > div {\n        flex-basis: 25%;\n      }\n    }\n  }\n\n  .circle {\n    max-width: 40px;\n    margin: 0 auto;\n  }\n}\n/*********************************************************************\n  YOUR DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 769px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n}\n/*********************************************************************\n  YOUR MEDIUM-DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 805px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container {\n    padding: 0;\n  }\n}\n/*********************************************************************\n  YOUR LARGE DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 1205px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container.image .caption,\n  .container.image figcaption {\n    padding: 5px 0;\n  }\n}\n"],sourceRoot:""}]);const l=i},867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"nav{overflow-y:auto;-webkit-overflow-scrolling:touch;max-height:20vh;margin:0 auto 22px}nav ul{margin:0;padding:0}nav ul li{list-style:none;display:block;padding:10px;margin:10px}nav ul li button{background:rgba(0,0,0,0);border:0;background:#fff;margin-right:10px;cursor:pointer;width:100%;padding:22px;color:#000}nav ul li button.active{border-bottom:3px solid #000}","",{version:3,sources:["webpack://./src/components/Navigation/Nav.scss"],names:[],mappings:"AAAA,IACE,eAAA,CAEA,gCAAA,CACA,eAAA,CACA,kBAAA,CAEA,OACE,QAAA,CACA,SAAA,CAEA,UACE,eAAA,CACA,aAAA,CACA,YAAA,CACA,WAAA,CAEA,iBACE,wBAAA,CACA,QAAA,CACA,eAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,YAAA,CACA,UAAA,CAEA,wBACE,4BAAA",sourcesContent:["nav {\n  overflow-y: auto;\n  /* momentum scrolling */\n  -webkit-overflow-scrolling: touch;\n  max-height: 20vh;\n  margin: 0 auto 22px;\n\n  ul {\n    margin: 0;\n    padding: 0;\n\n    li {\n      list-style: none;\n      display: block;\n      padding: 10px;\n      margin: 10px;\n\n      button {\n        background: transparent;\n        border: 0;\n        background: #fff;\n        margin-right: 10px;\n        cursor: pointer;\n        width: 100%;\n        padding: 22px;\n        color: #000;\n\n        &.active {\n          border-bottom: 3px solid #000;\n        }\n      }\n    }\n  }\n}\n"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},484:function(e){e.exports=function(){"use strict";var e=6e4,t=36e5,n="millisecond",r="second",a="minute",o="hour",i="day",l="week",u="month",s="quarter",c="year",f="date",d="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var t=["th","st","nd","rd"],n=e%100;return"["+e+(t[(n-20)%10]||t[n]||t[0])+"]"}},g=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},y={s:g,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+g(r,2,"0")+":"+g(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var r=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(r,u),o=n-a<0,i=t.clone().add(r+(o?-1:1),u);return+(-(r+(n-a)/(o?a-i:i-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:u,y:c,w:l,d:i,D:f,h:o,m:a,s:r,ms:n,Q:s}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},v="en",b={};b[v]=h;var w="$isDayjsObject",k=function(e){return e instanceof C||!(!e||!e[w])},x=function e(t,n,r){var a;if(!t)return v;if("string"==typeof t){var o=t.toLowerCase();b[o]&&(a=o),n&&(b[o]=n,a=o);var i=t.split("-");if(!a&&i.length>1)return e(i[0])}else{var l=t.name;b[l]=t,a=l}return!r&&a&&(v=a),a||!r&&v},S=function(e,t){if(k(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new C(n)},A=y;A.l=x,A.i=k,A.w=function(e,t){return S(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var C=function(){function h(e){this.$L=x(e.locale,null,!0),this.parse(e),this.$x=this.$x||e.x||{},this[w]=!0}var g=h.prototype;return g.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(A.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(p);if(r){var a=r[2]-1||0,o=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)):new Date(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)}}return new Date(t)}(e),this.init()},g.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},g.$utils=function(){return A},g.isValid=function(){return!(this.$d.toString()===d)},g.isSame=function(e,t){var n=S(e);return this.startOf(t)<=n&&n<=this.endOf(t)},g.isAfter=function(e,t){return S(e)<this.startOf(t)},g.isBefore=function(e,t){return this.endOf(t)<S(e)},g.$g=function(e,t,n){return A.u(e)?this[t]:this.set(n,e)},g.unix=function(){return Math.floor(this.valueOf()/1e3)},g.valueOf=function(){return this.$d.getTime()},g.startOf=function(e,t){var n=this,s=!!A.u(t)||t,d=A.p(e),p=function(e,t){var r=A.w(n.$u?Date.UTC(n.$y,t,e):new Date(n.$y,t,e),n);return s?r:r.endOf(i)},m=function(e,t){return A.w(n.toDate()[e].apply(n.toDate("s"),(s?[0,0,0,0]:[23,59,59,999]).slice(t)),n)},h=this.$W,g=this.$M,y=this.$D,v="set"+(this.$u?"UTC":"");switch(d){case c:return s?p(1,0):p(31,11);case u:return s?p(1,g):p(0,g+1);case l:var b=this.$locale().weekStart||0,w=(h<b?h+7:h)-b;return p(s?y-w:y+(6-w),g);case i:case f:return m(v+"Hours",0);case o:return m(v+"Minutes",1);case a:return m(v+"Seconds",2);case r:return m(v+"Milliseconds",3);default:return this.clone()}},g.endOf=function(e){return this.startOf(e,!1)},g.$set=function(e,t){var l,s=A.p(e),d="set"+(this.$u?"UTC":""),p=(l={},l[i]=d+"Date",l[f]=d+"Date",l[u]=d+"Month",l[c]=d+"FullYear",l[o]=d+"Hours",l[a]=d+"Minutes",l[r]=d+"Seconds",l[n]=d+"Milliseconds",l)[s],m=s===i?this.$D+(t-this.$W):t;if(s===u||s===c){var h=this.clone().set(f,1);h.$d[p](m),h.init(),this.$d=h.set(f,Math.min(this.$D,h.daysInMonth())).$d}else p&&this.$d[p](m);return this.init(),this},g.set=function(e,t){return this.clone().$set(e,t)},g.get=function(e){return this[A.p(e)]()},g.add=function(n,s){var f,d=this;n=Number(n);var p=A.p(s),m=function(e){var t=S(d);return A.w(t.date(t.date()+Math.round(e*n)),d)};if(p===u)return this.set(u,this.$M+n);if(p===c)return this.set(c,this.$y+n);if(p===i)return m(1);if(p===l)return m(7);var h=(f={},f[a]=e,f[o]=t,f[r]=1e3,f)[p]||1,g=this.$d.getTime()+n*h;return A.w(g,this)},g.subtract=function(e,t){return this.add(-1*e,t)},g.format=function(e){var t=this,n=this.$locale();if(!this.isValid())return n.invalidDate||d;var r=e||"YYYY-MM-DDTHH:mm:ssZ",a=A.z(this),o=this.$H,i=this.$m,l=this.$M,u=n.weekdays,s=n.months,c=n.meridiem,f=function(e,n,a,o){return e&&(e[n]||e(t,r))||a[n].slice(0,o)},p=function(e){return A.s(o%12||12,e,"0")},h=c||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(m,(function(e,r){return r||function(e){switch(e){case"YY":return String(t.$y).slice(-2);case"YYYY":return A.s(t.$y,4,"0");case"M":return l+1;case"MM":return A.s(l+1,2,"0");case"MMM":return f(n.monthsShort,l,s,3);case"MMMM":return f(s,l);case"D":return t.$D;case"DD":return A.s(t.$D,2,"0");case"d":return String(t.$W);case"dd":return f(n.weekdaysMin,t.$W,u,2);case"ddd":return f(n.weekdaysShort,t.$W,u,3);case"dddd":return u[t.$W];case"H":return String(o);case"HH":return A.s(o,2,"0");case"h":return p(1);case"hh":return p(2);case"a":return h(o,i,!0);case"A":return h(o,i,!1);case"m":return String(i);case"mm":return A.s(i,2,"0");case"s":return String(t.$s);case"ss":return A.s(t.$s,2,"0");case"SSS":return A.s(t.$ms,3,"0");case"Z":return a}return null}(e)||a.replace(":","")}))},g.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},g.diff=function(n,f,d){var p,m=this,h=A.p(f),g=S(n),y=(g.utcOffset()-this.utcOffset())*e,v=this-g,b=function(){return A.m(m,g)};switch(h){case c:p=b()/12;break;case u:p=b();break;case s:p=b()/3;break;case l:p=(v-y)/6048e5;break;case i:p=(v-y)/864e5;break;case o:p=v/t;break;case a:p=v/e;break;case r:p=v/1e3;break;default:p=v}return d?p:A.a(p)},g.daysInMonth=function(){return this.endOf(u).$D},g.$locale=function(){return b[this.$L]},g.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),r=x(e,t,!0);return r&&(n.$L=r),n},g.clone=function(){return A.w(this.$d,this)},g.toDate=function(){return new Date(this.valueOf())},g.toJSON=function(){return this.isValid()?this.toISOString():null},g.toISOString=function(){return this.$d.toISOString()},g.toString=function(){return this.$d.toUTCString()},h}(),E=C.prototype;return S.prototype=E,[["$ms",n],["$s",r],["$m",a],["$H",o],["$W",i],["$M",u],["$y",c],["$D",f]].forEach((function(e){E[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),S.extend=function(e,t){return e.$i||(e(t,C,S),e.$i=!0),S},S.locale=x,S.isDayjs=k,S.unix=function(e){return S(1e3*e)},S.en=b[v],S.Ls=b,S.p={},S}()},212:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}()},387:function(e){e.exports=function(){"use strict";var e={year:0,month:1,day:2,hour:3,minute:4,second:5},t={};return function(n,r,a){var o,i=function(e,n,r){void 0===r&&(r={});var a=new Date(e),o=function(e,n){void 0===n&&(n={});var r=n.timeZoneName||"short",a=e+"|"+r,o=t[a];return o||(o=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:r}),t[a]=o),o}(n,r);return o.formatToParts(a)},l=function(t,n){for(var r=i(t,n),o=[],l=0;l<r.length;l+=1){var u=r[l],s=u.type,c=u.value,f=e[s];f>=0&&(o[f]=parseInt(c,10))}var d=o[3],p=24===d?0:d,m=o[0]+"-"+o[1]+"-"+o[2]+" "+p+":"+o[4]+":"+o[5]+":000",h=+t;return(a.utc(m).valueOf()-(h-=h%1e3))/6e4},u=r.prototype;u.tz=function(e,t){void 0===e&&(e=o);var n,r=this.utcOffset(),i=this.toDate(),l=i.toLocaleString("en-US",{timeZone:e}),u=Math.round((i-new Date(l))/1e3/60),s=15*-Math.round(i.getTimezoneOffset()/15)-u;if(Number(s)){if(n=a(l,{locale:this.$L}).$set("millisecond",this.$ms).utcOffset(s,!0),t){var c=n.utcOffset();n=n.add(r-c,"minute")}}else n=this.utcOffset(0,t);return n.$x.$timezone=e,n},u.offsetName=function(e){var t=this.$x.$timezone||a.tz.guess(),n=i(this.valueOf(),t,{timeZoneName:e}).find((function(e){return"timezonename"===e.type.toLowerCase()}));return n&&n.value};var s=u.startOf;u.startOf=function(e,t){if(!this.$x||!this.$x.$timezone)return s.call(this,e,t);var n=a(this.format("YYYY-MM-DD HH:mm:ss:SSS"),{locale:this.$L});return s.call(n,e,t).tz(this.$x.$timezone,!0)},a.tz=function(e,t,n){var r=n&&t,i=n||t||o,u=l(+a(),i);if("string"!=typeof e)return a(e).tz(i);var s=function(e,t,n){var r=e-60*t*1e3,a=l(r,n);if(t===a)return[r,t];var o=l(r-=60*(a-t)*1e3,n);return a===o?[r,a]:[e-60*Math.min(a,o)*1e3,Math.max(a,o)]}(a.utc(e,r).valueOf(),u,i),c=s[0],f=s[1],d=a(c).utcOffset(f);return d.$x.$timezone=i,d},a.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},a.tz.setDefault=function(e){o=e}}}()},178:function(e){e.exports=function(){"use strict";var e="minute",t=/[+-]\d\d(?::?\d\d)?/g,n=/([+-]|\d\d)/g;return function(r,a,o){var i=a.prototype;o.utc=function(e){return new a({date:e,utc:!0,args:arguments})},i.utc=function(t){var n=o(this.toDate(),{locale:this.$L,utc:!0});return t?n.add(this.utcOffset(),e):n},i.local=function(){return o(this.toDate(),{locale:this.$L,utc:!1})};var l=i.parse;i.parse=function(e){e.utc&&(this.$u=!0),this.$utils().u(e.$offset)||(this.$offset=e.$offset),l.call(this,e)};var u=i.init;i.init=function(){if(this.$u){var e=this.$d;this.$y=e.getUTCFullYear(),this.$M=e.getUTCMonth(),this.$D=e.getUTCDate(),this.$W=e.getUTCDay(),this.$H=e.getUTCHours(),this.$m=e.getUTCMinutes(),this.$s=e.getUTCSeconds(),this.$ms=e.getUTCMilliseconds()}else u.call(this)};var s=i.utcOffset;i.utcOffset=function(r,a){var o=this.$utils().u;if(o(r))return this.$u?0:o(this.$offset)?s.call(this):this.$offset;if("string"==typeof r&&(r=function(e){void 0===e&&(e="");var r=e.match(t);if(!r)return null;var a=(""+r[0]).match(n)||["-",0,0],o=a[0],i=60*+a[1]+ +a[2];return 0===i?0:"+"===o?i:-i}(r),null===r))return this;var i=Math.abs(r)<=16?60*r:r,l=this;if(a)return l.$offset=i,l.$u=0===r,l;if(0!==r){var u=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(l=this.local().add(i+u,e)).$offset=i,l.$x.$localOffset=u}else l=this.utc();return l};var c=i.format;i.format=function(e){var t=e||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return c.call(this,t)},i.valueOf=function(){var e=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*e},i.isUTC=function(){return!!this.$u},i.toISOString=function(){return this.toDate().toISOString()},i.toString=function(){return this.toDate().toUTCString()};var f=i.toDate;i.toDate=function(e){return"s"===e&&this.$offset?o(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():f.call(this)};var d=i.diff;i.diff=function(e,t,n){if(e&&this.$u===e.$u)return d.call(this,e,t,n);var r=this.local(),a=o(e).local();return d.call(r,a,t,n)}}}()},679:(e,t,n)=>{"use strict";var r=n(296),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),g=0;g<i.length;++g){var y=i[g];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=d(n,y);try{s(t,y,v)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case h:case u:return e;default:return t}}case a:return t}}}function x(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===o},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===a},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},296:(e,t,n)=>{"use strict";e.exports=n(103)},703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(m,e)||!f.call(p,e)&&(d.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),A=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),_=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),$=Symbol.for("react.suspense_list"),T=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var R,D=Object.assign;function I(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var F=!1;function B(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?I(e):""}function j(e){switch(e.tag){case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case C:return"Profiler";case A:return"StrictMode";case O:return"Suspense";case $:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case T:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===A?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,Ae=null;function Ce(e){if(e=ba(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=ka(t),xe(e.stateNode,e.type,t))}}function Ee(e){Se?Ae?Ae.push(e):Ae=[e]:Se=e}function _e(){if(Se){var e=Se,t=Ae;if(Ae=Se=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Oe(){}var $e=!1;function Te(e,t,n){if($e)return e(t,n);$e=!0;try{return Pe(e,t,n)}finally{$e=!1,(null!==Se||null!==Ae)&&(Oe(),_e())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=ka(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){ze=!1}function Le(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Re=!1,De=null,Ie=!1,Fe=null,Be={onError:function(e){Re=!0,De=e}};function je(e,t,n,r,a,o,i,l,u){Re=!1,De=null,Le.apply(Be,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ue(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ke=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,qe=a.unstable_requestPaint,Xe=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=ft(l):0!=(o&=i)&&(r=ft(o))}else 0!=(i=n&~a)?r=ft(i):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,xt,St,At,Ct,Et=!1,_t=[],Pt=null,Ot=null,$t=null,Tt=new Map,Nt=new Map,zt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":$t=null;break;case"pointerover":case"pointerout":Tt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Rt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Dt(e){var t=va(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ct(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){It(e)&&n.delete(t)}function Bt(){Et=!1,null!==Pt&&It(Pt)&&(Pt=null),null!==Ot&&It(Ot)&&(Ot=null),null!==$t&&It($t)&&($t=null),Tt.forEach(Ft),Nt.forEach(Ft)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,Et||(Et=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,Bt)))}function Ut(e){function t(t){return jt(t,e)}if(0<_t.length){jt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&jt(Pt,e),null!==Ot&&jt(Ot,e),null!==$t&&jt($t,e),Tt.forEach(t),Nt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)Dt(n),null===n.blockedOn&&zt.shift()}var Ht=w.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Yt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Kt(e,t,n,r){if(Wt){var a=Gt(e,t,n,r);if(null===a)Wr(e,t,r,Qt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Rt(Pt,e,t,n,r,a),!0;case"dragenter":return Ot=Rt(Ot,e,t,n,r,a),!0;case"mouseover":return $t=Rt($t,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return Tt.set(o,Rt(Tt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Nt.set(o,Rt(Nt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&kt(o),null===(o=Gt(e,t,n,r))&&Wr(e,t,r,Qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Qt=null;function Gt(e,t,n,r){if(Qt=null,null!==(e=va(e=ke(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=D({},sn,{view:0,detail:0}),dn=an(fn),pn=D({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(pn),hn=an(D({},pn,{dataTransfer:0})),gn=an(D({},fn,{relatedTarget:0})),yn=an(D({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=D({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(vn),wn=an(D({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function An(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Cn(){return An}var En=D({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(En),Pn=an(D({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=an(D({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),$n=an(D({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Tn=D({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(Tn),zn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Rn=c&&"TextEvent"in window&&!Ln,Dn=c&&(!Mn||Ln&&8<Ln&&11>=Ln),In=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){Ee(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Kn=null;function Qn(e){Ir(e,0)}function Gn(e){if(K(wa(e)))return e}function qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Kn=Yn=null)}function nr(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];Vn(t,Kn,e,ke(e)),Te(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Yr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},Sr={},Ar={};function Cr(e){if(Sr[e])return Sr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ar)return Sr[e]=n[t];return e}c&&(Ar=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Er=Cr("animationend"),_r=Cr("animationiteration"),Pr=Cr("animationstart"),Or=Cr("transitionend"),$r=new Map,Tr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){$r.set(e,t),u(t,[e])}for(var zr=0;zr<Tr.length;zr++){var Mr=Tr[zr];Nr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Nr(Er,"onAnimationEnd"),Nr(_r,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Or,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(je.apply(this,arguments),Re){if(!Re)throw Error(o(198));var c=De;Re=!1,De=null,Ie||(Ie=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ir(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Dr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Dr(a,l,s),o=u}}}if(Ie)throw e=Fe,Ie=!1,Fe=null,e}function Fr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var jr="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[jr]){e[jr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jr]||(t[jr]=!0,Br("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(qt(t)){case 1:var a=Vt;break;case 4:a=Yt;break;default:a=Kt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=va(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}Te((function(){var r=o,a=ke(n),i=[];e:{var l=$r.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Er:case _r:case Pr:u=yn;break;case Or:u=$n;break;case"scroll":u=dn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Ne(m,d))&&c.push(Vr(m,h,p))),f)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!va(s)&&!s[ma])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?va(s):null)&&(s!==(f=Ue(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?l:wa(u),p=null==s?l:wa(s),(l=new c(h,m+"leave",u,n,a)).target=f,l.relatedTarget=p,h=null,va(a)===r&&((c=new c(d,m+"enter",s,n,a)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Kr(p))m++;for(p=0,h=d;h;h=Kr(h))p++;for(;0<m-p;)c=Kr(c),m--;for(;0<p-m;)d=Kr(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==u&&Qr(i,l,u,c,!1),null!==s&&null!==f&&Qr(i,f,s,c,!0)}if("select"===(u=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=qn;else if(Wn(l))if(Xn)g=ir;else{g=ar;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Vn(i,g,n,a):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?wa(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":wr(i,n,a)}var v;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(v=en()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,Un=!0)),0<(y=Yr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:y}),(v||null!==(v=jn(n)))&&(b.data=v))),(v=Rn?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Fn=!0,In);case"textInput":return(e=t.data)===In&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Mn&&Bn(e,t)?(e=en(),Jt=Zt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=v)}Ir(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ne(e,n))&&r.unshift(Vr(e,o,a)),null!=(o=Ne(e,t))&&r.push(Vr(e,o,a))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Ne(n,o))&&i.unshift(Vr(n,u,l)):a||null!=(u=Ne(n,o))&&i.push(Vr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(qr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ma="__reactContainer$"+fa,ha="__reactEvents$"+fa,ga="__reactListeners$"+fa,ya="__reactHandles$"+fa;function va(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ka(e){return e[pa]||null}var xa=[],Sa=-1;function Aa(e){return{current:e}}function Ca(e){0>Sa||(e.current=xa[Sa],xa[Sa]=null,Sa--)}function Ea(e,t){Sa++,xa[Sa]=e.current,e.current=t}var _a={},Pa=Aa(_a),Oa=Aa(!1),$a=_a;function Ta(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Na(e){return null!=e.childContextTypes}function za(){Ca(Oa),Ca(Pa)}function Ma(e,t,n){if(Pa.current!==_a)throw Error(o(168));Ea(Pa,t),Ea(Oa,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return D({},n,r)}function Ra(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,$a=Pa.current,Ea(Pa,e),Ea(Oa,Oa.current),!0}function Da(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,$a),r.__reactInternalMemoizedMergedChildContext=e,Ca(Oa),Ca(Pa),Ea(Pa,e)):Ca(Oa),Ea(Oa,n)}var Ia=null,Fa=!1,Ba=!1;function ja(e){null===Ia?Ia=[e]:Ia.push(e)}function Ua(){if(!Ba&&null!==Ia){Ba=!0;var e=0,t=bt;try{var n=Ia;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ia=null,Fa=!1}catch(t){throw null!==Ia&&(Ia=Ia.slice(e+1)),Ke(Je,Ua),t}finally{bt=t,Ba=!1}}return null}var Ha=w.ReactCurrentBatchConfig;function Wa(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Va=Aa(null),Ya=null,Ka=null,Qa=null;function Ga(){Qa=Ka=Ya=null}function qa(e){var t=Va.current;Ca(Va),e._currentValue=t}function Xa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Za(e,t){Ya=e,Qa=Ka=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(kl=!0),e.firstContext=null)}function Ja(e){var t=e._currentValue;if(Qa!==e)if(e={context:e,memoizedValue:t,next:null},null===Ka){if(null===Ya)throw Error(o(308));Ka=e,Ya.dependencies={lanes:0,firstContext:e}}else Ka=Ka.next=e;return t}var eo=null,to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function oo(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,ts(e)?(null===(e=n.interleaved)?(t.next=t,null===eo?eo=[n]:eo.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(i=0,c=s=u=null,l=o;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(d=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(p,f,d):m))break e;f=D({},f,d);break e;case 2:to=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);zu|=i,e.lanes=i,e.memoizedState=f}}function so(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Zu(e),o=ao(r,a);o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Zu(e),o=ao(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Xu(),r=Zu(e),a=ao(n,r);a.tag=2,null!=t&&(a.callback=t),oo(e,a),null!==(t=Ju(e,r,n))&&io(t,e,r)}};function mo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function ho(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=Ja(o):(a=Na(t)?$a:Pa.current,o=(r=null!=(r=t.contextTypes))?Ta(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=co,no(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ja(o):(o=Na(t)?$a:Pa.current,a.context=Ta(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var vo=[],bo=0,wo=null,ko=0,xo=[],So=0,Ao=null,Co=1,Eo="";function _o(e,t){vo[bo++]=ko,vo[bo++]=wo,wo=e,ko=t}function Po(e,t,n){xo[So++]=Co,xo[So++]=Eo,xo[So++]=Ao,Ao=e;var r=Co;e=Eo;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Co=1<<32-it(t)+a|n<<a|r,Eo=o+e}else Co=1<<o|n<<a|r,Eo=e}function Oo(e){null!==e.return&&(_o(e,1),Po(e,1,0))}function $o(e){for(;e===wo;)wo=vo[--bo],vo[bo]=null,ko=vo[--bo],vo[bo]=null;for(;e===Ao;)Ao=xo[--So],xo[So]=null,Eo=xo[--So],xo[So]=null,Co=xo[--So],xo[So]=null}var To=null,No=null,zo=!1,Mo=null;function Lo(e,t){var n=$s(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Ro(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,To=e,No=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,To=e,No=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ao?{id:Co,overflow:Eo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=$s(18,null,null,0)).stateNode=t,n.return=e,e.child=n,To=e,No=null,!0);default:return!1}}function Do(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Io(e){if(zo){var t=No;if(t){var n=t;if(!Ro(e,t)){if(Do(e))throw Error(o(418));t=sa(n.nextSibling);var r=To;t&&Ro(e,t)?Lo(r,n):(e.flags=-4097&e.flags|2,zo=!1,To=e)}}else{if(Do(e))throw Error(o(418));e.flags=-4097&e.flags|2,zo=!1,To=e}}}function Fo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;To=e}function Bo(e){if(e!==To)return!1;if(!zo)return Fo(e),zo=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=No)){if(Do(e)){for(e=No;e;)e=sa(e.nextSibling);throw Error(o(418))}for(;t;)Lo(e,t),t=sa(t.nextSibling)}if(Fo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){No=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}No=null}}else No=To?sa(e.stateNode.nextSibling):null;return!0}function jo(){No=To=null,zo=!1}function Uo(e){null===Mo?Mo=[e]:Mo.push(e)}function Ho(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===co&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Wo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Vo(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ns(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Rs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===S?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===N&&Vo(o)===t.type)?((r=a(t,n.props)).ref=Ho(e,t,n),r.return=e,r):((r=zs(n.type,n.key,n.props,null,e.mode,r)).ref=Ho(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ds(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Rs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=zs(t.type,t.key,t.props,null,e.mode,n)).ref=Ho(e,null,t),n.return=e,n;case x:return(t=Ds(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ms(t,e.mode,n,null)).return=e,t;Wo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case x:return n.key===a?c(e,t,n,r):null;case N:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:f(e,t,n,r,null);Wo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case N:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return f(t,e=e.get(n)||null,r,a,null);Wo(t,r)}return null}function h(a,o,l,u){for(var s=null,c=null,f=o,h=o=0,g=null;null!==f&&h<l.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var y=p(a,f,l[h],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(a,f),o=i(y,o,h),null===c?s=y:c.sibling=y,c=y,f=g}if(h===l.length)return n(a,f),zo&&_o(a,h),s;if(null===f){for(;h<l.length;h++)null!==(f=d(a,l[h],u))&&(o=i(f,o,h),null===c?s=f:c.sibling=f,c=f);return zo&&_o(a,h),s}for(f=r(a,f);h<l.length;h++)null!==(g=m(f,a,h,l[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),o=i(g,o,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),zo&&_o(a,h),s}function g(a,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,h=l,g=l=0,y=null,v=u.next();null!==h&&!v.done;g++,v=u.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=p(a,h,v.value,s);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,h=y}if(v.done)return n(a,h),zo&&_o(a,g),c;if(null===h){for(;!v.done;g++,v=u.next())null!==(v=d(a,v.value,s))&&(l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return zo&&_o(a,g),c}for(h=r(a,h);!v.done;g++,v=u.next())null!==(v=m(h,a,g,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach((function(e){return t(a,e)})),zo&&_o(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===S){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Vo(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Ho(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===S?((o=Ms(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=zs(i.type,i.key,i.props,null,r.mode,u)).ref=Ho(r,o,i),u.return=r,r=u)}return l(r);case x:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Ds(i,r.mode,u)).return=r,r=o}return l(r);case N:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return h(r,o,i,u);if(L(i))return g(r,o,i,u);Wo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Rs(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var Ko=Yo(!0),Qo=Yo(!1),Go={},qo=Aa(Go),Xo=Aa(Go),Zo=Aa(Go);function Jo(e){if(e===Go)throw Error(o(174));return e}function ei(e,t){switch(Ea(Zo,t),Ea(Xo,e),Ea(qo,Go),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(qo),Ea(qo,t)}function ti(){Ca(qo),Ca(Xo),Ca(Zo)}function ni(e){Jo(Zo.current);var t=Jo(qo.current),n=ue(t,e.type);t!==n&&(Ea(Xo,e),Ea(qo,n))}function ri(e){Xo.current===e&&(Ca(qo),Ca(Xo))}var ai=Aa(0);function oi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ii=[];function li(){for(var e=0;e<ii.length;e++)ii[e]._workInProgressVersionPrimary=null;ii.length=0}var ui=w.ReactCurrentDispatcher,si=w.ReactCurrentBatchConfig,ci=0,fi=null,di=null,pi=null,mi=!1,hi=!1,gi=0,yi=0;function vi(){throw Error(o(321))}function bi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(ci=i,fi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ui.current=null===e||null===e.memoizedState?rl:al,e=n(r,a),hi){i=0;do{if(hi=!1,gi=0,25<=i)throw Error(o(301));i+=1,pi=di=null,t.updateQueue=null,ui.current=ol,e=n(r,a)}while(hi)}if(ui.current=nl,t=null!==di&&null!==di.next,ci=0,pi=di=fi=null,mi=!1,t)throw Error(o(300));return e}function ki(){var e=0!==gi;return gi=0,e}function xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pi?fi.memoizedState=pi=e:pi=pi.next=e,pi}function Si(){if(null===di){var e=fi.alternate;e=null!==e?e.memoizedState:null}else e=di.next;var t=null===pi?fi.memoizedState:pi.next;if(null!==t)pi=t,di=e;else{if(null===e)throw Error(o(310));e={memoizedState:(di=e).memoizedState,baseState:di.baseState,baseQueue:di.baseQueue,queue:di.queue,next:null},null===pi?fi.memoizedState=pi=e:pi=pi.next=e}return pi}function Ai(e,t){return"function"==typeof t?t(e):t}function Ci(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=di,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ci&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,fi.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(kl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,fi.lanes|=i,zu|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ei(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(kl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function _i(){}function Pi(e,t){var n=fi,r=Si(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,kl=!0),r=r.queue,Fi(Ti.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==pi&&1&pi.memoizedState.tag){if(n.flags|=2048,Mi(9,$i.bind(null,n,r,a,t),void 0,null),null===Eu)throw Error(o(349));0!=(30&ci)||Oi(n,t,a)}return a}function Oi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function $i(e,t,n,r){t.value=n,t.getSnapshot=r,Ni(t)&&Ju(e,1,-1)}function Ti(e,t,n){return n((function(){Ni(t)&&Ju(e,1,-1)}))}function Ni(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function zi(e){var t=xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=Xi.bind(null,fi,e),[t.memoizedState,e]}function Mi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Li(){return Si().memoizedState}function Ri(e,t,n,r){var a=xi();fi.flags|=e,a.memoizedState=Mi(1|t,n,void 0,void 0===r?null:r)}function Di(e,t,n,r){var a=Si();r=void 0===r?null:r;var o=void 0;if(null!==di){var i=di.memoizedState;if(o=i.destroy,null!==r&&bi(r,i.deps))return void(a.memoizedState=Mi(t,n,o,r))}fi.flags|=e,a.memoizedState=Mi(1|t,n,o,r)}function Ii(e,t){return Ri(8390656,8,e,t)}function Fi(e,t){return Di(2048,8,e,t)}function Bi(e,t){return Di(4,2,e,t)}function ji(e,t){return Di(4,4,e,t)}function Ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Hi(e,t,n){return n=null!=n?n.concat([e]):null,Di(4,4,Ui.bind(null,t,e),n)}function Wi(){}function Vi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ki(e,t,n){return 0==(21&ci)?(e.baseState&&(e.baseState=!1,kl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),fi.lanes|=n,zu|=n,e.baseState=!0),t)}function Qi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=si.transition;si.transition={};try{e(!1),t()}finally{bt=n,si.transition=r}}function Gi(){return Si().memoizedState}function qi(e,t,n){var r=Zu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zi(e)?Ji(t,n):(el(e,t,n),null!==(e=Ju(e,r,n=Xu()))&&tl(e,t,r))}function Xi(e,t,n){var r=Zu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zi(e))Ji(t,a);else{el(e,t,a);var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i))return}catch(e){}null!==(e=Ju(e,r,n=Xu()))&&tl(e,t,r)}}function Zi(e){var t=e.alternate;return e===fi||null!==t&&t===fi}function Ji(e,t){hi=mi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){ts(e)?(null===(e=t.interleaved)?(n.next=n,null===eo?eo=[t]:eo.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var nl={readContext:Ja,useCallback:vi,useContext:vi,useEffect:vi,useImperativeHandle:vi,useInsertionEffect:vi,useLayoutEffect:vi,useMemo:vi,useReducer:vi,useRef:vi,useState:vi,useDebugValue:vi,useDeferredValue:vi,useTransition:vi,useMutableSource:vi,useSyncExternalStore:vi,useId:vi,unstable_isNewReconciler:!1},rl={readContext:Ja,useCallback:function(e,t){return xi().memoizedState=[e,void 0===t?null:t],e},useContext:Ja,useEffect:Ii,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4194308,4,Ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ri(4,2,e,t)},useMemo:function(e,t){var n=xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qi.bind(null,fi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xi().memoizedState=e},useState:zi,useDebugValue:Wi,useDeferredValue:function(e){return xi().memoizedState=e},useTransition:function(){var e=zi(!1),t=e[0];return e=Qi.bind(null,e[1]),xi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fi,a=xi();if(zo){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Eu)throw Error(o(349));0!=(30&ci)||Oi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ii(Ti.bind(null,r,i,e),[e]),r.flags|=2048,Mi(9,$i.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=xi(),t=Eu.identifierPrefix;if(zo){var n=Eo;t=":"+t+"R"+(n=(Co&~(1<<32-it(Co)-1)).toString(32)+n),0<(n=gi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=yi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},al={readContext:Ja,useCallback:Vi,useContext:Ja,useEffect:Fi,useImperativeHandle:Hi,useInsertionEffect:Bi,useLayoutEffect:ji,useMemo:Yi,useReducer:Ci,useRef:Li,useState:function(){return Ci(Ai)},useDebugValue:Wi,useDeferredValue:function(e){return Ki(Si(),di.memoizedState,e)},useTransition:function(){return[Ci(Ai)[0],Si().memoizedState]},useMutableSource:_i,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1},ol={readContext:Ja,useCallback:Vi,useContext:Ja,useEffect:Fi,useImperativeHandle:Hi,useInsertionEffect:Bi,useLayoutEffect:ji,useMemo:Yi,useReducer:Ei,useRef:Li,useState:function(){return Ei(Ai)},useDebugValue:Wi,useDeferredValue:function(e){var t=Si();return null===di?t.memoizedState=e:Ki(t,di.memoizedState,e)},useTransition:function(){return[Ei(Ai)[0],Si().memoizedState]},useMutableSource:_i,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1};function il(e,t){try{var n="",r=t;do{n+=j(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ul,sl,cl,fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ju||(ju=!0,Uu=r),ll(0,t)},n}function pl(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ll(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=As.bind(null,e,t,n),t.then(e,e))}function hl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ao(-1,1)).tag=2,oo(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function yl(e,t){if(!zo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function vl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function bl(e,t,n){var r=t.pendingProps;switch($o(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return vl(t),null;case 1:case 17:return Na(t.type)&&za(),vl(t),null;case 3:return r=t.stateNode,ti(),Ca(Oa),Ca(Pa),li(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Bo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Mo&&(os(Mo),Mo=null))),vl(t),null;case 5:ri(t);var a=Jo(Zo.current);if(n=t.type,null!==e&&null!=t.stateNode)sl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return vl(t),null}if(e=Jo(qo.current),Bo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[da]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":q(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var u in ve(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,ul(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":q(e,r),a=G(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=D({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ve(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return vl(t),null;case 6:if(e&&null!=t.stateNode)cl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Jo(Zo.current),Jo(qo.current),Bo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(i=r.nodeValue!==n)&&null!==(e=To))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return vl(t),null;case 13:if(Ca(ai),r=t.memoizedState,zo&&null!==No&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=No;r;)r=sa(r.nextSibling);return jo(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Bo(t),null===e){if(!r)throw Error(o(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(o(317));r[da]=t}else jo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return vl(t),null}return null!==Mo&&(os(Mo),Mo=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Bo(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ai.current)?0===Tu&&(Tu=3):ms())),null!==t.updateQueue&&(t.flags|=4),vl(t),null);case 4:return ti(),null===e&&Ur(t.stateNode.containerInfo),vl(t),null;case 10:return qa(t.type._context),vl(t),null;case 19:if(Ca(ai),null===(i=t.memoizedState))return vl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)yl(i,!1);else{if(0!==Tu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=oi(e))){for(t.flags|=128,yl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ea(ai,1&ai.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Fu&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=oi(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),yl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!zo)return vl(t),null}else 2*Xe()-i.renderingStartTime>Fu&&1073741824!==n&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ai.current,Ea(ai,r?1&n|2:1&n),t):(vl(t),null);case 22:case 23:return cs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ou)&&(vl(t),6&t.subtreeFlags&&(t.flags|=8192)):vl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Jo(qo.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=D({},a,{value:void 0}),r=D({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},cl=function(e,t,n,r){n!==r&&(t.flags|=4)};var wl=w.ReactCurrentOwner,kl=!1;function xl(e,t,n,r){t.child=null===e?Qo(t,null,n,r):Ko(t,e.child,n,r)}function Sl(e,t,n,r,a){n=n.render;var o=t.ref;return Za(t,a),r=wi(e,t,n,r,o,a),n=ki(),null===e||kl?(zo&&n&&Oo(t),t.flags|=1,xl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Al(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||Ts(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=Ns(o,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(kl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);0!=(131072&e.flags)&&(kl=!0)}}return Pl(e,t,n,r,a)}function El(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ea($u,Ou),Ou|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ea($u,Ou),Ou|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ea($u,Ou),Ou|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ea($u,Ou),Ou|=r;return xl(e,t,a,n),t.child}function _l(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Pl(e,t,n,r,a){var o=Na(n)?$a:Pa.current;return o=Ta(t,o),Za(t,a),n=wi(e,t,n,r,o,a),r=ki(),null===e||kl?(zo&&r&&Oo(t),t.flags|=1,xl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Ol(e,t,n,r,a){if(Na(n)){var o=!0;Ra(t)}else o=!1;if(Za(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ho(t,n,r),yo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ja(s):Ta(t,s=Na(n)?$a:Pa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&go(t,i,r,s),to=!1;var d=t.memoizedState;i.state=d,uo(t,r,i,a),u=t.memoizedState,l!==r||d!==u||Oa.current||to?("function"==typeof c&&(fo(t,n,c,r),u=t.memoizedState),(l=to||mo(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,ro(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Wa(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ja(u):Ta(t,u=Na(n)?$a:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&go(t,i,r,u),to=!1,d=t.memoizedState,i.state=d,uo(t,r,i,a);var m=t.memoizedState;l!==f||d!==m||Oa.current||to?("function"==typeof p&&(fo(t,n,p,r),m=t.memoizedState),(s=to||mo(t,n,s,r,d,m,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return $l(e,t,n,r,o,a)}function $l(e,t,n,r,a,o){_l(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Da(t,n,!1),Wl(e,t,o);r=t.stateNode,wl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ko(t,e.child,null,o),t.child=Ko(t,null,l,o)):xl(e,t,l,o),t.memoizedState=r.state,a&&Da(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Ma(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ma(0,t.context,!1),ei(e,t.containerInfo)}function Nl(e,t,n,r,a){return jo(),Uo(a),t.flags|=256,xl(e,t,n,r),t.child}var zl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ll(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function Rl(e,t,n){var r,a=t.pendingProps,i=ai.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ea(ai,1&i),null===e)return Io(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,l?(a=t.mode,l=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=Ls(i,a,0,null),e=Ms(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=zl,e):Dl(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,Bl(e,t,n,Error(o(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,i=t.mode,a=Ls({mode:"visible",children:a.children},i,0,null),(l=Ms(l,i,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,0!=(1&t.mode)&&Ko(t,e.child,null,n),t.child.memoizedState=Ml(n),t.memoizedState=zl,l);if(0==(1&t.mode))t=Bl(e,t,n,null);else if("$!"===r.data)t=Bl(e,t,n,Error(o(419)));else if(a=0!=(n&e.childLanes),kl||a){if(null!==(a=Eu)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(a=0!=(l&(a.suspendedLanes|n))?0:l)&&a!==i.retryLane&&(i.retryLane=a,Ju(e,a,-1))}ms(),t=Bl(e,t,n,Error(o(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=Es.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,No=sa(r.nextSibling),To=t,zo=!0,Mo=null,null!==n&&(xo[So++]=Co,xo[So++]=Eo,xo[So++]=Ao,Co=n.id,Eo=n.overflow,Ao=t),(t=Dl(t,t.pendingProps.children)).flags|=4096);return t}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Ml(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=zl,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Ml(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=zl,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}function Dl(e,t){return(t=Ls({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){var a=e.child;return e=a.sibling,n=Ns(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Fl(e,t,n,r,a){var o=t.mode,i=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&o)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Ns(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=Ns(i,r):(r=Ms(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Bl(e,t,n,r){return null!==r&&Uo(r),Ko(t,e.child,null,n),(e=Dl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function jl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Xa(e.return,t,n)}function Ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Hl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ai.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&jl(e,n,t);else if(19===e.tag)jl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ea(ai,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===oi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===oi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ns(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ns(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){switch($o(t),t.tag){case 1:return Na(t.type)&&za(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ti(),Ca(Oa),Ca(Pa),li(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ri(t),null;case 13:if(Ca(ai),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));jo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(ai),null;case 4:return ti(),null;case 10:return qa(t.type._context),null;case 22:case 23:return cs(),null;default:return null}}var Yl=!1,Kl=!1,Ql="function"==typeof WeakSet?WeakSet:Set,Gl=null;function ql(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function Xl(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var Zl=!1;function Jl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&Xl(t,n,o)}a=a.next}while(a!==r)}}function eu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function tu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function nu(e){var t=e.alternate;null!==t&&(e.alternate=null,nu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ha],delete t[ga],delete t[ya]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ru(e){return 5===e.tag||3===e.tag||4===e.tag}function au(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ru(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ou(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ou(e,t,n),e=e.sibling;null!==e;)ou(e,t,n),e=e.sibling}function iu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(iu(e,t,n),e=e.sibling;null!==e;)iu(e,t,n),e=e.sibling}var lu=null,uu=!1;function su(e,t,n){for(n=n.child;null!==n;)cu(e,t,n),n=n.sibling}function cu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Kl||ql(n,t);case 6:var r=lu,a=uu;lu=null,su(e,t,n),uu=a,null!==(lu=r)&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):lu.removeChild(n.stateNode));break;case 18:null!==lu&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ut(e)):ua(lu,n.stateNode));break;case 4:r=lu,a=uu,lu=n.stateNode.containerInfo,uu=!0,su(e,t,n),lu=r,uu=a;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&Xl(n,t,i),a=a.next}while(a!==r)}su(e,t,n);break;case 1:if(!Kl&&(ql(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}su(e,t,n);break;case 21:su(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,su(e,t,n),Kl=r):su(e,t,n);break;default:su(e,t,n)}}function fu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ql),t.forEach((function(t){var r=_s.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:lu=u.stateNode,uu=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,uu=!0;break e}u=u.return}if(null===lu)throw Error(o(160));cu(i,l,a),lu=null,uu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Ss(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(du(t,e),mu(e),4&r){try{Jl(3,e,e.return),eu(3,e)}catch(t){Ss(e,e.return,t)}try{Jl(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:du(t,e),mu(e),512&r&&null!==n&&ql(n,n.return);break;case 5:if(du(t,e),mu(e),512&r&&null!==n&&ql(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(a,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":Z(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Ss(e,e.return,t)}}break;case 6:if(du(t,e),mu(e),4&r){if(null===e.stateNode)throw Error(o(162));c=e.stateNode,f=e.memoizedProps;try{c.nodeValue=f}catch(t){Ss(e,e.return,t)}}break;case 3:if(du(t,e),mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:du(t,e),mu(e);break;case 13:du(t,e),mu(e),8192&(c=e.child).flags&&null!==c.memoizedState&&(null===c.alternate||null===c.alternate.memoizedState)&&(Iu=Xe()),4&r&&fu(e);break;case 22:if(c=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(f=Kl)||c,du(t,e),Kl=f):du(t,e),mu(e),8192&r){f=null!==e.memoizedState;e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,f?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=p.stateNode,l=null!=(s=p.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=he("display",l))}catch(t){Ss(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=f?"":p.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}if(f&&!c&&0!=(1&e.mode))for(Gl=e,e=e.child;null!==e;){for(c=Gl=e;null!==Gl;){switch(d=(f=Gl).child,f.tag){case 0:case 11:case 14:case 15:Jl(4,f,f.return);break;case 1:if(ql(f,f.return),"function"==typeof(i=f.stateNode).componentWillUnmount){p=f,m=f.return;try{a=p,i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(e){Ss(p,m,e)}}break;case 5:ql(f,f.return);break;case 22:if(null!==f.memoizedState){vu(c);continue}}null!==d?(d.return=f,Gl=d):vu(c)}e=e.sibling}}break;case 19:du(t,e),mu(e),4&r&&fu(e);case 21:}}function mu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ru(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),iu(e,au(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ou(e,au(e),i);break;default:throw Error(o(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function hu(e,t,n){Gl=e,gu(e,t,n)}function gu(e,t,n){for(var r=0!=(1&e.mode);null!==Gl;){var a=Gl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Yl;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Kl;l=Yl;var s=Kl;if(Yl=i,(Kl=u)&&!s)for(Gl=a;null!==Gl;)u=(i=Gl).child,22===i.tag&&null!==i.memoizedState?bu(a):null!==u?(u.return=i,Gl=u):bu(a);for(;null!==o;)Gl=o,gu(o,t,n),o=o.sibling;Gl=a,Yl=l,Kl=s}yu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Gl=o):yu(e)}}function yu(e){for(;null!==Gl;){var t=Gl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Kl||eu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Wa(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&so(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}so(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(o(163))}Kl||512&t.flags&&tu(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Gl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gl=n;break}Gl=t.return}}function vu(e){for(;null!==Gl;){var t=Gl;if(t===e){Gl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gl=n;break}Gl=t.return}}function bu(e){for(;null!==Gl;){var t=Gl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eu(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Ss(t,a,e)}}var o=t.return;try{tu(t)}catch(e){Ss(t,o,e)}break;case 5:var i=t.return;try{tu(t)}catch(e){Ss(t,i,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Gl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Gl=l;break}Gl=t.return}}var wu,ku=Math.ceil,xu=w.ReactCurrentDispatcher,Su=w.ReactCurrentOwner,Au=w.ReactCurrentBatchConfig,Cu=0,Eu=null,_u=null,Pu=0,Ou=0,$u=Aa(0),Tu=0,Nu=null,zu=0,Mu=0,Lu=0,Ru=null,Du=null,Iu=0,Fu=1/0,Bu=null,ju=!1,Uu=null,Hu=null,Wu=!1,Vu=null,Yu=0,Ku=0,Qu=null,Gu=-1,qu=0;function Xu(){return 0!=(6&Cu)?Xe():-1!==Gu?Gu:Gu=Xe()}function Zu(e){return 0==(1&e.mode)?1:0!=(2&Cu)&&0!==Pu?Pu&-Pu:null!==Ha.transition?(0===qu&&(qu=ht()),qu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:qt(e.type)}function Ju(e,t,n){if(50<Ku)throw Ku=0,Qu=null,Error(o(185));var r=es(e,t);return null===r?null:(yt(r,t,n),0!=(2&Cu)&&r===Eu||(r===Eu&&(0==(2&Cu)&&(Mu|=t),4===Tu&&is(r,Pu)),ns(r,n),1===t&&0===Cu&&0==(1&e.mode)&&(Fu=Xe()+500,Fa&&Ua())),r)}function es(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ts(e){return(null!==Eu||null!==eo)&&0!=(1&e.mode)&&0==(2&Cu)}function ns(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=dt(e,e===Eu?Pu:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fa=!0,ja(e)}(ls.bind(null,e)):ja(ls.bind(null,e)),ia((function(){0===Cu&&Ua()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,rs.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rs(e,t){if(Gu=-1,qu=0,0!=(6&Cu))throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Eu?Pu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=hs(e,r);else{t=r;var a=Cu;Cu|=2;var i=ps();for(Eu===e&&Pu===t||(Bu=null,Fu=Xe()+500,fs(e,t));;)try{ys();break}catch(t){ds(e,t)}Ga(),xu.current=i,Cu=a,null!==_u?t=0:(Eu=null,Pu=0,t=Tu)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=as(e,a)),1===t)throw n=Nu,fs(e,0),is(e,r),ns(e,Xe()),n;if(6===t)is(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=hs(e,r))&&0!==(i=mt(e))&&(r=i,t=as(e,i)),1===t))throw n=Nu,fs(e,0),is(e,r),ns(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,Du,Bu);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Iu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Xu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,Du,Bu),t);break}ws(e,Du,Bu);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,Du,Bu),r);break}ws(e,Du,Bu);break;default:throw Error(o(329))}}}return ns(e,Xe()),e.callbackNode===n?rs.bind(null,e):null}function as(e,t){var n=Ru;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=hs(e,t))&&(t=Du,Du=n,null!==t&&os(t)),e}function os(e){null===Du?Du=e:Du.push.apply(Du,e)}function is(e,t){for(t&=~Lu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&Cu))throw Error(o(327));ks();var t=dt(e,0);if(0==(1&t))return ns(e,Xe()),null;var n=hs(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Nu,fs(e,0),is(e,t),ns(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Du,Bu),ns(e,Xe()),null}function us(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&(Fu=Xe()+500,Fa&&Ua())}}function ss(e){null!==Vu&&0===Vu.tag&&0==(6&Cu)&&ks();var t=Cu;Cu|=1;var n=Au.transition,r=bt;try{if(Au.transition=null,bt=1,e)return e()}finally{bt=r,Au.transition=n,0==(6&(Cu=t))&&Ua()}}function cs(){Ou=$u.current,Ca($u)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==_u)for(n=_u.return;null!==n;){var r=n;switch($o(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&za();break;case 3:ti(),Ca(Oa),Ca(Pa),li();break;case 5:ri(r);break;case 4:ti();break;case 13:case 19:Ca(ai);break;case 10:qa(r.type._context);break;case 22:case 23:cs()}n=n.return}if(Eu=e,_u=e=Ns(e.current,null),Pu=Ou=t,Tu=0,Nu=null,Lu=Mu=zu=0,Du=Ru=null,null!==eo){for(t=0;t<eo.length;t++)if(null!==(r=(n=eo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}eo=null}return e}function ds(e,t){for(;;){var n=_u;try{if(Ga(),ui.current=nl,mi){for(var r=fi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}mi=!1}if(ci=0,pi=di=fi=null,hi=!1,gi=0,Su.current=null,null===n||null===n.return){Tu=1,Nu=t,_u=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Pu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var m=hl(l);if(null!==m){m.flags&=-257,gl(m,l,u,0,t),1&m.mode&&ml(i,c,t),s=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(s),t.updateQueue=g}else h.add(s);break e}if(0==(1&t)){ml(i,c,t),ms();break e}s=Error(o(426))}else if(zo&&1&u.mode){var y=hl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),Uo(s);break e}}i=s,4!==Tu&&(Tu=2),null===Ru?Ru=[i]:Ru.push(i),s=il(s,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,lo(u,dl(0,s,t));break e;case 1:i=s;var v=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hu||!Hu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,lo(u,pl(u,i,t));break e}}u=u.return}while(null!==u)}bs(n)}catch(e){t=e,_u===n&&null!==n&&(_u=n=n.return);continue}break}}function ps(){var e=xu.current;return xu.current=nl,null===e?nl:e}function ms(){0!==Tu&&3!==Tu&&2!==Tu||(Tu=4),null===Eu||0==(268435455&zu)&&0==(268435455&Mu)||is(Eu,Pu)}function hs(e,t){var n=Cu;Cu|=2;var r=ps();for(Eu===e&&Pu===t||(Bu=null,fs(e,t));;)try{gs();break}catch(t){ds(e,t)}if(Ga(),Cu=n,xu.current=r,null!==_u)throw Error(o(261));return Eu=null,Pu=0,Tu}function gs(){for(;null!==_u;)vs(_u)}function ys(){for(;null!==_u&&!Ge();)vs(_u)}function vs(e){var t=wu(e.alternate,e,Ou);e.memoizedProps=e.pendingProps,null===t?bs(e):_u=t,Su.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=bl(n,t,Ou)))return void(_u=n)}else{if(null!==(n=Vl(n,t)))return n.flags&=32767,void(_u=n);if(null===e)return Tu=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===Tu&&(Tu=5)}function ws(e,t,n){var r=bt,a=Au.transition;try{Au.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Vu);if(0!=(6&Cu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Eu&&(_u=Eu=null,Pu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wu||(Wu=!0,Ps(tt,(function(){return ks(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Au.transition,Au.transition=null;var l=bt;bt=1;var u=Cu;Cu|=4,Su.current=null,function(e,t){if(ea=Wt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=l+a),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++f===r&&(s=l),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Gl=t;null!==Gl;)if(e=(t=Gl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Gl=e;else for(;null!==Gl;){t=Gl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,y=h.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:Wa(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var k=w.body;null!=k&&(k.textContent="")}break;default:throw Error(o(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gl=e;break}Gl=t.return}h=Zl,Zl=!1}(e,n),pu(n,e),mr(ta),Wt=!!ea,ta=ea=null,e.current=n,hu(n,e,a),qe(),Cu=u,bt=l,Au.transition=i}else e.current=n;if(Wu&&(Wu=!1,Vu=e,Yu=a),0===(i=e.pendingLanes)&&(Hu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ns(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if(ju)throw ju=!1,e=Uu,Uu=null,e;0!=(1&Yu)&&0!==e.tag&&ks(),0!=(1&(i=e.pendingLanes))?e===Qu?Ku++:(Ku=0,Qu=e):Ku=0,Ua()}(e,t,n,r)}finally{Au.transition=a,bt=r}return null}function ks(){if(null!==Vu){var e=wt(Yu),t=Au.transition,n=bt;try{if(Au.transition=null,bt=16>e?16:e,null===Vu)var r=!1;else{if(e=Vu,Vu=null,Yu=0,0!=(6&Cu))throw Error(o(331));var a=Cu;for(Cu|=4,Gl=e.current;null!==Gl;){var i=Gl,l=i.child;if(0!=(16&Gl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Gl=c;null!==Gl;){var f=Gl;switch(f.tag){case 0:case 11:case 15:Jl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Gl=d;else for(;null!==Gl;){var p=(f=Gl).sibling,m=f.return;if(nu(f),f===c){Gl=null;break}if(null!==p){p.return=m,Gl=p;break}Gl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Gl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Gl=l;else e:for(;null!==Gl;){if(0!=(2048&(i=Gl).flags))switch(i.tag){case 0:case 11:case 15:Jl(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Gl=v;break e}Gl=i.return}}var b=e.current;for(Gl=b;null!==Gl;){var w=(l=Gl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Gl=w;else e:for(l=b;null!==Gl;){if(0!=(2048&(u=Gl).flags))try{switch(u.tag){case 0:case 11:case 15:eu(9,u)}}catch(e){Ss(u,u.return,e)}if(u===l){Gl=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Gl=k;break e}Gl=u.return}}if(Cu=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Au.transition=t}}return!1}function xs(e,t,n){oo(e,t=dl(0,t=il(n,t),1)),t=Xu(),null!==(e=es(e,1))&&(yt(e,1,t),ns(e,t))}function Ss(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){oo(t,e=pl(t,e=il(n,e),1)),e=Xu(),null!==(t=es(t,1))&&(yt(t,1,e),ns(t,e));break}}t=t.return}}function As(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Xu(),e.pingedLanes|=e.suspendedLanes&n,Eu===e&&(Pu&n)===n&&(4===Tu||3===Tu&&(130023424&Pu)===Pu&&500>Xe()-Iu?fs(e,0):Lu|=n),ns(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Xu();null!==(e=es(e,t))&&(yt(e,t,n),ns(e,n))}function Es(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function _s(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Cs(e,n)}function Ps(e,t){return Ke(e,t)}function Os(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function $s(e,t,n,r){return new Os(e,t,n,r)}function Ts(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ns(e,t){var n=e.alternate;return null===n?((n=$s(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zs(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)Ts(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Ms(n.children,a,i,t);case A:l=8,a|=8;break;case C:return(e=$s(12,n,t,2|a)).elementType=C,e.lanes=i,e;case O:return(e=$s(13,n,t,a)).elementType=O,e.lanes=i,e;case $:return(e=$s(19,n,t,a)).elementType=$,e.lanes=i,e;case z:return Ls(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:l=10;break e;case _:l=9;break e;case P:l=11;break e;case T:l=14;break e;case N:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=$s(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ms(e,t,n,r){return(e=$s(7,e,r,t)).lanes=n,e}function Ls(e,t,n,r){return(e=$s(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={},e}function Rs(e,t,n){return(e=$s(6,e,null,t)).lanes=n,e}function Ds(e,t,n){return(t=$s(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fs(e,t,n,r,a,o,i,l,u){return e=new Is(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=$s(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},no(o),e}function Bs(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function js(e){if(!e)return _a;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Na(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Na(n))return La(e,n,t)}return t}function Us(e,t,n,r,a,o,i,l,u){return(e=Fs(n,r,!0,e,0,o,0,l,u)).context=js(null),n=e.current,(o=ao(r=Xu(),a=Zu(n))).callback=null!=t?t:null,oo(n,o),e.current.lanes=a,yt(e,a,r),ns(e,r),e}function Hs(e,t,n,r){var a=t.current,o=Xu(),i=Zu(a);return n=js(n),null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),oo(a,t),null!==(e=Ju(a,i,o))&&io(e,a,i),i}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ys(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}wu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oa.current)kl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return kl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),jo();break;case 5:ni(t);break;case 1:Na(t.type)&&Ra(t);break;case 4:ei(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ea(Va,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ea(ai,1&ai.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Rl(e,t,n):(Ea(ai,1&ai.current),null!==(e=Wl(e,t,n))?e.sibling:null);Ea(ai,1&ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ea(ai,ai.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Wl(e,t,n)}(e,t,n);kl=0!=(131072&e.flags)}else kl=!1,zo&&0!=(1048576&t.flags)&&Po(t,ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Ta(t,Pa.current);Za(t,n),a=wi(null,t,r,e,a,n);var i=ki();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Na(r)?(i=!0,Ra(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,no(t),a.updater=po,t.stateNode=a,a._reactInternals=t,yo(t,r,e,n),t=$l(null,t,r,!0,i,n)):(t.tag=0,zo&&i&&Oo(t),xl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return Ts(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===T)return 14}return 2}(r),e=Wa(r,e),a){case 0:t=Pl(null,t,r,e,n);break e;case 1:t=Ol(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=Al(null,t,r,Wa(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Pl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ol(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 3:e:{if(Tl(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,ro(e,t),uo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,a=Error(o(423)));break e}if(r!==a){t=Nl(e,t,r,n,a=Error(o(424)));break e}for(No=sa(t.stateNode.containerInfo.firstChild),To=t,zo=!0,Mo=null,n=Qo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(jo(),r===a){t=Wl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ni(t),null===e&&Io(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),_l(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&Io(t),null;case 13:return Rl(e,t,n);case 4:return ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ko(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Ea(Va,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Oa.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=ao(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Xa(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Xa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Za(t,n),r=r(a=Ja(a)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return a=Wa(r=t.type,t.pendingProps),Al(e,t,r,a=Wa(r.type,a),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Wa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Na(r)?(e=!0,Ra(t)):e=!1,Za(t,n),ho(t,r,a),yo(t,r,a,n),$l(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return El(e,t,n)}throw Error(o(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function Js(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Ws(i);l.call(e)}}Hs(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Ws(i);o.call(e)}}var i=Us(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[ma]=i.current,Ur(8===e.nodeType?e.parentNode:e),ss(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Ws(u);l.call(e)}}var u=Fs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[ma]=u.current,Ur(8===e.nodeType?e.parentNode:e),ss((function(){Hs(t,u,n,r)})),u}(n,t,e,a,r);return Ws(i)}Gs.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hs(e,t,null,null)},Gs.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ss((function(){Hs(null,e,null,null)})),t[ma]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=At();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&Dt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),ns(t,Xe()),0==(6&Cu)&&(Fu=Xe()+500,Ua()))}break;case 13:var r=Xu();ss((function(){return Ju(e,1,r)})),Ys(e,1)}},xt=function(e){13===e.tag&&(Ju(e,134217728,Xu()),Ys(e,134217728))},St=function(e){if(13===e.tag){var t=Xu(),n=Zu(e);Ju(e,n,t),Ys(e,n)}},At=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ka(r);if(!a)throw Error(o(90));K(r),Z(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=us,Oe=ss;var ec={usingClientEntryPoint:!1,Events:[ba,wa,ka,Ee,_e,us]},tc={findFiberByHostInstance:va,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qs(t))throw Error(o(200));return Bs(e,t,null,n)},t.createRoot=function(e,t){if(!qs(e))throw Error(o(299));var n=!1,r="",a=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Fs(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return ss(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(o(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!qs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Us(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gs(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(o(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(o(40));return!!e._reactRootContainer&&(ss((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=us,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Js(e,t,n,!1,r)},t.version="18.1.0-next-22edb9f77-20220426"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{"use strict";var r=n(294),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,h(w,y.prototype),w.isPureReactComponent=!0;var k=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},A={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,a)&&!A.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:S.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+P(u,0):o,k(i)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),O(i,t,a,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+P(l=e[s],s);u+=O(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=O(l=l.value,t,a,c=o+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function $(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},z={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:z,ReactCurrentOwner:S};t.Children={map:$,forEach:function(e,t,n){$(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return $(e,(function(){t++})),t},toArray:function(e){return $(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)x.call(t,s)&&!A.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.1.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,z(x);else{var t=r(c);null!==t&&M(k,t.startTime-e)}}function x(e,n){h=!1,g&&(g=!1,v(E),E=-1),m=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!O());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&M(k,f.startTime-n),u=!1}return u}finally{d=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,A=!1,C=null,E=-1,_=5,P=-1;function O(){return!(t.unstable_now()-P<_)}function $(){if(null!==C){var e=t.unstable_now();P=e;var n=!0;try{n=C(!0,e)}finally{n?S():(A=!1,C=null)}}else A=!1}if("function"==typeof b)S=function(){b($)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,N=T.port2;T.port1.onmessage=$,S=function(){N.postMessage(null)}}else S=function(){y($,0)};function z(e){C=e,A||(A=!0,S())}function M(e,n){E=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,z(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,M(k,o-i))):(e.sortIndex=l,n(s,e),h||m||(h=!0,z(x))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:m,references:1})}i.push(f)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},480:()=>{}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e].call(o.exports,o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nc=void 0,(()=>{"use strict";var e=a(294),t=a.t(e,2),n=a(745),r=a(379),o=a.n(r),i=a(795),l=a.n(i),u=a(569),s=a.n(u),c=a(565),f=a.n(c),d=a(216),p=a.n(d),m=a(589),h=a.n(m),g=a(312),y={};function v(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function b(){return b=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b.apply(this,arguments)}function w(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=w(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}y.styleTagTransform=h(),y.setAttributes=f(),y.insert=s().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=p(),o()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;const k=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=w(e))&&(r&&(r+=" "),r+=t);return r};function x(e,t,n){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}var S=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),A=Math.abs,C=String.fromCharCode,E=Object.assign;function _(e){return e.trim()}function P(e,t,n){return e.replace(t,n)}function O(e,t){return e.indexOf(t)}function $(e,t){return 0|e.charCodeAt(t)}function T(e,t,n){return e.slice(t,n)}function N(e){return e.length}function z(e){return e.length}function M(e,t){return t.push(e),e}var L=1,R=1,D=0,I=0,F=0,B="";function j(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:L,column:R,length:i,return:""}}function U(e,t){return E(j("",null,null,"",null,null,0),e,{length:-e.length},t)}function H(){return F=I>0?$(B,--I):0,R--,10===F&&(R=1,L--),F}function W(){return F=I<D?$(B,I++):0,R++,10===F&&(R=1,L++),F}function V(){return $(B,I)}function Y(){return I}function K(e,t){return T(B,e,t)}function Q(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function G(e){return L=R=1,D=N(B=e),I=0,[]}function q(e){return B="",e}function X(e){return _(K(I-1,ee(91===e?e+2:40===e?e+1:e)))}function Z(e){for(;(F=V())&&F<33;)W();return Q(e)>2||Q(F)>3?"":" "}function J(e,t){for(;--t&&W()&&!(F<48||F>102||F>57&&F<65||F>70&&F<97););return K(e,Y()+(t<6&&32==V()&&32==W()))}function ee(e){for(;W();)switch(F){case e:return I;case 34:case 39:34!==e&&39!==e&&ee(F);break;case 40:41===e&&ee(e);break;case 92:W()}return I}function te(e,t){for(;W()&&e+F!==57&&(e+F!==84||47!==V()););return"/*"+K(t,I-1)+"*"+C(47===e?e:W())}function ne(e){for(;!Q(V());)W();return K(e,I)}var re="-ms-",ae="-webkit-",oe="comm",ie="rule",le="decl",ue="@keyframes";function se(e,t){for(var n="",r=z(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function ce(e,t,n,r){switch(e.type){case"@import":case le:return e.return=e.return||e.value;case oe:return"";case ue:return e.return=e.value+"{"+se(e.children,r)+"}";case ie:e.value=e.props.join(",")}return N(n=se(e.children,r))?e.return=e.value+"{"+n+"}":""}function fe(e){return q(de("",null,null,null,[""],e=G(e),0,[0],e))}function de(e,t,n,r,a,o,i,l,u){for(var s=0,c=0,f=i,d=0,p=0,m=0,h=1,g=1,y=1,v=0,b="",w=a,k=o,x=r,S=b;g;)switch(m=v,v=W()){case 40:if(108!=m&&58==$(S,f-1)){-1!=O(S+=P(X(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:S+=X(v);break;case 9:case 10:case 13:case 32:S+=Z(m);break;case 92:S+=J(Y()-1,7);continue;case 47:switch(V()){case 42:case 47:M(me(te(W(),Y()),t,n),u);break;default:S+="/"}break;case 123*h:l[s++]=N(S)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:p>0&&N(S)-f&&M(p>32?he(S+";",r,n,f-1):he(P(S," ","")+";",r,n,f-2),u);break;case 59:S+=";";default:if(M(x=pe(S,t,n,s,c,a,l,b,w=[],k=[],f),o),123===v)if(0===c)de(S,t,x,x,w,o,f,l,k);else switch(99===d&&110===$(S,3)?100:d){case 100:case 109:case 115:de(e,x,x,r&&M(pe(e,x,x,0,0,a,l,b,a,w=[],f),k),a,k,f,l,r?w:k);break;default:de(S,x,x,x,[""],k,0,l,k)}}s=c=p=0,h=y=1,b=S="",f=i;break;case 58:f=1+N(S),p=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==H())continue;switch(S+=C(v),v*h){case 38:y=c>0?1:(S+="\f",-1);break;case 44:l[s++]=(N(S)-1)*y,y=1;break;case 64:45===V()&&(S+=X(W())),d=V(),c=f=N(b=S+=ne(Y())),v++;break;case 45:45===m&&2==N(S)&&(h=0)}}return o}function pe(e,t,n,r,a,o,i,l,u,s,c){for(var f=a-1,d=0===a?o:[""],p=z(d),m=0,h=0,g=0;m<r;++m)for(var y=0,v=T(e,f+1,f=A(h=i[m])),b=e;y<p;++y)(b=_(h>0?d[y]+" "+v:P(v,/&\f/g,d[y])))&&(u[g++]=b);return j(e,t,n,0===a?ie:l,u,s,c)}function me(e,t,n){return j(e,t,n,oe,C(F),T(e,2,-2),0)}function he(e,t,n,r){return j(e,t,n,le,T(e,0,r),T(e,r+1,-1),r)}var ge=function(e,t,n){for(var r=0,a=0;r=a,a=V(),38===r&&12===a&&(t[n]=1),!Q(a);)W();return K(e,I)},ye=new WeakMap,ve=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ye.get(n))&&!r){ye.set(e,!0);for(var a=[],o=function(e,t){return q(function(e,t){var n=-1,r=44;do{switch(Q(r)){case 0:38===r&&12===V()&&(t[n]=1),e[n]+=ge(I-1,t,n);break;case 2:e[n]+=X(r);break;case 4:if(44===r){e[++n]=58===V()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=C(r)}}while(r=W());return e}(G(e),t))}(t,a),i=n.props,l=0,u=0;l<o.length;l++)for(var s=0;s<i.length;s++,u++)e.props[u]=a[l]?o[l].replace(/&\f/g,i[s]):i[s]+" "+o[l]}}},be=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function we(e,t){switch(function(e,t){return 45^$(e,0)?(((t<<2^$(e,0))<<2^$(e,1))<<2^$(e,2))<<2^$(e,3):0}(e,t)){case 5103:return"-webkit-print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ae+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ae+e+"-moz-"+e+re+e+e;case 6828:case 4268:return ae+e+re+e+e;case 6165:return ae+e+re+"flex-"+e+e;case 5187:return ae+e+P(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return ae+e+re+"flex-item-"+P(e,/flex-|-self/,"")+e;case 4675:return ae+e+re+"flex-line-pack"+P(e,/align-content|flex-|-self/,"")+e;case 5548:return ae+e+re+P(e,"shrink","negative")+e;case 5292:return ae+e+re+P(e,"basis","preferred-size")+e;case 6060:return"-webkit-box-"+P(e,"-grow","")+ae+e+re+P(e,"grow","positive")+e;case 4554:return ae+P(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return P(P(P(e,/(zoom-|grab)/,"-webkit-$1"),/(image-set)/,"-webkit-$1"),e,"")+e;case 5495:case 3959:return P(e,/(image-set\([^]*)/,"-webkit-$1$`$1");case 4968:return P(P(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+ae+e+e;case 4095:case 3583:case 4068:case 2532:return P(e,/(.+)-inline(.+)/,"-webkit-$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(N(e)-1-t>6)switch($(e,t+1)){case 109:if(45!==$(e,t+4))break;case 102:return P(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1-moz-"+(108==$(e,t+3)?"$3":"$2-$3"))+e;case 115:return~O(e,"stretch")?we(P(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==$(e,t+1))break;case 6444:switch($(e,N(e)-3-(~O(e,"!important")&&10))){case 107:return P(e,":",":-webkit-")+e;case 101:return P(e,/(.+:)([^;!]+)(;|!.+)?/,"$1-webkit-"+(45===$(e,14)?"inline-":"")+"box$3$1-webkit-$2$3$1-ms-$2box$3")+e}break;case 5936:switch($(e,t+11)){case 114:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ae+e+re+e+e}return e}var ke=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case le:e.return=we(e.value,e.length);break;case ue:return se([U(e,{value:P(e.value,"@","@-webkit-")})],r);case ie:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return se([U(e,{props:[P(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return se([U(e,{props:[P(t,/:(plac\w+)/,":-webkit-input-$1")]}),U(e,{props:[P(t,/:(plac\w+)/,":-moz-$1")]}),U(e,{props:[P(t,/:(plac\w+)/,"-ms-input-$1")]})],r)}return""}))}}];const xe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,a,o=e.stylisPlugins||ke,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,s,c,f,d=[ce,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(s=[ve,be].concat(o,d),c=z(s),function(e,t,n,r){for(var a="",o=0;o<c;o++)a+=s[o](e,t,n,r)||"";return a});a=function(e,t,n,r){u=n,se(fe(e?e+"{"+t.styles+"}":t.styles),p),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new S({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:a};return m.sheet.hydrate(l),m};a(679);const Se=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Ae={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ce=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Ee=/[A-Z]|^ms/g,_e=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Pe=function(e){return 45===e.charCodeAt(1)},Oe=function(e){return null!=e&&"boolean"!=typeof e},$e=Ce((function(e){return Pe(e)?e:e.replace(Ee,"-$&").toLowerCase()})),Te=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(_e,(function(e,t,n){return ze={name:t,styles:n,next:ze},t}))}return 1===Ae[e]||Pe(e)||"number"!=typeof t||0===t?t:t+"px"};function Ne(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return ze={name:n.name,styles:n.styles,next:ze},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)ze={name:r.name,styles:r.styles,next:ze},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=Ne(e,t,n[a])+";";else for(var o in n){var i=n[o];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=o+"{"+t[i]+"}":Oe(i)&&(r+=$e(o)+":"+Te(o,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Ne(e,t,i);switch(o){case"animation":case"animationName":r+=$e(o)+":"+l+";";break;default:r+=o+"{"+l+"}"}}else for(var u=0;u<i.length;u++)Oe(i[u])&&(r+=$e(o)+":"+Te(o,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=ze,o=n(e);return ze=a,Ne(e,t,o)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var ze,Me=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Le=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";ze=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=Ne(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=Ne(n,t,e[i]),r&&(a+=o[i]);Me.lastIndex=0;for(var l,u="";null!==(l=Me.exec(a));)u+="-"+l[1];return{name:Se(a)+u,styles:a,next:ze}},Re=!!t.useInsertionEffect&&t.useInsertionEffect,De=Re||function(e){return e()};function Ie(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Le(t)}Re||e.useLayoutEffect;var Fe=function(){var e=Ie.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function Be(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function je(e){if("string"!=typeof e)throw new Error(Be(7));return e.charAt(0).toUpperCase()+e.slice(1)}const Ue=je;function He(e,t){const n=b({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=b({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const a=e[r]||{},o=t[r];n[r]={},o&&Object.keys(o)?a&&Object.keys(a)?(n[r]=b({},o),Object.keys(a).forEach((e=>{n[r][e]=He(a[e],o[e])}))):n[r]=o:n[r]=a}else void 0===n[r]&&(n[r]=e[r])})),n}function We(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?He(t.components[n].defaultProps,r):r}function Ve(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function Ye(e){if(!Ve(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=Ye(e[n])})),t}function Ke(e,t,n={clone:!0}){const r=n.clone?b({},e):e;return Ve(e)&&Ve(t)&&Object.keys(t).forEach((a=>{"__proto__"!==a&&(Ve(t[a])&&a in e&&Ve(e[a])?r[a]=Ke(e[a],t[a],n):n.clone?r[a]=Ve(t[a])?Ye(t[a]):t[a]:r[a]=t[a])})),r}const Qe=["values","unit","step"];const Ge={borderRadius:4},qe={xs:0,sm:600,md:900,lg:1200,xl:1536},Xe={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${qe[e]}px)`};function Ze(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Xe;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Xe;return Object.keys(t).reduce(((r,a)=>{if(-1!==Object.keys(e.values||qe).indexOf(a))r[e.up(a)]=n(t[a],a);else{const e=a;r[e]=t[e]}return r}),{})}return n(t)}function Je(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function et(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Je(e,n)||r,t&&(a=t(a,r,e)),a}const tt=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:a}=e,o=e=>{if(null==e[t])return null;const o=e[t],i=Je(e.theme,r)||{};return Ze(e,o,(e=>{let r=et(i,a,e);return e===r&&"string"==typeof e&&(r=et(i,a,`${t}${"default"===e?"":je(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},nt=function(e,t){return t?Ke(e,t,{clone:!1}):e},rt={m:"margin",p:"padding"},at={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},ot={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},it=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!ot[e])return[e];e=ot[e]}const[t,n]=e.split(""),r=rt[t],a=at[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(e)),t[e])}(),lt=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],ut=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],st=[...lt,...ut];function ct(e,t,n,r){var a;const o=null!=(a=Je(e,t,!1))?a:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function ft(e){return ct(e,"spacing",8)}function dt(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function pt(e,t){const n=ft(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=dt(t,n),e)),{})}(it(n),r);return Ze(e,e[n],a)}(e,t,r,n))).reduce(nt,{})}function mt(e){return pt(e,lt)}function ht(e){return pt(e,ut)}function gt(e){return pt(e,st)}mt.propTypes={},mt.filterProps=lt,ht.propTypes={},ht.filterProps=ut,gt.propTypes={},gt.filterProps=st;const yt=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?nt(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function vt(e){return"number"!=typeof e?e:`${e}px solid`}const bt=tt({prop:"border",themeKey:"borders",transform:vt}),wt=tt({prop:"borderTop",themeKey:"borders",transform:vt}),kt=tt({prop:"borderRight",themeKey:"borders",transform:vt}),xt=tt({prop:"borderBottom",themeKey:"borders",transform:vt}),St=tt({prop:"borderLeft",themeKey:"borders",transform:vt}),At=tt({prop:"borderColor",themeKey:"palette"}),Ct=tt({prop:"borderTopColor",themeKey:"palette"}),Et=tt({prop:"borderRightColor",themeKey:"palette"}),_t=tt({prop:"borderBottomColor",themeKey:"palette"}),Pt=tt({prop:"borderLeftColor",themeKey:"palette"}),Ot=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=ct(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:dt(t,e)});return Ze(e,e.borderRadius,n)}return null};Ot.propTypes={},Ot.filterProps=["borderRadius"],yt(bt,wt,kt,xt,St,At,Ct,Et,_t,Pt,Ot);const $t=e=>{if(void 0!==e.gap&&null!==e.gap){const t=ct(e.theme,"spacing",8),n=e=>({gap:dt(t,e)});return Ze(e,e.gap,n)}return null};$t.propTypes={},$t.filterProps=["gap"];const Tt=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=ct(e.theme,"spacing",8),n=e=>({columnGap:dt(t,e)});return Ze(e,e.columnGap,n)}return null};Tt.propTypes={},Tt.filterProps=["columnGap"];const Nt=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=ct(e.theme,"spacing",8),n=e=>({rowGap:dt(t,e)});return Ze(e,e.rowGap,n)}return null};function zt(e,t){return"grey"===t?t:e}function Mt(e){return e<=1&&0!==e?100*e+"%":e}Nt.propTypes={},Nt.filterProps=["rowGap"],yt($t,Tt,Nt,tt({prop:"gridColumn"}),tt({prop:"gridRow"}),tt({prop:"gridAutoFlow"}),tt({prop:"gridAutoColumns"}),tt({prop:"gridAutoRows"}),tt({prop:"gridTemplateColumns"}),tt({prop:"gridTemplateRows"}),tt({prop:"gridTemplateAreas"}),tt({prop:"gridArea"})),yt(tt({prop:"color",themeKey:"palette",transform:zt}),tt({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:zt}),tt({prop:"backgroundColor",themeKey:"palette",transform:zt}));const Lt=tt({prop:"width",transform:Mt}),Rt=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,a;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(a=r.values)?void 0:a[t])||qe[t]||Mt(t)}};return Ze(e,e.maxWidth,t)}return null};Rt.filterProps=["maxWidth"];const Dt=tt({prop:"minWidth",transform:Mt}),It=tt({prop:"height",transform:Mt}),Ft=tt({prop:"maxHeight",transform:Mt}),Bt=tt({prop:"minHeight",transform:Mt}),jt=(tt({prop:"size",cssProperty:"width",transform:Mt}),tt({prop:"size",cssProperty:"height",transform:Mt}),yt(Lt,Rt,Dt,It,Ft,Bt,tt({prop:"boxSizing"})),{border:{themeKey:"borders",transform:vt},borderTop:{themeKey:"borders",transform:vt},borderRight:{themeKey:"borders",transform:vt},borderBottom:{themeKey:"borders",transform:vt},borderLeft:{themeKey:"borders",transform:vt},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Ot},color:{themeKey:"palette",transform:zt},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:zt},backgroundColor:{themeKey:"palette",transform:zt},p:{style:ht},pt:{style:ht},pr:{style:ht},pb:{style:ht},pl:{style:ht},px:{style:ht},py:{style:ht},padding:{style:ht},paddingTop:{style:ht},paddingRight:{style:ht},paddingBottom:{style:ht},paddingLeft:{style:ht},paddingX:{style:ht},paddingY:{style:ht},paddingInline:{style:ht},paddingInlineStart:{style:ht},paddingInlineEnd:{style:ht},paddingBlock:{style:ht},paddingBlockStart:{style:ht},paddingBlockEnd:{style:ht},m:{style:mt},mt:{style:mt},mr:{style:mt},mb:{style:mt},ml:{style:mt},mx:{style:mt},my:{style:mt},margin:{style:mt},marginTop:{style:mt},marginRight:{style:mt},marginBottom:{style:mt},marginLeft:{style:mt},marginX:{style:mt},marginY:{style:mt},marginInline:{style:mt},marginInlineStart:{style:mt},marginInlineEnd:{style:mt},marginBlock:{style:mt},marginBlockStart:{style:mt},marginBlockEnd:{style:mt},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:$t},rowGap:{style:Nt},columnGap:{style:Tt},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:Mt},maxWidth:{style:Rt},minWidth:{transform:Mt},height:{transform:Mt},maxHeight:{transform:Mt},minHeight:{transform:Mt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Ut=function(){function e(e,t,n,r){const a={[e]:t,theme:n},o=r[e];if(!o)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:u,style:s}=o;if(null==t)return null;const c=Je(n,l)||{};return s?s(a):Ze(a,t,(t=>{let n=et(c,u,t);return t===n&&"string"==typeof t&&(n=et(c,u,`${e}${"default"===t?"":je(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){var r;const{sx:a,theme:o={}}=n||{};if(!a)return null;const i=null!=(r=o.unstable_sxConfig)?r:jt;function l(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const a=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),l=Object.keys(a);let u=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(l=r[n])?l(o):l;var l;if(null!=a)if("object"==typeof a)if(i[n])u=nt(u,e(n,a,o,i));else{const e=Ze({theme:o},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?u=nt(u,e):u[n]=t({sx:a,theme:o})}else u=nt(u,e(n,a,o,i))})),s=u,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s);var s}return Array.isArray(a)?a.map(l):l(a)}}();Ut.filterProps=["sx"];const Ht=Ut,Wt=["breakpoints","palette","spacing","shape"],Vt=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:a,shape:o={}}=e,i=v(e,Wt),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,a=v(e,Qe),o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>b({},e,{[t.key]:t.val})),{})})(t),i=Object.keys(o);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,a){const o=i.indexOf(a);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[i[o]]?t[i[o]]:a)-r/100}${n})`}return b({keys:i,values:o,up:l,down:u,between:s,only:function(e){return i.indexOf(e)+1<i.length?s(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?u(i[t]):s(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},a)}(n),u=function(e=8){if(e.mui)return e;const t=ft({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(a);let s=Ke({breakpoints:l,direction:"ltr",components:{},palette:b({mode:"light"},r),spacing:u,shape:b({},Ge,o)},i);return s=t.reduce(((e,t)=>Ke(e,t)),s),s.unstable_sxConfig=b({},jt,null==i?void 0:i.unstable_sxConfig),s.unstable_sx=function(e){return Ht({sx:e,theme:this})},s},Yt=e.createContext(null),Kt=Vt(),Qt=function(t=Kt){return function(t=null){const n=e.useContext(Yt);return n&&(r=n,0!==Object.keys(r).length)?n:t;var r}(t)};function Gt(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function qt(e){if(e.type)return e;if("#"===e.charAt(0))return qt(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(Be(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(Be(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}function Xt(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Zt(e){let t="hsl"===(e=qt(e)).type||"hsla"===e.type?qt(function(e){e=qt(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Xt({type:l,values:u})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Jt(e,t){if(e=qt(e),t=Gt(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Xt(e)}function en(e,t){if(e=qt(e),t=Gt(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Xt(e)}const tn={black:"#000",white:"#fff"},nn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},rn="#f3e5f5",an="#ce93d8",on="#ba68c8",ln="#ab47bc",un="#9c27b0",sn="#7b1fa2",cn="#e57373",fn="#ef5350",dn="#f44336",pn="#d32f2f",mn="#c62828",hn="#ffb74d",gn="#ffa726",yn="#ff9800",vn="#f57c00",bn="#e65100",wn="#e3f2fd",kn="#90caf9",xn="#42a5f5",Sn="#1976d2",An="#1565c0",Cn="#4fc3f7",En="#29b6f6",_n="#03a9f4",Pn="#0288d1",On="#01579b",$n="#81c784",Tn="#66bb6a",Nn="#4caf50",zn="#388e3c",Mn="#2e7d32",Ln="#1b5e20",Rn=["mode","contrastThreshold","tonalOffset"],Dn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:tn.white,default:tn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},In={text:{primary:tn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:tn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Fn(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=en(e.main,a):"dark"===t&&(e.dark=Jt(e.main,o)))}const Bn=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],jn={textTransform:"uppercase"},Un='"Roboto", "Helvetica", "Arial", sans-serif';function Hn(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Un,fontSize:a=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:u=700,htmlFontSize:s=16,allVariants:c,pxToRem:f}=n,d=v(n,Bn),p=a/14,m=f||(e=>e/s*p+"rem"),h=(e,t,n,a,o)=>{return b({fontFamily:r,fontWeight:e,fontSize:m(t),lineHeight:n},r===Un?{letterSpacing:(i=a/t,Math.round(1e5*i)/1e5+"em")}:{},o,c);var i},g={h1:h(o,96,1.167,-1.5),h2:h(o,60,1.2,-.5),h3:h(i,48,1.167,0),h4:h(i,34,1.235,.25),h5:h(i,24,1.334,0),h6:h(l,20,1.6,.15),subtitle1:h(i,16,1.75,.15),subtitle2:h(l,14,1.57,.1),body1:h(i,16,1.5,.15),body2:h(i,14,1.43,.15),button:h(l,14,1.75,.4,jn),caption:h(i,12,1.66,.4),overline:h(i,12,2.66,1,jn)};return Ke(b({htmlFontSize:s,pxToRem:m,fontFamily:r,fontSize:a,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:u},g),d,{clone:!1})}function Wn(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Vn=["none",Wn(0,2,1,-1,0,1,1,0,0,1,3,0),Wn(0,3,1,-2,0,2,2,0,0,1,5,0),Wn(0,3,3,-2,0,3,4,0,0,1,8,0),Wn(0,2,4,-1,0,4,5,0,0,1,10,0),Wn(0,3,5,-1,0,5,8,0,0,1,14,0),Wn(0,3,5,-1,0,6,10,0,0,1,18,0),Wn(0,4,5,-2,0,7,10,1,0,2,16,1),Wn(0,5,5,-3,0,8,10,1,0,3,14,2),Wn(0,5,6,-3,0,9,12,1,0,3,16,2),Wn(0,6,6,-3,0,10,14,1,0,4,18,3),Wn(0,6,7,-4,0,11,15,1,0,4,20,3),Wn(0,7,8,-4,0,12,17,2,0,5,22,4),Wn(0,7,8,-4,0,13,19,2,0,5,24,4),Wn(0,7,9,-4,0,14,21,2,0,5,26,4),Wn(0,8,9,-5,0,15,22,2,0,6,28,5),Wn(0,8,10,-5,0,16,24,2,0,6,30,5),Wn(0,8,11,-5,0,17,26,2,0,6,32,5),Wn(0,9,11,-5,0,18,28,2,0,7,34,6),Wn(0,9,12,-6,0,19,29,2,0,7,36,6),Wn(0,10,13,-6,0,20,31,3,0,8,38,7),Wn(0,10,13,-6,0,21,33,3,0,8,40,7),Wn(0,10,14,-6,0,22,35,3,0,8,42,7),Wn(0,11,14,-7,0,23,36,3,0,9,44,8),Wn(0,11,15,-7,0,24,38,3,0,9,46,8)],Yn=["duration","easing","delay"],Kn={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Qn={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Gn(e){return`${Math.round(e)}ms`}function qn(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Xn(e){const t=b({},Kn,e.easing),n=b({},Qn,e.duration);return b({getAutoHeightDuration:qn,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:i=0}=r;return v(r,Yn),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:Gn(a)} ${o} ${"string"==typeof i?i:Gn(i)}`)).join(",")}},e,{easing:t,duration:n})}const Zn={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Jn=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const er=function(e={},...t){const{mixins:n={},palette:r={},transitions:a={},typography:o={}}=e,i=v(e,Jn);if(e.vars)throw new Error(Be(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,a=v(e,Rn),o=e.primary||function(e="light"){return"dark"===e?{main:kn,light:wn,dark:xn}:{main:Sn,light:xn,dark:An}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:an,light:rn,dark:ln}:{main:un,light:on,dark:sn}}(t),l=e.error||function(e="light"){return"dark"===e?{main:dn,light:cn,dark:pn}:{main:pn,light:fn,dark:mn}}(t),u=e.info||function(e="light"){return"dark"===e?{main:En,light:Cn,dark:Pn}:{main:Pn,light:_n,dark:On}}(t),s=e.success||function(e="light"){return"dark"===e?{main:Tn,light:$n,dark:zn}:{main:Mn,light:Nn,dark:Ln}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:gn,light:hn,dark:vn}:{main:"#ed6c02",light:yn,dark:bn}}(t);function f(e){const t=function(e,t){const n=Zt(e),r=Zt(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,In.text.primary)>=n?In.text.primary:Dn.text.primary;return t}const d=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:o=700})=>{if(!(e=b({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(Be(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(Be(12,t?` (${t})`:"",JSON.stringify(e.main)));return Fn(e,"light",a,r),Fn(e,"dark",o,r),e.contrastText||(e.contrastText=f(e.main)),e},p={dark:In,light:Dn};return Ke(b({common:b({},tn),mode:t,primary:d({color:o,name:"primary"}),secondary:d({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:d({color:l,name:"error"}),warning:d({color:c,name:"warning"}),info:d({color:u,name:"info"}),success:d({color:s,name:"success"}),grey:nn,contrastThreshold:n,getContrastText:f,augmentColor:d,tonalOffset:r},p[t]),a)}(r),u=Vt(e);let s=Ke(u,{mixins:(c=u.breakpoints,f=n,b({toolbar:{minHeight:56,[c.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[c.up("sm")]:{minHeight:64}}},f)),palette:l,shadows:Vn.slice(),typography:Hn(l,o),transitions:Xn(a),zIndex:b({},Zn)});var c,f;return s=Ke(s,i),s=t.reduce(((e,t)=>Ke(e,t)),s),s.unstable_sxConfig=b({},jt,null==i?void 0:i.unstable_sxConfig),s.unstable_sx=function(e){return Ht({sx:e,theme:this})},s},tr=er();function nr({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return We({theme:Qt(n),name:t,props:e})}({props:e,name:t,defaultTheme:tr})}var rr=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const ar=Ce((function(e){return rr.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var or=(0,e.createContext)("undefined"!=typeof HTMLElement?xe({key:"css"}):null);or.Provider;var ir=function(t){return(0,e.forwardRef)((function(n,r){var a=(0,e.useContext)(or);return t(n,a,r)}))},lr=(0,e.createContext)({});function ur(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var sr=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},cr=ar,fr=function(e){return"theme"!==e},dr=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?cr:fr},pr=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},mr=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return sr(t,n,r),De((function(){return function(e,t,n){sr(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}(t,n,r)})),null};var hr=function t(n,r){var a,o,i=n.__emotion_real===n,l=i&&n.__emotion_base||n;void 0!==r&&(a=r.label,o=r.target);var u=pr(n,r,i),s=u||dr(l),c=!s("as");return function(){var f=arguments,d=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==a&&d.push("label:"+a+";"),null==f[0]||void 0===f[0].raw)d.push.apply(d,f);else{d.push(f[0][0]);for(var p=f.length,m=1;m<p;m++)d.push(f[m],f[0][m])}var h=ir((function(t,n,r){var a=c&&t.as||l,i="",f=[],p=t;if(null==t.theme){for(var m in p={},t)p[m]=t[m];p.theme=(0,e.useContext)(lr)}"string"==typeof t.className?i=ur(n.registered,f,t.className):null!=t.className&&(i=t.className+" ");var h=Le(d.concat(f),n.registered,p);i+=n.key+"-"+h.name,void 0!==o&&(i+=" "+o);var g=c&&void 0===u?dr(a):s,y={};for(var v in t)c&&"as"===v||g(v)&&(y[v]=t[v]);return y.className=i,y.ref=r,(0,e.createElement)(e.Fragment,null,(0,e.createElement)(mr,{cache:n,serialized:h,isStringTag:"string"==typeof a}),(0,e.createElement)(a,y))}));return h.displayName=void 0!==a?a:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",h.defaultProps=n.defaultProps,h.__emotion_real=h,h.__emotion_base=l,h.__emotion_styles=d,h.__emotion_forwardProp=u,Object.defineProperty(h,"toString",{value:function(){return"."+o}}),h.withComponent=function(e,n){return t(e,b({},r,n,{shouldForwardProp:pr(h,n,!0)})).apply(void 0,d)},h}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){hr[e]=hr(e)}));const gr=hr;function yr(e,t){return gr(e,t)}const vr=["variant"];function br(e){return 0===e.length}function wr(e){const{variant:t}=e,n=v(e,vr);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?br(r)?e[t]:je(e[t]):`${br(r)?t:je(t)}${je(e[t].toString())}`})),r}const kr=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],xr=["theme"],Sr=["theme"];function Ar(e){return 0===Object.keys(e).length}function Cr(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const Er=Vt(),_r=function(e={}){const{defaultTheme:t=Er,rootShouldForwardProp:n=Cr,slotShouldForwardProp:r=Cr}=e,a=e=>{const n=Ar(e.theme)?t:e.theme;return Ht(b({},e,{theme:n}))};return a.__mui_systemSx=!0,(e,o={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>!(null!=e&&e.__mui_systemSx))))})(e);const{name:i,slot:l,skipVariantsResolver:u,skipSx:s,overridesResolver:c}=o,f=v(o,kr),d=void 0!==u?u:l&&"Root"!==l||!1,p=s||!1;let m=Cr;"Root"===l?m=n:l?m=r:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(m=void 0);const h=yr(e,b({shouldForwardProp:m,label:void 0},f)),g=(e,...n)=>{const r=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:r}=n,a=v(n,xr);return e(b({theme:Ar(r)?t:r},a))}:e)):[];let o=e;i&&c&&r.push((e=>{const n=Ar(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(i,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a(b({},e,{theme:n})):a})),c(e,t)}return null})),i&&!d&&r.push((e=>{const n=Ar(e.theme)?t:e.theme;return((e,t,n,r)=>{var a,o;const{ownerState:i={}}=e,l=[],u=null==n||null==(a=n.components)||null==(o=a[r])?void 0:o.variants;return u&&u.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[wr(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=wr(e.props);r[t]=e.style})),r})(i,n),n,i)})),p||r.push(a);const l=r.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");o=[...e,...t],o.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(o=n=>{let{theme:r}=n,a=v(n,Sr);return e(b({theme:Ar(r)?t:r},a))});return h(o,...r)};return h.withConfig&&(g.withConfig=h.withConfig),g}}({defaultTheme:tr,rootShouldForwardProp:e=>Cr(e)&&"classes"!==e}),Pr=_r,Or=e=>e,$r=(()=>{let e=Or;return{configure(t){e=t},generate:t=>e(t),reset(){e=Or}}})(),Tr={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function Nr(e,t,n="Mui"){const r=Tr[t];return r?`${n}-${r}`:`${$r.generate(e)}-${t}`}function zr(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Nr(e,t,n)})),r}function Mr(e){return Nr("MuiCircularProgress",e)}zr("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var Lr=a(893);const Rr=["className","color","disableShrink","size","style","thickness","value","variant"];let Dr,Ir,Fr,Br,jr=e=>e;const Ur=Fe(Dr||(Dr=jr`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),Hr=Fe(Ir||(Ir=jr`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),Wr=Pr("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${Ue(n.color)}`]]}})((({ownerState:e,theme:t})=>b({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:(t.vars||t).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&Ie(Fr||(Fr=jr`
      animation: ${0} 1.4s linear infinite;
    `),Ur))),Vr=Pr("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),Yr=Pr("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${Ue(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>b({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&Ie(Br||(Br=jr`
      animation: ${0} 1.4s ease-in-out infinite;
    `),Hr))),Kr=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiCircularProgress"}),{className:r,color:a="primary",disableShrink:o=!1,size:i=40,style:l,thickness:u=3.6,value:s=0,variant:c="indeterminate"}=n,f=v(n,Rr),d=b({},n,{color:a,disableShrink:o,size:i,thickness:u,value:s,variant:c}),p=(e=>{const{classes:t,variant:n,color:r,disableShrink:a}=e;return x({root:["root",n,`color${Ue(r)}`],svg:["svg"],circle:["circle",`circle${Ue(n)}`,a&&"circleDisableShrink"]},Mr,t)})(d),m={},h={},g={};if("determinate"===c){const e=2*Math.PI*((44-u)/2);m.strokeDasharray=e.toFixed(3),g["aria-valuenow"]=Math.round(s),m.strokeDashoffset=`${((100-s)/100*e).toFixed(3)}px`,h.transform="rotate(-90deg)"}return(0,Lr.jsx)(Wr,b({className:k(p.root,r),style:b({width:i,height:i},h,l),ownerState:d,ref:t,role:"progressbar"},g,f,{children:(0,Lr.jsx)(Vr,{className:p.svg,ownerState:d,viewBox:"22 22 44 44",children:(0,Lr.jsx)(Yr,{className:p.circle,style:m,ownerState:d,cx:44,cy:44,r:(44-u)/2,fill:"none",strokeWidth:u})})}))})),Qr=["sx"];function Gr(e){const{sx:t}=e,n=v(e,Qr),{systemProps:r,otherProps:a}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},a=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:jt;return Object.keys(e).forEach((t=>{a[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let o;return o=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return Ve(n)?b({},r,n):r}:b({},r,t),b({},a,{sx:o})}const qr=["className","component"],Xr=function(t={}){const{defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:a}=t,o=yr("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Ht);return e.forwardRef((function(e,t){const i=Qt(n),l=Gr(e),{className:u,component:s="div"}=l,c=v(l,qr);return(0,Lr.jsx)(o,b({as:s,ref:t,className:k(u,a?a(r):r),theme:i},c))}))}({defaultTheme:er(),defaultClassName:"MuiBox-root",generateClassName:$r.generate}),Zr=Xr;var Jr=a(484),ea=a.n(Jr),ta=a(178),na=a.n(ta),ra=a(387),aa=a.n(ra),oa=a(212),ia=a.n(oa);ea().extend(na()),ea().extend(aa()),ea().extend(ia());const la=ea();var ua=a(697),sa=a.n(ua);function ca(e){return Nr("MuiLinearProgress",e)}zr("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]);const fa=["className","color","value","valueBuffer","variant"];let da,pa,ma,ha,ga,ya,va=e=>e;const ba=Fe(da||(da=va`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)),wa=Fe(pa||(pa=va`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)),ka=Fe(ma||(ma=va`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)),xa=(e,t)=>"inherit"===t?"currentColor":e.vars?e.vars.palette.LinearProgress[`${t}Bg`]:"light"===e.palette.mode?en(e.palette[t].main,.62):Jt(e.palette[t].main,.5),Sa=Pr("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`color${Ue(n.color)}`],t[n.variant]]}})((({ownerState:e,theme:t})=>b({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:xa(t,e.color)},"inherit"===e.color&&"buffer"!==e.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===e.variant&&{backgroundColor:"transparent"},"query"===e.variant&&{transform:"rotate(180deg)"}))),Aa=Pr("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.dashed,t[`dashedColor${Ue(n.color)}`]]}})((({ownerState:e,theme:t})=>{const n=xa(t,e.color);return b({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===e.color&&{opacity:.3},{backgroundImage:`radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`,backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})}),Ie(ha||(ha=va`
    animation: ${0} 3s infinite linear;
  `),ka)),Ca=Pr("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t[`barColor${Ue(n.color)}`],("indeterminate"===n.variant||"query"===n.variant)&&t.bar1Indeterminate,"determinate"===n.variant&&t.bar1Determinate,"buffer"===n.variant&&t.bar1Buffer]}})((({ownerState:e,theme:t})=>b({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"determinate"===e.variant&&{transition:"transform .4s linear"},"buffer"===e.variant&&{zIndex:1,transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Ie(ga||(ga=va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `),ba))),Ea=Pr("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t[`barColor${Ue(n.color)}`],("indeterminate"===n.variant||"query"===n.variant)&&t.bar2Indeterminate,"buffer"===n.variant&&t.bar2Buffer]}})((({ownerState:e,theme:t})=>b({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==e.variant&&{backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"inherit"===e.color&&{opacity:.3},"buffer"===e.variant&&{backgroundColor:xa(t,e.color),transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Ie(ya||(ya=va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `),wa))),_a=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiLinearProgress"}),{className:r,color:a="primary",value:o,valueBuffer:i,variant:l="indeterminate"}=n,u=v(n,fa),s=b({},n,{color:a,variant:l}),c=(e=>{const{classes:t,variant:n,color:r}=e;return x({root:["root",`color${Ue(r)}`,n],dashed:["dashed",`dashedColor${Ue(r)}`],bar1:["bar",`barColor${Ue(r)}`,("indeterminate"===n||"query"===n)&&"bar1Indeterminate","determinate"===n&&"bar1Determinate","buffer"===n&&"bar1Buffer"],bar2:["bar","buffer"!==n&&`barColor${Ue(r)}`,"buffer"===n&&`color${Ue(r)}`,("indeterminate"===n||"query"===n)&&"bar2Indeterminate","buffer"===n&&"bar2Buffer"]},ca,t)})(s),f=Qt(tr),d={},p={bar1:{},bar2:{}};if(("determinate"===l||"buffer"===l)&&void 0!==o){d["aria-valuenow"]=Math.round(o),d["aria-valuemin"]=0,d["aria-valuemax"]=100;let e=o-100;"rtl"===f.direction&&(e=-e),p.bar1.transform=`translateX(${e}%)`}if("buffer"===l&&void 0!==i){let e=(i||0)-100;"rtl"===f.direction&&(e=-e),p.bar2.transform=`translateX(${e}%)`}return(0,Lr.jsxs)(Sa,b({className:k(c.root,r),ownerState:s,role:"progressbar"},d,{ref:t},u,{children:["buffer"===l?(0,Lr.jsx)(Aa,{className:c.dashed,ownerState:s}):null,(0,Lr.jsx)(Ca,{className:c.bar1,ownerState:s,style:p.bar1}),"determinate"===l?null:(0,Lr.jsx)(Ea,{className:c.bar2,ownerState:s,style:p.bar2})]}))}));function Pa(e){return Nr("MuiTypography",e)}zr("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const Oa=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],$a=Pr("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${Ue(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>b({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),Ta={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Na={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},za=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiTypography"}),r=(e=>Na[e]||e)(n.color),a=Gr(b({},n,{color:r})),{align:o="inherit",className:i,component:l,gutterBottom:u=!1,noWrap:s=!1,paragraph:c=!1,variant:f="body1",variantMapping:d=Ta}=a,p=v(a,Oa),m=b({},a,{align:o,color:r,className:i,component:l,gutterBottom:u,noWrap:s,paragraph:c,variant:f,variantMapping:d}),h=l||(c?"p":d[f]||Ta[f])||"span",g=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:a,variant:o,classes:i}=e;return x({root:["root",o,"inherit"!==e.align&&`align${Ue(t)}`,n&&"gutterBottom",r&&"noWrap",a&&"paragraph"]},Pa,i)})(m);return(0,Lr.jsx)($a,b({as:h,ref:t,ownerState:m,className:k(g.root,i)},p))}));function Ma(){return Ma=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ma.apply(this,arguments)}function La(t){return e.createElement(Zr,{sx:{display:"flex",alignItems:"center"}},e.createElement(Zr,{sx:{width:"100%",mr:1}},e.createElement(_a,Ma({variant:"determinate"},t))),e.createElement(Zr,{sx:{minWidth:35}},e.createElement(za,{variant:"body2",color:"text.secondary"},"".concat(Math.round(t.value),"%"))))}La.propTypes={value:sa().number.isRequired};var Ra=a(214),Da=a.n(Ra),Ia=a(867),Fa={};function Ba(t){var n=t.data,r=t.setDataSelection,a=t.dataSelection;return e.createElement("nav",null,e.createElement("ul",null,n.map((function(t,n){return e.createElement("li",{key:(o=t.file,Da()(o))},e.createElement("button",{type:"button",className:a===n&&"active",onClick:function(){return r(n)}},function(e){return e.split("/").pop()}(t.file)," ",e.createElement("strong",null,"(",Math.round(t.output.percent),"%)"),e.createElement("div",null,t.output.time_remaining," ",t.name&&"- ".concat(t.name)),e.createElement("div",null,e.createElement("em",null,t.output.action))));var o}))))}function ja(e){return ja="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ja(e)}function Ua(){Ua=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof f?t:f,o=Object.create(a.prototype),i=new S(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===c)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var c={};function f(){}function d(){}function p(){}var m={};l(m,a,(function(){return this}));var h=Object.getPrototypeOf,g=h&&h(h(A([])));g&&g!==t&&n.call(g,a)&&(m=g);var y=p.prototype=f.prototype=Object.create(m);function v(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function r(a,o,i,l){var u=s(e[a],e,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==ja(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;this._invoke=function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=s(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function A(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return d.prototype=p,l(y,"constructor",p),l(p,"constructor",d),d.displayName=l(p,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,l(e,i,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},v(b.prototype),l(b.prototype,o,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new b(u(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},v(y),l(y,i,"Generator"),l(y,a,(function(){return this})),l(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],i=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(l&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:A(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},e}function Ha(e){return function(e){if(Array.isArray(e))return Ya(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Va(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||Va(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Va(e,t){if(e){if("string"==typeof e)return Ya(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ya(e,t):void 0}}function Ya(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ka(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function Qa(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Ka(o,r,a,i,l,"next",e)}function l(e){Ka(o,r,a,i,l,"throw",e)}i(void 0)}))}}function Ga(e,t,n,r,a){return qa.apply(this,arguments)}function qa(){return qa=Qa(Ua().mark((function e(t,n,r,a,o){var i,l,u,s,c,f=arguments;return Ua().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,clearTimeout(window.dataTimeout),e.next=4,fetch("active.json").then((function(e){return e.json()}));case 4:return i=e.sent,t(i),e.next=8,fetch("filelist.json").then((function(e){return e.json()}));case 8:return l=e.sent,n(l),e.next=12,fetch("disk.json").then((function(e){return e.json()}));case 12:return u=e.sent,r(u),e.next=16,fetch("utilization.json").then((function(e){return e.json()}));case 16:return s=e.sent,a(s),e.next=20,fetch("status.json").then((function(e){return e.json()}));case 20:c=e.sent,o(c),window.dataTimeout=setTimeout((function(){Ga.apply(void 0,Ha(f))}),1e3),e.next=28;break;case 25:e.prev=25,e.t0=e.catch(0),window.dataTimeout=setTimeout((function(){Ga.apply(void 0,Ha(f))}),1e3);case 28:case"end":return e.stop()}}),e,null,[[0,25]])}))),qa.apply(this,arguments)}function Xa(e){var t=["gb","mb","kb"].find((function(t){return e[t]>=1}));return Math.round(100*e[t])/100+t}Fa.styleTagTransform=h(),Fa.setAttributes=f(),Fa.insert=s().bind(null,"head"),Fa.domAPI=l(),Fa.insertStyleElement=p(),o()(Ia.Z,Fa),Ia.Z&&Ia.Z.locals&&Ia.Z.locals,Ba.propTypes={data:sa().object.isRequired,setDataSelection:sa().func.isRequired,dataSelection:sa().number.isRequired};const Za=function(){var t=Wa((0,e.useState)(!1),2),n=t[0],r=t[1],a=Wa((0,e.useState)([]),2),o=a[0],i=a[1],l=Wa((0,e.useState)(!1),2),u=l[0],s=l[1],c=Wa((0,e.useState)(!1),2),f=c[0],d=c[1],p=Wa((0,e.useState)(!1),2),m=p[0],h=p[1],g=Wa((0,e.useState)(0),2),y=g[0],v=g[1];if([n,o,u,f,m].filter((function(e){return!e})).length>0)return Ga(r,i,s,d,h),e.createElement(Zr,{sx:{display:"flex"}},e.createElement(Kr,null));var b,w,k,x=n[y];return e.createElement("div",{className:"container image"},e.createElement("div",{className:"overline"}),e.createElement("h1",null,"Optimized video encoding"),n&&n.length>0&&e.createElement(Ba,{data:n,dataSelection:y,setDataSelection:v}),x&&e.createElement("div",{className:"widget center"},e.createElement("strong",null,x.file)," ","(",x.video_stream.codec_name,"/",x.audio_streams[0].codec_name,")"),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"CPU"),e.createElement(La,{value:f.cpu})),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Memory"),e.createElement(La,{value:f.memory}))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Elapsed"),x.output.run_time),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Timecode"),x.output.timemark),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Profile"),x.name),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Audio Languages"),x.audio_streams.map((function(e){var t;return null===(t=e.tags)||void 0===t?void 0:t.language})).reduce((function(e,t){return e.includes(t)||e.push(t),e}),[]).join(", "))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Expected completed time"),(b=x.output.est_completed_seconds,k="MM/DD/YYYY HH:mm:ss",(w=la().add(b,"seconds")).isSame(la(),"day")&&(k="HH:mm:ss"),w.format(k))),e.createElement("div",{className:"widget"},e.createElement("strong",null,"ETA"),x.output.time_remaining)),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Files Remaining"),m.unprocessed_files.toLocaleString()),x&&e.createElement("div",{className:"widget"},e.createElement("strong",null,"File Progress"),e.createElement(La,{value:x.output.percent}))),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Library Coverage"),e.createElement(La,{value:Math.round(m.library_coverage)}))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Original Size"),Xa(x.output.size.original)),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Current Size"),Xa(x.output.size.progress)),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Est. Final Size"),e.createElement("em",null,"".concat(Math.round(100*+x.output.size.estimated_final.change.replace("%",""))/100,"%")),Xa(x.output.size.estimated_final))),x&&e.createElement("div",{className:"widget center"},e.createElement("strong",null,"Command"),x.ffmpeg_cmd),e.createElement("div",{className:"flex quarter disks"},!(null!=u&&u.map)&&e.createElement("div",{className:"widget center"},"Loading..."),(null==u?void 0:u.map)&&(null==u?void 0:u.map((function(t){return e.createElement("div",{className:["widget",t.above_threshold&&"danger"].filter((function(e){return e})).join(" ")},e.createElement("strong",null,t.mounted),e.createElement("em",null,[t.used,"of",t.size].join(" ")),e.createElement(La,{value:t.percent_used,className:[t.above_threshold&&"danger"].filter((function(e){return e})).join(" ")}))})))),e.createElement("div",{className:"widget list"},!(null!=o&&o.map)&&e.createElement("em",null,"Loading..."),e.createElement("strong",null,"Next"," ",o.length.toLocaleString()," ","queued files"),e.createElement("div",{className:"overflow"},(null==o?void 0:o.map)&&e.createElement("table",null,e.createElement("tr",null,e.createElement("th",null,"#"),e.createElement("th",null,"Priority"),e.createElement("th",null,"Path"),e.createElement("th",null,"Size"),e.createElement("th",null,"Resolution"),e.createElement("th",null,"Compute Score"),e.createElement("th",null,"Codec"),e.createElement("th",null,"Encode version")),o.map((function(t,n){return e.createElement("tr",null,e.createElement("td",null,n+1),e.createElement("td",null,t.priority),e.createElement("td",null,t.path),e.createElement("td",null,function(e){for(var t=+e,n=0;t>1024;)t/=1024,n+=1;return"".concat(Math.round(100*t)/100).concat(["kb","mb","gb"][n])}(t.size)),e.createElement("td",null,t.resolution),e.createElement("td",null,t.computeScore),e.createElement("td",null,t.codec),e.createElement("td",null,t.encode_version))}))))))};(0,n.s)(document.getElementById("app")).render(e.createElement(Za,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdB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QUFDLEtBQU0sS0FBTSxNQVF5QnhZLElBd0wvQnlZLENBQW9CM25FLEVBQUU4bUMsT0FDM0IsMEJBQUs5bUMsRUFBRTRuRSxZQUNQLDBCQUFLNW5FLEVBQUU2bkUsY0FDUCwwQkFBSzduRSxFQUFFOG5FLE9BQ1AsMEJBQUs5bkUsRUFBRStuRSwwQkM1UFo3ekIsRUFBQUEsRUFBQUEsR0FBV2psQyxTQUFTKzRELGVBQWUsUUFFM0N6K0QsT0FBTyxnQkFBQyxHQUFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvY29yZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL21kNS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9Ib21lL0hvbWUuc2NzcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdi5zY3NzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2RheWpzL2RheWpzLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi90aW1lem9uZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL3V0Yy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvSG9tZS9Ib21lLnNjc3M/N2RjMiIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY29tcG9zZUNsYXNzZXMvY29tcG9zZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3QvZW1vdGlvbi1zaGVldC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvUGFyc2VyLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9jYWNoZS9kaXN0L2Vtb3Rpb24tY2FjaGUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2Vtb3Rpb24taGFzaC5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MvZGlzdC9lbW90aW9uLXVzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9yZXNvbHZlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlZXBtZXJnZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9ib3JkZXJzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvcHVycGxlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvYmx1ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvbGlnaHRCbHVlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvZGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvZGlzdC9lbW90aW9uLXN0eWxlZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcHJvcHNUb0NsYXNzS2V5LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0NsYXNzTmFtZUdlbmVyYXRvci9DbGFzc05hbWVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzL2dlbmVyYXRlVXRpbGl0eUNsYXNzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL0NpcmN1bGFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvZXh0ZW5kU3hQcm9wLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlQm94LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0JveC9Cb3guanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2RheWpzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpbmVhclByb2dyZXNzL2xpbmVhclByb2dyZXNzQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9MaW5lYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeS90eXBvZ3JhcGh5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L1R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvTGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwvTGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwuanN4Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24vTmF2LnNjc3M/NDNlNiIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdi5qc3giLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvSG9tZS9Ib21lLmpzeCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdHJvb3QuQ3J5cHRvSlMgPSBmYWN0b3J5KCk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdC8qZ2xvYmFscyB3aW5kb3csIGdsb2JhbCwgcmVxdWlyZSovXG5cblx0LyoqXG5cdCAqIENyeXB0b0pTIGNvcmUgY29tcG9uZW50cy5cblx0ICovXG5cdHZhciBDcnlwdG9KUyA9IENyeXB0b0pTIHx8IChmdW5jdGlvbiAoTWF0aCwgdW5kZWZpbmVkKSB7XG5cblx0ICAgIHZhciBjcnlwdG87XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHdpbmRvdy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gaW4gd2ViIHdvcmtlciAoQnJvd3Nlcilcblx0ICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBzZWxmLmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIHdvcmtlclxuXHQgICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWxUaGlzLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IGdsb2JhbFRoaXMuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgKGV4cGVyaW1lbnRhbCBJRSAxMSkgY3J5cHRvIGZyb20gd2luZG93IChCcm93c2VyKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm1zQ3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gd2luZG93Lm1zQ3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGZyb20gZ2xvYmFsIChOb2RlSlMpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gZ2xvYmFsLmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBpbXBvcnQgdmlhIHJlcXVpcmUgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cdCAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgfVxuXG5cdCAgICAvKlxuXHQgICAgICogQ3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIHBzZXVkb3JhbmRvbSBudW1iZXIgZ2VuZXJhdG9yXG5cdCAgICAgKlxuXHQgICAgICogQXMgTWF0aC5yYW5kb20oKSBpcyBjcnlwdG9ncmFwaGljYWxseSBub3Qgc2FmZSB0byB1c2Vcblx0ICAgICAqL1xuXHQgICAgdmFyIGNyeXB0b1NlY3VyZVJhbmRvbUludCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoY3J5cHRvKSB7XG5cdCAgICAgICAgICAgIC8vIFVzZSBnZXRSYW5kb21WYWx1ZXMgbWV0aG9kIChCcm93c2VyKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFVzZSByYW5kb21CeXRlcyBtZXRob2QgKE5vZGVKUylcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8ucmFuZG9tQnl0ZXMgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5yYW5kb21CeXRlcyg0KS5yZWFkSW50MzJMRSgpO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOYXRpdmUgY3J5cHRvIG1vZHVsZSBjb3VsZCBub3QgYmUgdXNlZCB0byBnZXQgc2VjdXJlIHJhbmRvbSBudW1iZXIuJyk7XG5cdCAgICB9O1xuXG5cdCAgICAvKlxuXHQgICAgICogTG9jYWwgcG9seWZpbGwgb2YgT2JqZWN0LmNyZWF0ZVxuXG5cdCAgICAgKi9cblx0ICAgIHZhciBjcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZnVuY3Rpb24gRigpIHt9XG5cblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgICAgICB2YXIgc3VidHlwZTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG9iajtcblxuXHQgICAgICAgICAgICBzdWJ0eXBlID0gbmV3IEYoKTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG51bGw7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ3J5cHRvSlMgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQyA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExpYnJhcnkgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYiA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEJhc2Ugb2JqZWN0IGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2UgPSAoZnVuY3Rpb24gKCkge1xuXG5cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3ZlcnJpZGVzIFByb3BlcnRpZXMgdG8gY29weSBpbnRvIHRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJyxcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgICAgICBtZXRob2Q6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGV4dGVuZDogZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3Bhd25cblx0ICAgICAgICAgICAgICAgIHZhciBzdWJ0eXBlID0gY3JlYXRlKHRoaXMpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBBdWdtZW50XG5cdCAgICAgICAgICAgICAgICBpZiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3VidHlwZS5taXhJbihvdmVycmlkZXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZGVmYXVsdCBpbml0aWFsaXplclxuXHQgICAgICAgICAgICAgICAgaWYgKCFzdWJ0eXBlLmhhc093blByb3BlcnR5KCdpbml0JykgfHwgdGhpcy5pbml0ID09PSBzdWJ0eXBlLmluaXQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXplcidzIHByb3RvdHlwZSBpcyB0aGUgc3VidHlwZSBvYmplY3Rcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdC5wcm90b3R5cGUgPSBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBSZWZlcmVuY2Ugc3VwZXJ0eXBlXG5cdCAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlciA9IHRoaXM7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBFeHRlbmRzIHRoaXMgb2JqZWN0IGFuZCBydW5zIHRoZSBpbml0IG1ldGhvZC5cblx0ICAgICAgICAgICAgICogQXJndW1lbnRzIHRvIGNyZWF0ZSgpIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKS5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIGluc3RhbmNlID0gTXlUeXBlLmNyZWF0ZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmV4dGVuZCgpO1xuXHQgICAgICAgICAgICAgICAgaW5zdGFuY2UuaW5pdC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKTtcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBhZGQgc29tZSBsb2dpYyB3aGVuIHlvdXIgb2JqZWN0cyBhcmUgY3JlYXRlZC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICogICAgICAgICAgICAgLy8gLi4uXG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIGludG8gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIFRoZSBwcm9wZXJ0aWVzIHRvIG1peCBpbi5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIE15VHlwZS5taXhJbih7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZSdcblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgbWl4SW46IGZ1bmN0aW9uIChwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gcHJvcGVydGllcykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydGllc1twcm9wZXJ0eU5hbWVdO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSUUgd29uJ3QgY29weSB0b1N0cmluZyB1c2luZyB0aGUgbG9vcCBhYm92ZVxuXHQgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoJ3RvU3RyaW5nJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvU3RyaW5nID0gcHJvcGVydGllcy50b1N0cmluZztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gaW5zdGFuY2UuY2xvbmUoKTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9O1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWdCeXRlcyAoT3B0aW9uYWwpIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhlIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSk7XG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10sIDYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uICh3b3Jkcywgc2lnQnl0ZXMpIHtcblx0ICAgICAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW107XG5cblx0ICAgICAgICAgICAgaWYgKHNpZ0J5dGVzICE9IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHdvcmRzLmxlbmd0aCAqIDQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyB3b3JkIGFycmF5IHRvIGEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIChPcHRpb25hbCkgVGhlIGVuY29kaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogQ3J5cHRvSlMuZW5jLkhleFxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5naWZpZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheSArICcnO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZW5jb2Rlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGVuY29kZXIgfHwgSGV4KS5zdHJpbmdpZnkodGhpcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmNhdGVuYXRlcyBhIHdvcmQgYXJyYXkgdG8gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgd29yZEFycmF5MS5jb25jYXQod29yZEFycmF5Mik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY29uY2F0OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgdGhpc1dvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRXb3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHRoaXNTaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciB0aGF0U2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAgdGhpcy5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbmNhdFxuXHQgICAgICAgICAgICBpZiAodGhpc1NpZ0J5dGVzICUgNCkge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgYnl0ZSBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdEJ5dGUgPSAodGhhdFdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGkpID4+PiAyXSB8PSB0aGF0Qnl0ZSA8PCAoMjQgLSAoKHRoaXNTaWdCeXRlcyArIGkpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIHdvcmQgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoYXRTaWdCeXRlczsgaiArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBqKSA+Pj4gMl0gPSB0aGF0V29yZHNbaiA+Pj4gMl07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5zaWdCeXRlcyArPSB0aGF0U2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZW1vdmVzIGluc2lnbmlmaWNhbnQgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgd29yZEFycmF5LmNsYW1wKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xhbXA6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXBcblx0ICAgICAgICAgICAgd29yZHNbc2lnQnl0ZXMgPj4+IDJdICY9IDB4ZmZmZmZmZmYgPDwgKDMyIC0gKHNpZ0J5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgd29yZHMubGVuZ3RoID0gTWF0aC5jZWlsKHNpZ0J5dGVzIC8gNCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB3b3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSB3b3JkIGFycmF5IGZpbGxlZCB3aXRoIHJhbmRvbSBieXRlcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSByYW5kb20gd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDE2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByYW5kb206IGZ1bmN0aW9uIChuQnl0ZXMpIHtcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgd29yZHMucHVzaChjcnlwdG9TZWN1cmVSYW5kb21JbnQoKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBuQnl0ZXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEVuY29kZXIgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYyA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEhleCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEhleCA9IENfZW5jLkhleCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgaGV4Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlID4+PiA0KS50b1N0cmluZygxNikpO1xuXHQgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSAmIDB4MGYpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gaGV4Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaGV4U3RyIFRoZSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2UoaGV4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGhleFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGV4U3RyTGVuZ3RoID0gaGV4U3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhleFN0ckxlbmd0aDsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAzXSB8PSBwYXJzZUludChoZXhTdHIuc3Vic3RyKGksIDIpLCAxNikgPDwgKDI0IC0gKGkgJSA4KSAqIDQpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgaGV4U3RyTGVuZ3RoIC8gMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBMYXRpbjEgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBMYXRpbjEgPSBDX2VuYy5MYXRpbjEgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbGF0aW4xU3RyaW5nID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMUNoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgbGF0aW4xQ2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJpdGUpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBsYXRpbjFDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBMYXRpbjEgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXRpbjFTdHIgVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkxhdGluMS5wYXJzZShsYXRpbjFTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAobGF0aW4xU3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBsYXRpbjFTdHJMZW5ndGggPSBsYXRpbjFTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF0aW4xU3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDJdIHw9IChsYXRpbjFTdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYpIDw8ICgyNCAtIChpICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGxhdGluMVN0ckxlbmd0aCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtOCBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGY4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLlV0Zjguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShMYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSkpKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgVVRGLTggZGF0YScpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgVVRGLTggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGY4U3RyIFRoZSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UodXRmOFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGY4U3RyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBMYXRpbjEucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHV0ZjhTdHIpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBidWZmZXJlZCBibG9jayBhbGdvcml0aG0gdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogVGhlIHByb3BlcnR5IGJsb2NrU2l6ZSBtdXN0IGJlIGltcGxlbWVudGVkIGluIGEgY29uY3JldGUgc3VidHlwZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX21pbkJ1ZmZlclNpemUgVGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBzaG91bGQgYmUga2VwdCB1bnByb2Nlc3NlZCBpbiB0aGUgYnVmZmVyLiBEZWZhdWx0OiAwXG5cdCAgICAgKi9cblx0ICAgIHZhciBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQ19saWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBibG9jayBhbGdvcml0aG0ncyBkYXRhIGJ1ZmZlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgV29yZEFycmF5LmluaXQoKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyA9IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFkZHMgbmV3IGRhdGEgdG8gdGhpcyBibG9jayBhbGdvcml0aG0ncyBidWZmZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYXBwZW5kLiBTdHJpbmdzIGFyZSBjb252ZXJ0ZWQgdG8gYSBXb3JkQXJyYXkgdXNpbmcgVVRGLTguXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCgnZGF0YScpO1xuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfYXBwZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBXb3JkQXJyYXksIGVsc2UgYXNzdW1lIFdvcmRBcnJheSBhbHJlYWR5XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAgZGF0YSA9IFV0ZjgucGFyc2UoZGF0YSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YS5jb25jYXQoZGF0YSk7XG5cdCAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgKz0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUHJvY2Vzc2VzIGF2YWlsYWJsZSBkYXRhIGJsb2Nrcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgX2RvUHJvY2Vzc0Jsb2NrKG9mZnNldCksIHdoaWNoIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBkb0ZsdXNoIFdoZXRoZXIgYWxsIGJsb2NrcyBhbmQgcGFydGlhbCBibG9ja3Mgc2hvdWxkIGJlIHByb2Nlc3NlZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHByb2Nlc3NlZCBkYXRhLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX3Byb2Nlc3M6IGZ1bmN0aW9uIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9jZXNzZWRXb3JkcztcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZTtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBibG9ja3MgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CbG9ja3NSZWFkeSA9IGRhdGFTaWdCeXRlcyAvIGJsb2NrU2l6ZUJ5dGVzO1xuXHQgICAgICAgICAgICBpZiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgdXAgdG8gaW5jbHVkZSBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5jZWlsKG5CbG9ja3NSZWFkeSk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCBkb3duIHRvIGluY2x1ZGUgb25seSBmdWxsIGJsb2Nrcyxcblx0ICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBtdXN0IHJlbWFpbiBpbiB0aGUgYnVmZmVyXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLm1heCgobkJsb2Nrc1JlYWR5IHwgMCkgLSB0aGlzLl9taW5CdWZmZXJTaXplLCAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50IHdvcmRzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuV29yZHNSZWFkeSA9IG5CbG9ja3NSZWFkeSAqIGJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBieXRlcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJ5dGVzUmVhZHkgPSBNYXRoLm1pbihuV29yZHNSZWFkeSAqIDQsIGRhdGFTaWdCeXRlcyk7XG5cblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBibG9ja3Ncblx0ICAgICAgICAgICAgaWYgKG5Xb3Jkc1JlYWR5KSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBuV29yZHNSZWFkeTsgb2Zmc2V0ICs9IGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtYWxnb3JpdGhtIGxvZ2ljXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSZW1vdmUgcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgICAgICBwcm9jZXNzZWRXb3JkcyA9IGRhdGFXb3Jkcy5zcGxpY2UoMCwgbldvcmRzUmVhZHkpO1xuXHQgICAgICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuQnl0ZXNSZWFkeTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdChwcm9jZXNzZWRXb3JkcywgbkJ5dGVzUmVhZHkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5fZGF0YSA9IHRoaXMuX2RhdGEuY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9taW5CdWZmZXJTaXplOiAwXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBoYXNoZXIgdGVtcGxhdGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGhhc2hlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMTYgKDUxMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEJhc2UuZXh0ZW5kKCksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgaGFzaGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGhhc2ggY29tcHV0YXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoYXNoZXIgPSBDcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xuXHQgICAgICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGhhc2hlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogVXBkYXRlcyB0aGlzIGhhc2hlciB3aXRoIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtIYXNoZXJ9IFRoaXMgaGFzaGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIudXBkYXRlKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSk7XG5cblx0ICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBoYXNoXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEZpbmFsaXplcyB0aGUgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIChPcHRpb25hbCkgQSBmaW5hbCBtZXNzYWdlIHVwZGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgIC8vIEZpbmFsIG1lc3NhZ2UgdXBkYXRlXG5cdCAgICAgICAgICAgIGlmIChtZXNzYWdlVXBkYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2RvRmluYWxpemUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA1MTIvMzIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gYSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIGNyZWF0ZSBhIGhlbHBlciBmb3IuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwgY2ZnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGhhc2hlci5pbml0KGNmZykuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlIGluIHRoaXMgSE1BQyBoZWxwZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgSG1hY1NIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIbWFjSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSwga2V5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENfYWxnby5ITUFDLmluaXQoaGFzaGVyLCBrZXkpLmZpbmFsaXplKG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFsZ29yaXRobSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ28gPSB7fTtcblxuXHQgICAgcmV0dXJuIEM7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBUID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTUQ1IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzZcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMSAgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMiAgPSBNW29mZnNldCArIDJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNCAgPSBNW29mZnNldCArIDRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNSAgPSBNW29mZnNldCArIDVdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNyAgPSBNW29mZnNldCArIDddO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOCAgPSBNW29mZnNldCArIDhdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTAgPSBNW29mZnNldCArIDEwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTMgPSBNW29mZnNldCArIDEzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEsICAxMiwgVFsxXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTcsIFRbMl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA3LCAgVFs0XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAgMTIsIFRbNV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsICAyMiwgVFs3XSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNywgIFRbOF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNywgVFsxMF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEzLCAxMiwgVFsxM10pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE3LCBUWzE0XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTtcblxuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDUsICBUWzE2XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNCwgVFsxOF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMCwgIDIwLCBUWzE5XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEwLCA5LCAgVFsyMV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE0LCBUWzIyXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA1LCAgVFsyNF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTQsIDksICBUWzI1XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzgsICAyMCwgVFsyN10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDUsICBUWzI4XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNCwgVFszMF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSk7XG5cblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pO1xuXG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsICAxMCwgVFs0OV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA2LCAgVFs1Ml0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMywgIDEwLCBUWzUzXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEsICAyMSwgVFs1NV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDYsICBUWzU2XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNSwgVFs1OF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTMsIDIxLCBUWzU5XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzExLCAxMCwgVFs2MV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE1LCBUWzYyXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTtcblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5NRDU7XG5cbn0pKTsiLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9ub3JtYWxpemUvNy4wLjAvbm9ybWFsaXplLm1pbi5jc3MpO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5LGh0bWx7Zm9udC1zaXplOjE2cHg7Zm9udC1mYW1pbHk6XFxcIkxhdG9cXFwiLHNhbnMtc2VyaWY7YmFja2dyb3VuZC1jb2xvcjojMGYxNDE5O2NvbG9yOiNmMGYzZjZ9ZmlndXJlLGltZ3t3aWR0aDoxMDAlO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjAgYXV0b31we2xpbmUtaGVpZ2h0OjEuMmVtfS5jYXB0aW9uLGZpZ2NhcHRpb257Zm9udC1zaXplOi45cmVtO2NvbG9yOiNmMGYzZjY7cGFkZGluZzo1cHggMH0uY29udGFpbmVye3dpZHRoOjEwMCU7bWF4LXdpZHRoOjgwMHB4O3BhZGRpbmc6MTBweDttYXJnaW46MCBhdXRvfS5jb250YWluZXIuaW1hZ2V7bWF4LXdpZHRoOjgwMHB4O3BhZGRpbmc6MH0uY29udGFpbmVyLmltYWdlIC5jYXB0aW9uLC5jb250YWluZXIuaW1hZ2UgZmlnY2FwdGlvbntwYWRkaW5nOjVweCAxMHB4fS5kZXNrdG9we2Rpc3BsYXk6bm9uZX0ubW9iaWxle2Rpc3BsYXk6YmxvY2t9I2FwcHtwYWRkaW5nOjEwcHh9QG1lZGlhKG1pbi13aWR0aDogNjgxcHgpeyNhcHB7cGFkZGluZzowfX0ub3ZlcmFsbD5kaXZ7bWFyZ2luLWJvdHRvbTotOHB4fS5vdmVyYWxsPmRpdjpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOi0yNSV9Lm92ZXJsaW5le21heC13aWR0aDoyMCU7aGVpZ2h0OjFweDtib3JkZXItYm90dG9tOjVweCBzb2xpZCAjMzc5MmNiO21hcmdpbjoxMHB4IDAgLTEwcHggMH0uc2NyZWVue3dpZHRoOjEwMCU7bWluLWhlaWdodDoxMDB2aH0uc2NyZWVuLnBhZGR7cGFkZGluZy10b3A6MjUlfS52aWRlb3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO2hlaWdodDowO3BhZGRpbmctYm90dG9tOjU2LjI1JX0udmlkZW8udmVydGljYWx7cGFkZGluZy1ib3R0b206MTc3Ljc3Nzc3Nzc3NzglfS52aWRlbyBpZnJhbWUsLnZpZGVvIHZpZGVve3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dG9wOjA7bGVmdDowO2JvcmRlcjowfS53aWRnZXR7YmFja2dyb3VuZC1jb2xvcjojMWMyMTI4O2NvbG9yOiNmMGYzZjY7Ym9yZGVyLXJhZGl1czo1cHg7cGFkZGluZzoxMHB4O21heC13aWR0aDo4MDBweDttYXJnaW4tYm90dG9tOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LndpZGdldCAub3ZlcmZsb3d7b3ZlcmZsb3cteDphdXRvfS53aWRnZXQuY2VudGVye21hcmdpbjowIGF1dG8gMTBweH0ud2lkZ2V0Lmxpc3Qgb2wsLndpZGdldC5saXN0IHVse3RleHQtYWxpZ246bGVmdH0ud2lkZ2V0Lmxpc3Qgb2wgbGksLndpZGdldC5saXN0IHVsIGxpe3BhZGRpbmctbGVmdDoxMHB4fS53aWRnZXQgc3Ryb25nLC53aWRnZXQgZW17ZGlzcGxheTpibG9ja30ud2lkZ2V0IGVte2ZvbnQtc2l6ZTouOXJlbX0ud2lkZ2V0IHRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZX0ud2lkZ2V0IHRhYmxlIHRye2JhY2tncm91bmQtY29sb3I6IzFjMjEyOH0ud2lkZ2V0IHRhYmxlIHRyIHRke3BhZGRpbmc6NXB4fS53aWRnZXQgdGFibGUgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6IzI2MmIzM30uZGlza3MgLndpZGdldCAuZGFuZ2VyPip7YmFja2dyb3VuZC1jb2xvcjpyZWR9QG1lZGlhKG1pbi13aWR0aDogNjgxcHgpey5kZXNrdG9we2Rpc3BsYXk6YmxvY2t9Lm1vYmlsZXtkaXNwbGF5Om5vbmV9LmZsZXh7ZGlzcGxheTpmbGV4O3RleHQtYWxpZ246Y2VudGVyO2ZsZXgtd3JhcDp3cmFwO2dhcDoxMHB4O21heC13aWR0aDo4MDBweDttYXJnaW46MCBhdXRvfS5mbGV4PmRpdntmbGV4OjF9LmZsZXgucXVhcnRlcj5kaXZ7ZmxleC1iYXNpczoyNSV9LmNpcmNsZXttYXgtd2lkdGg6NDBweDttYXJnaW46MCBhdXRvfX1AbWVkaWEobWluLXdpZHRoOiA4MDVweCl7LmNvbnRhaW5lcntwYWRkaW5nOjB9fUBtZWRpYShtaW4td2lkdGg6IDEyMDVweCl7LmNvbnRhaW5lci5pbWFnZSAuY2FwdGlvbiwuY29udGFpbmVyLmltYWdlIGZpZ2NhcHRpb257cGFkZGluZzo1cHggMH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvSG9tZS9Ib21lLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBK0NBLEVBQ0UscUJBQUEsQ0FHRixVQUdFLGNBQUEsQ0FDQSw2QkFBQSxDQUNBLHdCQXRDd0IsQ0F1Q3hCLGFBbEN3QixDQXFDMUIsV0FHRSxVQUFBLENBQ0EsYUFBQSxDQUNBLGFBQUEsQ0FHRixFQUNFLGlCQUFBLENBR0Ysb0JBRUUsZUFBQSxDQUNBLGFBcER3QixDQXFEeEIsYUFBQSxDQUtGLFdBQ0UsVUFBQSxDQUNBLGVBQUEsQ0FDQSxZQUFBLENBQ0EsYUFBQSxDQUdGLGlCQUNFLGVBQUEsQ0FDQSxTQUFBLENBR0Ysc0RBRUUsZ0JBQUEsQ0FHRixTQUNFLFlBQUEsQ0FHRixRQUNFLGFBQUEsQ0FHRixLQUNFLFlBQUEsQ0FFQSx5QkFIRixLQUlJLFNBQUEsQ0FBQSxDQUtGLGFBQ0Usa0JBQUEsQ0FFQSx5QkFDRSxlQUFBLENBS04sVUFDRSxhQUFBLENBQ0EsVUFBQSxDQUNBLCtCQUFBLENBQ0EscUJBQUEsQ0FJRixRQUNFLFVBQUEsQ0FDQSxnQkFBQSxDQUdGLGFBQ0UsZUFBQSxDQUdGLE9BQ0UsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsUUFBQSxDQUNBLHFCQUFBLENBR0YsZ0JBQ0UsOEJBQUEsQ0FHRiwyQkFFRSxpQkFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsS0FBQSxDQUNBLE1BQUEsQ0FDQSxRQUFBLENBR0YsUUFDRSx3QkFoSndCLENBaUp4QixhQTdJd0IsQ0E4SXhCLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGVBQUEsQ0FDQSxrQkFBQSxDQUNBLGlCQUFBLENBRUEsa0JBQ0UsZUFBQSxDQUdGLGVBQ0Usa0JBQUEsQ0FJQSxnQ0FFRSxlQUFBLENBQ0Esc0NBQ0UsaUJBQUEsQ0FLTiwwQkFFRSxhQUFBLENBR0YsV0FDRSxlQUFBLENBR0YsY0FDRSx3QkFBQSxDQUNBLGlCQUlFLHdCQXpMb0IsQ0FzTHBCLG9CQUNFLFdBQUEsQ0FHRixpQ0FDRSx3QkExTGtCLENBbU1wQix5QkFDRSxvQkFBQSxDQVFSLHlCQUdFLFNBQ0UsYUFBQSxDQUdGLFFBQ0UsWUFBQSxDQUdGLE1BQ0UsWUFBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUNBLFFBQUEsQ0FDQSxlQUFBLENBQ0EsYUFBQSxDQUVBLFVBQ0UsTUFBQSxDQUlBLGtCQUNFLGNBQUEsQ0FLTixRQUNFLGNBQUEsQ0FDQSxhQUFBLENBQUEsQ0FhSix5QkFHRSxXQUNFLFNBQUEsQ0FBQSxDQU1KLDBCQUdFLHNEQUVFLGFBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKlxcblRoaXMgaXMgYSBnb29kIGxheW91dCBmb3IgYSBtb2JpbGUtZmlyc3QgQ1NTIHRlbXBsYXRlLlxcbkZvbGxvd2luZyB0aGlzIGZsb3cgd2lsbCBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9mIHN0eWxlcyB5b3UgbmVlZCB0byB3cml0ZSBhbmQgd2lsbCBlbnN1cmUgeW91IGFyZSB0aGlua2luZywgZGVzaWduaW5nIGFuZCBkZXZlbG9waW5nIG1vYmlsZS1maXJzdC5cXG5Nb3N0IG9mIHlvdXIgc3R5bGVzIGdldCB3cml0dGVuIGxpa2Ugc3RhbmRhcmQgQ1NTLCBidXQgZm9yIHlvdXIgbW9iaWxlIHByZXNlbnRhdGlvbi4gR2VuZXJhbGx5IHNwZWFraW5nLCBhIGdvb2QgbW9iaWxlIHByZXNlbnRpb24gd2lsbCBzdHJldGNoIG91dCBuaWNlbHkgZm9yIGxhcmdlciBzY3JlZW5zLlxcblxcblNvbWV0aW1lcywgd2hlbiB3ZSBzdHJldGNoIG91dCB0byBsYXJnZXIgc2NyZWVucywgd2UgbmVlZCB0byBtYWtlIG1pbm9yIHR3ZWFrcyBmb3IgdGhlIGxhcmdlciBkZXZpY2VzIC0tIHlvdSBjYW4gbWFrZSB0aGVzZSB0d2Vha3MgaW4gdGhlIHRhYmxldCBtZWRpYSBxdWVyeSwgb3IgaWYgdGhlIGlzc3VlIGV4aXN0cyBvbiBkZXNrdG9wIG9ubHksIHRoZSBkZXNrdG9wIG1lZGlhIHF1ZXJ5LlxcbllvdSB3aWxsIGZpbmQgdGhpcyBpcyBmYXIgZWFzaWVyIHRoYW4gdGhlIG9wcG9zaXRlIHRhc2sgb2YgdXNpbmcgQ1NTIHRvIGNyYW0geW91ciBkZXNrdG9wIGV4cGVyaWVuY2UgaW50byBhIG1vYmlsZSBkZXZpY2UuXFxuKi9cXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuIExPQURTIElOIEEgTklDRSBSRVNFVCBUTyBFTlNVUkUgQUxMIEJST1dTRVJTIEhBVkUgVEhFIFNBTUUgQkFTRSBTVFlMRVNcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuQGltcG9ydCB1cmwoJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL25vcm1hbGl6ZS83LjAuMC9ub3JtYWxpemUubWluLmNzcycpO1xcblxcbi8qIFZBUklBQkxFUyAqL1xcblxcbi8vIPCfjJggRGFyayBNb2RlIFNDU1MgVmFyaWFibGVzIChMaWdodGVyIFN1cmZhY2VzKVxcblxcbi8vIEJhc2UgQmFja2dyb3VuZHNcXG4kY29sb3ItYmFja2dyb3VuZDogICAgICAgICMwRjE0MTk7XFxuJGNvbG9yLXN1cmZhY2U6ICAgICAgICAgICAjMUMyMTI4O1xcbiRjb2xvci1zdXJmYWNlLWVsZXZhdGVkOiAgIzI2MkIzMztcXG5cXG4vLyBUZXh0XFxuJGNvbG9yLXRleHQtcHJpbWFyeTogICAgICAjRjBGM0Y2O1xcbiRjb2xvci10ZXh0LXNlY29uZGFyeTogICAgI0IxQjdDMDtcXG4kY29sb3ItdGV4dC10ZXJ0aWFyeTogICAgICM4RDk0QTA7XFxuXFxuLy8gQWNjZW50c1xcbiRjb2xvci1hY2NlbnQtcHJpbWFyeTogICAgIzJEN0ZGOTtcXG4kY29sb3ItYWNjZW50LXN1Y2Nlc3M6ICAgICMyOEMzN0I7XFxuJGNvbG9yLWFjY2VudC13YXJuaW5nOiAgICAjRkZCNzJDO1xcbiRjb2xvci1hY2NlbnQtZXJyb3I6ICAgICAgI0Y4NTc1NztcXG5cXG4vLyBVSSBFbGVtZW50c1xcbiRjb2xvci1ib3JkZXI6ICAgICAgICAgICAgIzMyMzg0MztcXG4kY29sb3ItZm9jdXMtcmluZzogICAgICAgICMzQTk5RkY7XFxuXFxuLy8gRXh0cmFzXFxuJGNvbG9yLW92ZXJsYXk6ICAgICAgICAgICByZ2JhKDE1LCAyMCwgMjUsIDAuODUpO1xcbiRjb2xvci1zY3JvbGxiYXItdGh1bWI6ICAgIzJDMzEzQTtcXG4kY29sb3Itc2Nyb2xsYmFyLWhvdmVyOiAgICMzQjQyNEU7XFxuXFxuXFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBNT0JJTEUvQkFTRSBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4vKiogU0VUIEJPUkRFUiBCT1ggRVZFUllXSEVSRSAqL1xcbioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLyoqIEFQUExZIEJBU0UgVEFHIFNUWUxFUyAqL1xcbmJvZHksXFxuaHRtbCB7XFxuICAvKiBTZXRzIGRlZmF1bHQgZm9udC1zaXplIHRvIDE2cHgsIGVuc3VyaW5nIDFlbSA9IDE2cHg7ICovXFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LWZhbWlseTogJ0xhdG8nLCBzYW5zLXNlcmlmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWJhY2tncm91bmQ7XFxuICBjb2xvcjogJGNvbG9yLXRleHQtcHJpbWFyeTtcXG59XFxuLyoqIFJFU1BPTlNJVkUgSU1BR0VTICovXFxuZmlndXJlLFxcbmltZyB7XFxuICAvKiBTZXRzIGltYWdlIHdpZHRoIHRvIG1hdGNoIHBhcmVudCAqL1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG5wIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjJlbTtcXG59XFxuLyoqIENhcHRpb24gc3R5bGVzICovXFxuLmNhcHRpb24sXFxuZmlnY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDAuOXJlbTtcXG4gIGNvbG9yOiAkY29sb3ItdGV4dC1wcmltYXJ5O1xcbiAgcGFkZGluZzogNXB4IDA7XFxufVxcbi8qKiBCQVNFIENMQVNTRVMgKi9cXG4vKiogQ29udGFpbmVyIHN0eWxlcyB0byBrZWVwIGNvbnRlbnQgZnJvbSBiZWNvbWluZyB0b28gd2lkZSBvciBjb21pbmcgdG9vIGNsb3NlIHRvXFxuKiBtb2JpbGUgZWRnZSAqL1xcbi5jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4vKiogSW1hZ2VzIGFyZSBhbGxvd2VkIHRvIGJlIGEgbGl0dGxlIHdpZGVyIHdoZW4gYnJva2VuIG91dCBpbnRvIHRoZWlyIG93biBjb250YWluZXIgKi9cXG4uY29udGFpbmVyLmltYWdlIHtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uY29udGFpbmVyLmltYWdlIC5jYXB0aW9uLFxcbi5jb250YWluZXIuaW1hZ2UgZmlnY2FwdGlvbiB7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG59XFxuXFxuLmRlc2t0b3Age1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1vYmlsZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuI2FwcCB7XFxuICBwYWRkaW5nOiAxMHB4O1xcblxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDY4MXB4KSB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxufVxcblxcbi5vdmVyYWxsIHtcXG4gID4gZGl2IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogLThweDtcXG5cXG4gICAgJjpmaXJzdC1jaGlsZCB7XFxuICAgICAgbWFyZ2luLXRvcDogLTI1JTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4ub3ZlcmxpbmUge1xcbiAgbWF4LXdpZHRoOiAyMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCAjMzc5MmNiO1xcbiAgbWFyZ2luOiAxMHB4IDAgLTEwcHggMDtcXG59XFxuXFxuLyoqIFNjcmVlbnMgYXJlIHRoZSBzaXplIG9mIGF0IGxlYXN0IG9uZSBkZXZpY2Ugc2NyZWVuICovXFxuLnNjcmVlbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbn1cXG4vKiogZm9yIHZlcnRpY2FsIGNlbnRlcmluZyAqL1xcbi5zY3JlZW4ucGFkZCB7XFxuICBwYWRkaW5nLXRvcDogMjUlO1xcbn1cXG4vKiogdmlkZW8gc2V0dXAgKi9cXG4udmlkZW8ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogY2FsYyg5IC8gMTYgKiAxMDAlKTtcXG59XFxuXFxuLnZpZGVvLnZlcnRpY2FsIHtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDE2IC8gOSAqIDEwMCUpO1xcbn1cXG5cXG4udmlkZW8gaWZyYW1lLFxcbi52aWRlbyB2aWRlbyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi53aWRnZXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLXN1cmZhY2U7XFxuICBjb2xvcjogJGNvbG9yLXRleHQtcHJpbWFyeTtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXG4gIC5vdmVyZmxvdyB7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICB9XFxuXFxuICAmLmNlbnRlciB7XFxuICAgIG1hcmdpbjogMCBhdXRvIDEwcHg7XFxuICB9XFxuXFxuICAmLmxpc3Qge1xcbiAgICBvbCxcXG4gICAgdWwge1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgbGkge1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgc3Ryb25nLFxcbiAgZW0ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIGVtIHtcXG4gICAgZm9udC1zaXplOiAwLjlyZW07XFxuICB9XFxuXFxuICB0YWJsZSB7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICAgIHRyIHtcXG4gICAgICB0ZCB7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgfVxcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1zdXJmYWNlO1xcbiAgICAgICY6bnRoLWNoaWxkKGV2ZW4pIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1zdXJmYWNlLWVsZXZhdGVkO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4uZGlza3Mge1xcbiAgLndpZGdldCB7XFxuICAgIC5kYW5nZXIge1xcbiAgICAgID4gKiB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjAwO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuICBZT1VSIFRBQkxFVC9ERVNLVE9QIFNUWUxFUyBHTyBIRVJFXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbkBtZWRpYSAobWluLXdpZHRoOiA2ODFweCkge1xcbiAgLyogQW55IGFkanVzdG1lbnRzIGZvciB0YWJsZXRzIGFuZCBsYXJnZXIgZ28gaGVyZS5cXG4gICAgTm90ZSB0aGVzZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvIGFueXRoaW5nIDY4MXB4IG9yIGxhcmdlciAtLSBzbyB0YWJsZXQgQU5EIGRlc2t0b3AgKi9cXG4gIC5kZXNrdG9wIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICB9XFxuXFxuICAubW9iaWxlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG5cXG4gIC5mbGV4IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICAgIGdhcDogMTBweDtcXG4gICAgbWF4LXdpZHRoOiA4MDBweDtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuXFxuICAgID4gZGl2IHtcXG4gICAgICBmbGV4OiAxO1xcbiAgICB9XFxuXFxuICAgICYucXVhcnRlciB7XFxuICAgICAgPiBkaXYge1xcbiAgICAgICAgZmxleC1iYXNpczogMjUlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgLmNpcmNsZSB7XFxuICAgIG1heC13aWR0aDogNDBweDtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICB9XFxufVxcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXG4gIFlPVVIgREVTS1RPUC1PTkxZIFNUWUxFUyBHTyBIRVJFXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbkBtZWRpYSAobWluLXdpZHRoOiA3NjlweCkge1xcbiAgLyogQW55IGFkanVzdG1lbnRzIGZvciBkZXNrdG9wIGFuZCBsYXJnZXIgZ28gaGVyZS5cXG4gICAgTm90ZSB0aGVzZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvIGFueXRoaW5nIDc2OXB4IG9yIGxhcmdlciAtLSBzbyBkZXNrdG9wICovXFxufVxcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXG4gIFlPVVIgTUVESVVNLURFU0tUT1AtT05MWSBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5AbWVkaWEgKG1pbi13aWR0aDogODA1cHgpIHtcXG4gIC8qIEFueSBhZGp1c3RtZW50cyBmb3IgZGVza3RvcCBhbmQgbGFyZ2VyIGdvIGhlcmUuXFxuICAgIE5vdGUgdGhlc2Ugc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0byBhbnl0aGluZyA3NjlweCBvciBsYXJnZXIgLS0gc28gZGVza3RvcCAqL1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxufVxcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXG4gIFlPVVIgTEFSR0UgREVTS1RPUC1PTkxZIFNUWUxFUyBHTyBIRVJFXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbkBtZWRpYSAobWluLXdpZHRoOiAxMjA1cHgpIHtcXG4gIC8qIEFueSBhZGp1c3RtZW50cyBmb3IgZGVza3RvcCBhbmQgbGFyZ2VyIGdvIGhlcmUuXFxuICAgIE5vdGUgdGhlc2Ugc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0byBhbnl0aGluZyA3NjlweCBvciBsYXJnZXIgLS0gc28gZGVza3RvcCAqL1xcbiAgLmNvbnRhaW5lci5pbWFnZSAuY2FwdGlvbixcXG4gIC5jb250YWluZXIuaW1hZ2UgZmlnY2FwdGlvbiB7XFxuICAgIHBhZGRpbmc6IDVweCAwO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJuYXZ7b3ZlcmZsb3cteTphdXRvOy13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOnRvdWNoO21heC1oZWlnaHQ6MjB2aDttYXJnaW46MCBhdXRvIDIycHh9bmF2IHVse21hcmdpbjowO3BhZGRpbmc6MH1uYXYgdWwgbGl7bGlzdC1zdHlsZTpub25lO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxMHB4O21hcmdpbjoxMHB4fW5hdiB1bCBsaSBidXR0b257YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JvcmRlcjowO2JhY2tncm91bmQ6I2ZmZjttYXJnaW4tcmlnaHQ6MTBweDtjdXJzb3I6cG9pbnRlcjt3aWR0aDoxMDAlO3BhZGRpbmc6MjJweDtjb2xvcjojMDAwfW5hdiB1bCBsaSBidXR0b24uYWN0aXZle2JvcmRlci1ib3R0b206M3B4IHNvbGlkICMwMDB9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9OYXYuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxJQUNFLGVBQUEsQ0FFQSxnQ0FBQSxDQUNBLGVBQUEsQ0FDQSxrQkFBQSxDQUVBLE9BQ0UsUUFBQSxDQUNBLFNBQUEsQ0FFQSxVQUNFLGVBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQUNBLFdBQUEsQ0FFQSxpQkFDRSx3QkFBQSxDQUNBLFFBQUEsQ0FDQSxlQUFBLENBQ0EsaUJBQUEsQ0FDQSxjQUFBLENBQ0EsVUFBQSxDQUNBLFlBQUEsQ0FDQSxVQUFBLENBRUEsd0JBQ0UsNEJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wibmF2IHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICAvKiBtb21lbnR1bSBzY3JvbGxpbmcgKi9cXG4gIC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcXG4gIG1heC1oZWlnaHQ6IDIwdmg7XFxuICBtYXJnaW46IDAgYXV0byAyMnB4O1xcblxcbiAgdWwge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuXFxuICAgIGxpIHtcXG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgbWFyZ2luOiAxMHB4O1xcblxcbiAgICAgIGJ1dHRvbiB7XFxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICAgIGJvcmRlcjogMDtcXG4gICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIHBhZGRpbmc6IDIycHg7XFxuICAgICAgICBjb2xvcjogIzAwMDtcXG5cXG4gICAgICAgICYuYWN0aXZlIHtcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogM3B4IHNvbGlkICMwMDA7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD0xZTMsZT02ZTQsbj0zNmU1LHI9XCJtaWxsaXNlY29uZFwiLGk9XCJzZWNvbmRcIixzPVwibWludXRlXCIsdT1cImhvdXJcIixhPVwiZGF5XCIsbz1cIndlZWtcIixjPVwibW9udGhcIixmPVwicXVhcnRlclwiLGg9XCJ5ZWFyXCIsZD1cImRhdGVcIixsPVwiSW52YWxpZCBEYXRlXCIsJD0vXihcXGR7NH0pWy0vXT8oXFxkezEsMn0pP1stL10/KFxcZHswLDJ9KVtUdFxcc10qKFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Oj8oXFxkezEsMn0pP1suOl0/KFxcZCspPyQvLHk9L1xcWyhbXlxcXV0rKV18WXsxLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18YXxBfG17MSwyfXxzezEsMn18WnsxLDJ9fFNTUy9nLE09e25hbWU6XCJlblwiLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksbW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxvcmRpbmFsOmZ1bmN0aW9uKHQpe3ZhciBlPVtcInRoXCIsXCJzdFwiLFwibmRcIixcInJkXCJdLG49dCUxMDA7cmV0dXJuXCJbXCIrdCsoZVsobi0yMCklMTBdfHxlW25dfHxlWzBdKStcIl1cIn19LG09ZnVuY3Rpb24odCxlLG4pe3ZhciByPVN0cmluZyh0KTtyZXR1cm4hcnx8ci5sZW5ndGg+PWU/dDpcIlwiK0FycmF5KGUrMS1yLmxlbmd0aCkuam9pbihuKSt0fSx2PXtzOm0sejpmdW5jdGlvbih0KXt2YXIgZT0tdC51dGNPZmZzZXQoKSxuPU1hdGguYWJzKGUpLHI9TWF0aC5mbG9vcihuLzYwKSxpPW4lNjA7cmV0dXJuKGU8PTA/XCIrXCI6XCItXCIpK20ociwyLFwiMFwiKStcIjpcIittKGksMixcIjBcIil9LG06ZnVuY3Rpb24gdChlLG4pe2lmKGUuZGF0ZSgpPG4uZGF0ZSgpKXJldHVybi10KG4sZSk7dmFyIHI9MTIqKG4ueWVhcigpLWUueWVhcigpKSsobi5tb250aCgpLWUubW9udGgoKSksaT1lLmNsb25lKCkuYWRkKHIsYykscz1uLWk8MCx1PWUuY2xvbmUoKS5hZGQocisocz8tMToxKSxjKTtyZXR1cm4rKC0ocisobi1pKS8ocz9pLXU6dS1pKSl8fDApfSxhOmZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpfHwwOk1hdGguZmxvb3IodCl9LHA6ZnVuY3Rpb24odCl7cmV0dXJue006Yyx5OmgsdzpvLGQ6YSxEOmQsaDp1LG06cyxzOmksbXM6cixROmZ9W3RdfHxTdHJpbmcodHx8XCJcIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9zJC8sXCJcIil9LHU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXR9fSxnPVwiZW5cIixEPXt9O0RbZ109TTt2YXIgcD1cIiRpc0RheWpzT2JqZWN0XCIsUz1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIF98fCEoIXR8fCF0W3BdKX0sdz1mdW5jdGlvbiB0KGUsbixyKXt2YXIgaTtpZighZSlyZXR1cm4gZztpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dmFyIHM9ZS50b0xvd2VyQ2FzZSgpO0Rbc10mJihpPXMpLG4mJihEW3NdPW4saT1zKTt2YXIgdT1lLnNwbGl0KFwiLVwiKTtpZighaSYmdS5sZW5ndGg+MSlyZXR1cm4gdCh1WzBdKX1lbHNle3ZhciBhPWUubmFtZTtEW2FdPWUsaT1hfXJldHVybiFyJiZpJiYoZz1pKSxpfHwhciYmZ30sTz1mdW5jdGlvbih0LGUpe2lmKFModCkpcmV0dXJuIHQuY2xvbmUoKTt2YXIgbj1cIm9iamVjdFwiPT10eXBlb2YgZT9lOnt9O3JldHVybiBuLmRhdGU9dCxuLmFyZ3M9YXJndW1lbnRzLG5ldyBfKG4pfSxiPXY7Yi5sPXcsYi5pPVMsYi53PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCx7bG9jYWxlOmUuJEwsdXRjOmUuJHUseDplLiR4LCRvZmZzZXQ6ZS4kb2Zmc2V0fSl9O3ZhciBfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gTSh0KXt0aGlzLiRMPXcodC5sb2NhbGUsbnVsbCwhMCksdGhpcy5wYXJzZSh0KSx0aGlzLiR4PXRoaXMuJHh8fHQueHx8e30sdGhpc1twXT0hMH12YXIgbT1NLnByb3RvdHlwZTtyZXR1cm4gbS5wYXJzZT1mdW5jdGlvbih0KXt0aGlzLiRkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0ZSxuPXQudXRjO2lmKG51bGw9PT1lKXJldHVybiBuZXcgRGF0ZShOYU4pO2lmKGIudShlKSlyZXR1cm4gbmV3IERhdGU7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhL1okL2kudGVzdChlKSl7dmFyIHI9ZS5tYXRjaCgkKTtpZihyKXt2YXIgaT1yWzJdLTF8fDAscz0ocls3XXx8XCIwXCIpLnN1YnN0cmluZygwLDMpO3JldHVybiBuP25ldyBEYXRlKERhdGUuVVRDKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpKTpuZXcgRGF0ZShyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKX19cmV0dXJuIG5ldyBEYXRlKGUpfSh0KSx0aGlzLmluaXQoKX0sbS5pbml0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0RnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0TW9udGgoKSx0aGlzLiREPXQuZ2V0RGF0ZSgpLHRoaXMuJFc9dC5nZXREYXkoKSx0aGlzLiRIPXQuZ2V0SG91cnMoKSx0aGlzLiRtPXQuZ2V0TWludXRlcygpLHRoaXMuJHM9dC5nZXRTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRNaWxsaXNlY29uZHMoKX0sbS4kdXRpbHM9ZnVuY3Rpb24oKXtyZXR1cm4gYn0sbS5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLiRkLnRvU3RyaW5nKCk9PT1sKX0sbS5pc1NhbWU9ZnVuY3Rpb24odCxlKXt2YXIgbj1PKHQpO3JldHVybiB0aGlzLnN0YXJ0T2YoZSk8PW4mJm48PXRoaXMuZW5kT2YoZSl9LG0uaXNBZnRlcj1mdW5jdGlvbih0LGUpe3JldHVybiBPKHQpPHRoaXMuc3RhcnRPZihlKX0sbS5pc0JlZm9yZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVuZE9mKGUpPE8odCl9LG0uJGc9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBiLnUodCk/dGhpc1tlXTp0aGlzLnNldChuLHQpfSxtLnVuaXg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKS8xZTMpfSxtLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC5nZXRUaW1lKCl9LG0uc3RhcnRPZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMscj0hIWIudShlKXx8ZSxmPWIucCh0KSxsPWZ1bmN0aW9uKHQsZSl7dmFyIGk9Yi53KG4uJHU/RGF0ZS5VVEMobi4keSxlLHQpOm5ldyBEYXRlKG4uJHksZSx0KSxuKTtyZXR1cm4gcj9pOmkuZW5kT2YoYSl9LCQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYi53KG4udG9EYXRlKClbdF0uYXBwbHkobi50b0RhdGUoXCJzXCIpLChyP1swLDAsMCwwXTpbMjMsNTksNTksOTk5XSkuc2xpY2UoZSkpLG4pfSx5PXRoaXMuJFcsTT10aGlzLiRNLG09dGhpcy4kRCx2PVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKTtzd2l0Y2goZil7Y2FzZSBoOnJldHVybiByP2woMSwwKTpsKDMxLDExKTtjYXNlIGM6cmV0dXJuIHI/bCgxLE0pOmwoMCxNKzEpO2Nhc2Ugbzp2YXIgZz10aGlzLiRsb2NhbGUoKS53ZWVrU3RhcnR8fDAsRD0oeTxnP3krNzp5KS1nO3JldHVybiBsKHI/bS1EOm0rKDYtRCksTSk7Y2FzZSBhOmNhc2UgZDpyZXR1cm4gJCh2K1wiSG91cnNcIiwwKTtjYXNlIHU6cmV0dXJuICQoditcIk1pbnV0ZXNcIiwxKTtjYXNlIHM6cmV0dXJuICQoditcIlNlY29uZHNcIiwyKTtjYXNlIGk6cmV0dXJuICQoditcIk1pbGxpc2Vjb25kc1wiLDMpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xvbmUoKX19LG0uZW5kT2Y9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhcnRPZih0LCExKX0sbS4kc2V0PWZ1bmN0aW9uKHQsZSl7dmFyIG4sbz1iLnAodCksZj1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIiksbD0obj17fSxuW2FdPWYrXCJEYXRlXCIsbltkXT1mK1wiRGF0ZVwiLG5bY109ZitcIk1vbnRoXCIsbltoXT1mK1wiRnVsbFllYXJcIixuW3VdPWYrXCJIb3Vyc1wiLG5bc109ZitcIk1pbnV0ZXNcIixuW2ldPWYrXCJTZWNvbmRzXCIsbltyXT1mK1wiTWlsbGlzZWNvbmRzXCIsbilbb10sJD1vPT09YT90aGlzLiREKyhlLXRoaXMuJFcpOmU7aWYobz09PWN8fG89PT1oKXt2YXIgeT10aGlzLmNsb25lKCkuc2V0KGQsMSk7eS4kZFtsXSgkKSx5LmluaXQoKSx0aGlzLiRkPXkuc2V0KGQsTWF0aC5taW4odGhpcy4kRCx5LmRheXNJbk1vbnRoKCkpKS4kZH1lbHNlIGwmJnRoaXMuJGRbbF0oJCk7cmV0dXJuIHRoaXMuaW5pdCgpLHRoaXN9LG0uc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS4kc2V0KHQsZSl9LG0uZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzW2IucCh0KV0oKX0sbS5hZGQ9ZnVuY3Rpb24ocixmKXt2YXIgZCxsPXRoaXM7cj1OdW1iZXIocik7dmFyICQ9Yi5wKGYpLHk9ZnVuY3Rpb24odCl7dmFyIGU9TyhsKTtyZXR1cm4gYi53KGUuZGF0ZShlLmRhdGUoKStNYXRoLnJvdW5kKHQqcikpLGwpfTtpZigkPT09YylyZXR1cm4gdGhpcy5zZXQoYyx0aGlzLiRNK3IpO2lmKCQ9PT1oKXJldHVybiB0aGlzLnNldChoLHRoaXMuJHkrcik7aWYoJD09PWEpcmV0dXJuIHkoMSk7aWYoJD09PW8pcmV0dXJuIHkoNyk7dmFyIE09KGQ9e30sZFtzXT1lLGRbdV09bixkW2ldPXQsZClbJF18fDEsbT10aGlzLiRkLmdldFRpbWUoKStyKk07cmV0dXJuIGIudyhtLHRoaXMpfSxtLnN1YnRyYWN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkKC0xKnQsZSl9LG0uZm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRsb2NhbGUoKTtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG4uaW52YWxpZERhdGV8fGw7dmFyIHI9dHx8XCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiLGk9Yi56KHRoaXMpLHM9dGhpcy4kSCx1PXRoaXMuJG0sYT10aGlzLiRNLG89bi53ZWVrZGF5cyxjPW4ubW9udGhzLGY9bi5tZXJpZGllbSxoPWZ1bmN0aW9uKHQsbixpLHMpe3JldHVybiB0JiYodFtuXXx8dChlLHIpKXx8aVtuXS5zbGljZSgwLHMpfSxkPWZ1bmN0aW9uKHQpe3JldHVybiBiLnMocyUxMnx8MTIsdCxcIjBcIil9LCQ9Znx8ZnVuY3Rpb24odCxlLG4pe3ZhciByPXQ8MTI/XCJBTVwiOlwiUE1cIjtyZXR1cm4gbj9yLnRvTG93ZXJDYXNlKCk6cn07cmV0dXJuIHIucmVwbGFjZSh5LChmdW5jdGlvbih0LHIpe3JldHVybiByfHxmdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwiWVlcIjpyZXR1cm4gU3RyaW5nKGUuJHkpLnNsaWNlKC0yKTtjYXNlXCJZWVlZXCI6cmV0dXJuIGIucyhlLiR5LDQsXCIwXCIpO2Nhc2VcIk1cIjpyZXR1cm4gYSsxO2Nhc2VcIk1NXCI6cmV0dXJuIGIucyhhKzEsMixcIjBcIik7Y2FzZVwiTU1NXCI6cmV0dXJuIGgobi5tb250aHNTaG9ydCxhLGMsMyk7Y2FzZVwiTU1NTVwiOnJldHVybiBoKGMsYSk7Y2FzZVwiRFwiOnJldHVybiBlLiREO2Nhc2VcIkREXCI6cmV0dXJuIGIucyhlLiRELDIsXCIwXCIpO2Nhc2VcImRcIjpyZXR1cm4gU3RyaW5nKGUuJFcpO2Nhc2VcImRkXCI6cmV0dXJuIGgobi53ZWVrZGF5c01pbixlLiRXLG8sMik7Y2FzZVwiZGRkXCI6cmV0dXJuIGgobi53ZWVrZGF5c1Nob3J0LGUuJFcsbywzKTtjYXNlXCJkZGRkXCI6cmV0dXJuIG9bZS4kV107Y2FzZVwiSFwiOnJldHVybiBTdHJpbmcocyk7Y2FzZVwiSEhcIjpyZXR1cm4gYi5zKHMsMixcIjBcIik7Y2FzZVwiaFwiOnJldHVybiBkKDEpO2Nhc2VcImhoXCI6cmV0dXJuIGQoMik7Y2FzZVwiYVwiOnJldHVybiAkKHMsdSwhMCk7Y2FzZVwiQVwiOnJldHVybiAkKHMsdSwhMSk7Y2FzZVwibVwiOnJldHVybiBTdHJpbmcodSk7Y2FzZVwibW1cIjpyZXR1cm4gYi5zKHUsMixcIjBcIik7Y2FzZVwic1wiOnJldHVybiBTdHJpbmcoZS4kcyk7Y2FzZVwic3NcIjpyZXR1cm4gYi5zKGUuJHMsMixcIjBcIik7Y2FzZVwiU1NTXCI6cmV0dXJuIGIucyhlLiRtcywzLFwiMFwiKTtjYXNlXCJaXCI6cmV0dXJuIGl9cmV0dXJuIG51bGx9KHQpfHxpLnJlcGxhY2UoXCI6XCIsXCJcIil9KSl9LG0udXRjT2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDE1Ki1NYXRoLnJvdW5kKHRoaXMuJGQuZ2V0VGltZXpvbmVPZmZzZXQoKS8xNSl9LG0uZGlmZj1mdW5jdGlvbihyLGQsbCl7dmFyICQseT10aGlzLE09Yi5wKGQpLG09TyhyKSx2PShtLnV0Y09mZnNldCgpLXRoaXMudXRjT2Zmc2V0KCkpKmUsZz10aGlzLW0sRD1mdW5jdGlvbigpe3JldHVybiBiLm0oeSxtKX07c3dpdGNoKE0pe2Nhc2UgaDokPUQoKS8xMjticmVhaztjYXNlIGM6JD1EKCk7YnJlYWs7Y2FzZSBmOiQ9RCgpLzM7YnJlYWs7Y2FzZSBvOiQ9KGctdikvNjA0OGU1O2JyZWFrO2Nhc2UgYTokPShnLXYpLzg2NGU1O2JyZWFrO2Nhc2UgdTokPWcvbjticmVhaztjYXNlIHM6JD1nL2U7YnJlYWs7Y2FzZSBpOiQ9Zy90O2JyZWFrO2RlZmF1bHQ6JD1nfXJldHVybiBsPyQ6Yi5hKCQpfSxtLmRheXNJbk1vbnRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kT2YoYykuJER9LG0uJGxvY2FsZT1mdW5jdGlvbigpe3JldHVybiBEW3RoaXMuJExdfSxtLmxvY2FsZT1mdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybiB0aGlzLiRMO3ZhciBuPXRoaXMuY2xvbmUoKSxyPXcodCxlLCEwKTtyZXR1cm4gciYmKG4uJEw9ciksbn0sbS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBiLncodGhpcy4kZCx0aGlzKX0sbS50b0RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpfSxtLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLnRvSVNPU3RyaW5nKCk6bnVsbH0sbS50b0lTT1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvSVNPU3RyaW5nKCl9LG0udG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b1VUQ1N0cmluZygpfSxNfSgpLGs9Xy5wcm90b3R5cGU7cmV0dXJuIE8ucHJvdG90eXBlPWssW1tcIiRtc1wiLHJdLFtcIiRzXCIsaV0sW1wiJG1cIixzXSxbXCIkSFwiLHVdLFtcIiRXXCIsYV0sW1wiJE1cIixjXSxbXCIkeVwiLGhdLFtcIiREXCIsZF1dLmZvckVhY2goKGZ1bmN0aW9uKHQpe2tbdFsxXV09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJGcoZSx0WzBdLHRbMV0pfX0pKSxPLmV4dGVuZD1mdW5jdGlvbih0LGUpe3JldHVybiB0LiRpfHwodChlLF8sTyksdC4kaT0hMCksT30sTy5sb2NhbGU9dyxPLmlzRGF5anM9UyxPLnVuaXg9ZnVuY3Rpb24odCl7cmV0dXJuIE8oMWUzKnQpfSxPLmVuPURbZ10sTy5Mcz1ELE8ucD17fSxPfSkpOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZikuZGF5anNfcGx1Z2luX2lzU2FtZU9yQWZ0ZXI9dCgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3JldHVybiBmdW5jdGlvbihlLHQpe3QucHJvdG90eXBlLmlzU2FtZU9yQWZ0ZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5pc1NhbWUoZSx0KXx8dGhpcy5pc0FmdGVyKGUsdCl9fX0pKTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzX3BsdWdpbl90aW1lem9uZT1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9e3llYXI6MCxtb250aDoxLGRheToyLGhvdXI6MyxtaW51dGU6NCxzZWNvbmQ6NX0sZT17fTtyZXR1cm4gZnVuY3Rpb24obixpLG8pe3ZhciByLGE9ZnVuY3Rpb24odCxuLGkpe3ZvaWQgMD09PWkmJihpPXt9KTt2YXIgbz1uZXcgRGF0ZSh0KSxyPWZ1bmN0aW9uKHQsbil7dm9pZCAwPT09biYmKG49e30pO3ZhciBpPW4udGltZVpvbmVOYW1lfHxcInNob3J0XCIsbz10K1wifFwiK2kscj1lW29dO3JldHVybiByfHwocj1uZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIse2hvdXIxMjohMSx0aW1lWm9uZTp0LHllYXI6XCJudW1lcmljXCIsbW9udGg6XCIyLWRpZ2l0XCIsZGF5OlwiMi1kaWdpdFwiLGhvdXI6XCIyLWRpZ2l0XCIsbWludXRlOlwiMi1kaWdpdFwiLHNlY29uZDpcIjItZGlnaXRcIix0aW1lWm9uZU5hbWU6aX0pLGVbb109cikscn0obixpKTtyZXR1cm4gci5mb3JtYXRUb1BhcnRzKG8pfSx1PWZ1bmN0aW9uKGUsbil7Zm9yKHZhciBpPWEoZSxuKSxyPVtdLHU9MDt1PGkubGVuZ3RoO3UrPTEpe3ZhciBmPWlbdV0scz1mLnR5cGUsbT1mLnZhbHVlLGM9dFtzXTtjPj0wJiYocltjXT1wYXJzZUludChtLDEwKSl9dmFyIGQ9clszXSxsPTI0PT09ZD8wOmQsaD1yWzBdK1wiLVwiK3JbMV0rXCItXCIrclsyXStcIiBcIitsK1wiOlwiK3JbNF0rXCI6XCIrcls1XStcIjowMDBcIix2PStlO3JldHVybihvLnV0YyhoKS52YWx1ZU9mKCktKHYtPXYlMWUzKSkvNmU0fSxmPWkucHJvdG90eXBlO2YudHo9ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT10JiYodD1yKTt2YXIgbixpPXRoaXMudXRjT2Zmc2V0KCksYT10aGlzLnRvRGF0ZSgpLHU9YS50b0xvY2FsZVN0cmluZyhcImVuLVVTXCIse3RpbWVab25lOnR9KSxmPU1hdGgucm91bmQoKGEtbmV3IERhdGUodSkpLzFlMy82MCkscz0xNSotTWF0aC5yb3VuZChhLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpLWY7aWYoIU51bWJlcihzKSluPXRoaXMudXRjT2Zmc2V0KDAsZSk7ZWxzZSBpZihuPW8odSx7bG9jYWxlOnRoaXMuJEx9KS4kc2V0KFwibWlsbGlzZWNvbmRcIix0aGlzLiRtcykudXRjT2Zmc2V0KHMsITApLGUpe3ZhciBtPW4udXRjT2Zmc2V0KCk7bj1uLmFkZChpLW0sXCJtaW51dGVcIil9cmV0dXJuIG4uJHguJHRpbWV6b25lPXQsbn0sZi5vZmZzZXROYW1lPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuJHguJHRpbWV6b25lfHxvLnR6Lmd1ZXNzKCksbj1hKHRoaXMudmFsdWVPZigpLGUse3RpbWVab25lTmFtZTp0fSkuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuXCJ0aW1lem9uZW5hbWVcIj09PXQudHlwZS50b0xvd2VyQ2FzZSgpfSkpO3JldHVybiBuJiZuLnZhbHVlfTt2YXIgcz1mLnN0YXJ0T2Y7Zi5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7aWYoIXRoaXMuJHh8fCF0aGlzLiR4LiR0aW1lem9uZSlyZXR1cm4gcy5jYWxsKHRoaXMsdCxlKTt2YXIgbj1vKHRoaXMuZm9ybWF0KFwiWVlZWS1NTS1ERCBISDptbTpzczpTU1NcIikse2xvY2FsZTp0aGlzLiRMfSk7cmV0dXJuIHMuY2FsbChuLHQsZSkudHoodGhpcy4keC4kdGltZXpvbmUsITApfSxvLnR6PWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uJiZlLGE9bnx8ZXx8cixmPXUoK28oKSxhKTtpZihcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4gbyh0KS50eihhKTt2YXIgcz1mdW5jdGlvbih0LGUsbil7dmFyIGk9dC02MCplKjFlMyxvPXUoaSxuKTtpZihlPT09bylyZXR1cm5baSxlXTt2YXIgcj11KGktPTYwKihvLWUpKjFlMyxuKTtyZXR1cm4gbz09PXI/W2ksb106W3QtNjAqTWF0aC5taW4obyxyKSoxZTMsTWF0aC5tYXgobyxyKV19KG8udXRjKHQsaSkudmFsdWVPZigpLGYsYSksbT1zWzBdLGM9c1sxXSxkPW8obSkudXRjT2Zmc2V0KGMpO3JldHVybiBkLiR4LiR0aW1lem9uZT1hLGR9LG8udHouZ3Vlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lfSxvLnR6LnNldERlZmF1bHQ9ZnVuY3Rpb24odCl7cj10fX19KSk7IiwiIWZ1bmN0aW9uKHQsaSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9aSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoaSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqc19wbHVnaW5fdXRjPWkoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD1cIm1pbnV0ZVwiLGk9L1srLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2csZT0vKFsrLV18XFxkXFxkKS9nO3JldHVybiBmdW5jdGlvbihzLGYsbil7dmFyIHU9Zi5wcm90b3R5cGU7bi51dGM9ZnVuY3Rpb24odCl7dmFyIGk9e2RhdGU6dCx1dGM6ITAsYXJnczphcmd1bWVudHN9O3JldHVybiBuZXcgZihpKX0sdS51dGM9ZnVuY3Rpb24oaSl7dmFyIGU9bih0aGlzLnRvRGF0ZSgpLHtsb2NhbGU6dGhpcy4kTCx1dGM6ITB9KTtyZXR1cm4gaT9lLmFkZCh0aGlzLnV0Y09mZnNldCgpLHQpOmV9LHUubG9jYWw9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLnRvRGF0ZSgpLHtsb2NhbGU6dGhpcy4kTCx1dGM6ITF9KX07dmFyIG89dS5wYXJzZTt1LnBhcnNlPWZ1bmN0aW9uKHQpe3QudXRjJiYodGhpcy4kdT0hMCksdGhpcy4kdXRpbHMoKS51KHQuJG9mZnNldCl8fCh0aGlzLiRvZmZzZXQ9dC4kb2Zmc2V0KSxvLmNhbGwodGhpcyx0KX07dmFyIHI9dS5pbml0O3UuaW5pdD1mdW5jdGlvbigpe2lmKHRoaXMuJHUpe3ZhciB0PXRoaXMuJGQ7dGhpcy4keT10LmdldFVUQ0Z1bGxZZWFyKCksdGhpcy4kTT10LmdldFVUQ01vbnRoKCksdGhpcy4kRD10LmdldFVUQ0RhdGUoKSx0aGlzLiRXPXQuZ2V0VVRDRGF5KCksdGhpcy4kSD10LmdldFVUQ0hvdXJzKCksdGhpcy4kbT10LmdldFVUQ01pbnV0ZXMoKSx0aGlzLiRzPXQuZ2V0VVRDU2Vjb25kcygpLHRoaXMuJG1zPXQuZ2V0VVRDTWlsbGlzZWNvbmRzKCl9ZWxzZSByLmNhbGwodGhpcyl9O3ZhciBhPXUudXRjT2Zmc2V0O3UudXRjT2Zmc2V0PWZ1bmN0aW9uKHMsZil7dmFyIG49dGhpcy4kdXRpbHMoKS51O2lmKG4ocykpcmV0dXJuIHRoaXMuJHU/MDpuKHRoaXMuJG9mZnNldCk/YS5jYWxsKHRoaXMpOnRoaXMuJG9mZnNldDtpZihcInN0cmluZ1wiPT10eXBlb2YgcyYmKHM9ZnVuY3Rpb24odCl7dm9pZCAwPT09dCYmKHQ9XCJcIik7dmFyIHM9dC5tYXRjaChpKTtpZighcylyZXR1cm4gbnVsbDt2YXIgZj0oXCJcIitzWzBdKS5tYXRjaChlKXx8W1wiLVwiLDAsMF0sbj1mWzBdLHU9NjAqK2ZbMV0rICtmWzJdO3JldHVybiAwPT09dT8wOlwiK1wiPT09bj91Oi11fShzKSxudWxsPT09cykpcmV0dXJuIHRoaXM7dmFyIHU9TWF0aC5hYnMocyk8PTE2PzYwKnM6cyxvPXRoaXM7aWYoZilyZXR1cm4gby4kb2Zmc2V0PXUsby4kdT0wPT09cyxvO2lmKDAhPT1zKXt2YXIgcj10aGlzLiR1P3RoaXMudG9EYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKTotMSp0aGlzLnV0Y09mZnNldCgpOyhvPXRoaXMubG9jYWwoKS5hZGQodStyLHQpKS4kb2Zmc2V0PXUsby4keC4kbG9jYWxPZmZzZXQ9cn1lbHNlIG89dGhpcy51dGMoKTtyZXR1cm4gb307dmFyIGg9dS5mb3JtYXQ7dS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGk9dHx8KHRoaXMuJHU/XCJZWVlZLU1NLUREVEhIOm1tOnNzW1pdXCI6XCJcIik7cmV0dXJuIGguY2FsbCh0aGlzLGkpfSx1LnZhbHVlT2Y9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiR1dGlscygpLnUodGhpcy4kb2Zmc2V0KT8wOnRoaXMuJG9mZnNldCsodGhpcy4keC4kbG9jYWxPZmZzZXR8fHRoaXMuJGQuZ2V0VGltZXpvbmVPZmZzZXQoKSk7cmV0dXJuIHRoaXMuJGQudmFsdWVPZigpLTZlNCp0fSx1LmlzVVRDPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLiR1fSx1LnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKX0sdS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvRGF0ZSgpLnRvVVRDU3RyaW5nKCl9O3ZhciBsPXUudG9EYXRlO3UudG9EYXRlPWZ1bmN0aW9uKHQpe3JldHVyblwic1wiPT09dCYmdGhpcy4kb2Zmc2V0P24odGhpcy5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tOnNzOlNTU1wiKSkudG9EYXRlKCk6bC5jYWxsKHRoaXMpfTt2YXIgYz11LmRpZmY7dS5kaWZmPWZ1bmN0aW9uKHQsaSxlKXtpZih0JiZ0aGlzLiR1PT09dC4kdSlyZXR1cm4gYy5jYWxsKHRoaXMsdCxpLGUpO3ZhciBzPXRoaXMubG9jYWwoKSxmPW4odCkubG9jYWwoKTtyZXR1cm4gYy5jYWxsKHMsZixpLGUpfX19KSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBuYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gb2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxvYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHQoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHQoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiByYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShxYSxcbnJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocWEscmEpO3pbYl09bmV3IHQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocWEscmEpO3pbYl09bmV3IHQoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB0KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHNhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXBhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9uYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdGE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdWE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksdmE9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikseGE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSGE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBJYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gSmEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUlhJiZhW0lhXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sS2E7ZnVuY3Rpb24gTGEoYSl7aWYodm9pZCAwPT09S2EpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7S2E9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0thK2F9dmFyIE1hPSExO1xuZnVuY3Rpb24gTmEoYSxiKXtpZighYXx8TWEpcmV0dXJuXCJcIjtNYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtNYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP0xhKGEpOlwiXCJ9XG5mdW5jdGlvbiBPYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTGEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBMYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTGEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBMYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9TmEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9TmEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9TmEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBQYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHdhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHZhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB6YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB4YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIERhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEFhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIENhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEZhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpQYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEdhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBQYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUWEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUGEoYik7Y2FzZSA4OnJldHVybiBiPT09eGE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUmEoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gU2EoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPVNhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBVYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VGEoYSkpfWZ1bmN0aW9uIFZhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1TYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFdhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFhhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBZYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1SYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFphKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmc2EoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uICRhKGEsYil7WmEoYSxiKTt2YXIgYz1SYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxSYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFdhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZGI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGViKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitSYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZmIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBnYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZGIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlJhKGMpfX1cbmZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9UmEoYi52YWx1ZSksZD1SYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGliKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24gamIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGtiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9qYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBsYixtYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtsYj1sYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtsYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1sYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBuYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIG9iPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHBiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhvYikuZm9yRWFjaChmdW5jdGlvbihhKXtwYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO29iW2JdPW9iW2FdfSl9KTtmdW5jdGlvbiBxYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8b2IuaGFzT3duUHJvcGVydHkoYSkmJm9iW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHJiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXFiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHNiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB0YihhLGIpe2lmKGIpe2lmKHNiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB1YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHZiPW51bGw7ZnVuY3Rpb24gd2IoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB4Yj1udWxsLHliPW51bGwsemI9bnVsbDtcbmZ1bmN0aW9uIEFiKGEpe2lmKGE9QmIoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPUNiKGIpLHhiKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERiKGEpe3liP3piP3piLnB1c2goYSk6emI9W2FdOnliPWF9ZnVuY3Rpb24gRWIoKXtpZih5Yil7dmFyIGE9eWIsYj16Yjt6Yj15Yj1udWxsO0FiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylBYihiW2FdKX19ZnVuY3Rpb24gRmIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYigpe312YXIgSGI9ITE7ZnVuY3Rpb24gSWIoYSxiLGMpe2lmKEhiKXJldHVybiBhKGIsYyk7SGI9ITA7dHJ5e3JldHVybiBGYihhLGIsYyl9ZmluYWxseXtpZihIYj0hMSxudWxsIT09eWJ8fG51bGwhPT16YilHYigpLEViKCl9fVxuZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1DYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIEtiPSExO2lmKGlhKXRyeXt2YXIgTGI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KExiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtLYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixMYixMYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTGIsTGIpfWNhdGNoKGEpe0tiPSExfWZ1bmN0aW9uIE1iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBOYj0hMSxPYj1udWxsLFBiPSExLFFiPW51bGwsUmI9e29uRXJyb3I6ZnVuY3Rpb24oYSl7TmI9ITA7T2I9YX19O2Z1bmN0aW9uIFNiKGEsYixjLGQsZSxmLGcsaCxrKXtOYj0hMTtPYj1udWxsO01iLmFwcGx5KFJiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7U2IuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE5iKXtpZihOYil7dmFyIGw9T2I7TmI9ITE7T2I9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UGJ8fChQYj0hMCxRYj1sKX19ZnVuY3Rpb24gVWIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBWYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKFViKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFhiKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVViKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFdiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFdiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWWIoYSl7YT1YYihhKTtyZXR1cm4gbnVsbCE9PWE/WmIoYSk6bnVsbH1mdW5jdGlvbiBaYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9WmIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgJGI9YmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxhYz1iYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxiYz1iYS51bnN0YWJsZV9zaG91bGRZaWVsZCxjYz1iYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1iYS51bnN0YWJsZV9ub3csZGM9YmEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZWM9YmEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZmM9YmEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZ2M9YmEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaGM9YmEudW5zdGFibGVfTG93UHJpb3JpdHksaWM9YmEudW5zdGFibGVfSWRsZVByaW9yaXR5LGpjPW51bGwsa2M9bnVsbDtmdW5jdGlvbiBsYyhhKXtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uQ29tbWl0RmliZXJSb290KXRyeXtrYy5vbkNvbW1pdEZpYmVyUm9vdChqYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgbmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOm1jLG9jPU1hdGgubG9nLHBjPU1hdGguTE4yO2Z1bmN0aW9uIG1jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKG9jKGEpL3BjfDApfDB9dmFyIHFjPTY0LHJjPTQxOTQzMDQ7XG5mdW5jdGlvbiBzYyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB0YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9c2MoaCk6KGYmPWcsMCE9PWYmJihkPXNjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD1zYyhnKTowIT09ZiYmKGQ9c2MoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1uYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHVjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gdmMoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW5jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXVjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB3YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geGMoKXt2YXIgYT1xYztxYzw8PTE7MD09PShxYyY0MTk0MjQwKSYmKHFjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB5YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHpjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1uYyhiKTthW2JdPWN9ZnVuY3Rpb24gQWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW5jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW5jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gQ2MoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRGMsRWMsRmMsR2MsSGMsSWM9ITEsSmM9W10sS2M9bnVsbCxMYz1udWxsLE1jPW51bGwsTmM9bmV3IE1hcCxPYz1uZXcgTWFwLFBjPVtdLFFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFJjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6S2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpOYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFNjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9QmIoYiksbnVsbCE9PWImJkVjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIEtjPVNjKEtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBMYz1TYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTWM9U2MoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtOYy5zZXQoZixTYyhOYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsT2Muc2V0KGYsU2MoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVWMoYSl7dmFyIGI9VmMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1VYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1WYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtIYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7RmMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gV2MoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVhjKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3ZiPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt2Yj1udWxsfWVsc2UgcmV0dXJuIGI9QmIoYyksbnVsbCE9PWImJkVjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFljKGEsYixjKXtXYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gWmMoKXtJYz0hMTtudWxsIT09S2MmJldjKEtjKSYmKEtjPW51bGwpO251bGwhPT1MYyYmV2MoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZXYyhNYykmJihNYz1udWxsKTtOYy5mb3JFYWNoKFljKTtPYy5mb3JFYWNoKFljKX1cbmZ1bmN0aW9uICRjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxJY3x8KEljPSEwLGJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soYmEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWmMpKSl9XG5mdW5jdGlvbiBhZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiAkYyhiLGEpfWlmKDA8SmMubGVuZ3RoKXskYyhKY1swXSxhKTtmb3IodmFyIGM9MTtjPEpjLmxlbmd0aDtjKyspe3ZhciBkPUpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09S2MmJiRjKEtjLGEpO251bGwhPT1MYyYmJGMoTGMsYSk7bnVsbCE9PU1jJiYkYyhNYyxhKTtOYy5mb3JFYWNoKGIpO09jLmZvckVhY2goYik7Zm9yKGM9MDtjPFBjLmxlbmd0aDtjKyspZD1QY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UGMubGVuZ3RoJiYoYz1QY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylVYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlBjLnNoaWZ0KCl9dmFyIGJkPXRhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGNkPSEwO1xuZnVuY3Rpb24gZGQoYSxiLGMsZCl7dmFyIGU9QyxmPWJkLnRyYW5zaXRpb247YmQudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZWQoYSxiLGMsZCl9ZmluYWxseXtDPWUsYmQudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBmZChhLGIsYyxkKXt2YXIgZT1DLGY9YmQudHJhbnNpdGlvbjtiZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxlZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxiZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZWQoYSxiLGMsZCl7aWYoY2Qpe3ZhciBlPVhjKGEsYixjLGQpO2lmKG51bGw9PT1lKWdkKGEsYixkLGhkLGMpLFJjKGEsZCk7ZWxzZSBpZihUYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihSYyhhLGQpLGImNCYmLTE8UWMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUJiKGUpO251bGwhPT1mJiZEYyhmKTtmPVhjKGEsYixjLGQpO251bGw9PT1mJiZnZChhLGIsZCxoZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBnZChhLGIsZCxudWxsLGMpfX12YXIgaGQ9bnVsbDtcbmZ1bmN0aW9uIFhjKGEsYixjLGQpe2hkPW51bGw7YT13YihkKTthPVZjKGEpO2lmKG51bGwhPT1hKWlmKGI9VWIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9VmIoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2hkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChkYygpKXtjYXNlIGVjOnJldHVybiAxO2Nhc2UgZmM6cmV0dXJuIDQ7Y2FzZSBnYzpjYXNlIGhjOnJldHVybiAxNjtjYXNlIGljOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBqZD1udWxsLGtkPW51bGwsbGQ9bnVsbDtmdW5jdGlvbiBtZCgpe2lmKGxkKXJldHVybiBsZDt2YXIgYSxiPWtkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGpkP2pkLnZhbHVlOmpkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIGxkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBuZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBvZCgpe3JldHVybiEwfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBxZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9vZDpwZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPW9kKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPW9kKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50Om9kfSk7cmV0dXJuIGJ9XG52YXIgcmQ9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sc2Q9cWQocmQpLHRkPUEoe30scmQse3ZpZXc6MCxkZXRhaWw6MH0pLHVkPXFkKHRkKSx2ZCx3ZCx4ZCx6ZD1BKHt9LHRkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnlkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXhkJiYoeGQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHZkPWEuc2NyZWVuWC14ZC5zY3JlZW5YLHdkPWEuc2NyZWVuWS14ZC5zY3JlZW5ZKTp3ZD12ZD0wLHhkPWEpO3JldHVybiB2ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOndkfX0pLEFkPXFkKHpkKSxCZD1BKHt9LHpkLHtkYXRhVHJhbnNmZXI6MH0pLENkPXFkKEJkKSxEZD1BKHt9LHRkLHtyZWxhdGVkVGFyZ2V0OjB9KSxFZD1xZChEZCksRmQ9QSh7fSxyZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksR2Q9cWQoRmQpLEhkPUEoe30scmQse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxJZD1xZChIZCksSmQ9QSh7fSxyZCx7ZGF0YTowfSksS2Q9cWQoSmQpLExkPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE1kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxOZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gT2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1OZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHlkKCl7cmV0dXJuIE9kfVxudmFyIFBkPUEoe30sdGQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9bmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP01kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6eWQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP25kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/bmQoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxRZD1xZChQZCksUmQ9QSh7fSx6ZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxTZD1xZChSZCksVGQ9QSh7fSx0ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnlkfSksVWQ9cWQoVGQpLFZkPUEoe30scmQse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksV2Q9cWQoVmQpLFhkPUEoe30semQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxZZD1xZChYZCksWmQ9WzksMTMsMjcsMzJdLCRkPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxhZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihhZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBiZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWFlLGNlPWlhJiYoISRkfHxhZSYmODxhZSYmMTE+PWFlKSxkZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxlZT0hMTtcbmZ1bmN0aW9uIGZlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09WmQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZ2UoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaGU9ITE7ZnVuY3Rpb24gaWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGdlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtlZT0hMDtyZXR1cm4gZGU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZGUmJmVlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGplKGEsYil7aWYoaGUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8ISRkJiZmZShhLGIpPyhhPW1kKCksbGQ9a2Q9amQ9bnVsbCxoZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gY2UmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGtlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGxlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEha2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG1lKGEsYixjLGQpe0RiKGQpO2I9bmUoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyBzZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBvZT1udWxsLHBlPW51bGw7ZnVuY3Rpb24gcWUoYSl7cmUoYSwwKX1mdW5jdGlvbiBzZShhKXt2YXIgYj10ZShhKTtpZihWYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHZlPSExO2lmKGlhKXt2YXIgd2U7aWYoaWEpe3ZhciB4ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF4ZSl7dmFyIHllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7eWUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt4ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeWUub25pbnB1dH13ZT14ZX1lbHNlIHdlPSExO3ZlPXdlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIHplKCl7b2UmJihvZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixBZSkscGU9b2U9bnVsbCl9ZnVuY3Rpb24gQWUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnNlKHBlKSl7dmFyIGI9W107bWUoYixwZSxhLHdiKGEpKTtJYihxZSxiKX19XG5mdW5jdGlvbiBCZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyh6ZSgpLG9lPWIscGU9YyxvZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixBZSkpOlwiZm9jdXNvdXRcIj09PWEmJnplKCl9ZnVuY3Rpb24gQ2UoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gc2UocGUpfWZ1bmN0aW9uIERlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gc2UoYil9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gc2UoYil9ZnVuY3Rpb24gRmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBHZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpGZTtcbmZ1bmN0aW9uIEhlKGEsYil7aWYoR2UoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFHZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEllKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9SWUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SWUoYyl9fWZ1bmN0aW9uIEtlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/S2UoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTGUoKXtmb3IodmFyIGE9d2luZG93LGI9V2EoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9V2EoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE5lKGEpe3ZhciBiPUxlKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZLZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTWUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9SmUoYyxmKTt2YXIgZz1KZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIE9lPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUGU9bnVsbCxRZT1udWxsLFJlPW51bGwsU2U9ITE7XG5mdW5jdGlvbiBUZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7U2V8fG51bGw9PVBlfHxQZSE9PVdhKGQpfHwoZD1QZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZNZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFJlJiZIZShSZSxkKXx8KFJlPWQsZD1uZShRZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyBzZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UGUpKSl9XG5mdW5jdGlvbiBVZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBWZT17YW5pbWF0aW9uZW5kOlVlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlVlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxXZT17fSxYZT17fTtcbmlhJiYoWGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVmUuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVmUuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVmUuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVmUudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBZZShhKXtpZihXZVthXSlyZXR1cm4gV2VbYV07aWYoIVZlW2FdKXJldHVybiBhO3ZhciBiPVZlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFhlKXJldHVybiBXZVthXT1iW2NdO3JldHVybiBhfXZhciBaZT1ZZShcImFuaW1hdGlvbmVuZFwiKSwkZT1ZZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxhZj1ZZShcImFuaW1hdGlvbnN0YXJ0XCIpLGJmPVllKFwidHJhbnNpdGlvbmVuZFwiKSxjZj1uZXcgTWFwLGRmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBlZihhLGIpe2NmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGZmPTA7ZmY8ZGYubGVuZ3RoO2ZmKyspe3ZhciBnZj1kZltmZl0saGY9Z2YudG9Mb3dlckNhc2UoKSxqZj1nZlswXS50b1VwcGVyQ2FzZSgpK2dmLnNsaWNlKDEpO2VmKGhmLFwib25cIitqZil9ZWYoWmUsXCJvbkFuaW1hdGlvbkVuZFwiKTtlZigkZSxcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2VmKGFmLFwib25BbmltYXRpb25TdGFydFwiKTtlZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2VmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtlZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZWYoYmYsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGtmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbGY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoa2YpKTtcbmZ1bmN0aW9uIG1mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1RiKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiByZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO21mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bWYoZSxoLGwpO2Y9a319fWlmKFBiKXRocm93IGE9UWIsUGI9ITEsUWI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW25mXTt2b2lkIDA9PT1jJiYoYz1iW25mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KG9mKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcGYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO29mKGMsYSxkLGIpfXZhciBxZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHJmKGEpe2lmKCFhW3FmXSl7YVtxZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKGxmLmhhcyhiKXx8cGYoYiwhMSxhKSxwZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3FmXXx8KGJbcWZdPSEwLHBmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIG9mKGEsYixjLGQpe3N3aXRjaChpZChiKSl7Y2FzZSAxOnZhciBlPWRkO2JyZWFrO2Nhc2UgNDplPWZkO2JyZWFrO2RlZmF1bHQ6ZT1lZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshS2J8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gZ2QoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1WYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SWIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9d2IoYyksZz1bXTtcbmE6e3ZhciBoPWNmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz1zZCxtPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1uZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1RZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm09XCJmb2N1c1wiO2s9RWQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bT1cImJsdXJcIjtrPUVkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RWQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUFkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5DZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVVkO2JyZWFrO2Nhc2UgWmU6Y2FzZSAkZTpjYXNlIGFmOms9R2Q7YnJlYWs7Y2FzZSBiZjprPVdkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXVkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1JZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVNkfXZhciB3PTAhPT0oYiY0KSxKPSF3JiZcInNjcm9sbFwiPT09YSx2PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHg9ZCxyO251bGwhPT1cbng7KXtyPXg7dmFyIEY9ci5zdGF0ZU5vZGU7NT09PXIudGFnJiZudWxsIT09RiYmKHI9RixudWxsIT09diYmKEY9SmIoeCx2KSxudWxsIT1GJiZ3LnB1c2goc2YoeCxGLHIpKSkpO2lmKEopYnJlYWs7eD14LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLG0sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT12YiYmKG09Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFZjKG0pfHxtW3RmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG09Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbT1tP1ZjKG0pOm51bGwsbnVsbCE9PVxubSYmKEo9VWIobSksbSE9PUp8fDUhPT1tLnRhZyYmNiE9PW0udGFnKSltPW51bGx9ZWxzZSBrPW51bGwsbT1kO2lmKGshPT1tKXt3PUFkO0Y9XCJvbk1vdXNlTGVhdmVcIjt2PVwib25Nb3VzZUVudGVyXCI7eD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9U2QsRj1cIm9uUG9pbnRlckxlYXZlXCIsdj1cIm9uUG9pbnRlckVudGVyXCIseD1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp0ZShrKTtyPW51bGw9PW0/aDp0ZShtKTtoPW5ldyB3KEYseCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXI7Rj1udWxsO1ZjKGUpPT09ZCYmKHc9bmV3IHcodix4K1wiZW50ZXJcIixtLGMsZSksdy50YXJnZXQ9cix3LnJlbGF0ZWRUYXJnZXQ9SixGPXcpO0o9RjtpZihrJiZtKWI6e3c9azt2PW07eD0wO2ZvcihyPXc7cjtyPXVmKHIpKXgrKztyPTA7Zm9yKEY9djtGO0Y9dWYoRikpcisrO2Zvcig7MDx4LXI7KXc9dWYodykseC0tO2Zvcig7MDxyLXg7KXY9XG51Zih2KSxyLS07Zm9yKDt4LS07KXtpZih3PT09dnx8bnVsbCE9PXYmJnc9PT12LmFsdGVybmF0ZSlicmVhayBiO3c9dWYodyk7dj11Zih2KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJnZmKGcsaCxrLHcsITEpO251bGwhPT1tJiZudWxsIT09SiYmdmYoZyxKLG0sdywhMCl9fX1hOntoPWQ/dGUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgWj11ZTtlbHNlIGlmKGxlKGgpKWlmKHZlKVo9RWU7ZWxzZXtaPUNlO3ZhciB5YT1CZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKFo9RGUpO2lmKFomJihaPVooYSxkKSkpe21lKGcsWixjLGUpO2JyZWFrIGF9eWEmJnlhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeWE9aC5fd3JhcHBlclN0YXRlKSYmXG55YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eWE9ZD90ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobGUoeWEpfHxcInRydWVcIj09PXlhLmNvbnRlbnRFZGl0YWJsZSlQZT15YSxRZT1kLFJlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6UmU9UWU9UGU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6U2U9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlNlPSExO1RlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoT2UpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpUZShnLGMsZSl9dmFyIGFiO2lmKCRkKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBjYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2E9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9Y2E9dm9pZCAwfWVsc2UgaGU/ZmUoYSxjKSYmKGNhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGNhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2NhJiYoY2UmJlwia29cIiE9PWMubG9jYWxlJiYoaGV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1jYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWNhJiZoZSYmKGFiPW1kKCkpOihqZD1lLGtkPVwidmFsdWVcImluIGpkP2pkLnZhbHVlOmpkLnRleHRDb250ZW50LGhlPSEwKSkseWE9bmUoZCxjYSksMDx5YS5sZW5ndGgmJihjYT1uZXcgS2QoY2EsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpjYSxsaXN0ZW5lcnM6eWF9KSxhYj9jYS5kYXRhPWFiOihhYj1nZShjKSxudWxsIT09YWImJihjYS5kYXRhPWFiKSkpKTtpZihhYj1iZT9pZShhLGMpOmplKGEsYykpZD1uZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBLZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1hYil9cmUoZyxiKX0pfWZ1bmN0aW9uIHNmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gbmUoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1KYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChzZihhLGYsZSkpLGY9SmIoYSxiKSxudWxsIT1mJiZkLnB1c2goc2YoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB1ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gdmYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1KYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChzZihjLGssaCkpKTplfHwoaz1KYihjLGYpLG51bGwhPWsmJmcucHVzaChzZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB3Zj0vXFxyXFxuPy9nLHhmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB5ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHdmLFwiXFxuXCIpLnJlcGxhY2UoeGYsXCJcIil9ZnVuY3Rpb24gemYoYSxiLGMpe2I9eWYoYik7aWYoeWYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEFmKCl7fVxudmFyIEJmPW51bGwsQ2Y9bnVsbDtmdW5jdGlvbiBEZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBFZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSWY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgR2Y/ZnVuY3Rpb24oYSl7cmV0dXJuIEdmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChIZil9OkVmO2Z1bmN0aW9uIEhmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gSmYoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YWQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2FkKGIpfWZ1bmN0aW9uIEtmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBMZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTWY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTmY9XCJfX3JlYWN0RmliZXIkXCIrTWYsT2Y9XCJfX3JlYWN0UHJvcHMkXCIrTWYsdGY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK01mLG5mPVwiX19yZWFjdEV2ZW50cyRcIitNZixQZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTWYsUWY9XCJfX3JlYWN0SGFuZGxlcyRcIitNZjtcbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPWFbTmZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3RmXXx8Y1tOZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1MZihhKTtudWxsIT09YTspe2lmKGM9YVtOZl0pcmV0dXJuIGM7YT1MZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQmIoYSl7YT1hW05mXXx8YVt0Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHRlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIENiKGEpe3JldHVybiBhW09mXXx8bnVsbH12YXIgUmY9W10sU2Y9LTE7ZnVuY3Rpb24gVGYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+U2Z8fChhLmN1cnJlbnQ9UmZbU2ZdLFJmW1NmXT1udWxsLFNmLS0pfWZ1bmN0aW9uIEcoYSxiKXtTZisrO1JmW1NmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFVmPXt9LEg9VGYoVWYpLFZmPVRmKCExKSxXZj1VZjtmdW5jdGlvbiBYZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFVmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWWYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBaZigpe0UoVmYpO0UoSCl9ZnVuY3Rpb24gJGYoYSxiLGMpe2lmKEguY3VycmVudCE9PVVmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coVmYsYyl9ZnVuY3Rpb24gYWcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxRYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBiZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VWY7V2Y9SC5jdXJyZW50O0coSCxhKTtHKFZmLFZmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGNnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YWcoYSxiLFdmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShWZiksRShIKSxHKEgsYSkpOkUoVmYpO0coVmYsYyl9dmFyIGRnPW51bGwsZWc9ITEsZmc9ITE7ZnVuY3Rpb24gZ2coYSl7bnVsbD09PWRnP2RnPVthXTpkZy5wdXNoKGEpfWZ1bmN0aW9uIGhnKGEpe2VnPSEwO2dnKGEpfVxuZnVuY3Rpb24gaWcoKXtpZighZmcmJm51bGwhPT1kZyl7Zmc9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWRnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZGc9bnVsbDtlZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZGcmJihkZz1kZy5zbGljZShhKzEpKSwkYihlYyxpZyksZTt9ZmluYWxseXtDPWIsZmc9ITF9fXJldHVybiBudWxsfXZhciBqZz10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBrZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbGc9VGYobnVsbCksbWc9bnVsbCxuZz1udWxsLG9nPW51bGw7ZnVuY3Rpb24gcGcoKXtvZz1uZz1tZz1udWxsfVxuZnVuY3Rpb24gcWcoYSl7dmFyIGI9bGcuY3VycmVudDtFKGxnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiByZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHNnKGEsYil7bWc9YTtvZz1uZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHRnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHVnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihvZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1uZyl7aWYobnVsbD09PW1nKXRocm93IEVycm9yKHAoMzA4KSk7bmc9YTttZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2Ugbmc9bmcubmV4dD1hO3JldHVybiBifXZhciB2Zz1udWxsLHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGM9Yy5zaGFyZWQsQmcoYSk/KGE9Yy5pbnRlcmxlYXZlZCxudWxsPT09YT8oYi5uZXh0PWIsbnVsbD09PXZnP3ZnPVtjXTp2Zy5wdXNoKGMpKTooYi5uZXh0PWEubmV4dCxhLm5leHQ9YiksYy5pbnRlcmxlYXZlZD1iKTooYT1jLnBlbmRpbmcsbnVsbD09PWE/Yi5uZXh0PWI6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMucGVuZGluZz1iKSl9ZnVuY3Rpb24gQ2coYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztCYyhhLGMpfX1cbmZ1bmN0aW9uIERnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBFZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7bnVsbCE9PW4mJihuPW4udXBkYXRlUXVldWUsaD1uLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bi5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHU9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7aD1mO2Rve3ZhciBxPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnEpPT09cSl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG09YSx3PWg7cT1iO3k9Yztzd2l0Y2gody50YWcpe2Nhc2UgMTptPXcucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSl7dT1tLmNhbGwoeSx1LHEpO2JyZWFrIGF9dT1tO2JyZWFrIGE7Y2FzZSAzOm0uZmxhZ3M9bS5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDptPXcucGF5bG9hZDtxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtP20uY2FsbCh5LHUscSk6bTtpZihudWxsPT09cXx8dm9pZCAwPT09cSlicmVhayBhO3U9QSh7fSx1LHEpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHE9ZS5lZmZlY3RzLG51bGw9PT1xP2UuZWZmZWN0cz1baF06cS5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cSx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49eSxrPXUpOm49bi5uZXh0PXksZ3w9cTtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHE9aCxoPXEubmV4dCxxLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXEsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz11KTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtGZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXV9fVxuZnVuY3Rpb24gR2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgSGc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gSWcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIE1nPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ViKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUpnKCksZT1LZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7Yj1MZyhhLGUsZCk7bnVsbCE9PWImJkNnKGIsYSxlKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1KZygpLGU9S2coYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7Yj1MZyhhLGUsZCk7bnVsbCE9PWImJkNnKGIsYSxlKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1KZygpLGQ9S2coYSksZT16ZyhjLFxuZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7QWcoYSxlKTtiPUxnKGEsZCxjKTtudWxsIT09YiYmQ2coYixhLGQpfX07ZnVuY3Rpb24gTmcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSGUoYyxkKXx8IUhlKGUsZik6ITB9XG5mdW5jdGlvbiBPZyhhLGIsYyl7dmFyIGQ9ITEsZT1VZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj11ZyhmKTooZT1ZZihiKT9XZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9YZihhLGUpOlVmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9TWc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmTWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBRZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUhnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dWcoZik6KGY9WWYoYik/V2Y6SC5jdXJyZW50LGUuY29udGV4dD1YZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoSWcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmTWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksRWcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9dmFyIFJnPVtdLFNnPTAsVGc9bnVsbCxVZz0wLFZnPVtdLFdnPTAsWGc9bnVsbCxZZz0xLFpnPVwiXCI7ZnVuY3Rpb24gJGcoYSxiKXtSZ1tTZysrXT1VZztSZ1tTZysrXT1UZztUZz1hO1VnPWJ9XG5mdW5jdGlvbiBhaChhLGIsYyl7VmdbV2crK109WWc7VmdbV2crK109Wmc7VmdbV2crK109WGc7WGc9YTt2YXIgZD1ZZzthPVpnO3ZhciBlPTMyLW5jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW5jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7WWc9MTw8MzItbmMoYikrZXxjPDxlfGQ7Wmc9ZithfWVsc2UgWWc9MTw8ZnxjPDxlfGQsWmc9YX1mdW5jdGlvbiBiaChhKXtudWxsIT09YS5yZXR1cm4mJigkZyhhLDEpLGFoKGEsMSwwKSl9ZnVuY3Rpb24gY2goYSl7Zm9yKDthPT09VGc7KVRnPVJnWy0tU2ddLFJnW1NnXT1udWxsLFVnPVJnWy0tU2ddLFJnW1NnXT1udWxsO2Zvcig7YT09PVhnOylYZz1WZ1stLVdnXSxWZ1tXZ109bnVsbCxaZz1WZ1stLVdnXSxWZ1tXZ109bnVsbCxZZz1WZ1stLVdnXSxWZ1tXZ109bnVsbH12YXIgZGg9bnVsbCxlaD1udWxsLEk9ITEsZmg9bnVsbDtcbmZ1bmN0aW9uIGdoKGEsYil7dmFyIGM9aGgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBpaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixkaD1hLGVoPUtmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixkaD1hLGVoPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1YZz97aWQ6WWcsb3ZlcmZsb3c6Wmd9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1oaCgxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9YyxkaD1hLGVoPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gamgoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBraChhKXtpZihJKXt2YXIgYj1laDtpZihiKXt2YXIgYz1iO2lmKCFpaChhLGIpKXtpZihqaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9S2YoYy5uZXh0U2libGluZyk7dmFyIGQ9ZGg7YiYmaWgoYSxiKT9naChkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLGRoPWEpfX1lbHNle2lmKGpoKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTtkaD1hfX19ZnVuY3Rpb24gbGgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2RoPWF9XG5mdW5jdGlvbiBtaChhKXtpZihhIT09ZGgpcmV0dXJuITE7aWYoIUkpcmV0dXJuIGxoKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRGYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPWVoKSl7aWYoamgoYSkpe2ZvcihhPWVoO2E7KWE9S2YoYS5uZXh0U2libGluZyk7dGhyb3cgRXJyb3IocCg0MTgpKTt9Zm9yKDtiOylnaChhLGIpLGI9S2YoYi5uZXh0U2libGluZyl9bGgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtlaD1LZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcblwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9ZWg9bnVsbH19ZWxzZSBlaD1kaD9LZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBuaCgpe2VoPWRoPW51bGw7ST0hMX1mdW5jdGlvbiBvaChhKXtudWxsPT09Zmg/Zmg9W2FdOmZoLnB1c2goYSl9XG5mdW5jdGlvbiBwaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PUhnJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBxaChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiByaChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gc2goYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9dGgoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj11aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09d2EpcmV0dXJuIG4oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUdhJiZyaChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXBoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD12aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1waChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXdoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHUoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj11aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB1YTpyZXR1cm4gYz12aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXBoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB2YTpyZXR1cm4gYj13aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBHYTp2YXIgZD1iLl9pbml0O3JldHVybiB1KGEsZChiLl9wYXlsb2FkKSxjKX1pZihkYihiKXx8SmEoYikpcmV0dXJuIGI9eGgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7cWgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB1YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgR2E6cmV0dXJuIGU9Yy5faW5pdCxxKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZGIoYyl8fEphKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtxaChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHVhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBHYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZGIoZCl8fEphKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtxaChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxuPW51bGwscj1nLG09Zz0wLHg9bnVsbDtudWxsIT09ciYmbTxoLmxlbmd0aDttKyspe3IuaW5kZXg+bT8oeD1yLHI9bnVsbCk6eD1yLnNpYmxpbmc7dmFyIHY9cShlLHIsaFttXSxrKTtpZihudWxsPT09dil7bnVsbD09PXImJihyPXgpO2JyZWFrfWEmJnImJm51bGw9PT12LmFsdGVybmF0ZSYmYihlLHIpO2c9Zih2LGcsbSk7bnVsbD09PW4/bD12Om4uc2libGluZz12O249djtyPXh9aWYobT09PWgubGVuZ3RoKXJldHVybiBjKGUsciksSSYmJGcoZSxtKSxsO2lmKG51bGw9PT1yKXtmb3IoO208aC5sZW5ndGg7bSsrKXI9dShlLGhbbV0sayksbnVsbCE9PXImJihnPWYocixnLG0pLG51bGw9PT1uP2w9cjpuLnNpYmxpbmc9cixuPXIpO0kmJiRnKGUsbSk7cmV0dXJuIGx9Zm9yKHI9ZChlLHIpO208aC5sZW5ndGg7bSsrKXg9eShyLGUsbSxoW21dLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09XG54LmtleT9tOngua2V5KSxnPWYoeCxnLG0pLG51bGw9PT1uP2w9eDpuLnNpYmxpbmc9eCxuPXgpO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmJGcoZSxtKTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUphKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgbj1sPW51bGwsbT1nLHI9Zz0wLHg9bnVsbCx2PWgubmV4dCgpO251bGwhPT1tJiYhdi5kb25lO3IrKyx2PWgubmV4dCgpKXttLmluZGV4PnI/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB3PXEoZSxtLHYudmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodyxnLHIpO251bGw9PT1uP2w9dzpuLnNpYmxpbmc9dztuPXc7bT14fWlmKHYuZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmJGcoZSxyKSxsO2lmKG51bGw9PT1tKXtmb3IoOyF2LmRvbmU7cisrLHY9aC5uZXh0KCkpdj11KGUsdi52YWx1ZSxrKSxudWxsIT09diYmKGc9Zih2LGcsciksbnVsbD09PW4/bD12Om4uc2libGluZz12LG49dik7SSYmJGcoZSxyKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IXYuZG9uZTtyKyssdj1oLm5leHQoKSl2PXkobSxlLHIsdi52YWx1ZSxrKSxudWxsIT09diYmKGEmJm51bGwhPT12LmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PXYua2V5P3I6di5rZXkpLGc9Zih2LGcsciksbnVsbD09PW4/bD12Om4uc2libGluZz12LG49dik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiYkZyhlLHIpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09d2EmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdWE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09d2Epe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhJiZyaChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9cGgoYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXdhPyhkPXhoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD12aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1waChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdmE6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD13aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEdhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihkYihmKSlyZXR1cm4gbShhLGQsZixoKTtpZihKYShmKSlyZXR1cm4gdyhhLGQsZixoKTtxaChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXVoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIHloPXNoKCEwKSx6aD1zaCghMSksQWg9e30sQmg9VGYoQWgpLENoPVRmKEFoKSxEaD1UZihBaCk7ZnVuY3Rpb24gRWgoYSl7aWYoYT09PUFoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gRmgoYSxiKXtHKERoLGIpO0coQ2gsYSk7RyhCaCxBaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTprYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9a2IoYixhKX1FKEJoKTtHKEJoLGIpfWZ1bmN0aW9uIEdoKCl7RShCaCk7RShDaCk7RShEaCl9XG5mdW5jdGlvbiBIaChhKXtFaChEaC5jdXJyZW50KTt2YXIgYj1FaChCaC5jdXJyZW50KTt2YXIgYz1rYihiLGEudHlwZSk7YiE9PWMmJihHKENoLGEpLEcoQmgsYykpfWZ1bmN0aW9uIEloKGEpe0NoLmN1cnJlbnQ9PT1hJiYoRShCaCksRShDaCkpfXZhciBLPVRmKDApO1xuZnVuY3Rpb24gSmgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIEtoPVtdO1xuZnVuY3Rpb24gTGgoKXtmb3IodmFyIGE9MDthPEtoLmxlbmd0aDthKyspS2hbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtLaC5sZW5ndGg9MH12YXIgTWg9dGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixOaD10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxPaD0wLEw9bnVsbCxNPW51bGwsTj1udWxsLFBoPSExLFFoPSExLFJoPTAsU2g9MDtmdW5jdGlvbiBPKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gVGgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighR2UoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFVoKGEsYixjLGQsZSxmKXtPaD1mO0w9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO01oLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/Vmg6V2g7YT1jKGQsZSk7aWYoUWgpe2Y9MDtkb3tRaD0hMTtSaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtOPU09bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7TWguY3VycmVudD1YaDthPWMoZCxlKX13aGlsZShRaCl9TWguY3VycmVudD1ZaDtiPW51bGwhPT1NJiZudWxsIT09TS5uZXh0O09oPTA7Tj1NPUw9bnVsbDtQaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gWmgoKXt2YXIgYT0wIT09Umg7Umg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uICRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlPU49YTpOPU4ubmV4dD1hO3JldHVybiBOfWZ1bmN0aW9uIGFpKCl7aWYobnVsbD09PU0pe3ZhciBhPUwuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU0ubmV4dDt2YXIgYj1udWxsPT09Tj9MLm1lbW9pemVkU3RhdGU6Ti5uZXh0O2lmKG51bGwhPT1iKU49YixNPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO009YTthPXttZW1vaXplZFN0YXRlOk0ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6TS5iYXNlU3RhdGUsYmFzZVF1ZXVlOk0uYmFzZVF1ZXVlLHF1ZXVlOk0ucXVldWUsbmV4dDpudWxsfTtudWxsPT09Tj9MLm1lbW9pemVkU3RhdGU9Tj1hOk49Ti5uZXh0PWF9cmV0dXJuIE59XG5mdW5jdGlvbiBiaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGNpKGEpe3ZhciBiPWFpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TSxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBuPWwubGFuZTtpZigoT2gmbik9PT1uKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgdT17bGFuZTpuLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az11LGc9ZCk6az1rLm5leHQ9dTtMLmxhbmVzfD1uO0ZnfD1ufWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0dlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHRnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLEwubGFuZXN8PWYsRmd8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBkaShhKXt2YXIgYj1haSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7R2UoZixiLm1lbW9pemVkU3RhdGUpfHwodGc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBlaSgpe31cbmZ1bmN0aW9uIGZpKGEsYil7dmFyIGM9TCxkPWFpKCksZT1iKCksZj0hR2UoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSx0Zz0hMCk7ZD1kLnF1ZXVlO2dpKGhpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PU4mJk4ubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtpaSg5LGppLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVApdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KE9oJjMwKXx8a2koYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIGtpKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9TC51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxMLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIGppKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7bGkoYikmJkxnKGEsMSwtMSl9ZnVuY3Rpb24gaGkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7bGkoYikmJkxnKGEsMSwtMSl9KX1mdW5jdGlvbiBsaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFHZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBtaShhKXt2YXIgYj0kaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmJpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9bmkuYmluZChudWxsLEwsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGlpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPUwudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTC51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBvaSgpe3JldHVybiBhaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gcGkoYSxiLGMsZCl7dmFyIGU9JGgoKTtMLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1paSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCl7dmFyIGU9YWkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09TSl7dmFyIGc9TS5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZUaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1paShiLGMsZixkKTtyZXR1cm59fUwuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWlpKDF8YixjLGYsZCl9ZnVuY3Rpb24gcmkoYSxiKXtyZXR1cm4gcGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gZ2koYSxiKXtyZXR1cm4gcWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gc2koYSxiKXtyZXR1cm4gcWkoNCwyLGEsYil9ZnVuY3Rpb24gdGkoYSxiKXtyZXR1cm4gcWkoNCw0LGEsYil9XG5mdW5jdGlvbiB1aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHZpKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gcWkoNCw0LHVpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHdpKCl7fWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YWkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJlRoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24geWkoYSxiKXt2YXIgYz1haSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmVGgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gemkoYSxiLGMpe2lmKDA9PT0oT2gmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLHRnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztHZShjLGIpfHwoYz14YygpLEwubGFuZXN8PWMsRmd8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEFpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPU5oLnRyYW5zaXRpb247TmgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLE5oLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gQmkoKXtyZXR1cm4gYWkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gQ2koYSxiLGMpe3ZhciBkPUtnKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O0RpKGEpP0VpKGIsYyk6KEZpKGEsYixjKSxjPUpnKCksYT1MZyhhLGQsYyksbnVsbCE9PWEmJkdpKGEsYixkKSl9XG5mdW5jdGlvbiBuaShhLGIsYyl7dmFyIGQ9S2coYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoRGkoYSkpRWkoYixlKTtlbHNle0ZpKGEsYixlKTt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEdlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31jPUpnKCk7YT1MZyhhLGQsYyk7bnVsbCE9PWEmJkdpKGEsYixkKX19ZnVuY3Rpb24gRGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1MfHxudWxsIT09YiYmYj09PUx9XG5mdW5jdGlvbiBFaShhLGIpe1FoPVBoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gRmkoYSxiLGMpe0JnKGEpPyhhPWIuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGMubmV4dD1jLG51bGw9PT12Zz92Zz1bYl06dmcucHVzaChiKSk6KGMubmV4dD1hLm5leHQsYS5uZXh0PWMpLGIuaW50ZXJsZWF2ZWQ9Yyk6KGE9Yi5wZW5kaW5nLG51bGw9PT1hP2MubmV4dD1jOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLnBlbmRpbmc9Yyl9ZnVuY3Rpb24gR2koYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztCYyhhLGMpfX1cbnZhciBZaD17cmVhZENvbnRleHQ6dWcsdXNlQ2FsbGJhY2s6Tyx1c2VDb250ZXh0Ok8sdXNlRWZmZWN0Ok8sdXNlSW1wZXJhdGl2ZUhhbmRsZTpPLHVzZUluc2VydGlvbkVmZmVjdDpPLHVzZUxheW91dEVmZmVjdDpPLHVzZU1lbW86Tyx1c2VSZWR1Y2VyOk8sdXNlUmVmOk8sdXNlU3RhdGU6Tyx1c2VEZWJ1Z1ZhbHVlOk8sdXNlRGVmZXJyZWRWYWx1ZTpPLHVzZVRyYW5zaXRpb246Tyx1c2VNdXRhYmxlU291cmNlOk8sdXNlU3luY0V4dGVybmFsU3RvcmU6Tyx1c2VJZDpPLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sVmg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7JGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp1Zyx1c2VFZmZlY3Q6cmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHBpKDQxOTQzMDgsXG40LHVpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPSRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPSRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9Q2kuYmluZChudWxsLEwsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuJGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6bWksdXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiAkaCgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPW1pKCExKSxiPWFbMF07YT1BaS5iaW5kKG51bGwsYVsxXSk7JGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1MLGU9JGgoKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09UCl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oT2gmMzApfHxraShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3JpKGhpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7aWkoOSxqaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPSRoKCksYj1QLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9Wmc7dmFyIGQ9WWc7Yz0oZCZ+KDE8PDMyLW5jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVJoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1TaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sV2g9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOnhpLHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OmdpLHVzZUltcGVyYXRpdmVIYW5kbGU6dmksdXNlSW5zZXJ0aW9uRWZmZWN0OnNpLHVzZUxheW91dEVmZmVjdDp0aSx1c2VNZW1vOnlpLHVzZVJlZHVjZXI6Y2ksdXNlUmVmOm9pLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGNpKGJpKX0sXG51c2VEZWJ1Z1ZhbHVlOndpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9YWkoKTtyZXR1cm4gemkoYixNLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1jaShiaSlbMF0sYj1haSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZWksdXNlU3luY0V4dGVybmFsU3RvcmU6ZmksdXNlSWQ6QmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxYaD17cmVhZENvbnRleHQ6dWcsdXNlQ2FsbGJhY2s6eGksdXNlQ29udGV4dDp1Zyx1c2VFZmZlY3Q6Z2ksdXNlSW1wZXJhdGl2ZUhhbmRsZTp2aSx1c2VJbnNlcnRpb25FZmZlY3Q6c2ksdXNlTGF5b3V0RWZmZWN0OnRpLHVzZU1lbW86eWksdXNlUmVkdWNlcjpkaSx1c2VSZWY6b2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZGkoYmkpfSx1c2VEZWJ1Z1ZhbHVlOndpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9YWkoKTtyZXR1cm4gbnVsbD09PVxuTT9iLm1lbW9pemVkU3RhdGU9YTp6aShiLE0ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWRpKGJpKVswXSxiPWFpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTplaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmaSx1c2VJZDpCaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEhpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPU9hKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBJaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX1cbnZhciBKaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBLaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtMaXx8KExpPSEwLE1pPWQpO0lpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gTmkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7SWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0lpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09T2k/T2k9bmV3IFNldChbdGhpc10pOk9pLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBQaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IEppO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9UWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gUmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj16ZygtMSwxKSxiLnRhZz0yLEFnKGMsYikpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgVGksVWksVmksV2k7XG5UaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07VWk9ZnVuY3Rpb24oKXt9O1xuVmk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0VoKEJoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WGEoYSxlKTtkPVhhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9ZmIoYSxlKTtkPWZiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QWYpfXRiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtXaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIFhpKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFEoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBZaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7Y2goYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUShiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWWYoYi50eXBlKSYmWmYoKSxRKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7R2goKTtFKFZmKTtFKEgpO0xoKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKW1oKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09ZmgmJihaaShmaCksZmg9bnVsbCkpO1VpKGEsYik7UShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6SWgoYik7dmFyIGU9RWgoRGguY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpVmkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1EoYik7cmV0dXJuIG51bGx9YT1FaChCaC5jdXJyZW50KTtpZihtaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtOZl09YjtkW09mXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxrZi5sZW5ndGg7ZSsrKUQoa2ZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpZYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmdiKGQsZiksRChcImludmFsaWRcIixkKX10YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmemYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmemYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlVhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VWEoZCk7aWIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QWYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1qYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW05mXT1iO2FbT2ZdPWQ7VGkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dWIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8a2YubGVuZ3RoO2UrKylEKGtmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOllhKGEsZCk7ZT1YYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmdiKGEsZCk7ZT1mYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dGIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/cmIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm1iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmbmIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm5iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnNhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VWEoYSk7Y2IoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpVYShhKTtpYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrUmEoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9lYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZWIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUFmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1RKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlXaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUVoKERoLmN1cnJlbnQpO0VoKEJoLmN1cnJlbnQpO2lmKG1oKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbTmZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbmRoLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOnpmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW05mXT1iLGIuc3RhdGVOb2RlPWR9UShiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoSyk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoSSYmbnVsbCE9PWVoJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpe2ZvcihkPWVoO2Q7KWQ9S2YoZC5uZXh0U2libGluZyk7bmgoKTtiLmZsYWdzfD05ODU2MDtyZXR1cm4gYn1pZihudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7ZD1taChiKTtpZihudWxsPT09YSl7aWYoIWQpdGhyb3cgRXJyb3IocCgzMTgpKTtkPVxuYi5tZW1vaXplZFN0YXRlO2Q9bnVsbCE9PWQ/ZC5kZWh5ZHJhdGVkOm51bGw7aWYoIWQpdGhyb3cgRXJyb3IocCgzMTcpKTtkW05mXT1ifWVsc2UgbmgoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1EoYik7cmV0dXJuIG51bGx9bnVsbCE9PWZoJiYoWmkoZmgpLGZoPW51bGwpO2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/bWgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2QhPT1jJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KEsuY3VycmVudCYxKT8wPT09UiYmKFI9Myk6JGkoKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UShiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEdoKCksVWkoYSxiKSxudWxsPT09YSYmcmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUShiKSxcbm51bGw7Y2FzZSAxMDpyZXR1cm4gcWcoYi50eXBlLl9jb250ZXh0KSxRKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWWYoYi50eXBlKSYmWmYoKSxRKGIpLG51bGw7Y2FzZSAxOTpFKEspO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBRKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpWGkoZiwhMSk7ZWxzZXtpZigwIT09Unx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUpoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7WGkoZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9XG5udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKEssSy5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPmFqJiYoYi5mbGFnc3w9XG4xMjgsZD0hMCxYaShmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1KaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLFhpKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBRKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5haiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxYaShmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9YixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPVxuQigpLGIuc2libGluZz1udWxsLGM9Sy5jdXJyZW50LEcoSyxkP2MmMXwyOmMmMSksYjtRKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYmooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShjaiYxMDczNzQxODI0KSYmKFEoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpRKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fXZhciBkaj10YS5SZWFjdEN1cnJlbnRPd25lcix0Zz0hMTtmdW5jdGlvbiBlaihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3poKGIsbnVsbCxjLGQpOnloKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gZmooYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3NnKGIsZSk7ZD1VaChhLGIsYyxkLGYsZSk7Yz1aaCgpO2lmKG51bGwhPT1hJiYhdGcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxnaihhLGIsZSk7SSYmYyYmYmgoYik7Yi5mbGFnc3w9MTtlaihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWlqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGpqKGEsYixmLGQsZSk7YT12aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkhlO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gZ2ooYSxiLGUpfWIuZmxhZ3N8PTE7YT10aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGpqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihIZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKHRnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJih0Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGdqKGEsYixlKX1yZXR1cm4ga2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGxqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhtaixjaiksY2p8PWM7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmMsRyhtaixjaiksY2p8PWQ7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKG1qLGNqKSxjanw9YSxudWxsO1xuZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhtaixjaiksY2p8PWQ7ZWooYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbmooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24ga2ooYSxiLGMsZCxlKXt2YXIgZj1ZZihjKT9XZjpILmN1cnJlbnQ7Zj1YZihiLGYpO3NnKGIsZSk7Yz1VaChhLGIsYyxkLGYsZSk7ZD1aaCgpO2lmKG51bGwhPT1hJiYhdGcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxnaihhLGIsZSk7SSYmZCYmYmgoYik7Yi5mbGFnc3w9MTtlaihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9qKGEsYixjLGQsZSl7aWYoWWYoYykpe3ZhciBmPSEwO2JnKGIpfWVsc2UgZj0hMTtzZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxPZyhiLGMsZCksUWcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dWcobCk6KGw9WWYoYyk/V2Y6SC5jdXJyZW50LGw9WGYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsdT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7dXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlBnKGIsZyxkLGwpO3dnPSExO3ZhciBxPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXE7RWcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHEhPT1rfHxWZi5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihJZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fE5nKGIsYyxoLGQscSxrLGwpKT8odXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6a2coYi50eXBlLGgpO2cucHJvcHM9bDt1PWIucGVuZGluZ1Byb3BzO3E9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dWcoayk6KGs9WWYoYyk/V2Y6SC5jdXJyZW50LGs9WGYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09XG50eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT11fHxxIT09aykmJlBnKGIsZyxkLGspO3dnPSExO3E9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cTtFZyhiLGQsZyxlKTt2YXIgbT1iLm1lbW9pemVkU3RhdGU7aCE9PXV8fHEhPT1tfHxWZi5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihJZyhiLGMseSxkKSxtPWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fE5nKGIsYyxsLGQscSxtLGspfHwhMSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxtLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbSxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW0pLGcucHJvcHM9ZCxnLnN0YXRlPW0sZy5jb250ZXh0PVxuayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBwaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBwaihhLGIsYyxkLGUsZil7bmooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmNnKGIsYywhMSksZ2ooYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZGouY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD15aChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXloKGIsbnVsbCxoLGYpKTplaihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZjZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHFqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/JGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmJGYoYSxiLmNvbnRleHQsITEpO0ZoKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSl7bmgoKTtvaChlKTtiLmZsYWdzfD0yNTY7ZWooYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIHNqPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gdGooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fWZ1bmN0aW9uIHVqKGEsYil7cmV0dXJue2Jhc2VMYW5lczphLmJhc2VMYW5lc3xiLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmEudHJhbnNpdGlvbnN9fVxuZnVuY3Rpb24gdmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9Sy5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKEssZSYxKTtpZihudWxsPT09YSl7a2goYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2U9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxlPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZX0sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5lKTpmPXdqKGUsZCwwLG51bGwpLGE9eGgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9dGooYyksYi5tZW1vaXplZFN0YXRlPXNqLGEpOnhqKGIsZSl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2g9ZS5kZWh5ZHJhdGVkO2lmKG51bGwhPT1oKXtpZihnKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1Nyx5aihhLGIsYyxFcnJvcihwKDQyMikpKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9d2ooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9eGgoZixlLGMsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZ5aChiLGEuY2hpbGQsXG5udWxsLGMpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT10aihjKTtiLm1lbW9pemVkU3RhdGU9c2o7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpYj15aihhLGIsYyxudWxsKTtlbHNlIGlmKFwiJCFcIj09PWguZGF0YSliPXlqKGEsYixjLEVycm9yKHAoNDE5KSkpO2Vsc2UgaWYoZD0wIT09KGMmYS5jaGlsZExhbmVzKSx0Z3x8ZCl7ZD1QO2lmKG51bGwhPT1kKXtzd2l0Y2goYyYtYyl7Y2FzZSA0OmY9MjticmVhaztjYXNlIDE2OmY9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6Zj0zMjticmVhaztjYXNlIDUzNjg3MDkxMjpmPVxuMjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6Zj0wfWQ9MCE9PShmJihkLnN1c3BlbmRlZExhbmVzfGMpKT8wOmY7MCE9PWQmJmQhPT1lLnJldHJ5TGFuZSYmKGUucmV0cnlMYW5lPWQsTGcoYSxkLC0xKSl9JGkoKTtiPXlqKGEsYixjLEVycm9yKHAoNDIxKSkpfWVsc2VcIiQ/XCI9PT1oLmRhdGE/KGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj16ai5iaW5kKG51bGwsYSksaC5fcmVhY3RSZXRyeT1iLGI9bnVsbCk6KGM9ZS50cmVlQ29udGV4dCxlaD1LZihoLm5leHRTaWJsaW5nKSxkaD1iLEk9ITAsZmg9bnVsbCxudWxsIT09YyYmKFZnW1dnKytdPVlnLFZnW1dnKytdPVpnLFZnW1dnKytdPVhnLFlnPWMuaWQsWmc9Yy5vdmVyZmxvdyxYZz1iKSxiPXhqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLGIuZmxhZ3N8PTQwOTYpO3JldHVybiBifWlmKGYpcmV0dXJuIGQ9QWooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsXG5mLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/dGooYyk6dWooZSxjKSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaixkO2M9QmooYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD1BaihhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/dGooYyk6dWooZSxjKSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaixkO2M9QmooYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24geGooYSxiKXtiPXdqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1cbmZ1bmN0aW9uIEJqKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz10aChlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYxKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGQ9Yi5kZWxldGlvbnMsbnVsbD09PWQ/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGEpKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gQWooYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGU7YT1hLmNoaWxkO3ZhciBnPWEuc2libGluZyxoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjEpJiZiLmNoaWxkIT09YT8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsYi5kZWxldGlvbnM9bnVsbCk6KGM9dGgoYSxoKSxjLnN1YnRyZWVGbGFncz1hLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWc/ZD10aChnLGQpOihkPXhoKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWooYSxiLGMsZCl7bnVsbCE9PWQmJm9oKGQpO3loKGIsYS5jaGlsZCxudWxsLGMpO2E9eGooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIENqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7cmcoYS5yZXR1cm4sYixjKX1mdW5jdGlvbiBEaihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24gRWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtlaihhLGIsZC5jaGlsZHJlbixjKTtkPUsuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZDaihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKUNqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhLLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1KaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO0RqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09SmgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfURqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOkRqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGdqKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtGZ3w9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9dGgoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXRoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBGaihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6cWooYik7bmgoKTticmVhaztjYXNlIDU6SGgoYik7YnJlYWs7Y2FzZSAxOllmKGIudHlwZSkmJmJnKGIpO2JyZWFrO2Nhc2UgNDpGaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0cobGcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKEssSy5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB2aihhLGIsYyk7RyhLLEsuY3VycmVudCYxKTthPWdqKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhLLEsuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4gRWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coSyxLLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxsaihhLGIsYyl9cmV0dXJuIGdqKGEsYixjKX1cbmZ1bmN0aW9uIEdqKGEsYil7Y2goYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBHaCgpLEUoVmYpLEUoSCksTGgoKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBJaChiKSxudWxsO2Nhc2UgMTM6RShLKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7bmgoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShLKSxudWxsO2Nhc2UgNDpyZXR1cm4gR2goKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHFnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGJqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEhqPSExLFM9ITEsSWo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVD1udWxsO2Z1bmN0aW9uIEpqKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VShhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBLaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtVKGEsYixkKX19dmFyIExqPSExO1xuZnVuY3Rpb24gTWooYSxiKXtCZj1jZDthPUxlKCk7aWYoTWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goWil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG49MCx1PWEscT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7dSE9PWN8fDAhPT1lJiYzIT09dS5ub2RlVHlwZXx8KGg9ZytlKTt1IT09Znx8MCE9PWQmJjMhPT11Lm5vZGVUeXBlfHwoaz1nK2QpOzM9PT11Lm5vZGVUeXBlJiYoZys9XG51Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT11LmZpcnN0Q2hpbGQpKWJyZWFrO3E9dTt1PXl9Zm9yKDs7KXtpZih1PT09YSlicmVhayBiO3E9PT1jJiYrK2w9PT1lJiYoaD1nKTtxPT09ZiYmKytuPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXUubmV4dFNpYmxpbmcpKWJyZWFrO3U9cTtxPXUucGFyZW50Tm9kZX11PXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtDZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtjZD0hMTtmb3IoVD1iO251bGwhPT1UOylpZihiPVQsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVD1hO2Vsc2UgZm9yKDtudWxsIT09VDspe2I9VDt0cnl7dmFyIG09Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bSl7dmFyIHc9bS5tZW1vaXplZFByb3BzLEo9bS5tZW1vaXplZFN0YXRlLHY9Yi5zdGF0ZU5vZGUseD12LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dzprZyhiLnR5cGUsdyksSik7di5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT14fWJyZWFrO2Nhc2UgMzp2YXIgcj1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKDE9PT1yLm5vZGVUeXBlKXIudGV4dENvbnRlbnQ9XCJcIjtlbHNlIGlmKDk9PT1yLm5vZGVUeXBlKXt2YXIgRj1yLmJvZHk7bnVsbCE9RiYmKEYudGV4dENvbnRlbnQ9XCJcIil9YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChaKXtVKGIsYi5yZXR1cm4sWil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Q9YTticmVha31UPWIucmV0dXJufW09TGo7TGo9ITE7cmV0dXJuIG19XG5mdW5jdGlvbiBOaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZLaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBPaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gUGooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFFqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxRaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW05mXSxkZWxldGUgYltPZl0sZGVsZXRlIGJbbmZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltRZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFJqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gU2ooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8UmooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFRqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1BZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihUaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVRqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFVqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVWooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylVaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFY9bnVsbCxWaj0hMTtmdW5jdGlvbiBXaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspWGooYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe2lmKGtjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2Mub25Db21taXRGaWJlclVubW91bnQpdHJ5e2tjLm9uQ29tbWl0RmliZXJVbm1vdW50KGpjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpTfHxKaihjLGIpO2Nhc2UgNjp2YXIgZD1WLGU9Vmo7Vj1udWxsO1dqKGEsYixjKTtWPWQ7Vmo9ZTtudWxsIT09ViYmKFZqPyhhPVYsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6Vi5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVYmJihWaj8oYT1WLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/SmYoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZKZihhLGMpLGFkKGEpKTpKZihWLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9VjtlPVZqO1Y9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztWaj0hMDtcbldqKGEsYixjKTtWPWQ7Vmo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVMmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP0tqKGMsYixnKTowIT09KGYmNCkmJktqKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVdqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVMmJihKaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VShjLGIsaCl9V2ooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6V2ooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFM9KGQ9Uyl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxXaihhLGIsYyksUz1kKTpXaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpXaihhLGIsYyl9fWZ1bmN0aW9uIFlqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IElqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9WmouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBhayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6Vj1oLnN0YXRlTm9kZTtWaj0hMTticmVhayBhO2Nhc2UgMzpWPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Vmo9ITA7YnJlYWsgYTtjYXNlIDQ6Vj1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1ZqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09Vil0aHJvdyBFcnJvcihwKDE2MCkpO1hqKGYsZyxlKTtWPW51bGw7Vmo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1UoZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyliayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gYmsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6YWsoYixhKTtjayhhKTtpZihkJjQpe3RyeXtOaigzLGEsYS5yZXR1cm4pLE9qKDMsYSl9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfXRyeXtOaig1LGEsYS5yZXR1cm4pfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19YnJlYWs7Y2FzZSAxOmFrKGIsYSk7Y2soYSk7ZCY1MTImJm51bGwhPT1jJiZKaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6YWsoYixhKTtjayhhKTtkJjUxMiYmbnVsbCE9PWMmJkpqKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtuYihlLFwiXCIpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmWmEoZSxmKTt1YihoLGcpO3ZhciBsPXViKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBuPWtbZ10sdT1rW2crMV07XCJzdHlsZVwiPT09bj9yYihlLHUpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW4/bWIoZSx1KTpcImNoaWxkcmVuXCI9PT1uP25iKGUsdSk6c2EoZSxuLHUsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOiRhKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHE9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ViKGUsISFmLm11bHRpcGxlLHksITEpOnEhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9lYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTplYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW09mXT1mfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19YnJlYWs7Y2FzZSA2OmFrKGIsYSk7Y2soYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtsPWEuc3RhdGVOb2RlO249YS5tZW1vaXplZFByb3BzO3RyeXtsLm5vZGVWYWx1ZT1ufWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19YnJlYWs7Y2FzZSAzOmFrKGIsYSk7Y2soYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YWQoYi5jb250YWluZXJJbmZvKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9YnJlYWs7Y2FzZSA0OmFrKGIsYSk7Y2soYSk7YnJlYWs7Y2FzZSAxMzphayhiLGEpO2NrKGEpO2w9YS5jaGlsZDtsLmZsYWdzJjgxOTImJm51bGwhPT1sLm1lbW9pemVkU3RhdGUmJihudWxsPT09bC5hbHRlcm5hdGV8fG51bGw9PT1sLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlKSYmXG4oZGs9QigpKTtkJjQmJllqKGEpO2JyZWFrO2Nhc2UgMjI6bD1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oUz0obj1TKXx8bCxhayhiLGEpLFM9bik6YWsoYixhKTtjayhhKTtpZihkJjgxOTIpe249bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTthOmZvcih1PW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PXUpe3U9cTt0cnl7ZT1xLnN0YXRlTm9kZSxuPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1xYihcImRpc3BsYXlcIixnKSl9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX19ZWxzZSBpZig2PT09XG5xLnRhZyl7aWYobnVsbD09PXUpdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1uP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO3U9PT1xJiYodT1udWxsKTtxPXEucmV0dXJufXU9PT1xJiYodT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfWlmKG4mJiFsJiYwIT09KGEubW9kZSYxKSlmb3IoVD1hLGE9YS5jaGlsZDtudWxsIT09YTspe2ZvcihsPVQ9YTtudWxsIT09VDspe249VDt1PW4uY2hpbGQ7c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6TmooNCxcbm4sbi5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpKaihuLG4ucmV0dXJuKTtmPW4uc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudFdpbGxVbm1vdW50KXtxPW47eT1uLnJldHVybjt0cnl7ZT1xLGYucHJvcHM9ZS5tZW1vaXplZFByb3BzLGYuc3RhdGU9ZS5tZW1vaXplZFN0YXRlLGYuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChtKXtVKHEseSxtKX19YnJlYWs7Y2FzZSA1OkpqKG4sbi5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PW4ubWVtb2l6ZWRTdGF0ZSl7ZWsobCk7Y29udGludWV9fW51bGwhPT11Pyh1LnJldHVybj1uLFQ9dSk6ZWsobCl9YT1hLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6YWsoYixhKTtjayhhKTtkJjQmJllqKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDphayhiLGEpLGNrKGEpfX1cbmZ1bmN0aW9uIGNrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoUmooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihuYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9U2ooYSk7VWooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVNqKGEpO1RqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtVKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGZrKGEsYixjKXtUPWE7Z2soYSxiLGMpfVxuZnVuY3Rpb24gZ2soYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09VDspe3ZhciBlPVQsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEhqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxTO2g9SGo7dmFyIGw9UztIaj1nO2lmKChTPWspJiYhbClmb3IoVD1lO251bGwhPT1UOylnPVQsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/aGsoZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVD1rKTpoayhlKTtmb3IoO251bGwhPT1mOylUPWYsZ2soZixiLGMpLGY9Zi5zaWJsaW5nO1Q9ZTtIaj1oO1M9bH1payhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxUPWYpOmlrKGEsYixjKX19XG5mdW5jdGlvbiBpayhhKXtmb3IoO251bGwhPT1UOyl7dmFyIGI9VDtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlN8fE9qKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVMpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6a2coYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmR2coYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfUdnKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG49bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1uKXt2YXIgdT1uLmRlaHlkcmF0ZWQ7bnVsbCE9PXUmJmFkKHUpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31TfHxiLmZsYWdzJjUxMiYmUGooYil9Y2F0Y2gocSl7VShiLGIucmV0dXJuLHEpfX1pZihiPT09YSl7VD1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtUPWM7YnJlYWt9VD1iLnJldHVybn19ZnVuY3Rpb24gZWsoYSl7Zm9yKDtudWxsIT09VDspe3ZhciBiPVQ7aWYoYj09PWEpe1Q9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Q9YzticmVha31UPWIucmV0dXJufX1cbmZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVQ7KXt2YXIgYj1UO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e09qKDQsYil9Y2F0Y2goayl7VShiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1UoYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7UGooYil9Y2F0Y2goayl7VShiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtQaihiKX1jYXRjaChrKXtVKGIsZyxrKX19fWNhdGNoKGspe1UoYixiLnJldHVybixrKX1pZihiPT09YSl7VD1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47VD1oO2JyZWFrfVQ9Yi5yZXR1cm59fVxudmFyIGprPU1hdGguY2VpbCxraz10YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGxrPXRhLlJlYWN0Q3VycmVudE93bmVyLG1rPXRhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFc9MCxQPW51bGwsWD1udWxsLFk9MCxjaj0wLG1qPVRmKDApLFI9MCxuaz1udWxsLEZnPTAsb2s9MCxwaz0wLHFrPW51bGwscms9bnVsbCxkaz0wLGFqPUluZmluaXR5LHNrPW51bGwsTGk9ITEsTWk9bnVsbCxPaT1udWxsLHRrPSExLHVrPW51bGwsdms9MCx3az0wLHhrPW51bGwseWs9LTEsems9MDtmdW5jdGlvbiBKZygpe3JldHVybiAwIT09KFcmNik/QigpOi0xIT09eWs/eWs6eWs9QigpfVxuZnVuY3Rpb24gS2coYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShXJjIpJiYwIT09WSlyZXR1cm4gWSYtWTtpZihudWxsIT09amcudHJhbnNpdGlvbilyZXR1cm4gMD09PXprJiYoems9eGMoKSksems7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjppZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIExnKGEsYixjKXtpZig1MDx3ayl0aHJvdyB3az0wLHhrPW51bGwsRXJyb3IocCgxODUpKTt2YXIgZD1BayhhLGIpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO3pjKGQsYixjKTtpZigwPT09KFcmMil8fGQhPT1QKWQ9PT1QJiYoMD09PShXJjIpJiYob2t8PWIpLDQ9PT1SJiZCayhkLFkpKSxDayhkLGMpLDE9PT1iJiYwPT09VyYmMD09PShhLm1vZGUmMSkmJihhaj1CKCkrNTAwLGVnJiZpZygpKTtyZXR1cm4gZH1cbmZ1bmN0aW9uIEFrKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1mdW5jdGlvbiBCZyhhKXtyZXR1cm4obnVsbCE9PVB8fG51bGwhPT12ZykmJjAhPT0oYS5tb2RlJjEpJiYwPT09KFcmMil9XG5mdW5jdGlvbiBDayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3ZjKGEsYik7dmFyIGQ9dGMoYSxhPT09UD9ZOjApO2lmKDA9PT1kKW51bGwhPT1jJiZhYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmFjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9oZyhEay5iaW5kKG51bGwsYSkpOmdnKERrLmJpbmQobnVsbCxhKSksSWYoZnVuY3Rpb24oKXswPT09VyYmaWcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChDYyhkKSl7Y2FzZSAxOmM9ZWM7YnJlYWs7Y2FzZSA0OmM9ZmM7YnJlYWs7Y2FzZSAxNjpjPWdjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9aWM7YnJlYWs7ZGVmYXVsdDpjPWdjfWM9RWsoYyxGay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gRmsoYSxiKXt5az0tMTt6az0wO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKEdrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD10YyhhLGE9PT1QP1k6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUhrKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9VztXfD0yO3ZhciBmPUlrKCk7aWYoUCE9PWF8fFkhPT1iKXNrPW51bGwsYWo9QigpKzUwMCxKayhhLGIpO2RvIHRyeXtLaygpO2JyZWFrfWNhdGNoKGgpe0xrKGEsaCl9d2hpbGUoMSk7cGcoKTtray5jdXJyZW50PWY7Vz1lO251bGwhPT1YP2I9MDooUD1udWxsLFk9MCxiPVIpfWlmKDAhPT1iKXsyPT09YiYmKGU9d2MoYSksMCE9PWUmJihkPWUsYj1NayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1uayxKayhhLDApLEJrKGEsZCksQ2soYSxCKCkpLGM7aWYoNj09PWIpQmsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFOayhlKSYmKGI9SGsoYSxkKSwyPT09YiYmKGY9d2MoYSksMCE9PWYmJihkPWYsYj1NayhhLGYpKSksMT09PWIpKXRocm93IGM9bmssSmsoYSwwKSxCayhhLGQpLENrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6T2soYSxyayxzayk7YnJlYWs7Y2FzZSAzOkJrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWRrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT10YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0pnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1FZihPay5iaW5kKG51bGwsYSxyayxzayksYik7YnJlYWt9T2soYSxyayxzayk7YnJlYWs7Y2FzZSA0OkJrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtbmMoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqamsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RWYoT2suYmluZChudWxsLGEscmssc2spLGQpO2JyZWFrfU9rKGEscmssc2spO2JyZWFrO2Nhc2UgNTpPayhhLHJrLHNrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19Q2soYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/RmsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBNayhhLGIpe3ZhciBjPXFrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKEprKGEsYikuZmxhZ3N8PTI1Nik7YT1IayhhLGIpOzIhPT1hJiYoYj1yayxyaz1jLG51bGwhPT1iJiZaaShiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gWmkoYSl7bnVsbD09PXJrP3JrPWE6cmsucHVzaC5hcHBseShyayxhKX1cbmZ1bmN0aW9uIE5rKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighR2UoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBCayhhLGIpe2ImPX5waztiJj1+b2s7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1uYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRGsoYSl7aWYoMCE9PShXJjYpKXRocm93IEVycm9yKHAoMzI3KSk7R2soKTt2YXIgYj10YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gQ2soYSxCKCkpLG51bGw7dmFyIGM9SGsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD13YyhhKTswIT09ZCYmKGI9ZCxjPU1rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9bmssSmsoYSwwKSxCayhhLGIpLENrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtPayhhLHJrLHNrKTtDayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBQayhhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsMD09PVcmJihhaj1CKCkrNTAwLGVnJiZpZygpKX19ZnVuY3Rpb24gUWsoYSl7bnVsbCE9PXVrJiYwPT09dWsudGFnJiYwPT09KFcmNikmJkdrKCk7dmFyIGI9VztXfD0xO3ZhciBjPW1rLnRyYW5zaXRpb24sZD1DO3RyeXtpZihtay50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxtay50cmFuc2l0aW9uPWMsVz1iLDA9PT0oVyY2KSYmaWcoKX19ZnVuY3Rpb24gYmooKXtjaj1tai5jdXJyZW50O0UobWopfVxuZnVuY3Rpb24gSmsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsRmYoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9YztjaChkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmWmYoKTticmVhaztjYXNlIDM6R2goKTtFKFZmKTtFKEgpO0xoKCk7YnJlYWs7Y2FzZSA1OkloKGQpO2JyZWFrO2Nhc2UgNDpHaCgpO2JyZWFrO2Nhc2UgMTM6RShLKTticmVhaztjYXNlIDE5OkUoSyk7YnJlYWs7Y2FzZSAxMDpxZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpiaigpfWM9Yy5yZXR1cm59UD1hO1g9YT10aChhLmN1cnJlbnQsbnVsbCk7WT1jaj1iO1I9MDtuaz1udWxsO3BrPW9rPUZnPTA7cms9cWs9bnVsbDtpZihudWxsIT09dmcpe2ZvcihiPVxuMDtiPHZnLmxlbmd0aDtiKyspaWYoYz12Z1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH12Zz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTGsoYSxiKXtkb3t2YXIgYz1YO3RyeXtwZygpO01oLmN1cnJlbnQ9WWg7aWYoUGgpe2Zvcih2YXIgZD1MLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVBoPSExfU9oPTA7Tj1NPUw9bnVsbDtRaD0hMTtSaD0wO2xrLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtSPTE7bms9YjtYPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1ZO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbj1oLHU9bi50YWc7aWYoMD09PShuLm1vZGUmMSkmJigwPT09dXx8MTE9PT11fHwxNT09PXUpKXt2YXIgcT1uLmFsdGVybmF0ZTtxPyhuLnVwZGF0ZVF1ZXVlPXEudXBkYXRlUXVldWUsbi5tZW1vaXplZFN0YXRlPXEubWVtb2l6ZWRTdGF0ZSxcbm4ubGFuZXM9cS5sYW5lcyk6KG4udXBkYXRlUXVldWU9bnVsbCxuLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9UmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7U2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmUGkoZixsLGIpO2I9eTtrPWw7dmFyIG09Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bSl7dmFyIHc9bmV3IFNldDt3LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXd9ZWxzZSBtLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtQaShmLGwsYik7JGkoKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9UmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1NpKEosZyxoLGYsYik7b2goayk7YnJlYWsgYX19Zj1rOzQhPT1SJiYoUj0yKTtudWxsPT09cWs/cWs9W2ZdOnFrLnB1c2goZik7az1IaShrLGgpO2g9Zztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoLmZsYWdzfD02NTUzNjtcbmImPS1iO2gubGFuZXN8PWI7dmFyIHY9S2koaCxrLGIpO0RnKGgsdik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciB4PWgudHlwZSxyPWguc3RhdGVOb2RlO2lmKDA9PT0oaC5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09ciYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09T2l8fCFPaS5oYXMocikpKSl7aC5mbGFnc3w9NjU1MzY7YiY9LWI7aC5sYW5lc3w9Yjt2YXIgRj1OaShoLGYsYik7RGcoaCxGKTticmVhayBhfX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKX1SayhjKX1jYXRjaChaKXtiPVo7WD09PWMmJm51bGwhPT1jJiYoWD1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBJaygpe3ZhciBhPWtrLmN1cnJlbnQ7a2suY3VycmVudD1ZaDtyZXR1cm4gbnVsbD09PWE/WWg6YX1cbmZ1bmN0aW9uICRpKCl7aWYoMD09PVJ8fDM9PT1SfHwyPT09UilSPTQ7bnVsbD09PVB8fDA9PT0oRmcmMjY4NDM1NDU1KSYmMD09PShvayYyNjg0MzU0NTUpfHxCayhQLFkpfWZ1bmN0aW9uIEhrKGEsYil7dmFyIGM9VztXfD0yO3ZhciBkPUlrKCk7aWYoUCE9PWF8fFkhPT1iKXNrPW51bGwsSmsoYSxiKTtkbyB0cnl7U2soKTticmVha31jYXRjaChlKXtMayhhLGUpfXdoaWxlKDEpO3BnKCk7Vz1jO2trLmN1cnJlbnQ9ZDtpZihudWxsIT09WCl0aHJvdyBFcnJvcihwKDI2MSkpO1A9bnVsbDtZPTA7cmV0dXJuIFJ9ZnVuY3Rpb24gU2soKXtmb3IoO251bGwhPT1YOylUayhYKX1mdW5jdGlvbiBLaygpe2Zvcig7bnVsbCE9PVgmJiFiYygpOylUayhYKX1mdW5jdGlvbiBUayhhKXt2YXIgYj1VayhhLmFsdGVybmF0ZSxhLGNqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/UmsoYSk6WD1iO2xrLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFJrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPVlpKGMsYixjaiksbnVsbCE9PWMpe1g9YztyZXR1cm59fWVsc2V7Yz1HaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztYPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1I9NjtYPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WD1iO3JldHVybn1YPWI9YX13aGlsZShudWxsIT09Yik7MD09PVImJihSPTUpfWZ1bmN0aW9uIE9rKGEsYixjKXt2YXIgZD1DLGU9bWsudHJhbnNpdGlvbjt0cnl7bWsudHJhbnNpdGlvbj1udWxsLEM9MSxWayhhLGIsYyxkKX1maW5hbGx5e21rLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWayhhLGIsYyxkKXtkbyBHaygpO3doaWxlKG51bGwhPT11ayk7aWYoMCE9PShXJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztBYyhhLGYpO2E9PT1QJiYoWD1QPW51bGwsWT0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHRrfHwodGs9ITAsRWsoZ2MsZnVuY3Rpb24oKXtHaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1tay50cmFuc2l0aW9uO21rLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPVc7V3w9NDtsay5jdXJyZW50PW51bGw7TWooYSxjKTtiayhjLGEpO05lKENmKTtjZD0hIUJmO0NmPUJmPW51bGw7YS5jdXJyZW50PWM7ZmsoYyxhLGUpO2NjKCk7Vz1oO0M9Zzttay50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt0ayYmKHRrPSExLHVrPWEsdms9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKE9pPW51bGwpO2xjKGMuc3RhdGVOb2RlLGQpO0NrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZChiW2NdKTtpZihMaSl0aHJvdyBMaT0hMSxhPU1pLE1pPW51bGwsYTswIT09KHZrJjEpJiYwIT09YS50YWcmJkdrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PXhrP3drKys6KHdrPTAseGs9YSk6d2s9MDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gR2soKXtpZihudWxsIT09dWspe3ZhciBhPUNjKHZrKSxiPW1rLnRyYW5zaXRpb24sYz1DO3RyeXttay50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXVrKXZhciBkPSExO2Vsc2V7YT11azt1az1udWxsO3ZrPTA7aWYoMCE9PShXJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9VztXfD00O2ZvcihUPWEuY3VycmVudDtudWxsIT09VDspe3ZhciBmPVQsZz1mLmNoaWxkO2lmKDAhPT0oVC5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVD1sO251bGwhPT1UOyl7dmFyIG49VDtzd2l0Y2gobi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6TmooOCxuLGYpfXZhciB1PW4uY2hpbGQ7aWYobnVsbCE9PXUpdS5yZXR1cm49bixUPXU7ZWxzZSBmb3IoO251bGwhPT1UOyl7bj1UO3ZhciBxPW4uc2libGluZyx5PW4ucmV0dXJuO1FqKG4pO2lmKG49PT1cbmwpe1Q9bnVsbDticmVha31pZihudWxsIT09cSl7cS5yZXR1cm49eTtUPXE7YnJlYWt9VD15fX19dmFyIG09Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW0pe3ZhciB3PW0uY2hpbGQ7aWYobnVsbCE9PXcpe20uY2hpbGQ9bnVsbDtkb3t2YXIgSj13LnNpYmxpbmc7dy5zaWJsaW5nPW51bGw7dz1KfXdoaWxlKG51bGwhPT13KX19VD1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFQ9ZztlbHNlIGI6Zm9yKDtudWxsIT09VDspe2Y9VDtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok5qKDksZixmLnJldHVybil9dmFyIHY9Zi5zaWJsaW5nO2lmKG51bGwhPT12KXt2LnJldHVybj1mLnJldHVybjtUPXY7YnJlYWsgYn1UPWYucmV0dXJufX12YXIgeD1hLmN1cnJlbnQ7Zm9yKFQ9eDtudWxsIT09VDspe2c9VDt2YXIgcj1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnIpci5yZXR1cm49ZyxUPXI7ZWxzZSBiOmZvcihnPXg7bnVsbCE9PVQ7KXtoPVQ7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6T2ooOSxoKX19Y2F0Y2goWil7VShoLGgucmV0dXJuLFopfWlmKGg9PT1nKXtUPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Q9RjticmVhayBifVQ9aC5yZXR1cm59fVc9ZTtpZygpO2lmKGtjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2Mub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtrYy5vblBvc3RDb21taXRGaWJlclJvb3QoamMsYSl9Y2F0Y2goWil7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMsbWsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBXayhhLGIsYyl7Yj1IaShjLGIpO2I9S2koYSxiLDEpO0FnKGEsYik7Yj1KZygpO2E9QWsoYSwxKTtudWxsIT09YSYmKHpjKGEsMSxiKSxDayhhLGIpKX1cbmZ1bmN0aW9uIFUoYSxiLGMpe2lmKDM9PT1hLnRhZylXayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtXayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1PaXx8IU9pLmhhcyhkKSkpe2E9SGkoYyxhKTthPU5pKGIsYSwxKTtBZyhiLGEpO2E9SmcoKTtiPUFrKGIsMSk7bnVsbCE9PWImJih6YyhiLDEsYSksQ2soYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUpnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1A9PT1hJiYoWSZjKT09PWMmJig0PT09Unx8Mz09PVImJihZJjEzMDAyMzQyNCk9PT1ZJiY1MDA+QigpLWRrP0prKGEsMCk6cGt8PWMpO0NrKGEsYil9ZnVuY3Rpb24gWGsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1yYyxyYzw8PTEsMD09PShyYyYxMzAwMjM0MjQpJiYocmM9NDE5NDMwNCkpKTt2YXIgYz1KZygpO2E9QWsoYSxiKTtudWxsIT09YSYmKHpjKGEsYixjKSxDayhhLGMpKX1mdW5jdGlvbiB6aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WGsoYSxjKX1cbmZ1bmN0aW9uIFpqKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1hrKGEsYyl9dmFyIFVrO1xuVWs9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxWZi5jdXJyZW50KXRnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gdGc9ITEsRmooYSxiLGMpO3RnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgdGc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZhaChiLFVnLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1YZihiLEguY3VycmVudCk7c2coYixjKTtlPVVoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1aaCgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mP1xuKGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1udWxsLFlmKGQpPyhmPSEwLGJnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwseGcoYiksZS51cGRhdGVyPU1nLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixRZyhiLGQsYSxjKSxiPXBqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJmJoKGIpLGVqKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9WWsoZCk7YT1rZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1raihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9b2oobnVsbCxiLFxuZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWZqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aGoobnVsbCxiLGQsa2coZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxraihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxvaihhLGIsZCxlLGMpO2Nhc2UgMzphOntxaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7eWcoYSxiKTtFZyhiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxcbmNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9ZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1FcnJvcihwKDQyMykpO2I9cmooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9RXJyb3IocCg0MjQpKTtiPXJqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcihlaD1LZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGRoPWIsST0hMCxmaD1udWxsLGM9emgoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7bmgoKTtpZihkPT09ZSl7Yj1naihhLGIsYyk7YnJlYWsgYX1laihhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBIaChiKSxudWxsPT09YSYma2goYiksZD1iLnR5cGUsZT1cbmIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLERmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZEZihkLGYpJiYoYi5mbGFnc3w9MzIpLG5qKGEsYiksZWooYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZraChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHZqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEZoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPXloKGIsbnVsbCxkLGMpOmVqKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxmaihhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZWooYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBlaihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBlaihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztnPWUudmFsdWU7RyhsZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEdlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhVmYuY3VycmVudCl7Yj1naihhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az16ZygtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG49bC5wZW5kaW5nO251bGw9PT1uP2submV4dD1cbms6KGsubmV4dD1uLm5leHQsbi5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtyZyhmLnJldHVybixjLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7cmcoZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfWVqKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtcbmNhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixzZyhiLGMpLGU9dWcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsZWooYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPWtnKGQsYi5wZW5kaW5nUHJvcHMpLGU9a2coZC50eXBlLGUpLGhqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gamooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTprZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsWWYoZCk/KGE9ITAsYmcoYikpOmE9ITEsc2coYixjKSxPZyhiLGQsZSksUWcoYixkLGUsYykscGoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBFaihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gbGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LFxuYi50YWcpKTt9O2Z1bmN0aW9uIEVrKGEsYil7cmV0dXJuICRiKGEsYil9ZnVuY3Rpb24gWmsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gaGgoYSxiLGMsZCl7cmV0dXJuIG5ldyBaayhhLGIsYyxkKX1cbmZ1bmN0aW9uIGlqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWWsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGlqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1DYSlyZXR1cm4gMTE7aWYoYT09PUZhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHRoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9aGgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHZoKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlpaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB3YTpyZXR1cm4geGgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB4YTpnPTg7ZXw9ODticmVhaztjYXNlIHphOnJldHVybiBhPWhoKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9emEsYS5sYW5lcz1mLGE7Y2FzZSBEYTpyZXR1cm4gYT1oaCgxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1EYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPWhoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgSGE6cmV0dXJuIHdqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBBYTpnPTEwO2JyZWFrIGE7Y2FzZSBCYTpnPTk7YnJlYWsgYTtjYXNlIENhOmc9MTE7XG5icmVhayBhO2Nhc2UgRmE6Zz0xNDticmVhayBhO2Nhc2UgR2E6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPWhoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24geGgoYSxiLGMsZCl7YT1oaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gd2ooYSxiLGMsZCl7YT1oaCgyMixhLGQsYik7YS5lbGVtZW50VHlwZT1IYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e307cmV0dXJuIGF9ZnVuY3Rpb24gdWgoYSxiLGMpe2E9aGgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gd2goYSxiLGMpe2I9aGgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiAkayhhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXljKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXljKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXljKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBhbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgJGsoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1oaCgzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O3hnKGYpO3JldHVybiBhfWZ1bmN0aW9uIGJsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dmEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBjbChhKXtpZighYSlyZXR1cm4gVWY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihVYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFlmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWWYoYykpcmV0dXJuIGFnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGRsKGEsYixjLGQsZSxmLGcsaCxrKXthPWFsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWNsKG51bGwpO2M9YS5jdXJyZW50O2Q9SmcoKTtlPUtnKGMpO2Y9emcoZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtBZyhjLGYpO2EuY3VycmVudC5sYW5lcz1lO3pjKGEsZSxkKTtDayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGVsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUpnKCksZz1LZyhlKTtjPWNsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTthPUxnKGUsZyxmKTtudWxsIT09YSYmQ2coYSxlLGcpO3JldHVybiBnfVxuZnVuY3Rpb24gZmwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBnbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gaGwoYSxiKXtnbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZ2woYSxiKX1mdW5jdGlvbiBpbCgpe3JldHVybiBudWxsfXZhciBqbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24ga2woYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5sbC5wcm90b3R5cGUucmVuZGVyPWtsLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7ZWwoYSxiLG51bGwsbnVsbCl9O2xsLnByb3RvdHlwZS51bm1vdW50PWtsLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87UWsoZnVuY3Rpb24oKXtlbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdGZdPW51bGx9fTtmdW5jdGlvbiBsbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbmxsLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1HYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UGMubGVuZ3RoJiYwIT09YiYmYjxQY1tjXS5wcmlvcml0eTtjKyspO1BjLnNwbGljZShjLDAsYSk7MD09PWMmJlVjKGEpfX07ZnVuY3Rpb24gbWwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIG5sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBvbCgpe31cbmZ1bmN0aW9uIHBsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWZsKGcpO2YuY2FsbChhKX19dmFyIGc9ZGwoYixkLGEsMCxudWxsLCExLCExLFwiXCIsb2wpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdGZdPWcuY3VycmVudDtyZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UWsoKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWZsKGspO2guY2FsbChhKX19dmFyIGs9YWwoYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLG9sKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3RmXT1rLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1FrKGZ1bmN0aW9uKCl7ZWwoYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHFsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWZsKGcpO2guY2FsbChhKX19ZWwoYixnLGEsZSl9ZWxzZSBnPXBsKGMsYixhLGUsZCk7cmV0dXJuIGZsKGcpfURjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9c2MoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQmMoYixjfDEpLENrKGIsQigpKSwwPT09KFcmNikmJihhaj1CKCkrNTAwLGlnKCkpKX1icmVhaztjYXNlIDEzOnZhciBkPUpnKCk7UWsoZnVuY3Rpb24oKXtyZXR1cm4gTGcoYSwxLGQpfSk7aGwoYSwxKX19O0VjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUpnKCk7TGcoYSwxMzQyMTc3MjgsYik7aGwoYSwxMzQyMTc3MjgpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1KZygpLGM9S2coYSk7TGcoYSxjLGIpO2hsKGEsYyl9fTtHYz1mdW5jdGlvbigpe3JldHVybiBDfTtIYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG54Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOiRhKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1DYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7VmEoZCk7JGEoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZlYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZiPVBrO0diPVFrO1xudmFyIHJsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltCYix0ZSxDYixEYixFYixQa119LHNsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpWYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjEuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdGw9e2J1bmRsZVR5cGU6c2wuYnVuZGxlVHlwZSx2ZXJzaW9uOnNsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTpzbC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnNsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnRhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1ZYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6c2wuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxuaWwsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjEuMC1uZXh0LTIyZWRiOWY3Ny0yMDIyMDQyNlwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHVsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighdWwuaXNEaXNhYmxlZCYmdWwuc3VwcG9ydHNGaWJlcil0cnl7amM9dWwuaW5qZWN0KHRsKSxrYz11bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9cmw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFtbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBibChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW1sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9amw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWFsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdGZdPWIuY3VycmVudDtyZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBrbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WWIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gUWsoYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHFsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFtbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9amw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWRsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdGZdPWIuY3VycmVudDtyZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IGxsKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHFsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhRayhmdW5jdGlvbigpe3FsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt0Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVBrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighbmwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHFsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4xLjAtbmV4dC0yMmVkYjlmNzctMjAyMjA0MjZcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjEuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSG9tZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vSG9tZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSlmb3IodD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKTtlbHNlIGZvcih0IGluIGUpZVt0XSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiO2Y8YXJndW1lbnRzLmxlbmd0aDspKGU9YXJndW1lbnRzW2YrK10pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VXRpbGl0eUNsYXNzLCBjbGFzc2VzKSB7XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzbG90cykuZm9yRWFjaChcbiAgLy8gYE9iamV0LmtleXMoc2xvdHMpYCBjYW4ndCBiZSB3aWRlciB0aGFuIGBUYCBiZWNhdXNlIHdlIGluZmVyIGBUYCBmcm9tIGBzbG90c2AuXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMTIyNTMjaXNzdWVjb21tZW50LTI2MzEzMjIwOFxuICBzbG90ID0+IHtcbiAgICBvdXRwdXRbc2xvdF0gPSBzbG90c1tzbG90XS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGFjYy5wdXNoKGdldFV0aWxpdHlDbGFzcyhrZXkpKTtcbiAgICAgICAgaWYgKGNsYXNzZXMgJiYgY2xhc3Nlc1trZXldKSB7XG4gICAgICAgICAgYWNjLnB1c2goY2xhc3Nlc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSkuam9pbignICcpO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbiIsImltcG9ydCB7SU1QT1JULCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIFJVTEVTRVQsIGNvbWJpbmUsIG1hdGNoLCBzZXJpYWxpemUsIGNvcHksIHJlcGxhY2UsIFdFQktJVCwgTU9aLCBNUywgS0VZRlJBTUVTLCBERUNMQVJBVElPTiwgaGFzaCwgY2hhcmF0LCBzdHJsZW4sIGluZGV4b2YsIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgY2FjaGUuY29tcGF0KSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBlbGVtZW50LnBhcmVudCA9PT0gY2hpbGRyZW5bMF07IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGVcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gY2hpbGRyZW5bMF0uY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTtcbiAgdmFyIGNvbnRhaW5lcjtcbiAgdmFyIG5vZGVzVG9IeWRyYXRlID0gW107XG5cbiAge1xuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyIHx8IGRvY3VtZW50LmhlYWQ7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCggLy8gdGhpcyBtZWFucyB3ZSB3aWxsIGlnbm9yZSBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGEgc3BhY2UgaW4gdGhlbSB3aGljaFxuICAgIC8vIG1lYW5zIHRoYXQgdGhlIHN0eWxlIGVsZW1lbnRzIHdlJ3JlIGxvb2tpbmcgYXQgYXJlIG9ubHkgRW1vdGlvbiAxMSBzZXJ2ZXItcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXj1cXFwiXCIgKyBrZXkgKyBcIiBcXFwiXVwiKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvblwiKS5zcGxpdCgnICcpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXR0cmliLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydGVkW2F0dHJpYltpXV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2Rlc1RvSHlkcmF0ZS5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgdmFyIG9tbmlwcmVzZW50UGx1Z2lucyA9IFtjb21wYXQsIHJlbW92ZUxhYmVsXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIG9tbmlwcmVzZW50UGx1Z2lucy5wdXNoKGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKHtcbiAgICAgIGdldCBjb21wYXQoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5jb21wYXQ7XG4gICAgICB9XG5cbiAgICB9KSwgaW5jb3JyZWN0SW1wb3J0QWxhcm0pO1xuICB9XG5cbiAge1xuICAgIHZhciBjdXJyZW50U2hlZXQ7XG4gICAgdmFyIGZpbmFsaXppbmdQbHVnaW5zID0gW3N0cmluZ2lmeSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQucm9vdCkge1xuICAgICAgICBpZiAoZWxlbWVudFtcInJldHVyblwiXSkge1xuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudFtcInJldHVyblwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnR5cGUgIT09IENPTU1FTlQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgZW1wdHkgcnVsZSBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudHNcbiAgICAgICAgICAvLyBzbyBAZW1vdGlvbi9qZXN0IGNhbiBncmFiIGBrZXlgIGZyb20gdGhlIChKUylET00gZm9yIGNhY2hlcyB3aXRob3V0IGFueSBydWxlcyBpbnNlcnRlZCB5ZXRcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnQudmFsdWUgKyBcInt9XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VycmVudFNoZWV0ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgc2VyaWFsaXplZC5tYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yID8gc2VsZWN0b3IgKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCIgOiBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnRcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIGNhY2hlLnNoZWV0Lmh5ZHJhdGUobm9kZXNUb0h5ZHJhdGUpO1xuICByZXR1cm4gY2FjaGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDYWNoZTtcbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmV9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7Y29weSwgdG9rZW5pemV9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vU2VyaWFsaXplci5qcydcbmltcG9ydCB7cHJlZml4fSBmcm9tICcuL1ByZWZpeGVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gY29sbGVjdGlvblxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWRkbGV3YXJlIChjb2xsZWN0aW9uKSB7XG5cdHZhciBsZW5ndGggPSBzaXplb2YoY29sbGVjdGlvbilcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0XHR2YXIgb3V0cHV0ID0gJydcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRvdXRwdXQgKz0gY29sbGVjdGlvbltpXShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNoZWV0IChjYWxsYmFjaykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQucm9vdClcblx0XHRcdGlmIChlbGVtZW50ID0gZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRcdGNhbGxiYWNrKGVsZW1lbnQpXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVyIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKVxuXHRcdGlmICghZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdFx0XHRjYXNlIERFQ0xBUkFUSU9OOiBlbGVtZW50LnJldHVybiA9IHByZWZpeChlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxlbmd0aCwgY2hpbGRyZW4pXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzXG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWFwcGxlYnkvc21oYXNoZXIvYmxvYi82MWEwNTMwZjI4Mjc3ZjJlODUwYmZjMzk2MDBjZTYxZDAyYjUxOGRlL3NyYy9NdXJtdXJIYXNoMi5jcHAjTDM3LUw4NlxuZnVuY3Rpb24gbXVybXVyMihzdHIpIHtcbiAgLy8gJ20nIGFuZCAncicgYXJlIG1peGluZyBjb25zdGFudHMgZ2VuZXJhdGVkIG9mZmxpbmUuXG4gIC8vIFRoZXkncmUgbm90IHJlYWxseSAnbWFnaWMnLCB0aGV5IGp1c3QgaGFwcGVuIHRvIHdvcmsgd2VsbC5cbiAgLy8gY29uc3QgbSA9IDB4NWJkMWU5OTU7XG4gIC8vIGNvbnN0IHIgPSAyNDtcbiAgLy8gSW5pdGlhbGl6ZSB0aGUgaGFzaFxuICB2YXIgaCA9IDA7IC8vIE1peCA0IGJ5dGVzIGF0IGEgdGltZSBpbnRvIHRoZSBoYXNoXG5cbiAgdmFyIGssXG4gICAgICBpID0gMCxcbiAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgZm9yICg7IGxlbiA+PSA0OyArK2ksIGxlbiAtPSA0KSB7XG4gICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0O1xuICAgIGsgPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICAgIGsgXj1cbiAgICAvKiBrID4+PiByOiAqL1xuICAgIGsgPj4+IDI0O1xuICAgIGggPVxuICAgIC8qIE1hdGguaW11bChrLCBtKTogKi9cbiAgICAoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChrID4+PiAxNikgKiAweGU5OTUgPDwgMTYpIF5cbiAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBIYW5kbGUgdGhlIGxhc3QgZmV3IGJ5dGVzIG9mIHRoZSBpbnB1dCBhcnJheVxuXG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblxuICAgIGNhc2UgMjpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG5cbiAgICBjYXNlIDE6XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjtcbiAgICAgIGggPVxuICAgICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgICAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgfSAvLyBEbyBhIGZldyBmaW5hbCBtaXhlcyBvZiB0aGUgaGFzaCB0byBlbnN1cmUgdGhlIGxhc3QgZmV3XG4gIC8vIGJ5dGVzIGFyZSB3ZWxsLWluY29ycG9yYXRlZC5cblxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPVxuICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIHJldHVybiAoKGggXiBoID4+PiAxNSkgPj4+IDApLnRvU3RyaW5nKDM2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbXVybXVyMjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgaGFzaFN0cmluZyBmcm9tICdAZW1vdGlvbi9oYXNoJztcbmltcG9ydCB1bml0bGVzcyBmcm9tICdAZW1vdGlvbi91bml0bGVzcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcbnZhciBVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUiA9IFwiWW91IGhhdmUgcGFzc2VkIGluIGZhbHN5IHZhbHVlIGFzIHN0eWxlIG9iamVjdCdzIGtleSAoY2FuIGhhcHBlbiB3aGVuIGluIGV4YW1wbGUgeW91IHBhc3MgdW5leHBvcnRlZCBjb21wb25lbnQgYXMgY29tcHV0ZWQga2V5KS5cIjtcbnZhciBoeXBoZW5hdGVSZWdleCA9IC9bQS1aXXxebXMvZztcbnZhciBhbmltYXRpb25SZWdleCA9IC9fRU1PXyhbXl9dKz8pXyhbXl0qPylfRU1PXy9nO1xuXG52YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IGZ1bmN0aW9uIGlzQ3VzdG9tUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuIHByb3BlcnR5LmNoYXJDb2RlQXQoMSkgPT09IDQ1O1xufTtcblxudmFyIGlzUHJvY2Vzc2FibGVWYWx1ZSA9IGZ1bmN0aW9uIGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJztcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gIHJldHVybiBpc0N1c3RvbVByb3BlcnR5KHN0eWxlTmFtZSkgPyBzdHlsZU5hbWUgOiBzdHlsZU5hbWUucmVwbGFjZShoeXBoZW5hdGVSZWdleCwgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59KTtcblxudmFyIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IHAxLFxuICAgICAgICAgICAgICBzdHlsZXM6IHAyLFxuICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcDE7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfVxuXG4gIGlmICh1bml0bGVzc1trZXldICE9PSAxICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY29udGVudFZhbHVlUGF0dGVybiA9IC8odmFyfGF0dHJ8Y291bnRlcnM/fHVybHxlbGVtZW50fCgoKHJlcGVhdGluZy0pPyhsaW5lYXJ8cmFkaWFsKSl8Y29uaWMpLWdyYWRpZW50KVxcKHwobm8tKT8ob3BlbnxjbG9zZSktcXVvdGUvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBzZWVtIHRvIGJlIHVzaW5nIGEgdmFsdWUgZm9yICdjb250ZW50JyB3aXRob3V0IHF1b3RlcywgdHJ5IHJlcGxhY2luZyBpdCB3aXRoIGBjb250ZW50OiAnXFxcIlwiICsgdmFsdWUgKyBcIlxcXCInYFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJvY2Vzc2VkID0gb2xkUHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSk7XG5cbiAgICBpZiAocHJvY2Vzc2VkICE9PSAnJyAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIGtleS5pbmRleE9mKCctJykgIT09IC0xICYmIGh5cGhlbmF0ZWRDYWNoZVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGh5cGhlbmF0ZWRDYWNoZVtrZXldID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJVc2luZyBrZWJhYi1jYXNlIGZvciBjc3MgcHJvcGVydGllcyBpbiBvYmplY3RzIGlzIG5vdCBzdXBwb3J0ZWQuIERpZCB5b3UgbWVhbiBcIiArIGtleS5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpLnJlcGxhY2UoaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKHN0ciwgX2NoYXIpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KSArIFwiP1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkO1xuICB9O1xufVxuXG52YXIgbm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UgPSAnQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggJyArICdAZW1vdGlvbi9iYWJlbC1wbHVnaW4sIHRoZSBzd2MgRW1vdGlvbiBwbHVnaW4sIG9yIGFub3RoZXIgRW1vdGlvbi1hd2FyZSAnICsgJ2NvbXBpbGVyIHRyYW5zZm9ybS4nO1xuXG5mdW5jdGlvbiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoaW50ZXJwb2xhdGlvbi5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLnRvU3RyaW5nKCkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlb2YgaW50ZXJwb2xhdGlvbikge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5hbmltID09PSAxKSB7XG4gICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgbmFtZTogaW50ZXJwb2xhdGlvbi5uYW1lLFxuICAgICAgICAgICAgc3R5bGVzOiBpbnRlcnBvbGF0aW9uLnN0eWxlcyxcbiAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIGludGVycG9sYXRpb24ubmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBpbnRlcnBvbGF0aW9uLm5leHQ7XG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub3QgdGhlIG1vc3QgZWZmaWNpZW50IHRoaW5nIGV2ZXIgYnV0IHRoaXMgaXMgYSBwcmV0dHkgcmFyZSBjYXNlXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUgd2lsbCBiZSB2ZXJ5IGZldyBpdGVyYXRpb25zIG9mIHRoaXMgZ2VuZXJhbGx5XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuZXh0Lm5hbWUsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBuZXh0LnN0eWxlcyxcbiAgICAgICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc3R5bGVzID0gaW50ZXJwb2xhdGlvbi5zdHlsZXMgKyBcIjtcIjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24ubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0eWxlcyArPSBpbnRlcnBvbGF0aW9uLm1hcDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAge1xuICAgICAgICBpZiAobWVyZ2VkUHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBwcmV2aW91c0N1cnNvciA9IGN1cnNvcjtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcyk7XG4gICAgICAgICAgY3Vyc29yID0gcHJldmlvdXNDdXJzb3I7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Z1bmN0aW9ucyB0aGF0IGFyZSBpbnRlcnBvbGF0ZWQgaW4gY3NzIGNhbGxzIHdpbGwgYmUgc3RyaW5naWZpZWQuXFxuJyArICdJZiB5b3Ugd2FudCB0byBoYXZlIGEgY3NzIGNhbGwgYmFzZWQgb24gcHJvcHMsIGNyZWF0ZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGNzcyBjYWxsIGxpa2UgdGhpc1xcbicgKyAnbGV0IGR5bmFtaWNTdHlsZSA9IChwcm9wcykgPT4gY3NzYGNvbG9yOiAke3Byb3BzLmNvbG9yfWBcXG4nICsgJ0l0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgd2l0aCBwcm9wcyBvciBpbnRlcnBvbGF0ZWQgaW4gYSBzdHlsZWQgY2FsbCBsaWtlIHRoaXNcXG4nICsgXCJsZXQgU29tZUNvbXBvbmVudCA9IHN0eWxlZCgnZGl2JylgJHtkeW5hbWljU3R5bGV9YFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gW107XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGludGVycG9sYXRpb24ucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICB2YXIgZmFrZVZhck5hbWUgPSBcImFuaW1hdGlvblwiICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgICAgbWF0Y2hlZC5wdXNoKFwiY29uc3QgXCIgKyBmYWtlVmFyTmFtZSArIFwiID0ga2V5ZnJhbWVzYFwiICsgcDIucmVwbGFjZSgvXkBrZXlmcmFtZXMgYW5pbWF0aW9uLVxcdysvLCAnJykgKyBcImBcIik7XG4gICAgICAgICAgcmV0dXJuIFwiJHtcIiArIGZha2VWYXJOYW1lICsgXCJ9XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVkLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2BrZXlmcmFtZXNgIG91dHB1dCBnb3QgaW50ZXJwb2xhdGVkIGludG8gcGxhaW4gc3RyaW5nLCBwbGVhc2Ugd3JhcCBpdCB3aXRoIGBjc3NgLlxcblxcbicgKyAnSW5zdGVhZCBvZiBkb2luZyB0aGlzOlxcblxcbicgKyBbXS5jb25jYXQobWF0Y2hlZCwgW1wiYFwiICsgcmVwbGFjZWQgKyBcImBcIl0pLmpvaW4oJ1xcbicpICsgJ1xcblxcbllvdSBzaG91bGQgd3JhcCBpdCB3aXRoIGBjc3NgIGxpa2UgdGhpczpcXG5cXG4nICsgKFwiY3NzYFwiICsgcmVwbGFjZWQgKyBcImBcIikpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICB9IC8vIGZpbmFsaXplIHN0cmluZyB2YWx1ZXMgKHJlZ3VsYXIgc3RyaW5ncyBhbmQgZnVuY3Rpb25zIGludGVycG9sYXRlZCBpbnRvIGNzcyBjYWxscylcblxuXG4gIGlmIChyZWdpc3RlcmVkID09IG51bGwpIHtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHZhciBjYWNoZWQgPSByZWdpc3RlcmVkW2ludGVycG9sYXRpb25dO1xuICByZXR1cm4gY2FjaGVkICE9PSB1bmRlZmluZWQgPyBjYWNoZWQgOiBpbnRlcnBvbGF0aW9uO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmopIHtcbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9ialtpXSkgKyBcIjtcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Iobm9Db21wb25lbnRTZWxlY3Rvck1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUpO1xuXG4gICAgICAgICAgc3dpdGNoIChfa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uTmFtZSc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgaW50ZXJwb2xhdGVkICsgXCI7XCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIF9rZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgaW50ZXJwb2xhdGVkICsgXCJ9XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5nO1xufVxuXG52YXIgbGFiZWxQYXR0ZXJuID0gL2xhYmVsOlxccyooW15cXHM7XFxue10rKVxccyooO3wkKS9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vZztcbn0gLy8gdGhpcyBpcyB0aGUgY3Vyc29yIGZvciBrZXlmcmFtZXNcbi8vIGtleWZyYW1lcyBhcmUgc3RvcmVkIG9uIHRoZSBTZXJpYWxpemVkU3R5bGVzIG9iamVjdCBhcyBhIGxpbmtlZCBsaXN0XG5cblxudmFyIGN1cnNvcjtcbnZhciBzZXJpYWxpemVTdHlsZXMgPSBmdW5jdGlvbiBzZXJpYWxpemVTdHlsZXMoYXJncywgcmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSAnb2JqZWN0JyAmJiBhcmdzWzBdICE9PSBudWxsICYmIGFyZ3NbMF0uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJnc1swXTtcbiAgfVxuXG4gIHZhciBzdHJpbmdNb2RlID0gdHJ1ZTtcbiAgdmFyIHN0eWxlcyA9ICcnO1xuICBjdXJzb3IgPSB1bmRlZmluZWQ7XG4gIHZhciBzdHJpbmdzID0gYXJnc1swXTtcblxuICBpZiAoc3RyaW5ncyA9PSBudWxsIHx8IHN0cmluZ3MucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHJpbmdNb2RlID0gZmFsc2U7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHN0cmluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0pO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbnZhciBzeW5jRmFsbGJhY2sgPSBmdW5jdGlvbiBzeW5jRmFsbGJhY2soY3JlYXRlKSB7XG4gIHJldHVybiBjcmVhdGUoKTtcbn07XG5cbnZhciB1c2VJbnNlcnRpb25FZmZlY3QgPSBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA/IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddIDogZmFsc2U7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayA9ICB1c2VJbnNlcnRpb25FZmZlY3QgfHwgc3luY0ZhbGxiYWNrO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayA9IHVzZUluc2VydGlvbkVmZmVjdCB8fCB1c2VMYXlvdXRFZmZlY3Q7XG5cbmV4cG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlQ29udGV4dCwgdXNlUmVmLCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IHsgaCBhcyBoYXNPd25Qcm9wZXJ0eSwgRSBhcyBFbW90aW9uLCBjIGFzIGNyZWF0ZUVtb3Rpb25Qcm9wcywgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBUIGFzIFRoZW1lQ29udGV4dCB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTZhODgzZGE5LmJyb3dzZXIuZXNtLmpzJztcbmV4cG9ydCB7IEMgYXMgQ2FjaGVQcm92aWRlciwgVCBhcyBUaGVtZUNvbnRleHQsIGEgYXMgVGhlbWVQcm92aWRlciwgXyBhcyBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUsIHUgYXMgdXNlVGhlbWUsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgYiBhcyB3aXRoVGhlbWUgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC02YTg4M2RhOS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGdldFJlZ2lzdGVyZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgcGtnID0ge1xuXHRuYW1lOiBcIkBlbW90aW9uL3JlYWN0XCIsXG5cdHZlcnNpb246IFwiMTEuMTAuNVwiLFxuXHRtYWluOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIixcblx0bW9kdWxlOiBcImRpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIixcblx0YnJvd3Nlcjoge1xuXHRcdFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIlxuXHR9LFxuXHRleHBvcnRzOiB7XG5cdFx0XCIuXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3Qud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9qc3gtcnVudGltZVwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vX2lzb2xhdGVkLWhucnNcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1kZXYtcnVudGltZVwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9wYWNrYWdlLmpzb25cIjogXCIuL3BhY2thZ2UuanNvblwiLFxuXHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFwiLi9tYWNyb1wiOiBcIi4vbWFjcm8uanNcIlxuXHR9LFxuXHR0eXBlczogXCJ0eXBlcy9pbmRleC5kLnRzXCIsXG5cdGZpbGVzOiBbXG5cdFx0XCJzcmNcIixcblx0XHRcImRpc3RcIixcblx0XHRcImpzeC1ydW50aW1lXCIsXG5cdFx0XCJqc3gtZGV2LXJ1bnRpbWVcIixcblx0XHRcIl9pc29sYXRlZC1obnJzXCIsXG5cdFx0XCJ0eXBlcy8qLmQudHNcIixcblx0XHRcIm1hY3JvLmpzXCIsXG5cdFx0XCJtYWNyby5kLnRzXCIsXG5cdFx0XCJtYWNyby5qcy5mbG93XCJcblx0XSxcblx0c2lkZUVmZmVjdHM6IGZhbHNlLFxuXHRhdXRob3I6IFwiRW1vdGlvbiBDb250cmlidXRvcnNcIixcblx0bGljZW5zZTogXCJNSVRcIixcblx0c2NyaXB0czoge1xuXHRcdFwidGVzdDp0eXBlc2NyaXB0XCI6IFwiZHRzbGludCB0eXBlc1wiXG5cdH0sXG5cdGRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL3J1bnRpbWVcIjogXCJeNy4xOC4zXCIsXG5cdFx0XCJAZW1vdGlvbi9iYWJlbC1wbHVnaW5cIjogXCJeMTEuMTAuNVwiLFxuXHRcdFwiQGVtb3Rpb24vY2FjaGVcIjogXCJeMTEuMTAuNVwiLFxuXHRcdFwiQGVtb3Rpb24vc2VyaWFsaXplXCI6IFwiXjEuMS4xXCIsXG5cdFx0XCJAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrc1wiOiBcIl4xLjAuMFwiLFxuXHRcdFwiQGVtb3Rpb24vdXRpbHNcIjogXCJeMS4yLjBcIixcblx0XHRcIkBlbW90aW9uL3dlYWstbWVtb2l6ZVwiOiBcIl4wLjMuMFwiLFxuXHRcdFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjogXCJeMy4zLjFcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiBcIl43LjAuMFwiLFxuXHRcdHJlYWN0OiBcIj49MTYuOC4wXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llc01ldGE6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IHtcblx0XHRcdG9wdGlvbmFsOiB0cnVlXG5cdFx0fSxcblx0XHRcIkB0eXBlcy9yZWFjdFwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH1cblx0fSxcblx0ZGV2RGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiBcIl43LjE4LjVcIixcblx0XHRcIkBkZWZpbml0ZWx5dHlwZWQvZHRzbGludFwiOiBcIjAuMC4xMTJcIixcblx0XHRcIkBlbW90aW9uL2Nzc1wiOiBcIjExLjEwLjVcIixcblx0XHRcIkBlbW90aW9uL2Nzcy1wcmV0dGlmaWVyXCI6IFwiMS4xLjFcIixcblx0XHRcIkBlbW90aW9uL3NlcnZlclwiOiBcIjExLjEwLjBcIixcblx0XHRcIkBlbW90aW9uL3N0eWxlZFwiOiBcIjExLjEwLjVcIixcblx0XHRcImh0bWwtdGFnLW5hbWVzXCI6IFwiXjEuMS4yXCIsXG5cdFx0cmVhY3Q6IFwiMTYuMTQuMFwiLFxuXHRcdFwic3ZnLXRhZy1uYW1lc1wiOiBcIl4xLjEuMVwiLFxuXHRcdHR5cGVzY3JpcHQ6IFwiXjQuNS41XCJcblx0fSxcblx0cmVwb3NpdG9yeTogXCJodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdFwiLFxuXHRwdWJsaXNoQ29uZmlnOiB7XG5cdFx0YWNjZXNzOiBcInB1YmxpY1wiXG5cdH0sXG5cdFwidW1kOm1haW5cIjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QudW1kLm1pbi5qc1wiLFxuXHRwcmVjb25zdHJ1Y3Q6IHtcblx0XHRlbnRyeXBvaW50czogW1xuXHRcdFx0XCIuL2luZGV4LmpzXCIsXG5cdFx0XHRcIi4vanN4LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWUuanNcIixcblx0XHRcdFwiLi9faXNvbGF0ZWQtaG5ycy5qc1wiXG5cdFx0XSxcblx0XHR1bWROYW1lOiBcImVtb3Rpb25SZWFjdFwiLFxuXHRcdGV4cG9ydHM6IHtcblx0XHRcdGVudkNvbmRpdGlvbnM6IFtcblx0XHRcdFx0XCJicm93c2VyXCIsXG5cdFx0XHRcdFwid29ya2VyXCJcblx0XHRcdF0sXG5cdFx0XHRleHRyYToge1xuXHRcdFx0XHRcIi4vdHlwZXMvY3NzLXByb3BcIjogXCIuL3R5cGVzL2Nzcy1wcm9wLmQudHNcIixcblx0XHRcdFx0XCIuL21hY3JvXCI6IFwiLi9tYWNyby5qc1wiXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIganN4ID0gZnVuY3Rpb24ganN4KHR5cGUsIHByb3BzKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gIGlmIChwcm9wcyA9PSBudWxsIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAnY3NzJykpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgfVxuXG4gIHZhciBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gIHZhciBjcmVhdGVFbGVtZW50QXJnQXJyYXkgPSBuZXcgQXJyYXkoYXJnc0xlbmd0aCk7XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVswXSA9IEVtb3Rpb247XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVsxXSA9IGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcyk7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7IC8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG5cbnZhciBHbG9iYWwgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCAmJiAoIC8vIGNoZWNrIGZvciBjbGFzc05hbWUgYXMgd2VsbCBzaW5jZSB0aGUgdXNlciBpc1xuICAvLyBwcm9iYWJseSB1c2luZyB0aGUgY3VzdG9tIGNyZWF0ZUVsZW1lbnQgd2hpY2hcbiAgLy8gbWVhbnMgaXQgd2lsbCBiZSB0dXJuZWQgaW50byBhIGNsYXNzTmFtZSBwcm9wXG4gIC8vICRGbG93Rml4TWUgSSBkb24ndCByZWFsbHkgd2FudCB0byBhZGQgaXQgdG8gdGhlIHR5cGUgc2luY2UgaXQgc2hvdWxkbid0IGJlIHVzZWRcbiAgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzLmNzcykpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgdGhlIGNzcyBwcm9wIG9uIEdsb2JhbCwgZGlkIHlvdSBtZWFuIHRvIHVzZSB0aGUgc3R5bGVzIHByb3AgaW5zdGVhZD9cIik7XG4gICAgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBwcm9wcy5zdHlsZXM7XG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXNdLCB1bmRlZmluZWQsIHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG4gIC8vIGJ1dCBpdCBpcyBiYXNlZCBvbiBhIGNvbnN0YW50IHRoYXQgd2lsbCBuZXZlciBjaGFuZ2UgYXQgcnVudGltZVxuICAvLyBpdCdzIGVmZmVjdGl2ZWx5IGxpa2UgaGF2aW5nIHR3byBpbXBsZW1lbnRhdGlvbnMgYW5kIHN3aXRjaGluZyB0aGVtIG91dFxuICAvLyBzbyBpdCdzIG5vdCBhY3R1YWxseSBicmVha2luZyBhbnl0aGluZ1xuXG5cbiAgdmFyIHNoZWV0UmVmID0gdXNlUmVmKCk7XG4gIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGtleSA9IGNhY2hlLmtleSArIFwiLWdsb2JhbFwiOyAvLyB1c2UgY2FzZSBvZiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2lzc3Vlcy8yNjc1XG5cbiAgICB2YXIgc2hlZXQgPSBuZXcgY2FjaGUuc2hlZXQuY29uc3RydWN0b3Ioe1xuICAgICAga2V5OiBrZXksXG4gICAgICBub25jZTogY2FjaGUuc2hlZXQubm9uY2UsXG4gICAgICBjb250YWluZXI6IGNhY2hlLnNoZWV0LmNvbnRhaW5lcixcbiAgICAgIHNwZWVkeTogY2FjaGUuc2hlZXQuaXNTcGVlZHlcbiAgICB9KTtcbiAgICB2YXIgcmVoeWRyYXRpbmcgPSBmYWxzZTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uPVxcXCJcIiArIGtleSArIFwiIFwiICsgc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChjYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgc2hlZXQuYmVmb3JlID0gY2FjaGUuc2hlZXQudGFnc1swXTtcbiAgICB9XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVoeWRyYXRpbmcgPSB0cnVlOyAvLyBjbGVhciB0aGUgaGFzaCBzbyB0aGlzIG5vZGUgd29uJ3QgYmUgcmVjb2duaXphYmxlIGFzIHJlaHlkcmF0YWJsZSBieSBvdGhlciA8R2xvYmFsLz5zXG5cbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBrZXkpO1xuICAgICAgc2hlZXQuaHlkcmF0ZShbbm9kZV0pO1xuICAgIH1cblxuICAgIHNoZWV0UmVmLmN1cnJlbnQgPSBbc2hlZXQsIHJlaHlkcmF0aW5nXTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9O1xuICB9LCBbY2FjaGVdKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2hlZXRSZWZDdXJyZW50ID0gc2hlZXRSZWYuY3VycmVudDtcbiAgICB2YXIgc2hlZXQgPSBzaGVldFJlZkN1cnJlbnRbMF0sXG4gICAgICAgIHJlaHlkcmF0aW5nID0gc2hlZXRSZWZDdXJyZW50WzFdO1xuXG4gICAgaWYgKHJlaHlkcmF0aW5nKSB7XG4gICAgICBzaGVldFJlZkN1cnJlbnRbMV0gPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWFsaXplZC5uZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGluc2VydCBrZXlmcmFtZXNcbiAgICAgIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIC8vIGlmIHRoaXMgZG9lc24ndCBleGlzdCB0aGVuIGl0IHdpbGwgYmUgbnVsbCBzbyB0aGUgc3R5bGUgZWxlbWVudCB3aWxsIGJlIGFwcGVuZGVkXG4gICAgICB2YXIgZWxlbWVudCA9IHNoZWV0LnRhZ3Nbc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICBzaGVldC5iZWZvcmUgPSBlbGVtZW50O1xuICAgICAgc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICBjYWNoZS5pbnNlcnQoXCJcIiwgc2VyaWFsaXplZCwgc2hlZXQsIGZhbHNlKTtcbiAgfSwgW2NhY2hlLCBzZXJpYWxpemVkLm5hbWVdKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgR2xvYmFsLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25HbG9iYWwnO1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmcuc3R5bGVzICE9PSB1bmRlZmluZWQgJiYgYXJnLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdZb3UgaGF2ZSBwYXNzZWQgc3R5bGVzIGNyZWF0ZWQgd2l0aCBgY3NzYCBmcm9tIGBAZW1vdGlvbi9yZWFjdGAgcGFja2FnZSB0byB0aGUgYGN4YC5cXG4nICsgJ2BjeGAgaXMgbWVhbnQgdG8gY29tcG9zZSBjbGFzcyBuYW1lcyAoc3RyaW5ncykgc28geW91IHNob3VsZCBjb252ZXJ0IHRob3NlIHN0eWxlcyB0byBhIGNsYXNzIG5hbWUgYnkgcGFzc2luZyB0aGVtIHRvIHRoZSBgY3NzYCByZWNlaXZlZCBmcm9tIDxDbGFzc05hbWVzLz4gY29tcG9uZW50LicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkQXJyID0gX3JlZi5zZXJpYWxpemVkQXJyO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VyaWFsaXplZEFyci5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJlcyA9IGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZEFycltpXSwgZmFsc2UpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgQ2xhc3NOYW1lcyA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICB2YXIgaGFzUmVuZGVyZWQgPSBmYWxzZTtcbiAgdmFyIHNlcmlhbGl6ZWRBcnIgPSBbXTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NzcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgc2VyaWFsaXplZEFyci5wdXNoKHNlcmlhbGl6ZWQpOyAvLyByZWdpc3RyYXRpb24gaGFzIHRvIGhhcHBlbiBoZXJlIGFzIHRoZSByZXN1bHQgb2YgdGhpcyBtaWdodCBnZXQgY29uc3VtZWQgYnkgYGN4YFxuXG4gICAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGZhbHNlKTtcbiAgICByZXR1cm4gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3ggY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgdmFyIGNvbnRlbnQgPSB7XG4gICAgY3NzOiBjc3MsXG4gICAgY3g6IGN4LFxuICAgIHRoZW1lOiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dClcbiAgfTtcbiAgdmFyIGVsZSA9IHByb3BzLmNoaWxkcmVuKGNvbnRlbnQpO1xuICBoYXNSZW5kZXJlZCA9IHRydWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWRBcnI6IHNlcmlhbGl6ZWRBcnJcbiAgfSksIGVsZSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQ2xhc3NOYW1lcy5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2xhc3NOYW1lcyc7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJzsgLy8gIzE3MjcsICMyOTA1IGZvciBzb21lIHJlYXNvbiBKZXN0IGFuZCBWaXRlc3QgZXZhbHVhdGUgbW9kdWxlcyB0d2ljZSBpZiBzb21lIGNvbnN1bWluZyBtb2R1bGUgZ2V0cyBtb2NrZWRcblxuICB2YXIgaXNUZXN0RW52ID0gdHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB2aSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKGlzQnJvd3NlciAmJiAhaXNUZXN0RW52KSB7XG4gICAgLy8gZ2xvYmFsVGhpcyBoYXMgd2lkZSBicm93c2VyIHN1cHBvcnQgLSBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9Z2xvYmFsVGhpcywgTm9kZS5qcyAxMiBhbmQgbGF0ZXJcbiAgICB2YXIgZ2xvYmFsQ29udGV4dCA9IC8vICRGbG93SWdub3JlXG4gICAgdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgOiBpc0Jyb3dzZXIgPyB3aW5kb3cgOiBnbG9iYWw7XG4gICAgdmFyIGdsb2JhbEtleSA9IFwiX19FTU9USU9OX1JFQUNUX1wiICsgcGtnLnZlcnNpb24uc3BsaXQoJy4nKVswXSArIFwiX19cIjtcblxuICAgIGlmIChnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0pIHtcbiAgICAgIGNvbnNvbGUud2FybignWW91IGFyZSBsb2FkaW5nIEBlbW90aW9uL3JlYWN0IHdoZW4gaXQgaXMgYWxyZWFkeSBsb2FkZWQuIFJ1bm5pbmcgJyArICdtdWx0aXBsZSBpbnN0YW5jZXMgbWF5IGNhdXNlIHByb2JsZW1zLiBUaGlzIGNhbiBoYXBwZW4gaWYgbXVsdGlwbGUgJyArICd2ZXJzaW9ucyBhcmUgdXNlZCwgb3IgaWYgbXVsdGlwbGUgYnVpbGRzIG9mIHRoZSBzYW1lIHZlcnNpb24gYXJlICcgKyAndXNlZC4nKTtcbiAgICB9XG5cbiAgICBnbG9iYWxDb250ZXh0W2dsb2JhbEtleV0gPSB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCB7IENsYXNzTmFtZXMsIEdsb2JhbCwganN4IGFzIGNyZWF0ZUVsZW1lbnQsIGNzcywganN4LCBrZXlmcmFtZXMgfTtcbiIsIi8qKlxuICogV0FSTklORzogRG9uJ3QgaW1wb3J0IHRoaXMgZGlyZWN0bHkuXG4gKiBVc2UgYE11aUVycm9yYCBmcm9tIGBAbXVpL3V0aWxzL21hY3Jvcy9NdWlFcnJvci5tYWNyb2AgaW5zdGVhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE11aUVycm9yTWVzc2FnZShjb2RlKSB7XG4gIC8vIEFwcGx5IGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMgaW4gbG9vc2UgbW9kZVxuICAvLyBsb29zZSBtb2RlIGlzIHNhZmUgaWZmIHdlJ3JlIGNvbmNhdGVuYXRpbmcgcHJpbWl0aXZlc1xuICAvLyBzZWUgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyNsb29zZVxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgbGV0IHVybCA9ICdodHRwczovL211aS5jb20vcHJvZHVjdGlvbi1lcnJvci8/Y29kZT0nICsgY29kZTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuICdNaW5pZmllZCBNVUkgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArIHVybCArICcgZm9yIHRoZSBmdWxsIG1lc3NhZ2UuJztcbiAgLyogZXNsaW50LWVuYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbn0iLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiLi9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLyoqXG4gKiBBZGQga2V5cywgdmFsdWVzIG9mIGBkZWZhdWx0UHJvcHNgIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gYHByb3BzYFxuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRQcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXNvbHZlZCBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHN8c2xvdHMpJC8pKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gX2V4dGVuZHMoe30sIGRlZmF1bHRQcm9wc1twcm9wTmFtZV0sIG91dHB1dFtwcm9wTmFtZV0pO1xuICAgIH0gZWxzZSBpZiAocHJvcE5hbWUudG9TdHJpbmcoKS5tYXRjaCgvXihjb21wb25lbnRzUHJvcHN8c2xvdFByb3BzKSQvKSkge1xuICAgICAgY29uc3QgZGVmYXVsdFNsb3RQcm9wcyA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV0gfHwge307XG4gICAgICBjb25zdCBzbG90UHJvcHMgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0ge307XG4gICAgICBpZiAoIXNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoc2xvdFByb3BzKSkge1xuICAgICAgICAvLyBSZWR1Y2UgdGhlIGl0ZXJhdGlvbiBpZiB0aGUgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFNsb3RQcm9wcztcbiAgICAgIH0gZWxzZSBpZiAoIWRlZmF1bHRTbG90UHJvcHMgfHwgIU9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBkZWZhdWx0IHNsb3QgcHJvcHMgaXMgZW1wdHlcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IHNsb3RQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgc2xvdFByb3BzKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykuZm9yRWFjaChzbG90UHJvcE5hbWUgPT4ge1xuICAgICAgICAgIG91dHB1dFtwcm9wTmFtZV1bc2xvdFByb3BOYW1lXSA9IHJlc29sdmVQcm9wcyhkZWZhdWx0U2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0sIHNsb3RQcm9wc1tzbG90UHJvcE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvdXRwdXRbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVQcm9wcyh0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcywgcHJvcHMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gZGVlcENsb25lKHNvdXJjZSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgIG91dHB1dFtrZXldID0gZGVlcENsb25lKHNvdXJjZVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMgPSB7XG4gIGNsb25lOiB0cnVlXG59KSB7XG4gIGNvbnN0IG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcbiAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiBpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIC8vIEF2b2lkIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgICAgIGlmIChrZXkgPT09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0ICYmIGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pKSB7XG4gICAgICAgIC8vIFNpbmNlIGBvdXRwdXRgIGlzIGEgY2xvbmUgb2YgYHRhcmdldGAgYW5kIHdlIGhhdmUgbmFycm93ZWQgYHRhcmdldGAgaW4gdGhpcyBibG9jayB3ZSBjYW4gY2FzdCB0byB0aGUgc2FtZSB0eXBlLlxuICAgICAgICBvdXRwdXRba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmNsb25lKSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgPyBkZWVwQ2xvbmUoc291cmNlW2tleV0pIDogc291cmNlW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdO1xuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuZXhwb3J0IGNvbnN0IGJyZWFrcG9pbnRLZXlzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3Qgc29ydEJyZWFrcG9pbnRzVmFsdWVzID0gdmFsdWVzID0+IHtcbiAgY29uc3QgYnJlYWtwb2ludHNBc0FycmF5ID0gT2JqZWN0LmtleXModmFsdWVzKS5tYXAoa2V5ID0+ICh7XG4gICAga2V5LFxuICAgIHZhbDogdmFsdWVzW2tleV1cbiAgfSkpIHx8IFtdO1xuICAvLyBTb3J0IGluIGFzY2VuZGluZyBvcmRlclxuICBicmVha3BvaW50c0FzQXJyYXkuc29ydCgoYnJlYWtwb2ludDEsIGJyZWFrcG9pbnQyKSA9PiBicmVha3BvaW50MS52YWwgLSBicmVha3BvaW50Mi52YWwpO1xuICByZXR1cm4gYnJlYWtwb2ludHNBc0FycmF5LnJlZHVjZSgoYWNjLCBvYmopID0+IHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFjYywge1xuICAgICAgW29iai5rZXldOiBvYmoudmFsXG4gICAgfSk7XG4gIH0sIHt9KTtcbn07XG5cbi8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qge1xuICAgICAgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4gICAgICAvLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbSkuXG4gICAgICB2YWx1ZXMgPSB7XG4gICAgICAgIHhzOiAwLFxuICAgICAgICAvLyBwaG9uZVxuICAgICAgICBzbTogNjAwLFxuICAgICAgICAvLyB0YWJsZXRcbiAgICAgICAgbWQ6IDkwMCxcbiAgICAgICAgLy8gc21hbGwgbGFwdG9wXG4gICAgICAgIGxnOiAxMjAwLFxuICAgICAgICAvLyBkZXNrdG9wXG4gICAgICAgIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxuICAgICAgfSxcblxuICAgICAgdW5pdCA9ICdweCcsXG4gICAgICBzdGVwID0gNVxuICAgIH0gPSBicmVha3BvaW50cyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGJyZWFrcG9pbnRzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBzb3J0ZWRWYWx1ZXMgPSBzb3J0QnJlYWtwb2ludHNWYWx1ZXModmFsdWVzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvcnRlZFZhbHVlcyk7XG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZX0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWF4LXdpZHRoOiR7dmFsdWUgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuICAgIHJldHVybiBgQG1lZGlhIChtaW4td2lkdGg6JHt0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnR9JHt1bml0fSkgYW5kIGAgKyBgKG1heC13aWR0aDokeyhlbmRJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHZhbHVlc1trZXlzW2VuZEluZGV4XV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA6IGVuZCkgLSBzdGVwIC8gMTAwfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSArIDEgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pO1xuICAgIH1cbiAgICByZXR1cm4gdXAoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBub3Qoa2V5KSB7XG4gICAgLy8gaGFuZGxlIGZpcnN0IGFuZCBsYXN0IGtleSBzZXBhcmF0ZWx5LCBmb3IgYmV0dGVyIHJlYWRhYmlsaXR5XG4gICAgY29uc3Qga2V5SW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KTtcbiAgICBpZiAoa2V5SW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybiB1cChrZXlzWzFdKTtcbiAgICB9XG4gICAgaWYgKGtleUluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBkb3duKGtleXNba2V5SW5kZXhdKTtcbiAgICB9XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXlzW2tleXMuaW5kZXhPZihrZXkpICsgMV0pLnJlcGxhY2UoJ0BtZWRpYScsICdAbWVkaWEgbm90IGFsbCBhbmQnKTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXMsXG4gICAgdmFsdWVzOiBzb3J0ZWRWYWx1ZXMsXG4gICAgdXAsXG4gICAgZG93bixcbiAgICBiZXR3ZWVuLFxuICAgIG9ubHksXG4gICAgbm90LFxuICAgIHVuaXRcbiAgfSwgb3RoZXIpO1xufSIsImNvbnN0IHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcblxuLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5leHBvcnQgY29uc3QgdmFsdWVzID0ge1xuICB4czogMCxcbiAgLy8gcGhvbmVcbiAgc206IDYwMCxcbiAgLy8gdGFibGV0XG4gIG1kOiA5MDAsXG4gIC8vIHNtYWxsIGxhcHRvcFxuICBsZzogMTIwMCxcbiAgLy8gZGVza3RvcFxuICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbn07XG5cbmNvbnN0IGRlZmF1bHRCcmVha3BvaW50cyA9IHtcbiAgLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuICAvLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG4gIGtleXM6IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXSxcbiAgdXA6IGtleSA9PiBgQG1lZGlhIChtaW4td2lkdGg6JHt2YWx1ZXNba2V5XX1weClgXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZSgoYWNjLCBpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcFZhbHVlKS5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCkgPT4ge1xuICAgICAgLy8ga2V5IGlzIGJyZWFrcG9pbnRcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzLnZhbHVlcyB8fCB2YWx1ZXMpLmluZGV4T2YoYnJlYWtwb2ludCkgIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IG1lZGlhS2V5ID0gdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KTtcbiAgICAgICAgYWNjW21lZGlhS2V5XSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbYnJlYWtwb2ludF0sIGJyZWFrcG9pbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY3NzS2V5ID0gYnJlYWtwb2ludDtcbiAgICAgICAgYWNjW2Nzc0tleV0gPSBwcm9wVmFsdWVbY3NzS2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgbmV3U3R5bGVGdW5jdGlvbiA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lIHx8IHt9O1xuICAgIGNvbnN0IGJhc2UgPSBzdHlsZUZ1bmN0aW9uKHByb3BzKTtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIGNvbnN0IGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZVxuICAgICAgICB9LCBwcm9wc1trZXldKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgLi4uc3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wc107XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0ID0ge30pIHtcbiAgdmFyIF9icmVha3BvaW50c0lucHV0JGtleTtcbiAgY29uc3QgYnJlYWtwb2ludHNJbk9yZGVyID0gKF9icmVha3BvaW50c0lucHV0JGtleSA9IGJyZWFrcG9pbnRzSW5wdXQua2V5cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9icmVha3BvaW50c0lucHV0JGtleS5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludFN0eWxlS2V5ID0gYnJlYWtwb2ludHNJbnB1dC51cChrZXkpO1xuICAgIGFjY1ticmVha3BvaW50U3R5bGVLZXldID0ge307XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gYnJlYWtwb2ludHNJbk9yZGVyIHx8IHt9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRLZXlzLCBzdHlsZSkge1xuICByZXR1cm4gYnJlYWtwb2ludEtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPdXRwdXQgPSBhY2Nba2V5XTtcbiAgICBjb25zdCBpc0JyZWFrcG9pbnRVbnVzZWQgPSAhYnJlYWtwb2ludE91dHB1dCB8fCBPYmplY3Qua2V5cyhicmVha3BvaW50T3V0cHV0KS5sZW5ndGggPT09IDA7XG4gICAgaWYgKGlzQnJlYWtwb2ludFVudXNlZCkge1xuICAgICAgZGVsZXRlIGFjY1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBzdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VCcmVha3BvaW50c0luT3JkZXIoYnJlYWtwb2ludHNJbnB1dCwgLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IG1lcmdlZE91dHB1dCA9IFtlbXB0eUJyZWFrcG9pbnRzLCAuLi5zdHlsZXNdLnJlZHVjZSgocHJldiwgbmV4dCkgPT4gZGVlcG1lcmdlKHByZXYsIG5leHQpLCB7fSk7XG4gIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKSwgbWVyZ2VkT3V0cHV0KTtcbn1cblxuLy8gY29tcHV0ZSBiYXNlIGZvciByZXNwb25zaXZlIHZhbHVlczsgZS5nLixcbi8vIFsxLDIsM10gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG4vLyB7eHM6IDEsIHNtOiAyLCBtZDogM30gPT4ge3hzOiB0cnVlLCBzbTogdHJ1ZSwgbWQ6IHRydWV9XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKSB7XG4gIC8vIGZpeGVkIHZhbHVlXG4gIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgYmFzZSA9IHt9O1xuICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyh0aGVtZUJyZWFrcG9pbnRzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaCgoYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgICAgaWYgKGkgPCBicmVha3BvaW50VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBicmVha3BvaW50c0tleXMuZm9yRWFjaChicmVha3BvaW50ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICB2YWx1ZXM6IGJyZWFrcG9pbnRWYWx1ZXMsXG4gIGJyZWFrcG9pbnRzOiB0aGVtZUJyZWFrcG9pbnRzLFxuICBiYXNlOiBjdXN0b21CYXNlXG59KSB7XG4gIGNvbnN0IGJhc2UgPSBjdXN0b21CYXNlIHx8IGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhiYXNlKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGJyZWFrcG9pbnRWYWx1ZXM7XG4gIH1cbiAgbGV0IHByZXZpb3VzO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywgYnJlYWtwb2ludCwgaSkgPT4ge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2ldICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2ldIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnJlYWtwb2ludFZhbHVlcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gYnJlYWtwb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHM7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgsIGNoZWNrVmFycyA9IHRydWUpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuICBpZiAob2JqICYmIG9iai52YXJzICYmIGNoZWNrVmFycykge1xuICAgIGNvbnN0IHZhbCA9IGB2YXJzLiR7cGF0aH1gLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGlmIChhY2MgJiYgYWNjW2l0ZW1dICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2NbaXRlbV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSwgdGhlbWVNYXBwaW5nKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzdHlsZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwcm9wLFxuICAgIGNzc1Byb3BlcnR5ID0gb3B0aW9ucy5wcm9wLFxuICAgIHRoZW1lS2V5LFxuICAgIHRyYW5zZm9ybVxuICB9ID0gb3B0aW9ucztcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzW3Byb3BdID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgICBjb25zdCB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gICAgW3Byb3BdOiByZXNwb25zaXZlUHJvcFR5cGVcbiAgfSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IFtwcm9wXTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgc3R5bGU7IiwiaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuICByZXR1cm4gZGVlcG1lcmdlKGFjYywgaXRlbSwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXAsIGl0J3Mgd2F5IGZhc3Rlci5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG5jb25zdCBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xuY29uc3QgZGlyZWN0aW9ucyA9IHtcbiAgdDogJ1RvcCcsXG4gIHI6ICdSaWdodCcsXG4gIGI6ICdCb3R0b20nLFxuICBsOiAnTGVmdCcsXG4gIHg6IFsnTGVmdCcsICdSaWdodCddLFxuICB5OiBbJ1RvcCcsICdCb3R0b20nXVxufTtcbmNvbnN0IGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTtcblxuLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcbmNvbnN0IGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKHByb3AgPT4ge1xuICAvLyBJdCdzIG5vdCBhIHNob3J0aGFuZCBub3RhdGlvbi5cbiAgaWYgKHByb3AubGVuZ3RoID4gMikge1xuICAgIGlmIChhbGlhc2VzW3Byb3BdKSB7XG4gICAgICBwcm9wID0gYWxpYXNlc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgW2EsIGJdID0gcHJvcC5zcGxpdCgnJyk7XG4gIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgY29uc3QgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZGlyID0+IHByb3BlcnR5ICsgZGlyKSA6IFtwcm9wZXJ0eSArIGRpcmVjdGlvbl07XG59KTtcbmV4cG9ydCBjb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuZXhwb3J0IGNvbnN0IHBhZGRpbmdLZXlzID0gWydwJywgJ3B0JywgJ3ByJywgJ3BiJywgJ3BsJywgJ3B4JywgJ3B5JywgJ3BhZGRpbmcnLCAncGFkZGluZ1RvcCcsICdwYWRkaW5nUmlnaHQnLCAncGFkZGluZ0JvdHRvbScsICdwYWRkaW5nTGVmdCcsICdwYWRkaW5nWCcsICdwYWRkaW5nWScsICdwYWRkaW5nSW5saW5lJywgJ3BhZGRpbmdJbmxpbmVTdGFydCcsICdwYWRkaW5nSW5saW5lRW5kJywgJ3BhZGRpbmdCbG9jaycsICdwYWRkaW5nQmxvY2tTdGFydCcsICdwYWRkaW5nQmxvY2tFbmQnXTtcbmNvbnN0IHNwYWNpbmdLZXlzID0gWy4uLm1hcmdpbktleXMsIC4uLnBhZGRpbmdLZXlzXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsIHRoZW1lS2V5LCBkZWZhdWx0VmFsdWUsIHByb3BOYW1lKSB7XG4gIHZhciBfZ2V0UGF0aDtcbiAgY29uc3QgdGhlbWVTcGFjaW5nID0gKF9nZXRQYXRoID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXksIGZhbHNlKSkgIT0gbnVsbCA/IF9nZXRQYXRoIDogZGVmYXVsdFZhbHVlO1xuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBFeHBlY3RlZCAke3Byb3BOYW1lfSBhcmd1bWVudCB0byBiZSBhIG51bWJlciBvciBhIHN0cmluZywgZ290ICR7YWJzfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRoZW1lU3BhY2luZykpIHtcbiAgICByZXR1cm4gYWJzID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYWJzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYWJzO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFicykpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXJyYXkgdHlwZSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBub24gaW50ZWdlciB2YWx1ZXMuYCArIGBZb3Ugc2hvdWxkIGVpdGhlciB1c2UgYW4gaW50ZWdlciB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGluZGV4LCBvciBkZWZpbmUgdGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFzIGEgbnVtYmVyLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfSBlbHNlIGlmIChhYnMgPiB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAoJHthYnN9KSBvdmVyZmxvd3MuYCwgYFRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogJHtKU09OLnN0cmluZ2lmeSh0aGVtZVNwYWNpbmcpfS5gLCBgJHthYnN9ID4gJHt0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMX0sIHlvdSBuZWVkIHRvIGFkZCB0aGUgbWlzc2luZyB2YWx1ZXMuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nW2Fic107XG4gICAgfTtcbiAgfVxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgdmFsdWUgKCR7dGhlbWVTcGFjaW5nfSkgaXMgaW52YWxpZC5gLCAnSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBhbiBhcnJheSBvciBhIGZ1bmN0aW9uLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSkge1xuICByZXR1cm4gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCAnc3BhY2luZycsIDgsICdzcGFjaW5nJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3N0cmluZycgfHwgcHJvcFZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcFZhbHVlO1xuICB9XG4gIGNvbnN0IGFicyA9IE1hdGguYWJzKHByb3BWYWx1ZSk7XG4gIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcbiAgaWYgKHByb3BWYWx1ZSA+PSAwKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkO1xuICB9XG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuICByZXR1cm4gYC0ke3RyYW5zZm9ybWVkfWA7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBwcm9wVmFsdWUgPT4gY3NzUHJvcGVydGllcy5yZWR1Y2UoKGFjYywgY3NzUHJvcGVydHkpID0+IHtcbiAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikge1xuICAvLyBVc2luZyBhIGhhc2ggY29tcHV0YXRpb24gb3ZlciBhbiBhcnJheSBpdGVyYXRpb24gY291bGQgYmUgZmFzdGVyLCBidXQgd2l0aCBvbmx5IDI4IGl0ZW1zLFxuICAvLyBpdCdzIGRvZXNuJ3Qgd29ydGggdGhlIGJ1bmRsZSBzaXplLlxuICBpZiAoa2V5cy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGNzc1Byb3BlcnRpZXMgPSBnZXRDc3NQcm9wZXJ0aWVzKHByb3ApO1xuICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpO1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wXTtcbiAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG59XG5mdW5jdGlvbiBzdHlsZShwcm9wcywga2V5cykge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyhwcm9wcy50aGVtZSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykubWFwKHByb3AgPT4gcmVzb2x2ZUNzc1Byb3BlcnR5KHByb3BzLCBrZXlzLCBwcm9wLCB0cmFuc2Zvcm1lcikpLnJlZHVjZShtZXJnZSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcmdpbihwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIG1hcmdpbktleXMpO1xufVxubWFyZ2luLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBtYXJnaW5LZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbm1hcmdpbi5maWx0ZXJQcm9wcyA9IG1hcmdpbktleXM7XG5leHBvcnQgZnVuY3Rpb24gcGFkZGluZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHBhZGRpbmdLZXlzKTtcbn1cbnBhZGRpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHBhZGRpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnBhZGRpbmcuZmlsdGVyUHJvcHMgPSBwYWRkaW5nS2V5cztcbmZ1bmN0aW9uIHNwYWNpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBzcGFjaW5nS2V5cyk7XG59XG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgY29uc3QgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGFyZyA9PiB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gYm9yZGVyVHJhbnNmb3JtKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBgJHt2YWx1ZX1weCBzb2xpZGA7XG59XG5leHBvcnQgY29uc3QgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3BDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b21Db2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgYm9yZGVyUmFkaXVzID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuYm9yZGVyUmFkaXVzICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuYm9yZGVyUmFkaXVzICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzaGFwZS5ib3JkZXJSYWRpdXMnLCA0LCAnYm9yZGVyUmFkaXVzJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBib3JkZXJSYWRpdXM6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5ib3JkZXJSYWRpdXMsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuYm9yZGVyUmFkaXVzLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGJvcmRlclJhZGl1czogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5ib3JkZXJSYWRpdXMuZmlsdGVyUHJvcHMgPSBbJ2JvcmRlclJhZGl1cyddO1xuY29uc3QgYm9yZGVycyA9IGNvbXBvc2UoYm9yZGVyLCBib3JkZXJUb3AsIGJvcmRlclJpZ2h0LCBib3JkZXJCb3R0b20sIGJvcmRlckxlZnQsIGJvcmRlckNvbG9yLCBib3JkZXJUb3BDb2xvciwgYm9yZGVyUmlnaHRDb2xvciwgYm9yZGVyQm90dG9tQ29sb3IsIGJvcmRlckxlZnRDb2xvciwgYm9yZGVyUmFkaXVzKTtcbmV4cG9ydCBkZWZhdWx0IGJvcmRlcnM7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgZ2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuZ2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZ2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgZ2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuZ2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBnYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuZ2FwLmZpbHRlclByb3BzID0gWydnYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGNvbHVtbkdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmNvbHVtbkdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmNvbHVtbkdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdjb2x1bW5HYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGNvbHVtbkdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmNvbHVtbkdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb2x1bW5HYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgY29sdW1uR2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmNvbHVtbkdhcC5maWx0ZXJQcm9wcyA9IFsnY29sdW1uR2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICByb3dHYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgZnVuY3Rpb24gcGFsZXR0ZVRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlKSB7XG4gIGlmICh1c2VyVmFsdWUgPT09ICdncmV5Jykge1xuICAgIHJldHVybiB1c2VyVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCB2YWx1ZXMgYXMgYnJlYWtwb2ludHNWYWx1ZXMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBzaXppbmdUcmFuc2Zvcm0odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIDw9IDEgJiYgdmFsdWUgIT09IDAgPyBgJHt2YWx1ZSAqIDEwMH0lYCA6IHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IHdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4V2lkdGggPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5tYXhXaWR0aCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLm1heFdpZHRoICE9PSBudWxsKSB7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+IHtcbiAgICAgIHZhciBfcHJvcHMkdGhlbWUsIF9wcm9wcyR0aGVtZSRicmVha3BvaSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pMjtcbiAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSAoKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaSA9IF9wcm9wcyR0aGVtZS5icmVha3BvaW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kyID0gX3Byb3BzJHRoZW1lJGJyZWFrcG9pLnZhbHVlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZSRicmVha3BvaTJbcHJvcFZhbHVlXSkgfHwgYnJlYWtwb2ludHNWYWx1ZXNbcHJvcFZhbHVlXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1heFdpZHRoOiBicmVha3BvaW50IHx8IHNpemluZ1RyYW5zZm9ybShwcm9wVmFsdWUpXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5tYXhXaWR0aCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5tYXhXaWR0aC5maWx0ZXJQcm9wcyA9IFsnbWF4V2lkdGgnXTtcbmV4cG9ydCBjb25zdCBtaW5XaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbldpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtYXhIZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWluSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWluSGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVIZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm94U2l6aW5nID0gc3R5bGUoe1xuICBwcm9wOiAnYm94U2l6aW5nJ1xufSk7XG5jb25zdCBzaXppbmcgPSBjb21wb3NlKHdpZHRoLCBtYXhXaWR0aCwgbWluV2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCBtaW5IZWlnaHQsIGJveFNpemluZyk7XG5leHBvcnQgZGVmYXVsdCBzaXppbmc7IiwiaW1wb3J0IHsgcGFkZGluZywgbWFyZ2luIH0gZnJvbSAnLi4vc3BhY2luZyc7XG5pbXBvcnQgeyBib3JkZXJSYWRpdXMsIGJvcmRlclRyYW5zZm9ybSB9IGZyb20gJy4uL2JvcmRlcnMnO1xuaW1wb3J0IHsgZ2FwLCByb3dHYXAsIGNvbHVtbkdhcCB9IGZyb20gJy4uL2Nzc0dyaWQnO1xuaW1wb3J0IHsgcGFsZXR0ZVRyYW5zZm9ybSB9IGZyb20gJy4uL3BhbGV0dGUnO1xuaW1wb3J0IHsgbWF4V2lkdGgsIHNpemluZ1RyYW5zZm9ybSB9IGZyb20gJy4uL3NpemluZyc7XG5jb25zdCBkZWZhdWx0U3hDb25maWcgPSB7XG4gIC8vIGJvcmRlcnNcbiAgYm9yZGVyOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckxlZnQ6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJUb3BDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmlnaHRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyQm90dG9tQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckxlZnRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgdGhlbWVLZXk6ICdzaGFwZS5ib3JkZXJSYWRpdXMnLFxuICAgIHN0eWxlOiBib3JkZXJSYWRpdXNcbiAgfSxcbiAgLy8gcGFsZXR0ZVxuICBjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJnY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgLy8gc3BhY2luZ1xuICBwOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwcjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBiOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGw6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB5OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZzoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nUmlnaHQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQm90dG9tOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0xlZnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdZOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2s6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja0VuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIG06IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG10OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtcjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1sOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luVG9wOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5MZWZ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmU6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9ja0VuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgLy8gZGlzcGxheVxuICBkaXNwbGF5UHJpbnQ6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdHJhbnNmb3JtOiB2YWx1ZSA9PiAoe1xuICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgZGlzcGxheTogdmFsdWVcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICBkaXNwbGF5OiB7fSxcbiAgb3ZlcmZsb3c6IHt9LFxuICB0ZXh0T3ZlcmZsb3c6IHt9LFxuICB2aXNpYmlsaXR5OiB7fSxcbiAgd2hpdGVTcGFjZToge30sXG4gIC8vIGZsZXhib3hcbiAgZmxleEJhc2lzOiB7fSxcbiAgZmxleERpcmVjdGlvbjoge30sXG4gIGZsZXhXcmFwOiB7fSxcbiAganVzdGlmeUNvbnRlbnQ6IHt9LFxuICBhbGlnbkl0ZW1zOiB7fSxcbiAgYWxpZ25Db250ZW50OiB7fSxcbiAgb3JkZXI6IHt9LFxuICBmbGV4OiB7fSxcbiAgZmxleEdyb3c6IHt9LFxuICBmbGV4U2hyaW5rOiB7fSxcbiAgYWxpZ25TZWxmOiB7fSxcbiAganVzdGlmeUl0ZW1zOiB7fSxcbiAganVzdGlmeVNlbGY6IHt9LFxuICAvLyBncmlkXG4gIGdhcDoge1xuICAgIHN0eWxlOiBnYXBcbiAgfSxcbiAgcm93R2FwOiB7XG4gICAgc3R5bGU6IHJvd0dhcFxuICB9LFxuICBjb2x1bW5HYXA6IHtcbiAgICBzdHlsZTogY29sdW1uR2FwXG4gIH0sXG4gIGdyaWRDb2x1bW46IHt9LFxuICBncmlkUm93OiB7fSxcbiAgZ3JpZEF1dG9GbG93OiB7fSxcbiAgZ3JpZEF1dG9Db2x1bW5zOiB7fSxcbiAgZ3JpZEF1dG9Sb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczoge30sXG4gIGdyaWRUZW1wbGF0ZVJvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVBcmVhczoge30sXG4gIGdyaWRBcmVhOiB7fSxcbiAgLy8gcG9zaXRpb25zXG4gIHBvc2l0aW9uOiB7fSxcbiAgekluZGV4OiB7XG4gICAgdGhlbWVLZXk6ICd6SW5kZXgnXG4gIH0sXG4gIHRvcDoge30sXG4gIHJpZ2h0OiB7fSxcbiAgYm90dG9tOiB7fSxcbiAgbGVmdDoge30sXG4gIC8vIHNoYWRvd3NcbiAgYm94U2hhZG93OiB7XG4gICAgdGhlbWVLZXk6ICdzaGFkb3dzJ1xuICB9LFxuICAvLyBzaXppbmdcbiAgd2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhXaWR0aDoge1xuICAgIHN0eWxlOiBtYXhXaWR0aFxuICB9LFxuICBtaW5XaWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heEhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1pbkhlaWdodDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIGJveFNpemluZzoge30sXG4gIC8vIHR5cG9ncmFwaHlcbiAgZm9udEZhbWlseToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFNpemU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTdHlsZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFdlaWdodDoge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgbGV0dGVyU3BhY2luZzoge30sXG4gIHRleHRUcmFuc2Zvcm06IHt9LFxuICBsaW5lSGVpZ2h0OiB7fSxcbiAgdGV4dEFsaWduOiB7fSxcbiAgdHlwb2dyYXBoeToge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0U3hDb25maWc7IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vbWVyZ2UnO1xuaW1wb3J0IHsgZ2V0UGF0aCwgZ2V0U3R5bGVWYWx1ZSBhcyBnZXRWYWx1ZSB9IGZyb20gJy4uL3N0eWxlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzLCBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QsIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzIH0gZnJvbSAnLi4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuL2RlZmF1bHRTeENvbmZpZyc7XG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGNhbGxJZkZuKG1heWJlRm4sIGFyZykge1xuICByZXR1cm4gdHlwZW9mIG1heWJlRm4gPT09ICdmdW5jdGlvbicgPyBtYXliZUZuKGFyZykgOiBtYXliZUZuO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCkge1xuICBmdW5jdGlvbiBnZXRUaGVtZVZhbHVlKHByb3AsIHZhbCwgdGhlbWUsIGNvbmZpZykge1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgW3Byb3BdOiB2YWwsXG4gICAgICB0aGVtZVxuICAgIH07XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZ1twcm9wXTtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtwcm9wXTogdmFsXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBjc3NQcm9wZXJ0eSA9IHByb3AsXG4gICAgICB0aGVtZUtleSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHN0eWxlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgcmV0dXJuIHN0eWxlKHByb3BzKTtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIGAke3Byb3B9JHtwcm9wVmFsdWVGaW5hbCA9PT0gJ2RlZmF1bHQnID8gJycgOiBjYXBpdGFsaXplKHByb3BWYWx1ZUZpbmFsKX1gLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICB9XG4gICAgICBpZiAoY3NzUHJvcGVydHkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtjc3NQcm9wZXJ0eV06IHZhbHVlXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCB2YWwsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvblN4KHByb3BzKSB7XG4gICAgdmFyIF90aGVtZSR1bnN0YWJsZV9zeENvbjtcbiAgICBjb25zdCB7XG4gICAgICBzeCxcbiAgICAgIHRoZW1lID0ge31cbiAgICB9ID0gcHJvcHMgfHwge307XG4gICAgaWYgKCFzeCkge1xuICAgICAgcmV0dXJuIG51bGw7IC8vIEVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cyB3aWxsIG5lZ2xlY3QgbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IChfdGhlbWUkdW5zdGFibGVfc3hDb24gPSB0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF90aGVtZSR1bnN0YWJsZV9zeENvbiA6IGRlZmF1bHRTeENvbmZpZztcblxuICAgIC8qXG4gICAgICogUmVjZWl2ZSBgc3hJbnB1dGAgYXMgb2JqZWN0IG9yIGNhbGxiYWNrXG4gICAgICogYW5kIHRoZW4gcmVjdXJzaXZlbHkgY2hlY2sga2V5cyAmIHZhbHVlcyB0byBjcmVhdGUgbWVkaWEgcXVlcnkgb2JqZWN0IHN0eWxlcy5cbiAgICAgKiAodGhlIHJlc3VsdCB3aWxsIGJlIHVzZWQgaW4gYHN0eWxlZGApXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhdmVyc2Uoc3hJbnB1dCkge1xuICAgICAgbGV0IHN4T2JqZWN0ID0gc3hJbnB1dDtcbiAgICAgIGlmICh0eXBlb2Ygc3hJbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzeE9iamVjdCA9IHN4SW5wdXQodGhlbWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3hJbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgcmV0dXJuIHN4SW5wdXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXN4T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCh0aGVtZS5icmVha3BvaW50cyk7XG4gICAgICBjb25zdCBicmVha3BvaW50c0tleXMgPSBPYmplY3Qua2V5cyhlbXB0eUJyZWFrcG9pbnRzKTtcbiAgICAgIGxldCBjc3MgPSBlbXB0eUJyZWFrcG9pbnRzO1xuICAgICAgT2JqZWN0LmtleXMoc3hPYmplY3QpLmZvckVhY2goc3R5bGVLZXkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNhbGxJZkZuKHN4T2JqZWN0W3N0eWxlS2V5XSwgdGhlbWUpO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW3N0eWxlS2V5XSkge1xuICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzS2V5cywgY3NzKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoc3gpID8gc3gubWFwKHRyYXZlcnNlKSA6IHRyYXZlcnNlKHN4KTtcbiAgfVxuICByZXR1cm4gc3R5bGVGdW5jdGlvblN4O1xufVxuY29uc3Qgc3R5bGVGdW5jdGlvblN4ID0gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KCk7XG5zdHlsZUZ1bmN0aW9uU3guZmlsdGVyUHJvcHMgPSBbJ3N4J107XG5leHBvcnQgZGVmYXVsdCBzdHlsZUZ1bmN0aW9uU3g7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwicGFsZXR0ZVwiLCBcInNwYWNpbmdcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGJyZWFrcG9pbnRzOiBicmVha3BvaW50c0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dCxcbiAgICAgIHNoYXBlOiBzaGFwZUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gY3JlYXRlQnJlYWtwb2ludHMoYnJlYWtwb2ludHNJbnB1dCk7XG4gIGNvbnN0IHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBjb21wb25lbnRzOiB7fSxcbiAgICAvLyBJbmplY3QgY29tcG9uZW50IGRlZmluaXRpb25zLlxuICAgIHBhbGV0dGU6IF9leHRlbmRzKHtcbiAgICAgIG1vZGU6ICdsaWdodCdcbiAgICB9LCBwYWxldHRlSW5wdXQpLFxuICAgIHNwYWNpbmcsXG4gICAgc2hhcGU6IF9leHRlbmRzKHt9LCBzaGFwZSwgc2hhcGVJbnB1dClcbiAgfSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3hDb25maWcgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFN4Q29uZmlnLCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJpbXBvcnQgeyBjcmVhdGVVbmFyeVNwYWNpbmcgfSBmcm9tICcuLi9zcGFjaW5nJztcbi8qIHRzbGludDplbmFibGU6dW5pZmllZC1zaWduYXR1cmVzICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0ID0gOCkge1xuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH1cblxuICAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucywgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sXG4gIGNvbnN0IHRyYW5zZm9ybSA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh7XG4gICAgc3BhY2luZzogc3BhY2luZ0lucHV0XG4gIH0pO1xuICBjb25zdCBzcGFjaW5nID0gKC4uLmFyZ3NJbnB1dCkgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzSW5wdXQubGVuZ3RoIDw9IDQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVG9vIG1hbnkgYXJndW1lbnRzIHByb3ZpZGVkLCBleHBlY3RlZCBiZXR3ZWVuIDAgYW5kIDQsIGdvdCAke2FyZ3NJbnB1dC5sZW5ndGh9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFyZ3MgPSBhcmdzSW5wdXQubGVuZ3RoID09PSAwID8gWzFdIDogYXJnc0lucHV0O1xuICAgIHJldHVybiBhcmdzLm1hcChhcmd1bWVudCA9PiB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gYCR7b3V0cHV0fXB4YCA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07XG4gIHNwYWNpbmcubXVpID0gdHJ1ZTtcbiAgcmV0dXJuIHNwYWNpbmc7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuY29uc3QgVGhlbWVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGhlbWVDb250ZXh0Jztcbn1cbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgdXNlVGhlbWVXaXRob3V0RGVmYXVsdCBmcm9tICcuL3VzZVRoZW1lV2l0aG91dERlZmF1bHQnO1xuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUpIHtcbiAgcmV0dXJuIHVzZVRoZW1lV2l0aG91dERlZmF1bHQoZGVmYXVsdFRoZW1lKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCB7IHVzZVRoZW1lIGFzIG11aVVzZVRoZW1lIH0gZnJvbSAnQG11aS9wcml2YXRlLXRoZW1pbmcnO1xuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gbnVsbCkge1xuICBjb25zdCBjb250ZXh0VGhlbWUgPSBtdWlVc2VUaGVtZSgpO1xuICByZXR1cm4gIWNvbnRleHRUaGVtZSB8fCBpc09iamVjdEVtcHR5KGNvbnRleHRUaGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBjb250ZXh0VGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4vVGhlbWVDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgJHt2YWx1ZX0gaXMgb3V0IG9mIHJhbmdlIFske21pbn0sICR7bWF4fV0uYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnNsaWNlKDEpO1xuICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYC57MSwke2NvbG9yLmxlbmd0aCA+PSA2ID8gMiA6IDF9fWAsICdnJyk7XG4gIGxldCBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAobiA9PiBuICsgbik7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycyA/IGByZ2Ike2NvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJ30oJHtjb2xvcnMubWFwKChuLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKX0pYCA6ICcnO1xufVxuZnVuY3Rpb24gaW50VG9IZXgoaW50KSB7XG4gIGNvbnN0IGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gYDAke2hleH1gIDogaGV4O1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgIHJldHVybiBkZWNvbXBvc2VDb2xvcihoZXhUb1JnYihjb2xvcikpO1xuICB9XG4gIGNvbnN0IG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgY29uc3QgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvciddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFVuc3VwcG9ydGVkIFxcYCR7Y29sb3J9XFxgIGNvbG9yLlxuVGhlIGZvbGxvd2luZyBmb3JtYXRzIGFyZSBzdXBwb3J0ZWQ6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKCkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoOSwgY29sb3IpKTtcbiAgfVxuICBsZXQgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpO1xuICBsZXQgY29sb3JTcGFjZTtcbiAgaWYgKHR5cGUgPT09ICdjb2xvcicpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJyAnKTtcbiAgICBjb2xvclNwYWNlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDQgJiYgdmFsdWVzWzNdLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgICB2YWx1ZXNbM10gPSB2YWx1ZXNbM10uc2xpY2UoMSk7XG4gICAgfVxuICAgIGlmIChbJ3NyZ2InLCAnZGlzcGxheS1wMycsICdhOTgtcmdiJywgJ3Byb3Bob3RvLXJnYicsICdyZWMtMjAyMCddLmluZGV4T2YoY29sb3JTcGFjZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogdW5zdXBwb3J0ZWQgXFxgJHtjb2xvclNwYWNlfVxcYCBjb2xvciBzcGFjZS5cblRoZSBmb2xsb3dpbmcgY29sb3Igc3BhY2VzIGFyZSBzdXBwb3J0ZWQ6IHNyZ2IsIGRpc3BsYXktcDMsIGE5OC1yZ2IsIHByb3Bob3RvLXJnYiwgcmVjLTIwMjAuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTAsIGNvbG9yU3BhY2UpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcsJyk7XG4gIH1cbiAgdmFsdWVzID0gdmFsdWVzLm1hcCh2YWx1ZSA9PiBwYXJzZUZsb2F0KHZhbHVlKSk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXMsXG4gICAgY29sb3JTcGFjZVxuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBjaGFubmVsIGNyZWF0ZWQgZnJvbSB0aGUgaW5wdXQgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgY2hhbm5lbCBmb3IgdGhlIGNvbG9yLCB0aGF0IGNhbiBiZSB1c2VkIGluIHJnYmEgb3IgaHNsYSBjb2xvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbG9yQ2hhbm5lbCA9IGNvbG9yID0+IHtcbiAgY29uc3QgZGVjb21wb3NlZENvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlcy5zbGljZSgwLCAzKS5tYXAoKHZhbCwgaWR4KSA9PiBkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEgJiYgaWR4ICE9PSAwID8gYCR7dmFsfSVgIDogdmFsKS5qb2luKCcgJyk7XG59O1xuZXhwb3J0IGNvbnN0IHByaXZhdGVfc2FmZUNvbG9yQ2hhbm5lbCA9IChjb2xvciwgd2FybmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBjb2xvckNoYW5uZWwoY29sb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYScsICdjb2xvcidcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIGNvbG9yU3BhY2VcbiAgfSA9IGNvbG9yO1xuICBsZXQge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKChuLCBpKSA9PiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG4pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gYCR7dmFsdWVzWzFdfSVgO1xuICAgIHZhbHVlc1syXSA9IGAke3ZhbHVlc1syXX0lYDtcbiAgfVxuICBpZiAodHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIHZhbHVlcyA9IGAke2NvbG9yU3BhY2V9ICR7dmFsdWVzLmpvaW4oJyAnKX1gO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IGAke3ZhbHVlcy5qb2luKCcsICcpfWA7XG4gIH1cbiAgcmV0dXJuIGAke3R5cGV9KCR7dmFsdWVzfSlgO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5leHBvcnQgZnVuY3Rpb24gcmdiVG9IZXgoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IuaW5kZXhPZignIycpID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGAjJHt2YWx1ZXMubWFwKChuLCBpKSA9PiBpbnRUb0hleChpID09PSAzID8gTWF0aC5yb3VuZCgyNTUgKiBuKSA6IG4pKS5qb2luKCcnKX1gO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBoc2wgZm9ybWF0IHRvIHJnYiBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoc2xUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gY29sb3I7XG4gIGNvbnN0IGggPSB2YWx1ZXNbMF07XG4gIGNvbnN0IHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIGNvbnN0IGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIGNvbnN0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuICBjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyAzMCkgJSAxMikgPT4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIGxldCB0eXBlID0gJ3JnYic7XG4gIGNvbnN0IHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKHtcbiAgICB0eXBlLFxuICAgIHZhbHVlczogcmdiXG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIHRoZSBjb2xvciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgbGV0IHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnIHx8IGNvbG9yLnR5cGUgPT09ICdoc2xhJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKHZhbCA9PiB7XG4gICAgaWYgKGNvbG9yLnR5cGUgIT09ICdjb2xvcicpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6ICgodmFsICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgfSk7XG5cbiAgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgY29uc3QgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgY29uc3QgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgcmV0dXJuIChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IGAvJHt2YWx1ZX1gO1xuICB9IGVsc2Uge1xuICAgIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlQWxwaGEoY29sb3IsIHZhbHVlLCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGFscGhhKGNvbG9yLCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xIHx8IGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVEYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDEgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlTGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQgPSAwLjE1KSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufSIsImNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJjb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG5leHBvcnQgZGVmYXVsdCBncmV5OyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJtb2RlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBwdXJwbGUgZnJvbSAnLi4vY29sb3JzL3B1cnBsZSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBsaWdodEJsdWUgZnJvbSAnLi4vY29sb3JzL2xpZ2h0Qmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmV4cG9ydCBjb25zdCBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBjb21tb24ud2hpdGVcbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBibHVlWzIwMF0sXG4gICAgICBsaWdodDogYmx1ZVs1MF0sXG4gICAgICBkYXJrOiBibHVlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHB1cnBsZVs1MDBdLFxuICAgIGxpZ2h0OiBwdXJwbGVbMzAwXSxcbiAgICBkYXJrOiBwdXJwbGVbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogbGlnaHRCbHVlWzQwMF0sXG4gICAgICBsaWdodDogbGlnaHRCbHVlWzMwMF0sXG4gICAgICBkYXJrOiBsaWdodEJsdWVbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBncmVlbls4MDBdLFxuICAgIGxpZ2h0OiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7XG5cbiAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuICBjb25zdCBhdWdtZW50Q29sb3IgPSAoe1xuICAgIGNvbG9yLFxuICAgIG5hbWUsXG4gICAgbWFpblNoYWRlID0gNTAwLFxuICAgIGxpZ2h0U2hhZGUgPSAzMDAsXG4gICAgZGFya1NoYWRlID0gNzAwXG4gIH0pID0+IHtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5cXGBjb2xvci5tYWluXFxgIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IFxcYCR7SlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbil9XFxgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxuXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cblxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tIFwiQG11aS9tYXRlcmlhbC9jb2xvcnNcIjtcblxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IGdyZWVuLFxufSB9KTtcblxuY29uc3QgdGhlbWUyID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxufSB9KTtgIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMiwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2V4dGVuZHMoe30sIGNvbW1vbiksXG4gICAgLy8gcHJldmVudCBtdXRhYmxlIG9iamVjdC5cbiAgICAvLyBUaGUgcGFsZXR0ZSBtb2RlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICBtb2RlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHByaW1hcnksXG4gICAgICBuYW1lOiAncHJpbWFyeSdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc2Vjb25kYXJ5LFxuICAgICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgICBtYWluU2hhZGU6ICdBNDAwJyxcbiAgICAgIGxpZ2h0U2hhZGU6ICdBMjAwJyxcbiAgICAgIGRhcmtTaGFkZTogJ0E3MDAnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBlcnJvcixcbiAgICAgIG5hbWU6ICdlcnJvcidcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHdhcm5pbmcsXG4gICAgICBuYW1lOiAnd2FybmluZydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBpbmZvLFxuICAgICAgbmFtZTogJ2luZm8nXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzdWNjZXNzLFxuICAgICAgbmFtZTogJ3N1Y2Nlc3MnXG4gICAgfSksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldFxuICB9LCBtb2Rlc1ttb2RlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgIHtcbiAgICAgIGZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICAgIGZvbnRTaXplID0gMTQsXG4gICAgICAvLyBweFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gNTAwLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgICAgLy8gMTZweCBpcyB0aGUgZGVmYXVsdCBmb250LXNpemUgdXNlZCBieSBicm93c2Vycy5cbiAgICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgICBhbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gICAgfSA9IF9yZWYsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgWyR7T2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKX1dLmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBmYWI6IDEwNTAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSwgdW5zdGFibGVfZGVmYXVsdFN4Q29uZmlnIGFzIGRlZmF1bHRTeENvbmZpZywgdW5zdGFibGVfc3R5bGVGdW5jdGlvblN4IGFzIHN0eWxlRnVuY3Rpb25TeCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zSW5wdXQgPSB7fSxcbiAgICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBpZiAob3B0aW9ucy52YXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYHZhcnNcXGAgaXMgYSBwcml2YXRlIGZpZWxkIHVzZWQgZm9yIENTUyB2YXJpYWJsZXMgc3VwcG9ydC5cblBsZWFzZSB1c2UgYW5vdGhlciBuYW1lLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE4KSk7XG4gIH1cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBbJ2FjdGl2ZScsICdjaGVja2VkJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdleHBhbmRlZCcsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdzZWxlY3RlZCddO1xuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5pbmRleE9mKCdNdWknKSA9PT0gMCkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmxldCB3YXJuZWRPbmNlID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTVVJOiB0aGUgY3JlYXRlTXVpVGhlbWUgZnVuY3Rpb24gd2FzIHJlbmFtZWQgdG8gY3JlYXRlVGhlbWUuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjcmVhdGVUaGVtZSguLi5hcmdzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBtaXhpbnMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCd4cycpXToge1xuICAgICAgICAnQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc6IHtcbiAgICAgICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAgIG1pbkhlaWdodDogNjRcbiAgICAgIH1cbiAgICB9XG4gIH0sIG1peGlucyk7XG59IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRUaGVtZTsiLCJpbXBvcnQgeyB1c2VUaGVtZVByb3BzIGFzIHN5c3RlbVVzZVRoZW1lUHJvcHMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZVxufSkge1xuICByZXR1cm4gc3lzdGVtVXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHMsXG4gICAgbmFtZSxcbiAgICBkZWZhdWx0VGhlbWVcbiAgfSk7XG59IiwiaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWUsXG4gIGRlZmF1bHRUaGVtZVxufSkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gIGNvbnN0IG1lcmdlZFByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9KTtcbiAgcmV0dXJuIG1lcmdlZFByb3BzO1xufSIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHN1cHByZXNzSHlkcmF0aW9uV2FybmluZ3x2YWx1ZUxpbmt8YWJicnxhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3BWYWxpZDtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3ZWFrTWVtb2l6ZSBmcm9tICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgRW1vdGlvbkNhY2hlQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoIC8vIHdlJ3JlIGRvaW5nIHRoaXMgdG8gYXZvaWQgcHJlY29uc3RydWN0J3MgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGluIHRoaXMgb25lIGNhc2Vcbi8vIGJlY2F1c2UgdGhpcyBtb2R1bGUgaXMgcHJpbWFyaWx5IGludGVuZGVkIGZvciB0aGUgYnJvd3NlciBhbmQgbm9kZVxuLy8gYnV0IGl0J3MgYWxzbyByZXF1aXJlZCBpbiByZWFjdCBuYXRpdmUgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzIHNvbWV0aW1lc1xuLy8gYW5kIHdlIGNvdWxkIGhhdmUgYSBzcGVjaWFsIGJ1aWxkIGp1c3QgZm9yIHRoYXRcbi8vIGJ1dCB0aGlzIGlzIG11Y2ggZWFzaWVyIGFuZCB0aGUgbmF0aXZlIHBhY2thZ2VzXG4vLyBtaWdodCB1c2UgYSBkaWZmZXJlbnQgdGhlbWUgY29udGV4dCBpbiB0aGUgZnV0dXJlIGFueXdheVxudHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNhY2hlKHtcbiAga2V5OiAnY3NzJ1xufSkgOiBudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbkNhY2hlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ2FjaGVDb250ZXh0Jztcbn1cblxudmFyIENhY2hlUHJvdmlkZXIgPSBFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyO1xudmFyIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHVzZUVtb3Rpb25DYWNoZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG59O1xuXG52YXIgd2l0aEVtb3Rpb25DYWNoZSA9IGZ1bmN0aW9uIHdpdGhFbW90aW9uQ2FjaGUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIHJldHVybiAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIC8vIHRoZSBjYWNoZSB3aWxsIG5ldmVyIGJlIG51bGwgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgY2FjaGUgPSB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jKHByb3BzLCBjYWNoZSwgcmVmKTtcbiAgfSk7XG59O1xuXG52YXIgVGhlbWVDb250ZXh0ID0gLyogI19fUFVSRV9fICovY3JlYXRlQ29udGV4dCh7fSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uVGhlbWVDb250ZXh0Jztcbn1cblxudmFyIHVzZVRoZW1lID0gZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG59O1xuXG52YXIgZ2V0VGhlbWUgPSBmdW5jdGlvbiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSkge1xuICBpZiAodHlwZW9mIHRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lcmdlZFRoZW1lID0gdGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAobWVyZ2VkVGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgbWVyZ2VkVGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIHRoZW1lIGZ1bmN0aW9uLCBpLmUuIHRoZW1lPXsoKSA9PiAoe30pfSEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAodGhlbWUgPT0gbnVsbCB8fCB0eXBlb2YgdGhlbWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSBtYWtlIHlvdXIgdGhlbWUgcHJvcCBhIHBsYWluIG9iamVjdCcpO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCB0aGVtZSk7XG59O1xuXG52YXIgY3JlYXRlQ2FjaGVXaXRoVGhlbWUgPSAvKiAjX19QVVJFX18gKi93ZWFrTWVtb2l6ZShmdW5jdGlvbiAob3V0ZXJUaGVtZSkge1xuICByZXR1cm4gd2Vha01lbW9pemUoZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgcmV0dXJuIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKTtcbiAgfSk7XG59KTtcbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb3BzLnRoZW1lICE9PSB0aGVtZSkge1xuICAgIHRoZW1lID0gY3JlYXRlQ2FjaGVXaXRoVGhlbWUodGhlbWUpKHByb3BzLnRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdGhlbWVcbiAgfSwgcHJvcHMuY2hpbGRyZW4pO1xufTtcbmZ1bmN0aW9uIHdpdGhUaGVtZShDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihwcm9wcywgcmVmKSB7XG4gICAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpKTtcbiAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIFdpdGhUaGVtZSA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKHJlbmRlcik7XG4gIFdpdGhUaGVtZS5kaXNwbGF5TmFtZSA9IFwiV2l0aFRoZW1lKFwiICsgY29tcG9uZW50TmFtZSArIFwiKVwiO1xuICByZXR1cm4gaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xufVxuXG52YXIgZ2V0TGFzdFBhcnQgPSBmdW5jdGlvbiBnZXRMYXN0UGFydChmdW5jdGlvbk5hbWUpIHtcbiAgLy8gVGhlIG1hdGNoIG1heSBiZSBzb21ldGhpbmcgbGlrZSAnT2JqZWN0LmNyZWF0ZUVtb3Rpb25Qcm9wcycgb3JcbiAgLy8gJ0xvYWRlci5wcm90b3R5cGUucmVuZGVyJ1xuICB2YXIgcGFydHMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoJy4nKTtcbiAgcmV0dXJuIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xufTtcblxudmFyIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZSA9IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lKSB7XG4gIC8vIFY4XG4gIHZhciBtYXRjaCA9IC9eXFxzK2F0XFxzKyhbQS1aYS16MC05JC5dKylcXHMvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTsgLy8gU2FmYXJpIC8gRmlyZWZveFxuXG4gIG1hdGNoID0gL14oW0EtWmEtejAtOSQuXSspQC8uZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoKSByZXR1cm4gZ2V0TGFzdFBhcnQobWF0Y2hbMV0pO1xuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzID0gLyogI19fUFVSRV9fICovbmV3IFNldChbJ3JlbmRlcldpdGhIb29rcycsICdwcm9jZXNzQ2hpbGQnLCAnZmluaXNoQ2xhc3NDb21wb25lbnQnLCAncmVuZGVyVG9TdHJpbmcnXSk7IC8vIFRoZXNlIGlkZW50aWZpZXJzIGNvbWUgZnJvbSBlcnJvciBzdGFja3MsIHNvIHRoZXkgaGF2ZSB0byBiZSB2YWxpZCBKU1xuLy8gaWRlbnRpZmllcnMsIHRodXMgd2Ugb25seSBuZWVkIHRvIHJlcGxhY2Ugd2hhdCBpcyBhIHZhbGlkIGNoYXJhY3RlciBmb3IgSlMsXG4vLyBidXQgbm90IGZvciBDU1MuXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciBnZXRMYWJlbEZyb21TdGFja1RyYWNlID0gZnVuY3Rpb24gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShzdGFja1RyYWNlKSB7XG4gIGlmICghc3RhY2tUcmFjZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGxpbmVzID0gc3RhY2tUcmFjZS5zcGxpdCgnXFxuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmdW5jdGlvbk5hbWUgPSBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZXNbaV0pOyAvLyBUaGUgZmlyc3QgbGluZSBvZiBWOCBzdGFjayB0cmFjZXMgaXMganVzdCBcIkVycm9yXCJcblxuICAgIGlmICghZnVuY3Rpb25OYW1lKSBjb250aW51ZTsgLy8gSWYgd2UgcmVhY2ggb25lIG9mIHRoZXNlLCB3ZSBoYXZlIGdvbmUgdG9vIGZhciBhbmQgc2hvdWxkIHF1aXRcblxuICAgIGlmIChpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcy5oYXMoZnVuY3Rpb25OYW1lKSkgYnJlYWs7IC8vIFRoZSBjb21wb25lbnQgbmFtZSBpcyB0aGUgZmlyc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRoYXQgc3RhcnRzIHdpdGggYW5cbiAgICAvLyB1cHBlcmNhc2UgbGV0dGVyXG5cbiAgICBpZiAoL15bQS1aXS8udGVzdChmdW5jdGlvbk5hbWUpKSByZXR1cm4gc2FuaXRpemVJZGVudGlmaWVyKGZ1bmN0aW9uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxudmFyIHR5cGVQcm9wTmFtZSA9ICdfX0VNT1RJT05fVFlQRV9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBsYWJlbFByb3BOYW1lID0gJ19fRU1PVElPTl9MQUJFTF9QTEVBU0VfRE9fTk9UX1VTRV9fJztcbnZhciBjcmVhdGVFbW90aW9uUHJvcHMgPSBmdW5jdGlvbiBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vcmVhY3QnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlOyAvLyBGb3IgcGVyZm9ybWFuY2UsIG9ubHkgY2FsbCBnZXRMYWJlbEZyb21TdGFja1RyYWNlIGluIGRldmVsb3BtZW50IGFuZCB3aGVuXG4gIC8vIHRoZSBsYWJlbCBoYXNuJ3QgYWxyZWFkeSBiZWVuIGNvbXB1dGVkXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISFwcm9wcy5jc3MgJiYgKHR5cGVvZiBwcm9wcy5jc3MgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwcm9wcy5jc3MubmFtZSAhPT0gJ3N0cmluZycgfHwgcHJvcHMuY3NzLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkpIHtcbiAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZyb21TdGFja1RyYWNlKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICBpZiAobGFiZWwpIG5ld1Byb3BzW2xhYmVsUHJvcE5hbWVdID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gbmV3UHJvcHM7XG59O1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgRW1vdGlvbiA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gIHZhciBjc3NQcm9wID0gcHJvcHMuY3NzOyAvLyBzbyB0aGF0IHVzaW5nIGBjc3NgIGZyb20gYGVtb3Rpb25gIGFuZCBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIGNzcyBwcm9wIHdvcmtzXG4gIC8vIG5vdCBwYXNzaW5nIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIHNlcmlhbGl6ZVN0eWxlcyBiZWNhdXNlIGl0IHdvdWxkXG4gIC8vIG1ha2UgY2VydGFpbiBiYWJlbCBvcHRpbWlzYXRpb25zIG5vdCBwb3NzaWJsZVxuXG4gIGlmICh0eXBlb2YgY3NzUHJvcCA9PT0gJ3N0cmluZycgJiYgY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY3NzUHJvcCA9IGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF07XG4gIH1cblxuICB2YXIgV3JhcHBlZENvbXBvbmVudCA9IHByb3BzW3R5cGVQcm9wTmFtZV07XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW2Nzc1Byb3BdO1xuICB2YXIgY2xhc3NOYW1lID0gJyc7XG5cbiAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBwcm9wcy5jbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhyZWdpc3RlcmVkU3R5bGVzLCB1bmRlZmluZWQsIHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICB2YXIgbGFiZWxGcm9tU3RhY2sgPSBwcm9wc1tsYWJlbFByb3BOYW1lXTtcblxuICAgIGlmIChsYWJlbEZyb21TdGFjaykge1xuICAgICAgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc2VyaWFsaXplZCwgJ2xhYmVsOicgKyBsYWJlbEZyb21TdGFjayArICc7J10pO1xuICAgIH1cbiAgfVxuXG4gIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkgJiYga2V5ICE9PSAnY3NzJyAmJiBrZXkgIT09IHR5cGVQcm9wTmFtZSAmJiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyB8fCBrZXkgIT09IGxhYmVsUHJvcE5hbWUpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICBpc1N0cmluZ1RhZzogdHlwZW9mIFdyYXBwZWRDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gIH0pLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBuZXdQcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb24uZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNzc1Byb3BJbnRlcm5hbCc7XG59XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIgYXMgQywgRW1vdGlvbiBhcyBFLCBUaGVtZUNvbnRleHQgYXMgVCwgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlIGFzIF8sIFRoZW1lUHJvdmlkZXIgYXMgYSwgd2l0aFRoZW1lIGFzIGIsIGNyZWF0ZUVtb3Rpb25Qcm9wcyBhcyBjLCBoYXNPd25Qcm9wZXJ0eSBhcyBoLCB1c2VUaGVtZSBhcyB1LCB3aXRoRW1vdGlvbkNhY2hlIGFzIHcgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gKyBcIjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIHJlZ2lzdGVyU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG59O1xudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyB1c2VDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1Byb3BWYWxpZCBmcm9tICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCB7IHdpdGhFbW90aW9uQ2FjaGUsIFRoZW1lQ29udGV4dCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA9IGlzUHJvcFZhbGlkO1xuXG52YXIgdGVzdE9taXRQcm9wc09uQ29tcG9uZW50ID0gZnVuY3Rpb24gdGVzdE9taXRQcm9wc09uQ29tcG9uZW50KGtleSkge1xuICByZXR1cm4ga2V5ICE9PSAndGhlbWUnO1xufTtcblxudmFyIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IGZ1bmN0aW9uIGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTYgPyB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgOiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQ7XG59O1xudmFyIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMgPSBmdW5jdGlvbiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKSB7XG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcDtcblxuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPSBvcHRpb25zLnNob3VsZEZvcndhcmRQcm9wO1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AgPyBmdW5jdGlvbiAocHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wKHByb3BOYW1lKSAmJiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AocHJvcE5hbWUpO1xuICAgIH0gOiBvcHRpb25zU2hvdWxkRm9yd2FyZFByb3A7XG4gIH1cblxuICBpZiAodHlwZW9mIHNob3VsZEZvcndhcmRQcm9wICE9PSAnZnVuY3Rpb24nICYmIGlzUmVhbCkge1xuICAgIHNob3VsZEZvcndhcmRQcm9wID0gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcDtcbiAgfVxuXG4gIHJldHVybiBzaG91bGRGb3J3YXJkUHJvcDtcbn07XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIHJ1bGVzID0gdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZWQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBhcmUgdHJ5aW5nIHRvIGNyZWF0ZSBhIHN0eWxlZCBlbGVtZW50IHdpdGggYW4gdW5kZWZpbmVkIGNvbXBvbmVudC5cXG5Zb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNSZWFsID0gdGFnLl9fZW1vdGlvbl9yZWFsID09PSB0YWc7XG4gIHZhciBiYXNlVGFnID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fYmFzZSB8fCB0YWc7XG4gIHZhciBpZGVudGlmaWVyTmFtZTtcbiAgdmFyIHRhcmdldENsYXNzTmFtZTtcblxuICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWRlbnRpZmllck5hbWUgPSBvcHRpb25zLmxhYmVsO1xuICAgIHRhcmdldENsYXNzTmFtZSA9IG9wdGlvbnMudGFyZ2V0O1xuICB9XG5cbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wID0gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCk7XG4gIHZhciBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCB8fCBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoYmFzZVRhZyk7XG4gIHZhciBzaG91bGRVc2VBcyA9ICFkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoJ2FzJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIHN0eWxlcyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkID8gdGFnLl9fZW1vdGlvbl9zdHlsZXMuc2xpY2UoMCkgOiBbXTtcblxuICAgIGlmIChpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaChcImxhYmVsOlwiICsgaWRlbnRpZmllck5hbWUgKyBcIjtcIik7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NbMF0gPT0gbnVsbCB8fCBhcmdzWzBdLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMucHVzaC5hcHBseShzdHlsZXMsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbMF1bMF0pO1xuICAgICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAxO1xuXG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1baV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzLnB1c2goYXJnc1tpXSwgYXJnc1swXVtpXSk7XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lOiB3ZSBuZWVkIHRvIGNhc3QgU3RhdGVsZXNzRnVuY3Rpb25hbENvbXBvbmVudCB0byBvdXIgUHJpdmF0ZVN0eWxlZENvbXBvbmVudCBjbGFzc1xuXG5cbiAgICB2YXIgU3R5bGVkID0gd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgICAgIHZhciBGaW5hbFRhZyA9IHNob3VsZFVzZUFzICYmIHByb3BzLmFzIHx8IGJhc2VUYWc7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gJyc7XG4gICAgICB2YXIgY2xhc3NJbnRlcnBvbGF0aW9ucyA9IFtdO1xuICAgICAgdmFyIG1lcmdlZFByb3BzID0gcHJvcHM7XG5cbiAgICAgIGlmIChwcm9wcy50aGVtZSA9PSBudWxsKSB7XG4gICAgICAgIG1lcmdlZFByb3BzID0ge307XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgbWVyZ2VkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBtZXJnZWRQcm9wcy50aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgY2xhc3NJbnRlcnBvbGF0aW9ucywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHN0eWxlcy5jb25jYXQoY2xhc3NJbnRlcnBvbGF0aW9ucyksIGNhY2hlLnJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKTtcbiAgICAgIGNsYXNzTmFtZSArPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNsYXNzTmFtZSArPSBcIiBcIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRVc2VBcyAmJiBzaG91bGRGb3J3YXJkUHJvcCA9PT0gdW5kZWZpbmVkID8gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKEZpbmFsVGFnKSA6IGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcDtcbiAgICAgIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfa2V5IGluIHByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRVc2VBcyAmJiBfa2V5ID09PSAnYXMnKSBjb250aW51ZTtcblxuICAgICAgICBpZiAoIC8vICRGbG93Rml4TWVcbiAgICAgICAgZmluYWxTaG91bGRGb3J3YXJkUHJvcChfa2V5KSkge1xuICAgICAgICAgIG5ld1Byb3BzW19rZXldID0gcHJvcHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgICAgbmV3UHJvcHMucmVmID0gcmVmO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICAgICAgY2FjaGU6IGNhY2hlLFxuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBpc1N0cmluZ1RhZzogdHlwZW9mIEZpbmFsVGFnID09PSAnc3RyaW5nJ1xuICAgICAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZpbmFsVGFnLCBuZXdQcm9wcykpO1xuICAgIH0pO1xuICAgIFN0eWxlZC5kaXNwbGF5TmFtZSA9IGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQgPyBpZGVudGlmaWVyTmFtZSA6IFwiU3R5bGVkKFwiICsgKHR5cGVvZiBiYXNlVGFnID09PSAnc3RyaW5nJyA/IGJhc2VUYWcgOiBiYXNlVGFnLmRpc3BsYXlOYW1lIHx8IGJhc2VUYWcubmFtZSB8fCAnQ29tcG9uZW50JykgKyBcIilcIjtcbiAgICBTdHlsZWQuZGVmYXVsdFByb3BzID0gdGFnLmRlZmF1bHRQcm9wcztcbiAgICBTdHlsZWQuX19lbW90aW9uX3JlYWwgPSBTdHlsZWQ7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9iYXNlID0gYmFzZVRhZztcbiAgICBTdHlsZWQuX19lbW90aW9uX3N0eWxlcyA9IHN0eWxlcztcbiAgICBTdHlsZWQuX19lbW90aW9uX2ZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlZCwgJ3RvU3RyaW5nJywge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKCkge1xuICAgICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lID09PSB1bmRlZmluZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJztcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lOiBjb2VyY2UgdW5kZWZpbmVkIHRvIHN0cmluZ1xuXG5cbiAgICAgICAgcmV0dXJuIFwiLlwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgU3R5bGVkLndpdGhDb21wb25lbnQgPSBmdW5jdGlvbiAobmV4dFRhZywgbmV4dE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTdHlsZWQobmV4dFRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIG5leHRPcHRpb25zLCB7XG4gICAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKFN0eWxlZCwgbmV4dE9wdGlvbnMsIHRydWUpXG4gICAgICB9KSkuYXBwbHkodm9pZCAwLCBzdHlsZXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU3R5bGVkO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3R5bGVkO1xuIiwiaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IGNyZWF0ZVN0eWxlZCBmcm9tICcuLi9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0ICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0ICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0YWdzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLCAvLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbnZhciBuZXdTdHlsZWQgPSBjcmVhdGVTdHlsZWQuYmluZCgpO1xudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gIC8vICRGbG93Rml4TWU6IHdlIGNhbiBpZ25vcmUgdGhpcyBiZWNhdXNlIGl0cyBleHBvc2VkIHR5cGUgaXMgZGVmaW5lZCBieSB0aGUgQ3JlYXRlU3R5bGVkIHR5cGVcbiAgbmV3U3R5bGVkW3RhZ05hbWVdID0gbmV3U3R5bGVkKHRhZ05hbWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5ld1N0eWxlZDtcbiIsIi8qKiBAbGljZW5zZSBNVUkgdjUuMTEuMFxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IGVtU3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQodGFnLCBvcHRpb25zKSB7XG4gIGNvbnN0IHN0eWxlc0ZhY3RvcnkgPSBlbVN0eWxlZCh0YWcsIG9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoLi4uc3R5bGVzKSA9PiB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IGBcIiR7dGFnfVwiYCA6ICdjb21wb25lbnQnO1xuICAgICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogU2VlbXMgbGlrZSB5b3UgY2FsbGVkIFxcYHN0eWxlZCgke2NvbXBvbmVudH0pKClcXGAgd2l0aG91dCBhIFxcYHN0eWxlXFxgIGFyZ3VtZW50LmAsICdZb3UgbXVzdCBwcm92aWRlIGEgYHN0eWxlc2AgYXJndW1lbnQ6IGBzdHlsZWQoXCJkaXZcIikoc3R5bGVZb3VGb3Jnb3RUb1Bhc3MpYC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcy5zb21lKHN0eWxlID0+IHN0eWxlID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogdGhlIHN0eWxlZCgke2NvbXBvbmVudH0pKC4uLmFyZ3MpIEFQSSByZXF1aXJlcyBhbGwgaXRzIGFyZ3MgdG8gYmUgZGVmaW5lZC5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZXNGYWN0b3J5KC4uLnN0eWxlcyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gc3R5bGVzRmFjdG9yeTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGNvbnN0IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgPSAodGFnLCBwcm9jZXNzb3IpID0+IHtcbiAgLy8gRW1vdGlvbiBhdHRhY2hlcyBhbGwgdGhlIHN0eWxlcyBhcyBgX19lbW90aW9uX3N0eWxlc2AuXG4gIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzE2ZDk3MWQwZGEyMjk1OTZkNmJjYzM5ZDI4MmJhOTc1M2M5ZWU3Y2YvcGFja2FnZXMvc3R5bGVkL3NyYy9iYXNlLmpzI0wxODZcbiAgaWYgKEFycmF5LmlzQXJyYXkodGFnLl9fZW1vdGlvbl9zdHlsZXMpKSB7XG4gICAgdGFnLl9fZW1vdGlvbl9zdHlsZXMgPSBwcm9jZXNzb3IodGFnLl9fZW1vdGlvbl9zdHlsZXMpO1xuICB9XG59O1xuZXhwb3J0IHsgVGhlbWVDb250ZXh0LCBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3R5bGVkRW5naW5lUHJvdmlkZXIgfSBmcm9tICcuL1N0eWxlZEVuZ2luZVByb3ZpZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgR2xvYmFsU3R5bGVzIH0gZnJvbSAnLi9HbG9iYWxTdHlsZXMnOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFyaWFudFwiXTtcbmltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gaXNFbXB0eShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT09IDA7XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIHN0cmluZyBjbGFzc0tleSBiYXNlZCBvbiB0aGUgcHJvcGVydGllcyBwcm92aWRlZC4gSXQgc3RhcnRzIHdpdGggdGhlXG4gKiB2YXJpYW50IGlmIGRlZmluZWQsIGFuZCB0aGVuIGl0IGFwcGVuZHMgYWxsIG90aGVyIHByb3BlcnRpZXMgaW4gYWxwaGFiZXRpY2FsIG9yZGVyLlxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzIC0gdGhlIHByb3BlcnRpZXMgZm9yIHdoaWNoIHRoZSBjbGFzc0tleSBzaG91bGQgYmUgY3JlYXRlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvcHNUb0NsYXNzS2V5KHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHZhcmlhbnRcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IGNsYXNzS2V5ID0gdmFyaWFudCB8fCAnJztcbiAgT2JqZWN0LmtleXMob3RoZXIpLnNvcnQoKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbG9yJykge1xuICAgICAgY2xhc3NLZXkgKz0gaXNFbXB0eShjbGFzc0tleSkgPyBwcm9wc1trZXldIDogY2FwaXRhbGl6ZShwcm9wc1trZXldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NLZXkgKz0gYCR7aXNFbXB0eShjbGFzc0tleSkgPyBrZXkgOiBjYXBpdGFsaXplKGtleSl9JHtjYXBpdGFsaXplKHByb3BzW2tleV0udG9TdHJpbmcoKSl9YDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NLZXk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm5hbWVcIiwgXCJzbG90XCIsIFwic2tpcFZhcmlhbnRzUmVzb2x2ZXJcIiwgXCJza2lwU3hcIiwgXCJvdmVycmlkZXNSZXNvbHZlclwiXSxcbiAgX2V4Y2x1ZGVkMiA9IFtcInRoZW1lXCJdLFxuICBfZXhjbHVkZWQzID0gW1widGhlbWVcIl07XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuaW1wb3J0IHN0eWxlZEVuZ2luZVN0eWxlZCwgeyBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIGFzIHByb2Nlc3NTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCBwcm9wc1RvQ2xhc3NLZXkgZnJvbSAnLi9wcm9wc1RvQ2xhc3NLZXknO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8yNmRlZDYxMDlmY2Q4Y2E5ODc1Y2MyY2U0NTY0ZmVlNjc4YTNmM2M1L3BhY2thZ2VzL3N0eWxlZC9zcmMvdXRpbHMuanMjTDQwXG5mdW5jdGlvbiBpc1N0cmluZ1RhZyh0YWcpIHtcbiAgcmV0dXJuIHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnICYmXG4gIC8vIDk2IGlzIG9uZSBsZXNzIHRoYW4gdGhlIGNoYXIgY29kZVxuICAvLyBmb3IgXCJhXCIgc28gdGhpcyBpcyBjaGVja2luZyB0aGF0XG4gIC8vIGl0J3MgYSBsb3dlcmNhc2UgY2hhcmFjdGVyXG4gIHRhZy5jaGFyQ29kZUF0KDApID4gOTY7XG59XG5jb25zdCBnZXRTdHlsZU92ZXJyaWRlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBpZiAodGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXMpIHtcbiAgICByZXR1cm4gdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRWYXJpYW50U3R5bGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGxldCB2YXJpYW50cyA9IFtdO1xuICBpZiAodGhlbWUgJiYgdGhlbWUuY29tcG9uZW50cyAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHMpIHtcbiAgICB2YXJpYW50cyA9IHRoZW1lLmNvbXBvbmVudHNbbmFtZV0udmFyaWFudHM7XG4gIH1cbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSB7fTtcbiAgdmFyaWFudHMuZm9yRWFjaChkZWZpbml0aW9uID0+IHtcbiAgICBjb25zdCBrZXkgPSBwcm9wc1RvQ2xhc3NLZXkoZGVmaW5pdGlvbi5wcm9wcyk7XG4gICAgdmFyaWFudHNTdHlsZXNba2V5XSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH0pO1xuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuY29uc3QgdmFyaWFudHNSZXNvbHZlciA9IChwcm9wcywgc3R5bGVzLCB0aGVtZSwgbmFtZSkgPT4ge1xuICB2YXIgX3RoZW1lJGNvbXBvbmVudHMsIF90aGVtZSRjb21wb25lbnRzJG5hbTtcbiAgY29uc3Qge1xuICAgIG93bmVyU3RhdGUgPSB7fVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IHZhcmlhbnRzU3R5bGVzID0gW107XG4gIGNvbnN0IHRoZW1lVmFyaWFudHMgPSB0aGVtZSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyRuYW0gPSBfdGhlbWUkY29tcG9uZW50c1tuYW1lXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzJG5hbS52YXJpYW50cztcbiAgaWYgKHRoZW1lVmFyaWFudHMpIHtcbiAgICB0aGVtZVZhcmlhbnRzLmZvckVhY2godGhlbWVWYXJpYW50ID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5rZXlzKHRoZW1lVmFyaWFudC5wcm9wcykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAob3duZXJTdGF0ZVtrZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSAmJiBwcm9wc1trZXldICE9PSB0aGVtZVZhcmlhbnQucHJvcHNba2V5XSkge1xuICAgICAgICAgIGlzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaXNNYXRjaCkge1xuICAgICAgICB2YXJpYW50c1N0eWxlcy5wdXNoKHN0eWxlc1twcm9wc1RvQ2xhc3NLZXkodGhlbWVWYXJpYW50LnByb3BzKV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5cbi8vIFVwZGF0ZSAvc3lzdGVtL3N0eWxlZC8jYXBpIGluIGNhc2UgaWYgdGhpcyBjaGFuZ2VzXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkge1xuICByZXR1cm4gcHJvcCAhPT0gJ293bmVyU3RhdGUnICYmIHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnO1xufVxuZXhwb3J0IGNvbnN0IHN5c3RlbURlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBsb3dlcmNhc2VGaXJzdExldHRlciA9IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3R5bGVkKGlucHV0ID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSxcbiAgICByb290U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcCxcbiAgICBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcFxuICB9ID0gaW5wdXQ7XG4gIGNvbnN0IHN5c3RlbVN4ID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgdGhlbWVcbiAgICB9KSk7XG4gIH07XG4gIHN5c3RlbVN4Ll9fbXVpX3N5c3RlbVN4ID0gdHJ1ZTtcbiAgcmV0dXJuICh0YWcsIGlucHV0T3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gRmlsdGVyIG91dCB0aGUgYHN4YCBzdHlsZSBmdW5jdGlvbiBmcm9tIHRoZSBwcmV2aW91cyBzdHlsZWQgY29tcG9uZW50IHRvIHByZXZlbnQgdW5uZWNlc3Nhcnkgc3R5bGVzIGdlbmVyYXRlZCBieSB0aGUgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gICAgcHJvY2Vzc1N0eWxlcyh0YWcsIHN0eWxlcyA9PiBzdHlsZXMuZmlsdGVyKHN0eWxlID0+ICEoc3R5bGUgIT0gbnVsbCAmJiBzdHlsZS5fX211aV9zeXN0ZW1TeCkpKTtcbiAgICBjb25zdCB7XG4gICAgICAgIG5hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgICAgIHNsb3Q6IGNvbXBvbmVudFNsb3QsXG4gICAgICAgIHNraXBWYXJpYW50c1Jlc29sdmVyOiBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyLFxuICAgICAgICBza2lwU3g6IGlucHV0U2tpcFN4LFxuICAgICAgICBvdmVycmlkZXNSZXNvbHZlclxuICAgICAgfSA9IGlucHV0T3B0aW9ucyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShpbnB1dE9wdGlvbnMsIF9leGNsdWRlZCk7XG5cbiAgICAvLyBpZiBza2lwVmFyaWFudHNSZXNvbHZlciBvcHRpb24gaXMgZGVmaW5lZCwgdGFrZSB0aGUgdmFsdWUsIG90aGVyd2lzZSwgdHJ1ZSBmb3Igcm9vdCBhbmQgZmFsc2UgZm9yIG90aGVyIHNsb3RzLlxuICAgIGNvbnN0IHNraXBWYXJpYW50c1Jlc29sdmVyID0gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciAhPT0gdW5kZWZpbmVkID8gaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciA6IGNvbXBvbmVudFNsb3QgJiYgY29tcG9uZW50U2xvdCAhPT0gJ1Jvb3QnIHx8IGZhbHNlO1xuICAgIGNvbnN0IHNraXBTeCA9IGlucHV0U2tpcFN4IHx8IGZhbHNlO1xuICAgIGxldCBsYWJlbDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgbGFiZWwgPSBgJHtjb21wb25lbnROYW1lfS0ke2xvd2VyY2FzZUZpcnN0TGV0dGVyKGNvbXBvbmVudFNsb3QgfHwgJ1Jvb3QnKX1gO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBpZiAoY29tcG9uZW50U2xvdCA9PT0gJ1Jvb3QnKSB7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHJvb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGNvbXBvbmVudFNsb3QpIHtcbiAgICAgIC8vIGFueSBvdGhlciBzbG90IHNwZWNpZmllZFxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSBzbG90U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZ1RhZyh0YWcpKSB7XG4gICAgICAvLyBmb3Igc3RyaW5nIChodG1sKSB0YWcsIHByZXNlcnZlIHRoZSBiZWhhdmlvciBpbiBlbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMuXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZGVmYXVsdFN0eWxlZFJlc29sdmVyID0gc3R5bGVkRW5naW5lU3R5bGVkKHRhZywgX2V4dGVuZHMoe1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uLFxuICAgICAgbGFiZWxcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgY29uc3QgbXVpU3R5bGVkUmVzb2x2ZXIgPSAoc3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zKSA9PiB7XG4gICAgICBjb25zdCBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUgPSBleHByZXNzaW9ucyA/IGV4cHJlc3Npb25zLm1hcChzdHlsZXNBcmcgPT4ge1xuICAgICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgICByZXR1cm4gdHlwZW9mIHN0eWxlc0FyZyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdHlsZXNBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlc0FyZyA/IF9yZWYgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgICB9ID0gX3JlZixcbiAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkMik7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlc0FyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9IDogc3R5bGVzQXJnO1xuICAgICAgfSkgOiBbXTtcbiAgICAgIGxldCB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gc3R5bGVBcmc7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiBvdmVycmlkZXNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gZ2V0U3R5bGVPdmVycmlkZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpO1xuICAgICAgICAgIGlmIChzdHlsZU92ZXJyaWRlcykge1xuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoc3R5bGVPdmVycmlkZXMpLmZvckVhY2goKFtzbG90S2V5LCBzbG90U3R5bGVdKSA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmVkU3R5bGVPdmVycmlkZXNbc2xvdEtleV0gPSB0eXBlb2Ygc2xvdFN0eWxlID09PSAnZnVuY3Rpb24nID8gc2xvdFN0eWxlKF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgIH0pKSA6IHNsb3RTdHlsZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG92ZXJyaWRlc1Jlc29sdmVyKHByb3BzLCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgIXNraXBWYXJpYW50c1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnRzUmVzb2x2ZXIocHJvcHMsIGdldFZhcmlhbnRTdHlsZXMoY29tcG9uZW50TmFtZSwgdGhlbWUpLCB0aGVtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFza2lwU3gpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2goc3lzdGVtU3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID0gZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLmxlbmd0aCAtIGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlQXJnKSAmJiBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPiAwKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVycyA9IG5ldyBBcnJheShudW1PZkN1c3RvbUZuc0FwcGxpZWQpLmZpbGwoJycpO1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBhcnJheSwgdGhhbiB3ZSBuZWVkIHRvIGFkZCBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgb3ZlcnJpZGVzLCB2YXJpYW50cyBhbmQgdGhlIHN4IHN0eWxlcy5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IFsuLi5zdHlsZUFyZywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZy5yYXcgPSBbLi4uc3R5bGVBcmcucmF3LCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3R5bGVBcmcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgLy8gY29tcG9uZW50IHN0YXlzIGFzIGEgZnVuY3Rpb24uIFRoaXMgY29uZGl0aW9uIG1ha2VzIHN1cmUgdGhhdCB3ZSBkbyBub3QgaW50ZXJwb2xhdGUgZnVuY3Rpb25zXG4gICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgIHN0eWxlQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZUFyZykge1xuICAgICAgICAvLyBJZiB0aGUgdHlwZSBpcyBmdW5jdGlvbiwgd2UgbmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgdGhlbWUuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICAgICAgICAgIH0gPSBfcmVmMixcbiAgICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIF9leGNsdWRlZDMpO1xuICAgICAgICAgIHJldHVybiBzdHlsZUFyZyhfZXh0ZW5kcyh7XG4gICAgICAgICAgICB0aGVtZTogaXNFbXB0eSh0aGVtZUlucHV0KSA/IGRlZmF1bHRUaGVtZSA6IHRoZW1lSW5wdXRcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgQ29tcG9uZW50ID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyKHRyYW5zZm9ybWVkU3R5bGVBcmcsIC4uLmV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBsZXQgZGlzcGxheU5hbWU7XG4gICAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgJHtjb21wb25lbnROYW1lfSR7Y29tcG9uZW50U2xvdCB8fCAnJ31gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGlzcGxheU5hbWUgPSBgU3R5bGVkKCR7Z2V0RGlzcGxheU5hbWUodGFnKX0pYDtcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgfTtcbiAgICBpZiAoZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWcpIHtcbiAgICAgIG11aVN0eWxlZFJlc29sdmVyLndpdGhDb25maWcgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZztcbiAgICB9XG4gICAgcmV0dXJuIG11aVN0eWxlZFJlc29sdmVyO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZVN0eWxlZCwgc2hvdWxkRm9yd2FyZFByb3AgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBjb25zdCByb290U2hvdWxkRm9yd2FyZFByb3AgPSBwcm9wID0+IHNob3VsZEZvcndhcmRQcm9wKHByb3ApICYmIHByb3AgIT09ICdjbGFzc2VzJztcbmV4cG9ydCBjb25zdCBzbG90U2hvdWxkRm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCh7XG4gIGRlZmF1bHRUaGVtZSxcbiAgcm9vdFNob3VsZEZvcndhcmRQcm9wXG59KTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDsiLCJjb25zdCBkZWZhdWx0R2VuZXJhdG9yID0gY29tcG9uZW50TmFtZSA9PiBjb21wb25lbnROYW1lO1xuY29uc3QgY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yID0gKCkgPT4ge1xuICBsZXQgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyZShnZW5lcmF0b3IpIHtcbiAgICAgIGdlbmVyYXRlID0gZ2VuZXJhdG9yO1xuICAgIH0sXG4gICAgZ2VuZXJhdGUoY29tcG9uZW50TmFtZSkge1xuICAgICAgcmV0dXJuIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpO1xuICAgIH0sXG4gICAgcmVzZXQoKSB7XG4gICAgICBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IENsYXNzTmFtZUdlbmVyYXRvciA9IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvcigpO1xuZXhwb3J0IGRlZmF1bHQgQ2xhc3NOYW1lR2VuZXJhdG9yOyIsImltcG9ydCBDbGFzc05hbWVHZW5lcmF0b3IgZnJvbSAnLi4vQ2xhc3NOYW1lR2VuZXJhdG9yJztcbmNvbnN0IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmcgPSB7XG4gIGFjdGl2ZTogJ2FjdGl2ZScsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY29tcGxldGVkOiAnY29tcGxldGVkJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGVycm9yOiAnZXJyb3InLFxuICBleHBhbmRlZDogJ2V4cGFuZGVkJyxcbiAgZm9jdXNlZDogJ2ZvY3VzZWQnLFxuICBmb2N1c1Zpc2libGU6ICdmb2N1c1Zpc2libGUnLFxuICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IGdsb2JhbFN0YXRlQ2xhc3MgPSBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nW3Nsb3RdO1xuICByZXR1cm4gZ2xvYmFsU3RhdGVDbGFzcyA/IGAke2dsb2JhbFN0YXRlUHJlZml4fS0ke2dsb2JhbFN0YXRlQ2xhc3N9YCA6IGAke0NsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZShjb21wb25lbnROYW1lKX0tJHtzbG90fWA7XG59IiwiaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoY29tcG9uZW50TmFtZSwgc2xvdHMsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHNsb3RzLmZvckVhY2goc2xvdCA9PiB7XG4gICAgcmVzdWx0W3Nsb3RdID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXgpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpQ2lyY3VsYXJQcm9ncmVzcycsIHNsb3QpO1xufVxuY29uc3QgY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgWydyb290JywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ3N2ZycsICdjaXJjbGUnLCAnY2lyY2xlRGV0ZXJtaW5hdGUnLCAnY2lyY2xlSW5kZXRlcm1pbmF0ZScsICdjaXJjbGVEaXNhYmxlU2hyaW5rJ10pO1xuZXhwb3J0IGRlZmF1bHQgY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiZGlzYWJsZVNocmlua1wiLCBcInNpemVcIiwgXCJzdHlsZVwiLCBcInRoaWNrbmVzc1wiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NDtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB7IGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBTSVpFID0gNDQ7XG5jb25zdCBjaXJjdWxhclJvdGF0ZUtleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XG4gIH1cbmApKTtcbmNvbnN0IGNpcmN1bGFyRGFzaEtleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDFweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IDA7XG4gIH1cblxuICA1MCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMHB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTE1cHg7XG4gIH1cblxuICAxMDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xMjVweDtcbiAgfVxuYCkpO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIHN2ZzogWydzdmcnXSxcbiAgICBjaXJjbGU6IFsnY2lyY2xlJywgYGNpcmNsZSR7Y2FwaXRhbGl6ZSh2YXJpYW50KX1gLCBkaXNhYmxlU2hyaW5rICYmICdjaXJjbGVEaXNhYmxlU2hyaW5rJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBDaXJjdWxhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nKVxufSwgb3duZXJTdGF0ZS5jb2xvciAhPT0gJ2luaGVyaXQnICYmIHtcbiAgY29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiBjc3MoX3QzIHx8IChfdDMgPSBfYFxuICAgICAgYW5pbWF0aW9uOiAkezB9IDEuNHMgbGluZWFyIGluZmluaXRlO1xuICAgIGApLCBjaXJjdWxhclJvdGF0ZUtleWZyYW1lKSk7XG5jb25zdCBDaXJjdWxhclByb2dyZXNzU1ZHID0gc3R5bGVkKCdzdmcnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ1N2ZycsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4gc3R5bGVzLnN2Z1xufSkoe1xuICBkaXNwbGF5OiAnYmxvY2snIC8vIEtlZXBzIHRoZSBwcm9ncmVzcyBjZW50ZXJlZFxufSk7XG5cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUgPSBzdHlsZWQoJ2NpcmNsZScsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnQ2lyY2xlJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5jaXJjbGUsIHN0eWxlc1tgY2lyY2xlJHtjYXBpdGFsaXplKG93bmVyU3RhdGUudmFyaWFudCl9YF0sIG93bmVyU3RhdGUuZGlzYWJsZVNocmluayAmJiBzdHlsZXMuY2lyY2xlRGlzYWJsZVNocmlua107XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHN0cm9rZTogJ2N1cnJlbnRDb2xvcidcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnKVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYge1xuICAvLyBTb21lIGRlZmF1bHQgdmFsdWUgdGhhdCBsb29rcyBmaW5lIHdhaXRpbmcgZm9yIHRoZSBhbmltYXRpb24gdG8ga2lja3MgaW4uXG4gIHN0cm9rZURhc2hhcnJheTogJzgwcHgsIDIwMHB4JyxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMCAvLyBBZGQgdGhlIHVuaXQgdG8gZml4IGEgRWRnZSAxNiBhbmQgYmVsb3cgYnVnLlxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmICFvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgY3NzKF90NCB8fCAoX3Q0ID0gX2BcbiAgICAgIGFuaW1hdGlvbjogJHswfSAxLjRzIGVhc2UtaW4tb3V0IGluZmluaXRlO1xuICAgIGApLCBjaXJjdWxhckRhc2hLZXlmcmFtZSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDaXJjdWxhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICBkaXNhYmxlU2hyaW5rID0gZmFsc2UsXG4gICAgICBzaXplID0gNDAsXG4gICAgICBzdHlsZSxcbiAgICAgIHRoaWNrbmVzcyA9IDMuNixcbiAgICAgIHZhbHVlID0gMCxcbiAgICAgIHZhcmlhbnQgPSAnaW5kZXRlcm1pbmF0ZSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmssXG4gICAgc2l6ZSxcbiAgICB0aGlja25lc3MsXG4gICAgdmFsdWUsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCBjaXJjbGVTdHlsZSA9IHt9O1xuICBjb25zdCByb290U3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnKSB7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IDIgKiBNYXRoLlBJICogKChTSVpFIC0gdGhpY2tuZXNzKSAvIDIpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hhcnJheSA9IGNpcmN1bWZlcmVuY2UudG9GaXhlZCgzKTtcbiAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgIGNpcmNsZVN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBgJHsoKDEwMCAtIHZhbHVlKSAvIDEwMCAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyl9cHhgO1xuICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByZWY6IHJlZixcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzU1ZHLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHZpZXdCb3g6IGAke1NJWkUgLyAyfSAke1NJWkUgLyAyfSAke1NJWkV9ICR7U0laRX1gLFxuICAgICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZSxcbiAgICAgICAgc3R5bGU6IGNpcmNsZVN0eWxlLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjeDogU0laRSxcbiAgICAgICAgY3k6IFNJWkUsXG4gICAgICAgIHI6IChTSVpFIC0gdGhpY2tuZXNzKSAvIDIsXG4gICAgICAgIGZpbGw6IFwibm9uZVwiLFxuICAgICAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gICAgICB9KVxuICAgIH0pXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ2lyY3VsYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdlcnJvcicsICdpbmZvJywgJ3N1Y2Nlc3MnLCAnd2FybmluZyddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2hyaW5rIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICogVGhpcyBvbmx5IHdvcmtzIGlmIHZhcmlhbnQgaXMgYGluZGV0ZXJtaW5hdGVgLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZVNocmluazogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZVNocmluayAmJiBwcm9wcy52YXJpYW50ICYmIHByb3BzLnZhcmlhbnQgIT09ICdpbmRldGVybWluYXRlJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignTVVJOiBZb3UgaGF2ZSBwcm92aWRlZCB0aGUgYGRpc2FibGVTaHJpbmtgIHByb3AgJyArICd3aXRoIGEgdmFyaWFudCBvdGhlciB0aGFuIGBpbmRldGVybWluYXRlYC4gVGhpcyB3aWxsIGhhdmUgbm8gZWZmZWN0LicpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJZiB1c2luZyBhIG51bWJlciwgdGhlIHBpeGVsIHVuaXQgaXMgYXNzdW1lZC5cbiAgICogSWYgdXNpbmcgYSBzdHJpbmcsIHlvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIENTUyB1bml0LCBlLmcgJzNyZW0nLlxuICAgKiBAZGVmYXVsdCA0MFxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqIEBkZWZhdWx0IDMuNlxuICAgKi9cbiAgdGhpY2tuZXNzOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqIEBkZWZhdWx0ICdpbmRldGVybWluYXRlJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IENpcmN1bGFyUHJvZ3Jlc3M7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInN4XCJdO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuL2RlZmF1bHRTeENvbmZpZyc7XG5jb25zdCBzcGxpdFByb3BzID0gcHJvcHMgPT4ge1xuICB2YXIgX3Byb3BzJHRoZW1lJHVuc3RhYmxlLCBfcHJvcHMkdGhlbWU7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgY29uc3QgY29uZmlnID0gKF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA9IHByb3BzID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHMkdGhlbWUudW5zdGFibGVfc3hDb25maWcpICE9IG51bGwgPyBfcHJvcHMkdGhlbWUkdW5zdGFibGUgOiBkZWZhdWx0U3hDb25maWc7XG4gIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGlmIChjb25maWdbcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0ZW5kU3hQcm9wKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHN4OiBpblN4XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBzeXN0ZW1Qcm9wcyxcbiAgICBvdGhlclByb3BzXG4gIH0gPSBzcGxpdFByb3BzKG90aGVyKTtcbiAgbGV0IGZpbmFsU3g7XG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG4gICAgICBpZiAoIWlzUGxhaW5PYmplY3QocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc3lzdGVtUHJvcHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCByZXN1bHQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmluYWxTeCA9IF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgaW5TeCk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCwgeyBleHRlbmRTeFByb3AgfSBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm94KG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBCb3hSb290ID0gc3R5bGVkKCdkaXYnLCB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3A6IHByb3AgPT4gcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcydcbiAgfSkoc3R5bGVGdW5jdGlvblN4KTtcbiAgY29uc3QgQm94ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQm94KGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgICBjb25zdCBfZXh0ZW5kU3hQcm9wID0gZXh0ZW5kU3hQcm9wKGluUHJvcHMpLFxuICAgICAge1xuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGNvbXBvbmVudCA9ICdkaXYnXG4gICAgICB9ID0gX2V4dGVuZFN4UHJvcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX2V4dGVuZFN4UHJvcCwgX2V4Y2x1ZGVkKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQm94Um9vdCwgX2V4dGVuZHMoe1xuICAgICAgYXM6IGNvbXBvbmVudCxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzTmFtZSwgZ2VuZXJhdGVDbGFzc05hbWUgPyBnZW5lcmF0ZUNsYXNzTmFtZShkZWZhdWx0Q2xhc3NOYW1lKSA6IGRlZmF1bHRDbGFzc05hbWUpLFxuICAgICAgdGhlbWU6IHRoZW1lXG4gICAgfSwgb3RoZXIpKTtcbiAgfSk7XG4gIHJldHVybiBCb3g7XG59IiwiaW1wb3J0IHsgY3JlYXRlQm94IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHVuc3RhYmxlX0NsYXNzTmFtZUdlbmVyYXRvciBhcyBDbGFzc05hbWVHZW5lcmF0b3IgfSBmcm9tICcuLi9jbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICcuLi9zdHlsZXMnO1xuY29uc3QgZGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IEJveCA9IGNyZWF0ZUJveCh7XG4gIGRlZmF1bHRUaGVtZSxcbiAgZGVmYXVsdENsYXNzTmFtZTogJ011aUJveC1yb290JyxcbiAgZ2VuZXJhdGVDbGFzc05hbWU6IENsYXNzTmFtZUdlbmVyYXRvci5nZW5lcmF0ZVxufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCb3gucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBCb3g7IiwiaW1wb3J0IGRheWpzIGZyb20gJ2RheWpzJztcbmltcG9ydCB1dGMgZnJvbSAnZGF5anMvcGx1Z2luL3V0Yyc7XG5pbXBvcnQgdGltZXpvbmUgZnJvbSAnZGF5anMvcGx1Z2luL3RpbWV6b25lJztcbmltcG9ydCBpc1NhbWVPckFmdGVyIGZyb20gJ2RheWpzL3BsdWdpbi9pc1NhbWVPckFmdGVyJztcblxuZGF5anMuZXh0ZW5kKHV0Yyk7XG5kYXlqcy5leHRlbmQodGltZXpvbmUpO1xuZGF5anMuZXh0ZW5kKGlzU2FtZU9yQWZ0ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBkYXlqcztcbiIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpTGluZWFyUHJvZ3Jlc3MnLCBzbG90KTtcbn1cbmNvbnN0IGxpbmVhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUxpbmVhclByb2dyZXNzJywgWydyb290JywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2J1ZmZlcicsICdxdWVyeScsICdkYXNoZWQnLCAnZGFzaGVkQ29sb3JQcmltYXJ5JywgJ2Rhc2hlZENvbG9yU2Vjb25kYXJ5JywgJ2JhcicsICdiYXJDb2xvclByaW1hcnknLCAnYmFyQ29sb3JTZWNvbmRhcnknLCAnYmFyMUluZGV0ZXJtaW5hdGUnLCAnYmFyMURldGVybWluYXRlJywgJ2JhcjFCdWZmZXInLCAnYmFyMkluZGV0ZXJtaW5hdGUnLCAnYmFyMkJ1ZmZlciddKTtcbmV4cG9ydCBkZWZhdWx0IGxpbmVhclByb2dyZXNzQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJ2YWx1ZVwiLCBcInZhbHVlQnVmZmVyXCIsIFwidmFyaWFudFwiXTtcbmxldCBfID0gdCA9PiB0LFxuICBfdCxcbiAgX3QyLFxuICBfdDMsXG4gIF90NCxcbiAgX3Q1LFxuICBfdDY7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgeyBrZXlmcmFtZXMsIGNzcywgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgeyBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vbGluZWFyUHJvZ3Jlc3NDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBqc3hzIGFzIF9qc3hzIH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBUUkFOU0lUSU9OX0RVUkFUSU9OID0gNDsgLy8gc2Vjb25kc1xuY29uc3QgaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgbGVmdDogLTM1JTtcbiAgICByaWdodDogMTAwJTtcbiAgfVxuXG4gIDYwJSB7XG4gICAgbGVmdDogMTAwJTtcbiAgICByaWdodDogLTkwJTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIGxlZnQ6IDEwMCU7XG4gICAgcmlnaHQ6IC05MCU7XG4gIH1cbmApKTtcbmNvbnN0IGluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgbGVmdDogLTIwMCU7XG4gICAgcmlnaHQ6IDEwMCU7XG4gIH1cblxuICA2MCUge1xuICAgIGxlZnQ6IDEwNyU7XG4gICAgcmlnaHQ6IC04JTtcbiAgfVxuXG4gIDEwMCUge1xuICAgIGxlZnQ6IDEwNyU7XG4gICAgcmlnaHQ6IC04JTtcbiAgfVxuYCkpO1xuY29uc3QgYnVmZmVyS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QzIHx8IChfdDMgPSBfYFxuICAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIC0yM3B4O1xuICB9XG5cbiAgNjAlIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgLTIzcHg7XG4gIH1cblxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IC0yMDBweCAtMjNweDtcbiAgfVxuYCkpO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGNsYXNzZXMsXG4gICAgdmFyaWFudCxcbiAgICBjb2xvclxuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCB2YXJpYW50XSxcbiAgICBkYXNoZWQ6IFsnZGFzaGVkJywgYGRhc2hlZENvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSxcbiAgICBiYXIxOiBbJ2JhcicsIGBiYXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiAnYmFyMUluZGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmICdiYXIxRGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiAnYmFyMUJ1ZmZlciddLFxuICAgIGJhcjI6IFsnYmFyJywgdmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYgYGJhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgJ2JhcjJJbmRldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgJ2JhcjJCdWZmZXInXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5jb25zdCBnZXRDb2xvclNoYWRlID0gKHRoZW1lLCBjb2xvcikgPT4ge1xuICBpZiAoY29sb3IgPT09ICdpbmhlcml0Jykge1xuICAgIHJldHVybiAnY3VycmVudENvbG9yJztcbiAgfVxuICBpZiAodGhlbWUudmFycykge1xuICAgIHJldHVybiB0aGVtZS52YXJzLnBhbGV0dGUuTGluZWFyUHJvZ3Jlc3NbYCR7Y29sb3J9QmdgXTtcbiAgfVxuICByZXR1cm4gdGhlbWUucGFsZXR0ZS5tb2RlID09PSAnbGlnaHQnID8gbGlnaHRlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjYyKSA6IGRhcmtlbih0aGVtZS5wYWxldHRlW2NvbG9yXS5tYWluLCAwLjUpO1xufTtcbmNvbnN0IExpbmVhclByb2dyZXNzUm9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tgY29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgaGVpZ2h0OiA0LFxuICB6SW5kZXg6IDAsXG4gIC8vIEZpeCBTYWZhcmkncyBidWcgZHVyaW5nIGNvbXBvc2l0aW9uIG9mIGRpZmZlcmVudCBwYWludC5cbiAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICBjb2xvckFkanVzdDogJ2V4YWN0J1xuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxuICAnJjo6YmVmb3JlJzoge1xuICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJyxcbiAgICBvcGFjaXR5OiAwLjNcbiAgfVxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknICYmIHtcbiAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG59KSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0Rhc2hlZCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0Rhc2hlZCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuZGFzaGVkLCBzdHlsZXNbYGRhc2hlZENvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IHtcbiAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvcik7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbWFyZ2luVG9wOiAwLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIHdpZHRoOiAnMTAwJSdcbiAgfSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgICBvcGFjaXR5OiAwLjNcbiAgfSwge1xuICAgIGJhY2tncm91bmRJbWFnZTogYHJhZGlhbC1ncmFkaWVudCgke2JhY2tncm91bmRDb2xvcn0gMCUsICR7YmFja2dyb3VuZENvbG9yfSAxNiUsIHRyYW5zcGFyZW50IDQyJSlgLFxuICAgIGJhY2tncm91bmRTaXplOiAnMTBweCAxMHB4JyxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb246ICcwIC0yM3B4J1xuICB9KTtcbn0sIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgYW5pbWF0aW9uOiAkezB9IDNzIGluZmluaXRlIGxpbmVhcjtcbiAgYCksIGJ1ZmZlcktleWZyYW1lKSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0JhcjEgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdCYXIxJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5iYXIsIHN0eWxlc1tgYmFyQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIHN0eWxlcy5iYXIxSW5kZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHN0eWxlcy5iYXIxRGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgc3R5bGVzLmJhcjFCdWZmZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0JyxcbiAgYmFja2dyb3VuZENvbG9yOiBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgPyAnY3VycmVudENvbG9yJyA6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICB6SW5kZXg6IDEsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBjc3MoX3Q1IHx8IChfdDUgPSBfYFxuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBhbmltYXRpb246ICR7MH0gMi4xcyBjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSkgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUxS2V5ZnJhbWUpKTtcbmNvbnN0IExpbmVhclByb2dyZXNzQmFyMiA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0JhcjInLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhciwgc3R5bGVzW2BiYXJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgc3R5bGVzLmJhcjJJbmRldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHN0eWxlcy5iYXIyQnVmZmVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMgbGluZWFyJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyA/ICdjdXJyZW50Q29sb3InIDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIHtcbiAgb3BhY2l0eTogMC4zXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKSxcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNzcyhfdDYgfHwgKF90NiA9IF9gXG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGFuaW1hdGlvbjogJHswfSAyLjFzIGN1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSkgMS4xNXMgaW5maW5pdGU7XG4gICAgYCksIGluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUpKTtcblxuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5jb25zdCBMaW5lYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmVhclByb2dyZXNzKGluUHJvcHMsIHJlZikge1xuICBjb25zdCBwcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgdmFsdWUsXG4gICAgICB2YWx1ZUJ1ZmZlcixcbiAgICAgIHZhcmlhbnQgPSAnaW5kZXRlcm1pbmF0ZSdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNvbG9yLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICBjb25zdCByb290UHJvcHMgPSB7fTtcbiAgY29uc3QgaW5saW5lU3R5bGVzID0ge1xuICAgIGJhcjE6IHt9LFxuICAgIGJhcjI6IHt9XG4gIH07XG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdidWZmZXInKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtaW4nXSA9IDA7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVtYXgnXSA9IDEwMDtcbiAgICAgIGxldCB0cmFuc2Zvcm0gPSB2YWx1ZSAtIDEwMDtcbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zZm9ybX0lKWA7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZSBwcm9wICcgKyAnd2hlbiB1c2luZyB0aGUgZGV0ZXJtaW5hdGUgb3IgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MgLicpO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWVCdWZmZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHRyYW5zZm9ybSA9ICh2YWx1ZUJ1ZmZlciB8fCAwKSAtIDEwMDtcbiAgICAgIGlmICh0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgIHRyYW5zZm9ybSA9IC10cmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpbmxpbmVTdHlsZXMuYmFyMi50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zZm9ybX0lKWA7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSB2YWx1ZUJ1ZmZlciBwcm9wICcgKyAnd2hlbiB1c2luZyB0aGUgYnVmZmVyIHZhcmlhbnQgb2YgTGluZWFyUHJvZ3Jlc3MuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoTGluZWFyUHJvZ3Jlc3NSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIHtcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciwge1xuICAgIGNoaWxkcmVuOiBbdmFyaWFudCA9PT0gJ2J1ZmZlcicgPyAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0Rhc2hlZCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmRhc2hlZCxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGVcbiAgICB9KSA6IG51bGwsIC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzQmFyMSwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhcjEsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIxXG4gICAgfSksIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgPyBudWxsIDogLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NCYXIyLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYmFyMixcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjJcbiAgICB9KV1cbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBMaW5lYXJQcm9ncmVzcy5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEl0IHN1cHBvcnRzIGJvdGggZGVmYXVsdCBhbmQgY3VzdG9tIHRoZW1lIGNvbG9ycywgd2hpY2ggY2FuIGJlIGFkZGVkIGFzIHNob3duIGluIHRoZVxuICAgKiBbcGFsZXR0ZSBjdXN0b21pemF0aW9uIGd1aWRlXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvY3VzdG9taXphdGlvbi9wYWxldHRlLyNhZGRpbmctbmV3LWNvbG9ycykuXG4gICAqIEBkZWZhdWx0ICdwcmltYXJ5J1xuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSBhbmQgYnVmZmVyIHZhcmlhbnRzLlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhbHVlIGZvciB0aGUgYnVmZmVyIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWVCdWZmZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqIFVzZSBpbmRldGVybWluYXRlIG9yIHF1ZXJ5IHdoZW4gdGhlcmUgaXMgbm8gcHJvZ3Jlc3MgdmFsdWUuXG4gICAqIEBkZWZhdWx0ICdpbmRldGVybWluYXRlJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnYnVmZmVyJywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAncXVlcnknXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBMaW5lYXJQcm9ncmVzczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVN5c3RlbSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWVTeXN0ZW0oZGVmYXVsdFRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuICByZXR1cm4gdGhlbWU7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVR5cG9ncmFwaHknLCBzbG90KTtcbn1cbmNvbnN0IHR5cG9ncmFwaHlDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpVHlwb2dyYXBoeScsIFsncm9vdCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2luaGVyaXQnLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnb3ZlcmxpbmUnLCAnYWxpZ25MZWZ0JywgJ2FsaWduUmlnaHQnLCAnYWxpZ25DZW50ZXInLCAnYWxpZ25KdXN0aWZ5JywgJ25vV3JhcCcsICdndXR0ZXJCb3R0b20nLCAncGFyYWdyYXBoJ10pO1xuZXhwb3J0IGRlZmF1bHQgdHlwb2dyYXBoeUNsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImFsaWduXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZ3V0dGVyQm90dG9tXCIsIFwibm9XcmFwXCIsIFwicGFyYWdyYXBoXCIsIFwidmFyaWFudFwiLCBcInZhcmlhbnRNYXBwaW5nXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfZXh0ZW5kU3hQcm9wIGFzIGV4dGVuZFN4UHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB7IGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL3R5cG9ncmFwaHlDbGFzc2VzJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgYWxpZ24sXG4gICAgZ3V0dGVyQm90dG9tLFxuICAgIG5vV3JhcCxcbiAgICBwYXJhZ3JhcGgsXG4gICAgdmFyaWFudCxcbiAgICBjbGFzc2VzXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCB2YXJpYW50LCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYgYGFsaWduJHtjYXBpdGFsaXplKGFsaWduKX1gLCBndXR0ZXJCb3R0b20gJiYgJ2d1dHRlckJvdHRvbScsIG5vV3JhcCAmJiAnbm9XcmFwJywgcGFyYWdyYXBoICYmICdwYXJhZ3JhcGgnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBjb25zdCBUeXBvZ3JhcGh5Um9vdCA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aVR5cG9ncmFwaHknLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYgc3R5bGVzW2BhbGlnbiR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmFsaWduKX1gXSwgb3duZXJTdGF0ZS5ub1dyYXAgJiYgc3R5bGVzLm5vV3JhcCwgb3duZXJTdGF0ZS5ndXR0ZXJCb3R0b20gJiYgc3R5bGVzLmd1dHRlckJvdHRvbSwgb3duZXJTdGF0ZS5wYXJhZ3JhcGggJiYgc3R5bGVzLnBhcmFncmFwaF07XG4gIH1cbn0pKCh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiBfZXh0ZW5kcyh7XG4gIG1hcmdpbjogMFxufSwgb3duZXJTdGF0ZS52YXJpYW50ICYmIHRoZW1lLnR5cG9ncmFwaHlbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHtcbiAgdGV4dEFsaWduOiBvd25lclN0YXRlLmFsaWduXG59LCBvd25lclN0YXRlLm5vV3JhcCAmJiB7XG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xufSwgb3duZXJTdGF0ZS5ndXR0ZXJCb3R0b20gJiYge1xuICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG59LCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiB7XG4gIG1hcmdpbkJvdHRvbTogMTZcbn0pKTtcbmNvbnN0IGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCcsXG4gIGluaGVyaXQ6ICdwJ1xufTtcblxuLy8gVE9ETyB2NjogZGVwcmVjYXRlIHRoZXNlIGNvbG9yIHZhbHVlcyBpbiB2NS54IGFuZCByZW1vdmUgdGhlIHRyYW5zZm9ybWF0aW9uIGluIHY2XG5jb25zdCBjb2xvclRyYW5zZm9ybWF0aW9ucyA9IHtcbiAgcHJpbWFyeTogJ3ByaW1hcnkubWFpbicsXG4gIHRleHRQcmltYXJ5OiAndGV4dC5wcmltYXJ5JyxcbiAgc2Vjb25kYXJ5OiAnc2Vjb25kYXJ5Lm1haW4nLFxuICB0ZXh0U2Vjb25kYXJ5OiAndGV4dC5zZWNvbmRhcnknLFxuICBlcnJvcjogJ2Vycm9yLm1haW4nXG59O1xuY29uc3QgdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyA9IGNvbG9yID0+IHtcbiAgcmV0dXJuIGNvbG9yVHJhbnNmb3JtYXRpb25zW2NvbG9yXSB8fCBjb2xvcjtcbn07XG5jb25zdCBUeXBvZ3JhcGh5ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShpblByb3BzLCByZWYpIHtcbiAgY29uc3QgdGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzOiBpblByb3BzLFxuICAgIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xuICB9KTtcbiAgY29uc3QgY29sb3IgPSB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzKHRoZW1lUHJvcHMuY29sb3IpO1xuICBjb25zdCBwcm9wcyA9IGV4dGVuZFN4UHJvcChfZXh0ZW5kcyh7fSwgdGhlbWVQcm9wcywge1xuICAgIGNvbG9yXG4gIH0pKTtcbiAgY29uc3Qge1xuICAgICAgYWxpZ24gPSAnaW5oZXJpdCcsXG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb21wb25lbnQsXG4gICAgICBndXR0ZXJCb3R0b20gPSBmYWxzZSxcbiAgICAgIG5vV3JhcCA9IGZhbHNlLFxuICAgICAgcGFyYWdyYXBoID0gZmFsc2UsXG4gICAgICB2YXJpYW50ID0gJ2JvZHkxJyxcbiAgICAgIHZhcmlhbnRNYXBwaW5nID0gZGVmYXVsdFZhcmlhbnRNYXBwaW5nXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBhbGlnbixcbiAgICBjb2xvcixcbiAgICBjbGFzc05hbWUsXG4gICAgY29tcG9uZW50LFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgdmFyaWFudE1hcHBpbmdcbiAgfSk7XG4gIGNvbnN0IENvbXBvbmVudCA9IGNvbXBvbmVudCB8fCAocGFyYWdyYXBoID8gJ3AnIDogdmFyaWFudE1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdFZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdKSB8fCAnc3Bhbic7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFR5cG9ncmFwaHlSb290LCBfZXh0ZW5kcyh7XG4gICAgYXM6IENvbXBvbmVudCxcbiAgICByZWY6IHJlZixcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICogQGRlZmF1bHQgJ2luaGVyaXQnXG4gICAqL1xuICBhbGlnbjogUHJvcFR5cGVzLm9uZU9mKFsnY2VudGVyJywgJ2luaGVyaXQnLCAnanVzdGlmeScsICdsZWZ0JywgJ3JpZ2h0J10pLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgbm90IHdyYXAsIGJ1dCBpbnN0ZWFkIHdpbGwgdHJ1bmNhdGUgd2l0aCBhIHRleHQgb3ZlcmZsb3cgZWxsaXBzaXMuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0ZXh0IG92ZXJmbG93IGNhbiBvbmx5IGhhcHBlbiB3aXRoIGJsb2NrIG9yIGlubGluZS1ibG9jayBsZXZlbCBlbGVtZW50c1xuICAgKiAodGhlIGVsZW1lbnQgbmVlZHMgdG8gaGF2ZSBhIHdpZHRoIGluIG9yZGVyIHRvIG92ZXJmbG93KS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG5vV3JhcDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBlbGVtZW50IHdpbGwgYmUgYSBwYXJhZ3JhcGggZWxlbWVudC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHBhcmFncmFwaDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogQGRlZmF1bHQgJ2JvZHkxJ1xuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydib2R5MScsICdib2R5MicsICdidXR0b24nLCAnY2FwdGlvbicsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdpbmhlcml0JywgJ292ZXJsaW5lJywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgbWFwcyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IEhUTUwgZWxlbWVudCB0eXBlcy5cbiAgICogRm9yIGluc3RhbmNlLCBzdWJ0aXRsZTEgdG8gYDxoNj5gLlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjaGFuZ2UgdGhhdCBtYXBwaW5nLCB5b3UgY2FuIHByb3ZpZGUgeW91ciBvd24uXG4gICAqIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gdXNlIHRoZSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBAZGVmYXVsdCB7XG4gICAqICAgaDE6ICdoMScsXG4gICAqICAgaDI6ICdoMicsXG4gICAqICAgaDM6ICdoMycsXG4gICAqICAgaDQ6ICdoNCcsXG4gICAqICAgaDU6ICdoNScsXG4gICAqICAgaDY6ICdoNicsXG4gICAqICAgc3VidGl0bGUxOiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMjogJ2g2JyxcbiAgICogICBib2R5MTogJ3AnLFxuICAgKiAgIGJvZHkyOiAncCcsXG4gICAqICAgaW5oZXJpdDogJ3AnLFxuICAgKiB9XG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgVHlwb2dyYXBoeTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IExpbmVhclByb2dyZXNzIGZyb20gJ0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5JztcbmltcG9ydCBCb3ggZnJvbSAnQG11aS9tYXRlcmlhbC9Cb3gnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Qm94IHN4PXt7IGRpc3BsYXk6ICdmbGV4JywgYWxpZ25JdGVtczogJ2NlbnRlcicgfX0+XG4gICAgICA8Qm94IHN4PXt7IHdpZHRoOiAnMTAwJScsIG1yOiAxIH19PlxuICAgICAgICA8TGluZWFyUHJvZ3Jlc3MgdmFyaWFudD1cImRldGVybWluYXRlXCIgey4uLnByb3BzfSAvPlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94IHN4PXt7IG1pbldpZHRoOiAzNSB9fT5cbiAgICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD1cImJvZHkyXCIgY29sb3I9XCJ0ZXh0LnNlY29uZGFyeVwiPlxuICAgICAgICAgIHtgJHtNYXRoLnJvdW5kKFxuICAgICAgICAgIHByb3BzLnZhbHVlXG4gICAgICAgICl9JWB9XG4gICAgICAgIDwvVHlwb2dyYXBoeT5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufVxuXG5MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBidWZmZXIgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmF2LnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9OYXYuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1kNSBmcm9tICdjcnlwdG8tanMvbWQ1JztcbmltcG9ydCAnLi9OYXYuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5hdiAoeyBkYXRhLCBzZXREYXRhU2VsZWN0aW9uLCBkYXRhU2VsZWN0aW9uIH0pIHtcbiAgZnVuY3Rpb24gZGlzcGxheV9maWxlX25hbWUgKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS5zcGxpdCgnLycpLnBvcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsZW5hbWVfaGFzaCAoZmlsZSkge1xuICAgIHJldHVybiBtZDUoZmlsZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxuYXY+XG4gICAgICA8dWw+XG4gICAgICAgIHtkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICA8bGkga2V5PXtmaWxlbmFtZV9oYXNoKGl0ZW0uZmlsZSl9PlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3NOYW1lPXtkYXRhU2VsZWN0aW9uID09PSBpbmRleCAmJiAnYWN0aXZlJ30gb25DbGljaz17KCkgPT4gc2V0RGF0YVNlbGVjdGlvbihpbmRleCl9PlxuICAgICAgICAgICAgICB7ZGlzcGxheV9maWxlX25hbWUoaXRlbS5maWxlKX1cbiAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAge01hdGgucm91bmQoaXRlbS5vdXRwdXQucGVyY2VudCl9XG4gICAgICAgICAgICAgICAgJSlcbiAgICAgICAgICAgICAgPC9zdHJvbmc+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAge2l0ZW0ub3V0cHV0LnRpbWVfcmVtYWluaW5nfVxuICAgICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgICAge2l0ZW0ubmFtZSAmJiBgLSAke2l0ZW0ubmFtZX1gfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj48ZW0+e2l0ZW0ub3V0cHV0LmFjdGlvbn08L2VtPjwvZGl2PlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgIDwvbmF2PlxuICApO1xufVxuXG5OYXYucHJvcFR5cGVzID0ge1xuICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHNldERhdGFTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRhdGFTZWxlY3Rpb246IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9Ib21lLnNjc3MnO1xuaW1wb3J0IENpcmN1bGFyUHJvZ3Jlc3MgZnJvbSAnQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzJztcbmltcG9ydCBCb3ggZnJvbSAnQG11aS9tYXRlcmlhbC9Cb3gnO1xuaW1wb3J0IGRheWpzIGZyb20gJy4uLy4uL2RheWpzJztcbmltcG9ydCBMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCBmcm9tICcuLi9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbC9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCc7XG4vLyBpbXBvcnQgQ2lyY3VsYXJQcm9ncmVzc1dpdGhMYWJlbCBmcm9tICcuLi9DaXJjdWxhclByb2dyZXNzV2l0aExhYmVsL0NpcmN1bGFyUHJvZ3Jlc3NXaXRoTGFiZWwnO1xuaW1wb3J0IE5hdiBmcm9tICcuLi9OYXZpZ2F0aW9uL05hdic7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERhdGEgKHNldERhdGEsIHNldEZpbGVMaXN0LCBzZXREaXNrcywgc2V0VXRpbGl6YXRpb24sIHNldFN0YXR1cykge1xuICB0cnkge1xuICAgIGNsZWFyVGltZW91dCh3aW5kb3cuZGF0YVRpbWVvdXQpO1xuICAgIGNvbnN0IGQgPSBhd2FpdCBmZXRjaCgnYWN0aXZlLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXREYXRhKGQpO1xuXG4gICAgY29uc3QgZiA9IGF3YWl0IGZldGNoKCdmaWxlbGlzdC5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0RmlsZUxpc3QoZik7XG5cbiAgICBjb25zdCBkaXNrcyA9IGF3YWl0IGZldGNoKCdkaXNrLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXREaXNrcyhkaXNrcyk7XG5cbiAgICBjb25zdCB1dGlsaXphdGlvbiA9IGF3YWl0IGZldGNoKCd1dGlsaXphdGlvbi5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0VXRpbGl6YXRpb24odXRpbGl6YXRpb24pO1xuXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgZmV0Y2goJ3N0YXR1cy5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0U3RhdHVzKHN0YXR1cyk7XG5cbiAgICB3aW5kb3cuZGF0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGdldERhdGEoLi4uYXJndW1lbnRzKTtcbiAgICB9LCAxICogMTAwMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB3aW5kb3cuZGF0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGdldERhdGEoLi4uYXJndW1lbnRzKTtcbiAgICB9LCAxICogMTAwMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXN0aW1hdGVkX2xvY2FsX3RpbWUgKHNlY29uZHMpIHtcbiAgY29uc3QgZmluYWxfdGltZSA9IGRheWpzKCkuYWRkKHNlY29uZHMsICdzZWNvbmRzJyk7XG4gIGxldCBmbXRfc3RyaW5nID0gJ01NL0REL1lZWVkgSEg6bW06c3MnO1xuXG4gIGlmIChmaW5hbF90aW1lLmlzU2FtZShkYXlqcygpLCAnZGF5JykpIHtcbiAgICBmbXRfc3RyaW5nID0gJ0hIOm1tOnNzJztcbiAgfVxuICByZXR1cm4gZmluYWxfdGltZS5mb3JtYXQoZm10X3N0cmluZyk7XG59XG5cbmZ1bmN0aW9uIGh1bWFuX3NpemUgKHNpemUpIHtcbiAgY29uc3Qgb3JkZXIgPSBbJ2diJywgJ21iJywgJ2tiJ107XG4gIGNvbnN0IG91dHB1dF9zaXplID0gb3JkZXIuZmluZCgobykgPT4gc2l6ZVtvXSA+PSAxKTtcbiAgY29uc3Qgcm91bmRlZF9zaXplID0gTWF0aC5yb3VuZChzaXplW291dHB1dF9zaXplXSAqIDEwMCkgLyAxMDA7XG5cbiAgcmV0dXJuIHJvdW5kZWRfc2l6ZSArIG91dHB1dF9zaXplO1xufVxuXG5mdW5jdGlvbiBtYWtlX2h1bWFuX3JlYWRhYmxlIChzaXplKSB7XG4gIGxldCBjYWxjX3NpemUgPSArc2l6ZTtcbiAgY29uc3QgdW5pdHMgPSBbJ2tiJywgJ21iJywgJ2diJ107XG4gIGxldCB1bml0ID0gMDtcblxuICB3aGlsZSAoY2FsY19zaXplID4gMTAyNCkge1xuICAgIGNhbGNfc2l6ZSAvPSAxMDI0O1xuICAgIHVuaXQgKz0gMTtcbiAgfVxuXG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKGNhbGNfc2l6ZSAqIDEwMCkgLyAxMDB9JHt1bml0c1t1bml0XX1gO1xufVxuXG5mdW5jdGlvbiBIb21lICgpIHtcbiAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZmlsZWxpc3QsIHNldEZpbGVMaXN0XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2Rpc2tzLCBzZXREaXNrc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt1dGlsaXphdGlvbiwgc2V0VXRpbGl6YXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZGF0YVNlbGVjdGlvbiwgc2V0RGF0YVNlbGVjdGlvbl0gPSB1c2VTdGF0ZSgwKTtcblxuICBjb25zdCBtdnAgPSBbZGF0YVNvdXJjZSwgZmlsZWxpc3QsIGRpc2tzLCB1dGlsaXphdGlvbiwgc3RhdHVzXS5maWx0ZXIoKGQpID0+ICFkKTtcblxuICAvLyBpbnRlcmZhY2Ugd2FpdHMgZm9yIGFsbCBkYXRhIHRvIGJlIGxvYWRlZFxuICBpZiAobXZwLmxlbmd0aCA+IDApIHtcbiAgICBnZXREYXRhKHNldERhdGEsIHNldEZpbGVMaXN0LCBzZXREaXNrcywgc2V0VXRpbGl6YXRpb24sIHNldFN0YXR1cyk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAgICAgICA8Q2lyY3VsYXJQcm9ncmVzcyAvPlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfVxuXG4gIC8vIGlmIChkYXRhU291cmNlLmxlbmd0aCA9PT0gMCkge1xuICAvLyAgIHJldHVybiAoXG4gIC8vICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6ICdmbGV4JyB9fT5cbiAgLy8gICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgLz5cbiAgLy8gICAgIDwvQm94PlxuICAvLyAgICk7XG4gIC8vIH1cblxuICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZVtkYXRhU2VsZWN0aW9uXTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGltYWdlXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJsaW5lXCIgLz5cbiAgICAgIDxoMT5PcHRpbWl6ZWQgdmlkZW8gZW5jb2Rpbmc8L2gxPlxuICAgICAge2RhdGFTb3VyY2UgJiYgZGF0YVNvdXJjZS5sZW5ndGggPiAwICYmIDxOYXYgZGF0YT17ZGF0YVNvdXJjZX0gZGF0YVNlbGVjdGlvbj17ZGF0YVNlbGVjdGlvbn0gc2V0RGF0YVNlbGVjdGlvbj17c2V0RGF0YVNlbGVjdGlvbn0gLz59XG4gICAgICB7ZGF0YSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0IGNlbnRlclwiPlxuICAgICAgICAgIDxzdHJvbmc+e2RhdGEuZmlsZX08L3N0cm9uZz5cbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIChcbiAgICAgICAgICB7ZGF0YS52aWRlb19zdHJlYW0uY29kZWNfbmFtZX1cbiAgICAgICAgICAvXG4gICAgICAgICAge2RhdGEuYXVkaW9fc3RyZWFtc1swXS5jb2RlY19uYW1lfVxuICAgICAgICAgIClcbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5DUFU8L3N0cm9uZz5cbiAgICAgICAgICA8TGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwgdmFsdWU9e3V0aWxpemF0aW9uLmNwdX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5NZW1vcnk8L3N0cm9uZz5cbiAgICAgICAgICA8TGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwgdmFsdWU9e3V0aWxpemF0aW9uLm1lbW9yeX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtkYXRhICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+RWxhcHNlZDwvc3Ryb25nPlxuICAgICAgICAgICAge2RhdGEub3V0cHV0LnJ1bl90aW1lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPlRpbWVjb2RlPC9zdHJvbmc+XG4gICAgICAgICAgICB7ZGF0YS5vdXRwdXQudGltZW1hcmt9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+UHJvZmlsZTwvc3Ryb25nPlxuICAgICAgICAgICAge2RhdGEubmFtZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5BdWRpbyBMYW5ndWFnZXM8L3N0cm9uZz5cbiAgICAgICAgICAgIHtkYXRhLmF1ZGlvX3N0cmVhbXMubWFwKChzdHJlYW0pID0+IHN0cmVhbS50YWdzPy5sYW5ndWFnZSkucmVkdWNlKChhLCBjKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghYS5pbmNsdWRlcyhjKSkge1xuICAgICAgICAgICAgICAgIGEucHVzaChjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH0sIFtdKS5qb2luKCcsICcpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7ZGF0YSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkV4cGVjdGVkIGNvbXBsZXRlZCB0aW1lPC9zdHJvbmc+XG4gICAgICAgICAgICB7ZXN0aW1hdGVkX2xvY2FsX3RpbWUoZGF0YS5vdXRwdXQuZXN0X2NvbXBsZXRlZF9zZWNvbmRzKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5FVEE8L3N0cm9uZz5cbiAgICAgICAgICAgIHtkYXRhLm91dHB1dC50aW1lX3JlbWFpbmluZ31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5GaWxlcyBSZW1haW5pbmc8L3N0cm9uZz5cbiAgICAgICAgICB7c3RhdHVzLnVucHJvY2Vzc2VkX2ZpbGVzLnRvTG9jYWxlU3RyaW5nKCl9XG4gICAgICAgICAgey8qIDxDaXJjdWxhclByb2dyZXNzV2l0aExhYmVsIG51bWVyYXRvcj17bnVtZXJhdG9yfSBkZW5vbWluYXRvcj17ZGVub21pbmF0b3J9IC8+ICovfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge2RhdGEgJiYgKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkZpbGUgUHJvZ3Jlc3M8L3N0cm9uZz5cbiAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17ZGF0YS5vdXRwdXQucGVyY2VudH0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5MaWJyYXJ5IENvdmVyYWdlPC9zdHJvbmc+XG4gICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtNYXRoLnJvdW5kKHN0YXR1cy5saWJyYXJ5X2NvdmVyYWdlKX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAge2RhdGEgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5PcmlnaW5hbCBTaXplPC9zdHJvbmc+XG4gICAgICAgICAgICB7aHVtYW5fc2l6ZShkYXRhLm91dHB1dC5zaXplLm9yaWdpbmFsKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5DdXJyZW50IFNpemU8L3N0cm9uZz5cbiAgICAgICAgICAgIHtodW1hbl9zaXplKGRhdGEub3V0cHV0LnNpemUucHJvZ3Jlc3MpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkVzdC4gRmluYWwgU2l6ZTwvc3Ryb25nPlxuICAgICAgICAgICAgPGVtPlxuICAgICAgICAgICAgICB7YCR7XG4gICAgICAgICAgICAgIE1hdGgucm91bmQoK2RhdGEub3V0cHV0LnNpemUuZXN0aW1hdGVkX2ZpbmFsLmNoYW5nZS5yZXBsYWNlKCclJywgJycpICogMTAwKSAvIDEwMFxuICAgICAgICAgICAgfSVgfVxuICAgICAgICAgICAgPC9lbT5cbiAgICAgICAgICAgIHtodW1hbl9zaXplKGRhdGEub3V0cHV0LnNpemUuZXN0aW1hdGVkX2ZpbmFsKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICB7ZGF0YSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0IGNlbnRlclwiPlxuICAgICAgICAgIDxzdHJvbmc+Q29tbWFuZDwvc3Ryb25nPlxuICAgICAgICAgIHtkYXRhLmZmbXBlZ19jbWR9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHF1YXJ0ZXIgZGlza3NcIj5cbiAgICAgICAgeyFkaXNrcz8ubWFwICYmIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0IGNlbnRlclwiPkxvYWRpbmcuLi48L2Rpdj59XG4gICAgICAgIHtkaXNrcz8ubWFwICYmXG4gICAgICAgICAgZGlza3M/Lm1hcCgoZGlzaykgPT4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1snd2lkZ2V0JywgZGlzay5hYm92ZV90aHJlc2hvbGQgJiYgJ2RhbmdlciddLmZpbHRlcigoYykgPT4gYykuam9pbignICcpfT5cbiAgICAgICAgICAgICAgPHN0cm9uZz57ZGlzay5tb3VudGVkfTwvc3Ryb25nPlxuICAgICAgICAgICAgICA8ZW0+e1tkaXNrLnVzZWQsICdvZicsIGRpc2suc2l6ZV0uam9pbignICcpfTwvZW0+XG4gICAgICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17ZGlzay5wZXJjZW50X3VzZWR9IGNsYXNzTmFtZT17W2Rpc2suYWJvdmVfdGhyZXNob2xkICYmICdkYW5nZXInXS5maWx0ZXIoKGMpID0+IGMpLmpvaW4oJyAnKX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0IGxpc3RcIj5cbiAgICAgICAgeyFmaWxlbGlzdD8ubWFwICYmIDxlbT5Mb2FkaW5nLi4uPC9lbT59XG4gICAgICAgIDxzdHJvbmc+XG4gICAgICAgICAgTmV4dFxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAge2ZpbGVsaXN0Lmxlbmd0aC50b0xvY2FsZVN0cmluZygpfVxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAgcXVldWVkIGZpbGVzXG4gICAgICAgIDwvc3Ryb25nPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJmbG93XCI+XG4gICAgICAgICAge2ZpbGVsaXN0Py5tYXAgJiYgKFxuICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPiM8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5Qcmlvcml0eTwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlBhdGg8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5TaXplPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+UmVzb2x1dGlvbjwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPkNvbXB1dGUgU2NvcmU8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5Db2RlYzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPkVuY29kZSB2ZXJzaW9uPC90aD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAge2ZpbGVsaXN0Lm1hcCgoZiwgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgPHRkPntpZHggKyAxfTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e2YucHJpb3JpdHl9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5wYXRofTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e21ha2VfaHVtYW5fcmVhZGFibGUoZi5zaXplKX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPntmLnJlc29sdXRpb259PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5jb21wdXRlU2NvcmV9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5jb2RlY308L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPntmLmVuY29kZV92ZXJzaW9ufTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHRcbmltcG9ydCBIb21lIGZyb20gJy4vY29tcG9uZW50cy9Ib21lL0hvbWUnO1xuXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1maWxlbmFtZS1leHRlbnNpb25cbnJvb3QucmVuZGVyKDxIb21lIC8+KTtcbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiQ3J5cHRvSlMiLCJtb2R1bGUiLCJleHBvcnRzIiwiTWF0aCIsInVuZGVmaW5lZCIsImNyeXB0byIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWxUaGlzIiwibXNDcnlwdG8iLCJnIiwiZXJyIiwiY3J5cHRvU2VjdXJlUmFuZG9tSW50IiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJyYW5kb21CeXRlcyIsInJlYWRJbnQzMkxFIiwiRXJyb3IiLCJjcmVhdGUiLCJPYmplY3QiLCJGIiwib2JqIiwic3VidHlwZSIsInByb3RvdHlwZSIsIkMiLCJDX2xpYiIsImxpYiIsIkJhc2UiLCJleHRlbmQiLCJvdmVycmlkZXMiLCJ0aGlzIiwibWl4SW4iLCJoYXNPd25Qcm9wZXJ0eSIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImluc3RhbmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsInRvU3RyaW5nIiwiY2xvbmUiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwibGVuZ3RoIiwiZW5jb2RlciIsIkhleCIsInN0cmluZ2lmeSIsImNvbmNhdCIsIndvcmRBcnJheSIsInRoaXNXb3JkcyIsInRoYXRXb3JkcyIsInRoaXNTaWdCeXRlcyIsInRoYXRTaWdCeXRlcyIsImNsYW1wIiwiaSIsInRoYXRCeXRlIiwiaiIsImNlaWwiLCJjYWxsIiwic2xpY2UiLCJyYW5kb20iLCJuQnl0ZXMiLCJwdXNoIiwiQ19lbmMiLCJlbmMiLCJoZXhDaGFycyIsImJpdGUiLCJqb2luIiwicGFyc2UiLCJoZXhTdHIiLCJoZXhTdHJMZW5ndGgiLCJwYXJzZUludCIsInN1YnN0ciIsIkxhdGluMSIsImxhdGluMUNoYXJzIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGF0aW4xU3RyIiwibGF0aW4xU3RyTGVuZ3RoIiwiY2hhckNvZGVBdCIsIlV0ZjgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJlIiwidXRmOFN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsInJlc2V0IiwiX2RhdGEiLCJfbkRhdGFCeXRlcyIsIl9hcHBlbmQiLCJkYXRhIiwiX3Byb2Nlc3MiLCJkb0ZsdXNoIiwicHJvY2Vzc2VkV29yZHMiLCJkYXRhV29yZHMiLCJkYXRhU2lnQnl0ZXMiLCJibG9ja1NpemUiLCJuQmxvY2tzUmVhZHkiLCJuV29yZHNSZWFkeSIsIm1heCIsIl9taW5CdWZmZXJTaXplIiwibkJ5dGVzUmVhZHkiLCJtaW4iLCJvZmZzZXQiLCJfZG9Qcm9jZXNzQmxvY2siLCJzcGxpY2UiLCJDX2FsZ28iLCJIYXNoZXIiLCJjZmciLCJfZG9SZXNldCIsInVwZGF0ZSIsIm1lc3NhZ2VVcGRhdGUiLCJmaW5hbGl6ZSIsIl9kb0ZpbmFsaXplIiwiX2NyZWF0ZUhlbHBlciIsImhhc2hlciIsIm1lc3NhZ2UiLCJfY3JlYXRlSG1hY0hlbHBlciIsImtleSIsIkhNQUMiLCJhbGdvIiwiVCIsImFicyIsInNpbiIsIk1ENSIsIl9oYXNoIiwiTSIsIm9mZnNldF9pIiwiTV9vZmZzZXRfaSIsIkgiLCJNX29mZnNldF8wIiwiTV9vZmZzZXRfMSIsIk1fb2Zmc2V0XzIiLCJNX29mZnNldF8zIiwiTV9vZmZzZXRfNCIsIk1fb2Zmc2V0XzUiLCJNX29mZnNldF82IiwiTV9vZmZzZXRfNyIsIk1fb2Zmc2V0XzgiLCJNX29mZnNldF85IiwiTV9vZmZzZXRfMTAiLCJNX29mZnNldF8xMSIsIk1fb2Zmc2V0XzEyIiwiTV9vZmZzZXRfMTMiLCJNX29mZnNldF8xNCIsIk1fb2Zmc2V0XzE1IiwiYSIsImIiLCJjIiwiZCIsIkZGIiwiR0ciLCJISCIsIklJIiwibkJpdHNUb3RhbCIsIm5CaXRzTGVmdCIsIm5CaXRzVG90YWxIIiwiZmxvb3IiLCJuQml0c1RvdGFsTCIsImhhc2giLCJIX2kiLCJ4IiwicyIsInQiLCJuIiwiSG1hY01ENSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsIkpTT04iLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiciIsInUiLCJvIiwiZiIsImgiLCJsIiwiJCIsInkiLCJuYW1lIiwid2Vla2RheXMiLCJzcGxpdCIsIm1vbnRocyIsIm9yZGluYWwiLCJtIiwiQXJyYXkiLCJ2IiwieiIsInV0Y09mZnNldCIsImRhdGUiLCJ5ZWFyIiwibW9udGgiLCJhZGQiLCJwIiwidyIsIkQiLCJtcyIsIlEiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJTIiwiXyIsIk8iLCJhcmdzIiwibG9jYWxlIiwiJEwiLCJ1dGMiLCIkdSIsIiR4IiwiJG9mZnNldCIsIiRkIiwiRGF0ZSIsIk5hTiIsInRlc3QiLCJtYXRjaCIsInN1YnN0cmluZyIsIlVUQyIsIiR5IiwiZ2V0RnVsbFllYXIiLCIkTSIsImdldE1vbnRoIiwiJEQiLCJnZXREYXRlIiwiJFciLCJnZXREYXkiLCIkSCIsImdldEhvdXJzIiwiJG0iLCJnZXRNaW51dGVzIiwiJHMiLCJnZXRTZWNvbmRzIiwiJG1zIiwiZ2V0TWlsbGlzZWNvbmRzIiwiJHV0aWxzIiwiaXNWYWxpZCIsImlzU2FtZSIsInN0YXJ0T2YiLCJlbmRPZiIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsIiRnIiwic2V0IiwidW5peCIsInZhbHVlT2YiLCJnZXRUaW1lIiwidG9EYXRlIiwiJGxvY2FsZSIsIndlZWtTdGFydCIsIiRzZXQiLCJkYXlzSW5Nb250aCIsImdldCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJpbnZhbGlkRGF0ZSIsIm1lcmlkaWVtIiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJnZXRUaW1lem9uZU9mZnNldCIsImRpZmYiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInRvVVRDU3RyaW5nIiwiZm9yRWFjaCIsIiRpIiwiaXNEYXlqcyIsImVuIiwiTHMiLCJpc1NhbWVPckFmdGVyIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsInRpbWVab25lTmFtZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImhvdXIxMiIsInRpbWVab25lIiwiZm9ybWF0VG9QYXJ0cyIsInR5cGUiLCJ2YWx1ZSIsInR6IiwidG9Mb2NhbGVTdHJpbmciLCIkdGltZXpvbmUiLCJvZmZzZXROYW1lIiwiZ3Vlc3MiLCJmaW5kIiwicmVzb2x2ZWRPcHRpb25zIiwic2V0RGVmYXVsdCIsImxvY2FsIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiJGxvY2FsT2Zmc2V0IiwiaXNVVEMiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIlN5bWJvbCIsImZvciIsInEiLCIkJHR5cGVvZiIsIkEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiaWEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicWEiLCJyYSIsInRvVXBwZXJDYXNlIiwic2EiLCJvYSIsImlzTmFOIiwicGEiLCJuYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidGEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInVhIiwidmEiLCJ3YSIsInhhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJpdGVyYXRvciIsIkphIiwiS2EiLCJhc3NpZ24iLCJMYSIsInN0YWNrIiwidHJpbSIsIk1hIiwiTmEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbmNsdWRlcyIsIk9hIiwidGFnIiwiUGEiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJRYSIsIlJhIiwiU2EiLCJub2RlTmFtZSIsIlVhIiwiX3ZhbHVlVHJhY2tlciIsImNvbnN0cnVjdG9yIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJUYSIsIlZhIiwiY2hlY2tlZCIsIldhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJYYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWWEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWmEiLCIkYSIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZGIiLCJpc0FycmF5IiwiZWIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImZiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImdiIiwiaGIiLCJpYiIsInRleHRDb250ZW50IiwiamIiLCJrYiIsImxiIiwibWIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwib2IiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicGIiLCJxYiIsInJiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzYiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInRiIiwidWIiLCJpcyIsInZiIiwid2IiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieGIiLCJ5YiIsInpiIiwiQWIiLCJCYiIsInN0YXRlTm9kZSIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNYiIsIm9uRXJyb3IiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJVYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiVmIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIldiIiwiWWIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWGIiLCJaYiIsIiRiIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImFjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiY2MiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZGMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImVjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJmYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZ2MiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImhjIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJpYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImpjIiwia2MiLCJuYyIsImNsejMyIiwib2MiLCJwYyIsImxvZyIsIkxOMiIsInFjIiwicmMiLCJzYyIsInRjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInVjIiwid2MiLCJ4YyIsInljIiwiemMiLCJldmVudFRpbWVzIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJNYXAiLCJPYyIsIlBjIiwiUWMiLCJSYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlNjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlVjIiwiVmMiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJXYyIsIlhjIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiY2QiLCJkZCIsInRyYW5zaXRpb24iLCJlZCIsImZkIiwiZ2QiLCJoZCIsIlRjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsIm9kIiwicGQiLCJxZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInZkIiwid2QiLCJ4ZCIsInJkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwic2QiLCJ0ZCIsInZpZXciLCJkZXRhaWwiLCJ1ZCIsInpkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInlkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkFkIiwiQ2QiLCJkYXRhVHJhbnNmZXIiLCJFZCIsIkdkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkhkIiwiY2xpcGJvYXJkRGF0YSIsIklkIiwiS2QiLCJMZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJNZCIsIk5kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIk9kIiwiUGQiLCJjb2RlIiwicmVwZWF0Iiwid2hpY2giLCJRZCIsIlNkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiV2QiLCJYZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWWQiLCJaZCIsImFlIiwiZG9jdW1lbnRNb2RlIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJrZSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJsZSIsIm1lIiwibmUiLCJldmVudCIsImxpc3RlbmVycyIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJvbmlucHV0IiwiemUiLCJkZXRhY2hFdmVudCIsIkFlIiwiQmUiLCJhdHRhY2hFdmVudCIsIkNlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwibmV4dFNpYmxpbmciLCJLZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJMZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJNZSIsImNvbnRlbnRFZGl0YWJsZSIsIk5lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIldlIiwiWGUiLCJZZSIsImFuaW1hdGlvbiIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImtmIiwibGYiLCJtZiIsIlRiIiwibGlzdGVuZXIiLCJuZiIsImhhcyIsIm9mIiwicGYiLCJxZiIsInJmIiwiYmluZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwiSiIsInNmIiwidGYiLCJwYXJlbnRXaW5kb3ciLCJ1ZiIsInZmIiwiWiIsInlhIiwiYWIiLCJjYSIsImllIiwiY2hhciIsImplIiwidW5zaGlmdCIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJfX2h0bWwiLCJFZiIsInNldFRpbWVvdXQiLCJGZiIsImNsZWFyVGltZW91dCIsIkdmIiwiUHJvbWlzZSIsIklmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSGYiLCJKZiIsIktmIiwiTGYiLCJwcmV2aW91c1NpYmxpbmciLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiRSIsIkciLCJVZiIsIlZmIiwiV2YiLCJYZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIllmIiwiWmYiLCIkZiIsImFnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiYmciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJfY3VycmVudFZhbHVlIiwicmciLCJjaGlsZExhbmVzIiwic2ciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInRnIiwidWciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJ2ZyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImludGVybGVhdmVkIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIkNvbXBvbmVudCIsInJlZnMiLCJJZyIsIk1nIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSmciLCJLZyIsIkxnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIk5nIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJPZyIsInN0YXRlIiwidXBkYXRlciIsIlBnIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiUWciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJJIiwiZmgiLCJnaCIsImhoIiwiZGVsZXRpb25zIiwiaWgiLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiamgiLCJtb2RlIiwia2giLCJsaCIsIm1oIiwibWVtb2l6ZWRQcm9wcyIsIm5oIiwib2giLCJwaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJxaCIsInJoIiwic2giLCJpbmRleCIsInRoIiwidWgiLCJ2aCIsImltcGxlbWVudGF0aW9uIiwid2giLCJ4aCIsImRvbmUiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwidGFnTmFtZSIsIkdoIiwiSGgiLCJJaCIsIksiLCJKaCIsInJldmVhbE9yZGVyIiwiS2giLCJMaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiTWgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiTmgiLCJPaCIsIkwiLCJOIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJhaSIsImJpIiwiY2kiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImdldFNuYXBzaG90IiwiaWkiLCJqaSIsIlAiLCJraSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJsaSIsIm1pIiwibmkiLCJkZXN0cm95IiwiZGVwcyIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIkhpIiwiSWkiLCJjb25zb2xlIiwiZXJyb3IiLCJUaSIsIlZpIiwiV2kiLCJKaSIsIldlYWtNYXAiLCJLaSIsIkxpIiwiTWkiLCJOaSIsImNvbXBvbmVudERpZENhdGNoIiwiT2kiLCJjb21wb25lbnRTdGFjayIsIlBpIiwicGluZ0NhY2hlIiwiUWkiLCJSaSIsIlNpIiwiWGkiLCJ0YWlsTW9kZSIsInRhaWwiLCJzdWJ0cmVlRmxhZ3MiLCJZaSIsInBlbmRpbmdDb250ZXh0IiwiWmkiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJSIiwicmVuZGVyaW5nIiwiYWoiLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJpc0JhY2t3YXJkcyIsImxhc3QiLCJiaiIsImNqIiwiZGoiLCJSZWFjdEN1cnJlbnRPd25lciIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsImtqIiwibGoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsIm1qIiwibmoiLCJvaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInBqIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiZmFsbGJhY2siLCJ3aiIsInhqIiwieWoiLCJ6aiIsIl9yZWFjdFJldHJ5IiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkdqIiwiSGoiLCJJaiIsIldlYWtTZXQiLCJKaiIsIlUiLCJLaiIsIkxqIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiVWoiLCJWIiwiVmoiLCJXaiIsIlhqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIllqIiwiWmoiLCJhayIsImJrIiwiY2siLCJkayIsImRpc3BsYXkiLCJlayIsImZrIiwiZ2siLCJoayIsImlrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJVayIsImprIiwia2siLCJsayIsIm1rIiwiVyIsIlgiLCJZIiwibmsiLCJvayIsInBrIiwicWsiLCJyayIsIkluZmluaXR5Iiwic2siLCJ0ayIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsInZjIiwiY2FsbGJhY2tQcmlvcml0eSIsImhnIiwiRGsiLCJFayIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJPayIsInRpbWVvdXRIYW5kbGUiLCJQayIsIlFrIiwiUmsiLCJTayIsIlRrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkFjIiwiTWoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImxjIiwib25SZWNvdmVyYWJsZUVycm9yIiwiVmsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJXayIsIlhrIiwiWmsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiJGsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYWwiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJibCIsImNsIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsIkZqIiwiWWsiLCJqbCIsInJlcG9ydEVycm9yIiwia2wiLCJfaW50ZXJuYWxSb290IiwibGwiLCJtbCIsIm5sIiwib2wiLCJxbCIsInBsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJybCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInNsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ0bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ1bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsIm5zIiwiZGVmIiwiZGVmaW5pdGlvbiIsIkZ1bmN0aW9uIiwicHJvcCIsInRvU3RyaW5nVGFnIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJjb21wb3NlQ2xhc3NlcyIsInNsb3RzIiwiZ2V0VXRpbGl0eUNsYXNzIiwiY2xhc3NlcyIsIm91dHB1dCIsInNsb3QiLCJyZWR1Y2UiLCJhY2MiLCJTdHlsZVNoZWV0IiwiX3RoaXMiLCJfaW5zZXJ0VGFnIiwiYmVmb3JlIiwidGFncyIsImluc2VydGlvblBvaW50IiwicHJlcGVuZCIsImNvbnRhaW5lciIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZmx1c2giLCJwYXR0ZXJuIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwiYmVnaW4iLCJsaW5lIiwiY29sdW1uIiwicG9zaXRpb24iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwicm9vdCIsInBhcmVudCIsInByZXYiLCJwZWVrIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJDT01NRU5UIiwiY29tcGlsZSIsInJ1bGVzIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJkZWNsYXJhdGlvbnMiLCJhdHJ1bGUiLCJwcm9wZXJ0eSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nIiwiZml4ZWRFbGVtZW50cyIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImRlZmF1bHRTdHlsaXNQbHVnaW5zIiwiZXhlYyIsInNzclN0eWxlcyIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsImN1cnJlbnRTaGVldCIsImNvbGxlY3Rpb24iLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsInJlZ2lzdGVyZWQiLCJzdHIiLCJsZW4iLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsImZuIiwiYXJnIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwiX2tleSIsImludGVycG9sYXRlZCIsImNyZWF0ZVN0cmluZ0Zyb21PYmplY3QiLCJwcmV2aW91c0N1cnNvciIsImNhY2hlZCIsImxhYmVsUGF0dGVybiIsInN0cmluZ01vZGUiLCJzdHJpbmdzIiwicmF3IiwibGFzdEluZGV4IiwiaWRlbnRpZmllck5hbWUiLCJfbGVuIiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNhcGl0YWxpemUiLCJyZXNvbHZlUHJvcHMiLCJkZWZhdWx0U2xvdFByb3BzIiwic2xvdFByb3BzIiwic2xvdFByb3BOYW1lIiwiZ2V0VGhlbWVQcm9wcyIsInBhcmFtcyIsInRoZW1lIiwiY29tcG9uZW50cyIsImlzUGxhaW5PYmplY3QiLCJkZWVwQ2xvbmUiLCJfZXhjbHVkZWQiLCJib3JkZXJSYWRpdXMiLCJ2YWx1ZXMiLCJ4cyIsInNtIiwieGwiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJ1cCIsImhhbmRsZUJyZWFrcG9pbnRzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImNzc0tleSIsImdldFBhdGgiLCJwYXRoIiwiY2hlY2tWYXJzIiwidmFycyIsInZhbCIsImdldFN0eWxlVmFsdWUiLCJ0aGVtZU1hcHBpbmciLCJ0cmFuc2Zvcm0iLCJwcm9wVmFsdWVGaW5hbCIsInVzZXJWYWx1ZSIsImNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJmaWx0ZXJQcm9wcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpcmVjdGlvbiIsImRpciIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwiX2dldFBhdGgiLCJ0aGVtZVNwYWNpbmciLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0cmFuc2Zvcm1lciIsInRyYW5zZm9ybWVkIiwiY3NzUHJvcGVydGllcyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsInJlc29sdmVDc3NQcm9wZXJ0eSIsIm1hcmdpbiIsInBhZGRpbmciLCJzcGFjaW5nIiwiaGFuZGxlcnMiLCJib3JkZXJUcmFuc2Zvcm0iLCJib3JkZXIiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwicGFsZXR0ZVRyYW5zZm9ybSIsInNpemluZ1RyYW5zZm9ybSIsIm1heFdpZHRoIiwiX3Byb3BzJHRoZW1lIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pMiIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibWluSGVpZ2h0IiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInB0IiwicHIiLCJweCIsInB5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibXgiLCJteSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpbklubGluZSIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwibWFyZ2luQmxvY2siLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJkaXNwbGF5UHJpbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsImp1c3RpZnlJdGVtcyIsImp1c3RpZnlTZWxmIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsInJpZ2h0IiwiYm90dG9tIiwiYm94U2hhZG93IiwiYm94U2l6aW5nIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFN0eWxlIiwibGV0dGVyU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJ0ZXh0QWxpZ24iLCJ0eXBvZ3JhcGh5Iiwic3R5bGVGdW5jdGlvblN4IiwiZ2V0VGhlbWVWYWx1ZSIsImNvbmZpZyIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInN4IiwidW5zdGFibGVfc3hDb25maWciLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsImVtcHR5QnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX2JyZWFrcG9pbnRzSW5wdXQka2V5IiwiY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0IiwiYnJlYWtwb2ludHNLZXlzIiwic3R5bGVLZXkiLCJtYXliZUZuIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvYmplY3RzIiwiYWxsS2V5cyIsInVuaW9uIiwiZXZlcnkiLCJvYmplY3RzSGF2ZVNhbWVLZXlzIiwiYnJlYWtwb2ludE91dHB1dCIsInVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCIsInBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzcGFjaW5nSW5wdXQiLCJzaGFwZUlucHV0Iiwib3RoZXIiLCJ1bml0Iiwic3RlcCIsInNvcnRlZFZhbHVlcyIsImJyZWFrcG9pbnRzQXNBcnJheSIsInNvcnQiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwic29ydEJyZWFrcG9pbnRzVmFsdWVzIiwiZG93biIsImJldHdlZW4iLCJlbmRJbmRleCIsIm5vdCIsImtleUluZGV4IiwiY3JlYXRlQnJlYWtwb2ludHMiLCJtdWkiLCJhcmdzSW5wdXQiLCJhcmd1bWVudCIsImNyZWF0ZVNwYWNpbmciLCJtdWlUaGVtZSIsInVuc3RhYmxlX3N4Iiwic3lzdGVtRGVmYXVsdFRoZW1lIiwiZGVmYXVsdFRoZW1lIiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsImRlY29tcG9zZUNvbG9yIiwiUmVnRXhwIiwiY29sb3JzIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJjb2xvclNwYWNlIiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaHNsVG9SZ2IiLCJ0b0ZpeGVkIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwiYmxhY2siLCJ3aGl0ZSIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJsaWdodCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiYWN0aXZlIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwibWFpbiIsImNhc2VBbGxDYXBzIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiX3JlZiIsImZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRSZWd1bGFyIiwiZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRCb2xkIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtIiwicHhUb1JlbTIiLCJjb2VmIiwiYnVpbGRWYXJpYW50IiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiY29uc3RhbnQiLCJjcmVhdGVUcmFuc2l0aW9ucyIsImlucHV0VHJhbnNpdGlvbnMiLCJtZXJnZWRFYXNpbmciLCJtZXJnZWREdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiZWFzaW5nT3B0aW9uIiwiYW5pbWF0ZWRQcm9wIiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwibWl4aW5zSW5wdXQiLCJ0cmFuc2l0aW9uc0lucHV0IiwidHlwb2dyYXBoeUlucHV0IiwiY29udHJhc3RUaHJlc2hvbGQiLCJnZXREZWZhdWx0UHJpbWFyeSIsImdldERlZmF1bHRTZWNvbmRhcnkiLCJnZXREZWZhdWx0RXJyb3IiLCJpbmZvIiwiZ2V0RGVmYXVsdEluZm8iLCJzdWNjZXNzIiwiZ2V0RGVmYXVsdFN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZ2V0RGVmYXVsdFdhcm5pbmciLCJnZXRDb250cmFzdFRleHQiLCJjb250cmFzdFRleHQiLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJnZXRDb250cmFzdFJhdGlvIiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIm1vZGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsInRvb2xiYXIiLCJzaGFkb3dzIiwicmVhY3RQcm9wc1JlZ2V4IiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsIkhUTUxFbGVtZW50IiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJpc1N0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsIl9fZW1vdGlvbl9yZWFsIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwibGFiZWwiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiYXMiLCJjbGFzc0ludGVycG9sYXRpb25zIiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsIm5ld1Byb3BzIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsInN0eWxlZCIsImlzRW1wdHkiLCJwcm9wc1RvQ2xhc3NLZXkiLCJ2YXJpYW50IiwiY2xhc3NLZXkiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJmaWx0ZXIiLCJjb21wb25lbnRTbG90Iiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIiwic2tpcFN4IiwiaW5wdXRTa2lwU3giLCJvdmVycmlkZXNSZXNvbHZlciIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwibXVpU3R5bGVkUmVzb2x2ZXIiLCJzdHlsZUFyZyIsImV4cHJlc3Npb25zIiwiZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lIiwic3R5bGVzQXJnIiwidGhlbWVJbnB1dCIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJzdHlsZU92ZXJyaWRlcyIsImdldFN0eWxlT3ZlcnJpZGVzIiwicmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyIsImVudHJpZXMiLCJzbG90S2V5Iiwic2xvdFN0eWxlIiwiX3RoZW1lJGNvbXBvbmVudHMiLCJfdGhlbWUkY29tcG9uZW50cyRuYW0iLCJvd25lclN0YXRlIiwidmFyaWFudHNTdHlsZXMiLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50IiwiaXNNYXRjaCIsInZhcmlhbnRzUmVzb2x2ZXIiLCJnZXRWYXJpYW50U3R5bGVzIiwibnVtT2ZDdXN0b21GbnNBcHBsaWVkIiwicGxhY2Vob2xkZXJzIiwiZmlsbCIsIl9yZWYyIiwid2l0aENvbmZpZyIsImRlZmF1bHRHZW5lcmF0b3IiLCJnZW5lcmF0ZSIsImNvbmZpZ3VyZSIsImdlbmVyYXRvciIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJjb21wbGV0ZWQiLCJleHBhbmRlZCIsImZvY3VzZWQiLCJmb2N1c1Zpc2libGUiLCJyZXF1aXJlZCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiZ2xvYmFsU3RhdGVQcmVmaXgiLCJnbG9iYWxTdGF0ZUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsImdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdCIsIl90MiIsIl90MyIsIl90NCIsImNpcmN1bGFyUm90YXRlS2V5ZnJhbWUiLCJjaXJjdWxhckRhc2hLZXlmcmFtZSIsIkNpcmN1bGFyUHJvZ3Jlc3NSb290IiwiQ2lyY3VsYXJQcm9ncmVzc1NWRyIsInN2ZyIsIkNpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUiLCJjaXJjbGUiLCJkaXNhYmxlU2hyaW5rIiwiY2lyY2xlRGlzYWJsZVNocmluayIsInN0cm9rZSIsImluUHJvcHMiLCJ0aGlja25lc3MiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImNpcmNsZVN0eWxlIiwicm9vdFN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwicm9sZSIsInZpZXdCb3giLCJjeCIsImN5IiwiZXh0ZW5kU3hQcm9wIiwiaW5TeCIsInN5c3RlbVByb3BzIiwib3RoZXJQcm9wcyIsIl9wcm9wcyR0aGVtZSR1bnN0YWJsZSIsInNwbGl0UHJvcHMiLCJmaW5hbFN4IiwiQm94IiwiZGVmYXVsdENsYXNzTmFtZSIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiQm94Um9vdCIsIl9leHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJkYXlqcyIsInRpbWV6b25lIiwiZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdDUiLCJfdDYiLCJpbmRldGVybWluYXRlMUtleWZyYW1lIiwiaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSIsImJ1ZmZlcktleWZyYW1lIiwiZ2V0Q29sb3JTaGFkZSIsIkxpbmVhclByb2dyZXNzIiwiTGluZWFyUHJvZ3Jlc3NSb290IiwiY29sb3JBZGp1c3QiLCJMaW5lYXJQcm9ncmVzc0Rhc2hlZCIsImRhc2hlZCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiTGluZWFyUHJvZ3Jlc3NCYXIxIiwiYmFyIiwiYmFyMUluZGV0ZXJtaW5hdGUiLCJiYXIxRGV0ZXJtaW5hdGUiLCJiYXIxQnVmZmVyIiwidHJhbnNmb3JtT3JpZ2luIiwiTGluZWFyUHJvZ3Jlc3NCYXIyIiwiYmFyMkluZGV0ZXJtaW5hdGUiLCJiYXIyQnVmZmVyIiwidmFsdWVCdWZmZXIiLCJiYXIxIiwiYmFyMiIsImlubGluZVN0eWxlcyIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJUeXBvZ3JhcGh5Um9vdCIsImFsaWduIiwibm9XcmFwIiwiZ3V0dGVyQm90dG9tIiwicGFyYWdyYXBoIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiaW5oZXJpdCIsImNvbG9yVHJhbnNmb3JtYXRpb25zIiwidGV4dFByaW1hcnkiLCJ0ZXh0U2Vjb25kYXJ5IiwidGhlbWVQcm9wcyIsInRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMiLCJ2YXJpYW50TWFwcGluZyIsIkxpbmVhclByb2dyZXNzV2l0aExhYmVsIiwiTmF2Iiwic2V0RGF0YVNlbGVjdGlvbiIsImRhdGFTZWxlY3Rpb24iLCJmaWxlIiwibWQ1IiwiZGlzcGxheV9maWxlX25hbWUiLCJwZXJjZW50IiwidGltZV9yZW1haW5pbmciLCJnZXREYXRhIiwic2V0RGF0YSIsInNldEZpbGVMaXN0Iiwic2V0RGlza3MiLCJzZXRVdGlsaXphdGlvbiIsInNldFN0YXR1cyIsImRhdGFUaW1lb3V0IiwiZmV0Y2giLCJqc29uIiwiZGlza3MiLCJ1dGlsaXphdGlvbiIsInN0YXR1cyIsImh1bWFuX3NpemUiLCJvdXRwdXRfc2l6ZSIsImRhdGFTb3VyY2UiLCJmaWxlbGlzdCIsInNlY29uZHMiLCJmaW5hbF90aW1lIiwiZm10X3N0cmluZyIsInZpZGVvX3N0cmVhbSIsImNvZGVjX25hbWUiLCJhdWRpb19zdHJlYW1zIiwiY3B1IiwibWVtb3J5IiwicnVuX3RpbWUiLCJ0aW1lbWFyayIsInN0cmVhbSIsImxhbmd1YWdlIiwiZXN0X2NvbXBsZXRlZF9zZWNvbmRzIiwidW5wcm9jZXNzZWRfZmlsZXMiLCJsaWJyYXJ5X2NvdmVyYWdlIiwib3JpZ2luYWwiLCJwcm9ncmVzcyIsImVzdGltYXRlZF9maW5hbCIsImNoYW5nZSIsImZmbXBlZ19jbWQiLCJkaXNrIiwiYWJvdmVfdGhyZXNob2xkIiwibW91bnRlZCIsInVzZWQiLCJwZXJjZW50X3VzZWQiLCJpZHgiLCJjYWxjX3NpemUiLCJtYWtlX2h1bWFuX3JlYWRhYmxlIiwicmVzb2x1dGlvbiIsImNvbXB1dGVTY29yZSIsImNvZGVjIiwiZW5jb2RlX3ZlcnNpb24iLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=