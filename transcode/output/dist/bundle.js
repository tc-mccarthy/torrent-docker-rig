/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={249:function(e,t,n){var r;e.exports=(r=r||function(e,t){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==n.g&&n.g.crypto&&(r=n.g.crypto),!r)try{r=n(480)}catch(e){}var a=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},o=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),i={},l=i.lib={},u=l.Base={extend:function(e){var t=o(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=l.WordArray=u.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||f).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,a=e.sigBytes;if(this.clamp(),r%4)for(var o=0;o<a;o++){var i=n[o>>>2]>>>24-o%4*8&255;t[r+o>>>2]|=i<<24-(r+o)%4*8}else for(var l=0;l<a;l+=4)t[r+l>>>2]=n[l>>>2];return this.sigBytes+=a,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=u.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(a());return new s.init(t,e)}}),c=i.enc={},f=c.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],a=0;a<n;a++){var o=t[a>>>2]>>>24-a%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new s.init(n,t/2)}},d=c.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],a=0;a<n;a++){var o=t[a>>>2]>>>24-a%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new s.init(n,t)}},p=c.Utf8={stringify:function(e){try{return decodeURIComponent(escape(d.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return d.parse(unescape(encodeURIComponent(e)))}},m=l.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=p.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,a=r.words,o=r.sigBytes,i=this.blockSize,l=o/(4*i),u=(l=t?e.ceil(l):e.max((0|l)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var f=0;f<u;f+=i)this._doProcessBlock(a,f);n=a.splice(0,u),r.sigBytes-=c}return new s.init(n,c)},clone:function(){var e=u.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),h=(l.Hasher=m.extend({cfg:u.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){m.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new h.HMAC.init(e,n).finalize(t)}}}),i.algo={});return i}(Math),r)},214:function(e,t,n){var r;e.exports=(r=n(249),function(e){var t=r,n=t.lib,a=n.WordArray,o=n.Hasher,i=t.algo,l=[];!function(){for(var t=0;t<64;t++)l[t]=4294967296*e.abs(e.sin(t+1))|0}();var u=i.MD5=o.extend({_doReset:function(){this._hash=new a.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var r=t+n,a=e[r];e[r]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8)}var o=this._hash.words,i=e[t+0],u=e[t+1],p=e[t+2],m=e[t+3],h=e[t+4],g=e[t+5],y=e[t+6],v=e[t+7],b=e[t+8],w=e[t+9],k=e[t+10],x=e[t+11],S=e[t+12],A=e[t+13],C=e[t+14],E=e[t+15],_=o[0],P=o[1],O=o[2],T=o[3];_=s(_,P,O,T,i,7,l[0]),T=s(T,_,P,O,u,12,l[1]),O=s(O,T,_,P,p,17,l[2]),P=s(P,O,T,_,m,22,l[3]),_=s(_,P,O,T,h,7,l[4]),T=s(T,_,P,O,g,12,l[5]),O=s(O,T,_,P,y,17,l[6]),P=s(P,O,T,_,v,22,l[7]),_=s(_,P,O,T,b,7,l[8]),T=s(T,_,P,O,w,12,l[9]),O=s(O,T,_,P,k,17,l[10]),P=s(P,O,T,_,x,22,l[11]),_=s(_,P,O,T,S,7,l[12]),T=s(T,_,P,O,A,12,l[13]),O=s(O,T,_,P,C,17,l[14]),_=c(_,P=s(P,O,T,_,E,22,l[15]),O,T,u,5,l[16]),T=c(T,_,P,O,y,9,l[17]),O=c(O,T,_,P,x,14,l[18]),P=c(P,O,T,_,i,20,l[19]),_=c(_,P,O,T,g,5,l[20]),T=c(T,_,P,O,k,9,l[21]),O=c(O,T,_,P,E,14,l[22]),P=c(P,O,T,_,h,20,l[23]),_=c(_,P,O,T,w,5,l[24]),T=c(T,_,P,O,C,9,l[25]),O=c(O,T,_,P,m,14,l[26]),P=c(P,O,T,_,b,20,l[27]),_=c(_,P,O,T,A,5,l[28]),T=c(T,_,P,O,p,9,l[29]),O=c(O,T,_,P,v,14,l[30]),_=f(_,P=c(P,O,T,_,S,20,l[31]),O,T,g,4,l[32]),T=f(T,_,P,O,b,11,l[33]),O=f(O,T,_,P,x,16,l[34]),P=f(P,O,T,_,C,23,l[35]),_=f(_,P,O,T,u,4,l[36]),T=f(T,_,P,O,h,11,l[37]),O=f(O,T,_,P,v,16,l[38]),P=f(P,O,T,_,k,23,l[39]),_=f(_,P,O,T,A,4,l[40]),T=f(T,_,P,O,i,11,l[41]),O=f(O,T,_,P,m,16,l[42]),P=f(P,O,T,_,y,23,l[43]),_=f(_,P,O,T,w,4,l[44]),T=f(T,_,P,O,S,11,l[45]),O=f(O,T,_,P,E,16,l[46]),_=d(_,P=f(P,O,T,_,p,23,l[47]),O,T,i,6,l[48]),T=d(T,_,P,O,v,10,l[49]),O=d(O,T,_,P,C,15,l[50]),P=d(P,O,T,_,g,21,l[51]),_=d(_,P,O,T,S,6,l[52]),T=d(T,_,P,O,m,10,l[53]),O=d(O,T,_,P,k,15,l[54]),P=d(P,O,T,_,u,21,l[55]),_=d(_,P,O,T,b,6,l[56]),T=d(T,_,P,O,E,10,l[57]),O=d(O,T,_,P,y,15,l[58]),P=d(P,O,T,_,A,21,l[59]),_=d(_,P,O,T,h,6,l[60]),T=d(T,_,P,O,x,10,l[61]),O=d(O,T,_,P,p,15,l[62]),P=d(P,O,T,_,w,21,l[63]),o[0]=o[0]+_|0,o[1]=o[1]+P|0,o[2]=o[2]+O|0,o[3]=o[3]+T|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,a=8*t.sigBytes;n[a>>>5]|=128<<24-a%32;var o=e.floor(r/4294967296),i=r;n[15+(a+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),n[14+(a+64>>>9<<4)]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),t.sigBytes=4*(n.length+1),this._process();for(var l=this._hash,u=l.words,s=0;s<4;s++){var c=u[s];u[s]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return l},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}});function s(e,t,n,r,a,o,i){var l=e+(t&n|~t&r)+a+i;return(l<<o|l>>>32-o)+t}function c(e,t,n,r,a,o,i){var l=e+(t&r|n&~r)+a+i;return(l<<o|l>>>32-o)+t}function f(e,t,n,r,a,o,i){var l=e+(t^n^r)+a+i;return(l<<o|l>>>32-o)+t}function d(e,t,n,r,a,o,i){var l=e+(n^(t|~r))+a+i;return(l<<o|l>>>32-o)+t}t.MD5=o._createHelper(u),t.HmacMD5=o._createHmacHelper(u)}(Math),r.MD5)},312:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@import url(https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css);"]),i.push([e.id,'*{box-sizing:border-box}body,html{font-size:16px;font-family:"Lato",sans-serif;background-color:#eee}figure,img{width:100%;display:block;margin:0 auto}p{line-height:1.2em}.caption,figcaption{font-size:.9rem;color:#8e8a8a;padding:5px 0}.container{width:100%;max-width:800px;padding:10px;margin:0 auto}.container.image{max-width:800px;padding:0}.container.image .caption,.container.image figcaption{padding:5px 10px}.desktop{display:none}.mobile{display:block}#app{padding:10px}@media(min-width: 681px){#app{padding:0}}.overall>div{margin-bottom:-8px}.overall>div:first-child{margin-top:-25%}.overline{max-width:20%;height:1px;border-bottom:5px solid #3792cb;margin:10px 0 -10px 0}.screen{width:100%;min-height:100vh}.screen.padd{padding-top:25%}.video{position:relative;width:100%;height:0;padding-bottom:56.25%}.video.vertical{padding-bottom:177.7777777778%}.video iframe,.video video{position:absolute;width:100%;height:100%;top:0;left:0;border:0}.widget{background-color:#fff;border-radius:5px;padding:10px;max-width:800px;margin-bottom:10px;text-align:center}.widget .overflow{overflow-x:auto}.widget.center{margin:0 auto 10px}.widget.list ol,.widget.list ul{text-align:left}.widget.list ol li,.widget.list ul li{padding-left:10px}.widget strong,.widget em{display:block}.widget em{font-size:.9rem}.widget table{border-collapse:collapse}.widget table tr td{padding:5px}.widget table tr:nth-child(even){background-color:#f9f9f9}.disks .widget .danger>*{background-color:red}@media(min-width: 681px){.desktop{display:block}.mobile{display:none}.flex{display:flex;text-align:center;flex-wrap:wrap;gap:10px;max-width:800px;margin:0 auto}.flex>div{flex:1}.flex.quarter>div{flex-basis:25%}.circle{max-width:40px;margin:0 auto}}@media(min-width: 805px){.container{padding:0}}@media(min-width: 1205px){.container.image .caption,.container.image figcaption{padding:5px 0}}',"",{version:3,sources:["webpack://./src/components/Home/Home.scss"],names:[],mappings:"AAgBA,EACE,qBAAA,CAGF,UAGE,cAAA,CACA,6BAAA,CACA,qBAAA,CAGF,WAGE,UAAA,CACA,aAAA,CACA,aAAA,CAGF,EACE,iBAAA,CAGF,oBAEE,eAAA,CACA,aAAA,CACA,aAAA,CAKF,WACE,UAAA,CACA,eAAA,CACA,YAAA,CACA,aAAA,CAGF,iBACE,eAAA,CACA,SAAA,CAGF,sDAEE,gBAAA,CAGF,SACE,YAAA,CAGF,QACE,aAAA,CAGF,KACE,YAAA,CAEA,yBAHF,KAII,SAAA,CAAA,CAKF,aACE,kBAAA,CAEA,yBACE,eAAA,CAKN,UACE,aAAA,CACA,UAAA,CACA,+BAAA,CACA,qBAAA,CAIF,QACE,UAAA,CACA,gBAAA,CAGF,aACE,eAAA,CAGF,OACE,iBAAA,CACA,UAAA,CACA,QAAA,CACA,qBAAA,CAGF,gBACE,8BAAA,CAGF,2BAEE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CAGF,QACE,qBAAA,CACA,iBAAA,CACA,YAAA,CACA,eAAA,CACA,kBAAA,CACA,iBAAA,CAEA,kBACE,eAAA,CAGF,eACE,kBAAA,CAIA,gCAEE,eAAA,CACA,sCACE,iBAAA,CAKN,0BAEE,aAAA,CAGF,WACE,eAAA,CAGF,cACE,wBAAA,CAEE,oBACE,WAAA,CAEF,iCACE,wBAAA,CASF,yBACE,oBAAA,CAQR,yBAGE,SACE,aAAA,CAGF,QACE,YAAA,CAGF,MACE,YAAA,CACA,iBAAA,CACA,cAAA,CACA,QAAA,CACA,eAAA,CACA,aAAA,CAEA,UACE,MAAA,CAIA,kBACE,cAAA,CAKN,QACE,cAAA,CACA,aAAA,CAAA,CAaJ,yBAGE,WACE,SAAA,CAAA,CAMJ,0BAGE,sDAEE,aAAA,CAAA",sourcesContent:["/*\nThis is a good layout for a mobile-first CSS template.\nFollowing this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.\nMost of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.\n\nSometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.\nYou will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.\n*/\n/*********************************************************************\n LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES\n*********************************************************************/\n@import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css');\n/*********************************************************************\n  YOUR MOBILE/BASE STYLES GO HERE\n*********************************************************************/\n/** SET BORDER BOX EVERYWHERE */\n* {\n  box-sizing: border-box;\n}\n/** APPLY BASE TAG STYLES */\nbody,\nhtml {\n  /* Sets default font-size to 16px, ensuring 1em = 16px; */\n  font-size: 16px;\n  font-family: 'Lato', sans-serif;\n  background-color: #eee;\n}\n/** RESPONSIVE IMAGES */\nfigure,\nimg {\n  /* Sets image width to match parent */\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\np {\n  line-height: 1.2em;\n}\n/** Caption styles */\n.caption,\nfigcaption {\n  font-size: 0.9rem;\n  color: #8e8a8a;\n  padding: 5px 0;\n}\n/** BASE CLASSES */\n/** Container styles to keep content from becoming too wide or coming too close to\n* mobile edge */\n.container {\n  width: 100%;\n  max-width: 800px;\n  padding: 10px;\n  margin: 0 auto;\n}\n/** Images are allowed to be a little wider when broken out into their own container */\n.container.image {\n  max-width: 800px;\n  padding: 0;\n}\n\n.container.image .caption,\n.container.image figcaption {\n  padding: 5px 10px;\n}\n\n.desktop {\n  display: none;\n}\n\n.mobile {\n  display: block;\n}\n\n#app {\n  padding: 10px;\n\n  @media (min-width: 681px) {\n    padding: 0;\n  }\n}\n\n.overall {\n  > div {\n    margin-bottom: -8px;\n\n    &:first-child {\n      margin-top: -25%;\n    }\n  }\n}\n\n.overline {\n  max-width: 20%;\n  height: 1px;\n  border-bottom: 5px solid #3792cb;\n  margin: 10px 0 -10px 0;\n}\n\n/** Screens are the size of at least one device screen */\n.screen {\n  width: 100%;\n  min-height: 100vh;\n}\n/** for vertical centering */\n.screen.padd {\n  padding-top: 25%;\n}\n/** video setup */\n.video {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: calc(9 / 16 * 100%);\n}\n\n.video.vertical {\n  padding-bottom: calc(16 / 9 * 100%);\n}\n\n.video iframe,\n.video video {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  border: 0;\n}\n\n.widget {\n  background-color: #fff;\n  border-radius: 5px;\n  padding: 10px;\n  max-width: 800px;\n  margin-bottom: 10px;\n  text-align: center;\n\n  .overflow {\n    overflow-x: auto;\n  }\n\n  &.center {\n    margin: 0 auto 10px;\n  }\n\n  &.list {\n    ol,\n    ul {\n      text-align: left;\n      li {\n        padding-left: 10px;\n      }\n    }\n  }\n\n  strong,\n  em {\n    display: block;\n  }\n\n  em {\n    font-size: 0.9rem;\n  }\n\n  table {\n    border-collapse: collapse;\n    tr {\n      td {\n        padding: 5px;\n      }\n      &:nth-child(even) {\n        background-color: #f9f9f9;\n      }\n    }\n  }\n}\n\n.disks {\n  .widget {\n    .danger {\n      > * {\n        background-color: #f00;\n      }\n    }\n  }\n}\n/*********************************************************************\n  YOUR TABLET/DESKTOP STYLES GO HERE\n*********************************************************************/\n@media (min-width: 681px) {\n  /* Any adjustments for tablets and larger go here.\n    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */\n  .desktop {\n    display: block;\n  }\n\n  .mobile {\n    display: none;\n  }\n\n  .flex {\n    display: flex;\n    text-align: center;\n    flex-wrap: wrap;\n    gap: 10px;\n    max-width: 800px;\n    margin: 0 auto;\n\n    > div {\n      flex: 1;\n    }\n\n    &.quarter {\n      > div {\n        flex-basis: 25%;\n      }\n    }\n  }\n\n  .circle {\n    max-width: 40px;\n    margin: 0 auto;\n  }\n}\n/*********************************************************************\n  YOUR DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 769px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n}\n/*********************************************************************\n  YOUR MEDIUM-DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 805px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container {\n    padding: 0;\n  }\n}\n/*********************************************************************\n  YOUR LARGE DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 1205px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container.image .caption,\n  .container.image figcaption {\n    padding: 5px 0;\n  }\n}\n"],sourceRoot:""}]);const l=i},867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"nav{overflow-y:auto;-webkit-overflow-scrolling:touch;max-height:20vh;margin:0 auto 22px}nav ul{margin:0;padding:0}nav ul li{list-style:none;display:block;padding:10px;margin:10px}nav ul li button{background:rgba(0,0,0,0);border:0;background:#fff;margin-right:10px;cursor:pointer;width:100%;padding:22px;color:#000}nav ul li button.active{border-bottom:3px solid #000}","",{version:3,sources:["webpack://./src/components/Navigation/Nav.scss"],names:[],mappings:"AAAA,IACE,eAAA,CAEA,gCAAA,CACA,eAAA,CACA,kBAAA,CAEA,OACE,QAAA,CACA,SAAA,CAEA,UACE,eAAA,CACA,aAAA,CACA,YAAA,CACA,WAAA,CAEA,iBACE,wBAAA,CACA,QAAA,CACA,eAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,YAAA,CACA,UAAA,CAEA,wBACE,4BAAA",sourcesContent:["nav {\n  overflow-y: auto;\n  /* momentum scrolling */\n  -webkit-overflow-scrolling: touch;\n  max-height: 20vh;\n  margin: 0 auto 22px;\n\n  ul {\n    margin: 0;\n    padding: 0;\n\n    li {\n      list-style: none;\n      display: block;\n      padding: 10px;\n      margin: 10px;\n\n      button {\n        background: transparent;\n        border: 0;\n        background: #fff;\n        margin-right: 10px;\n        cursor: pointer;\n        width: 100%;\n        padding: 22px;\n        color: #000;\n\n        &.active {\n          border-bottom: 3px solid #000;\n        }\n      }\n    }\n  }\n}\n"],sourceRoot:""}]);const l=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var u=this[l][0];null!=u&&(i[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},484:function(e){e.exports=function(){"use strict";var e=6e4,t=36e5,n="millisecond",r="second",a="minute",o="hour",i="day",l="week",u="month",s="quarter",c="year",f="date",d="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var t=["th","st","nd","rd"],n=e%100;return"["+e+(t[(n-20)%10]||t[n]||t[0])+"]"}},g=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},y={s:g,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+g(r,2,"0")+":"+g(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var r=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(r,u),o=n-a<0,i=t.clone().add(r+(o?-1:1),u);return+(-(r+(n-a)/(o?a-i:i-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:u,y:c,w:l,d:i,D:f,h:o,m:a,s:r,ms:n,Q:s}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},v="en",b={};b[v]=h;var w="$isDayjsObject",k=function(e){return e instanceof C||!(!e||!e[w])},x=function e(t,n,r){var a;if(!t)return v;if("string"==typeof t){var o=t.toLowerCase();b[o]&&(a=o),n&&(b[o]=n,a=o);var i=t.split("-");if(!a&&i.length>1)return e(i[0])}else{var l=t.name;b[l]=t,a=l}return!r&&a&&(v=a),a||!r&&v},S=function(e,t){if(k(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new C(n)},A=y;A.l=x,A.i=k,A.w=function(e,t){return S(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var C=function(){function h(e){this.$L=x(e.locale,null,!0),this.parse(e),this.$x=this.$x||e.x||{},this[w]=!0}var g=h.prototype;return g.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(A.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(p);if(r){var a=r[2]-1||0,o=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)):new Date(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,o)}}return new Date(t)}(e),this.init()},g.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},g.$utils=function(){return A},g.isValid=function(){return!(this.$d.toString()===d)},g.isSame=function(e,t){var n=S(e);return this.startOf(t)<=n&&n<=this.endOf(t)},g.isAfter=function(e,t){return S(e)<this.startOf(t)},g.isBefore=function(e,t){return this.endOf(t)<S(e)},g.$g=function(e,t,n){return A.u(e)?this[t]:this.set(n,e)},g.unix=function(){return Math.floor(this.valueOf()/1e3)},g.valueOf=function(){return this.$d.getTime()},g.startOf=function(e,t){var n=this,s=!!A.u(t)||t,d=A.p(e),p=function(e,t){var r=A.w(n.$u?Date.UTC(n.$y,t,e):new Date(n.$y,t,e),n);return s?r:r.endOf(i)},m=function(e,t){return A.w(n.toDate()[e].apply(n.toDate("s"),(s?[0,0,0,0]:[23,59,59,999]).slice(t)),n)},h=this.$W,g=this.$M,y=this.$D,v="set"+(this.$u?"UTC":"");switch(d){case c:return s?p(1,0):p(31,11);case u:return s?p(1,g):p(0,g+1);case l:var b=this.$locale().weekStart||0,w=(h<b?h+7:h)-b;return p(s?y-w:y+(6-w),g);case i:case f:return m(v+"Hours",0);case o:return m(v+"Minutes",1);case a:return m(v+"Seconds",2);case r:return m(v+"Milliseconds",3);default:return this.clone()}},g.endOf=function(e){return this.startOf(e,!1)},g.$set=function(e,t){var l,s=A.p(e),d="set"+(this.$u?"UTC":""),p=(l={},l[i]=d+"Date",l[f]=d+"Date",l[u]=d+"Month",l[c]=d+"FullYear",l[o]=d+"Hours",l[a]=d+"Minutes",l[r]=d+"Seconds",l[n]=d+"Milliseconds",l)[s],m=s===i?this.$D+(t-this.$W):t;if(s===u||s===c){var h=this.clone().set(f,1);h.$d[p](m),h.init(),this.$d=h.set(f,Math.min(this.$D,h.daysInMonth())).$d}else p&&this.$d[p](m);return this.init(),this},g.set=function(e,t){return this.clone().$set(e,t)},g.get=function(e){return this[A.p(e)]()},g.add=function(n,s){var f,d=this;n=Number(n);var p=A.p(s),m=function(e){var t=S(d);return A.w(t.date(t.date()+Math.round(e*n)),d)};if(p===u)return this.set(u,this.$M+n);if(p===c)return this.set(c,this.$y+n);if(p===i)return m(1);if(p===l)return m(7);var h=(f={},f[a]=e,f[o]=t,f[r]=1e3,f)[p]||1,g=this.$d.getTime()+n*h;return A.w(g,this)},g.subtract=function(e,t){return this.add(-1*e,t)},g.format=function(e){var t=this,n=this.$locale();if(!this.isValid())return n.invalidDate||d;var r=e||"YYYY-MM-DDTHH:mm:ssZ",a=A.z(this),o=this.$H,i=this.$m,l=this.$M,u=n.weekdays,s=n.months,c=n.meridiem,f=function(e,n,a,o){return e&&(e[n]||e(t,r))||a[n].slice(0,o)},p=function(e){return A.s(o%12||12,e,"0")},h=c||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(m,(function(e,r){return r||function(e){switch(e){case"YY":return String(t.$y).slice(-2);case"YYYY":return A.s(t.$y,4,"0");case"M":return l+1;case"MM":return A.s(l+1,2,"0");case"MMM":return f(n.monthsShort,l,s,3);case"MMMM":return f(s,l);case"D":return t.$D;case"DD":return A.s(t.$D,2,"0");case"d":return String(t.$W);case"dd":return f(n.weekdaysMin,t.$W,u,2);case"ddd":return f(n.weekdaysShort,t.$W,u,3);case"dddd":return u[t.$W];case"H":return String(o);case"HH":return A.s(o,2,"0");case"h":return p(1);case"hh":return p(2);case"a":return h(o,i,!0);case"A":return h(o,i,!1);case"m":return String(i);case"mm":return A.s(i,2,"0");case"s":return String(t.$s);case"ss":return A.s(t.$s,2,"0");case"SSS":return A.s(t.$ms,3,"0");case"Z":return a}return null}(e)||a.replace(":","")}))},g.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},g.diff=function(n,f,d){var p,m=this,h=A.p(f),g=S(n),y=(g.utcOffset()-this.utcOffset())*e,v=this-g,b=function(){return A.m(m,g)};switch(h){case c:p=b()/12;break;case u:p=b();break;case s:p=b()/3;break;case l:p=(v-y)/6048e5;break;case i:p=(v-y)/864e5;break;case o:p=v/t;break;case a:p=v/e;break;case r:p=v/1e3;break;default:p=v}return d?p:A.a(p)},g.daysInMonth=function(){return this.endOf(u).$D},g.$locale=function(){return b[this.$L]},g.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),r=x(e,t,!0);return r&&(n.$L=r),n},g.clone=function(){return A.w(this.$d,this)},g.toDate=function(){return new Date(this.valueOf())},g.toJSON=function(){return this.isValid()?this.toISOString():null},g.toISOString=function(){return this.$d.toISOString()},g.toString=function(){return this.$d.toUTCString()},h}(),E=C.prototype;return S.prototype=E,[["$ms",n],["$s",r],["$m",a],["$H",o],["$W",i],["$M",u],["$y",c],["$D",f]].forEach((function(e){E[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),S.extend=function(e,t){return e.$i||(e(t,C,S),e.$i=!0),S},S.locale=x,S.isDayjs=k,S.unix=function(e){return S(1e3*e)},S.en=b[v],S.Ls=b,S.p={},S}()},212:function(e){e.exports=function(){"use strict";return function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}}}()},387:function(e){e.exports=function(){"use strict";var e={year:0,month:1,day:2,hour:3,minute:4,second:5},t={};return function(n,r,a){var o,i=function(e,n,r){void 0===r&&(r={});var a=new Date(e),o=function(e,n){void 0===n&&(n={});var r=n.timeZoneName||"short",a=e+"|"+r,o=t[a];return o||(o=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:e,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:r}),t[a]=o),o}(n,r);return o.formatToParts(a)},l=function(t,n){for(var r=i(t,n),o=[],l=0;l<r.length;l+=1){var u=r[l],s=u.type,c=u.value,f=e[s];f>=0&&(o[f]=parseInt(c,10))}var d=o[3],p=24===d?0:d,m=o[0]+"-"+o[1]+"-"+o[2]+" "+p+":"+o[4]+":"+o[5]+":000",h=+t;return(a.utc(m).valueOf()-(h-=h%1e3))/6e4},u=r.prototype;u.tz=function(e,t){void 0===e&&(e=o);var n,r=this.utcOffset(),i=this.toDate(),l=i.toLocaleString("en-US",{timeZone:e}),u=Math.round((i-new Date(l))/1e3/60),s=15*-Math.round(i.getTimezoneOffset()/15)-u;if(Number(s)){if(n=a(l,{locale:this.$L}).$set("millisecond",this.$ms).utcOffset(s,!0),t){var c=n.utcOffset();n=n.add(r-c,"minute")}}else n=this.utcOffset(0,t);return n.$x.$timezone=e,n},u.offsetName=function(e){var t=this.$x.$timezone||a.tz.guess(),n=i(this.valueOf(),t,{timeZoneName:e}).find((function(e){return"timezonename"===e.type.toLowerCase()}));return n&&n.value};var s=u.startOf;u.startOf=function(e,t){if(!this.$x||!this.$x.$timezone)return s.call(this,e,t);var n=a(this.format("YYYY-MM-DD HH:mm:ss:SSS"),{locale:this.$L});return s.call(n,e,t).tz(this.$x.$timezone,!0)},a.tz=function(e,t,n){var r=n&&t,i=n||t||o,u=l(+a(),i);if("string"!=typeof e)return a(e).tz(i);var s=function(e,t,n){var r=e-60*t*1e3,a=l(r,n);if(t===a)return[r,t];var o=l(r-=60*(a-t)*1e3,n);return a===o?[r,a]:[e-60*Math.min(a,o)*1e3,Math.max(a,o)]}(a.utc(e,r).valueOf(),u,i),c=s[0],f=s[1],d=a(c).utcOffset(f);return d.$x.$timezone=i,d},a.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},a.tz.setDefault=function(e){o=e}}}()},178:function(e){e.exports=function(){"use strict";var e="minute",t=/[+-]\d\d(?::?\d\d)?/g,n=/([+-]|\d\d)/g;return function(r,a,o){var i=a.prototype;o.utc=function(e){return new a({date:e,utc:!0,args:arguments})},i.utc=function(t){var n=o(this.toDate(),{locale:this.$L,utc:!0});return t?n.add(this.utcOffset(),e):n},i.local=function(){return o(this.toDate(),{locale:this.$L,utc:!1})};var l=i.parse;i.parse=function(e){e.utc&&(this.$u=!0),this.$utils().u(e.$offset)||(this.$offset=e.$offset),l.call(this,e)};var u=i.init;i.init=function(){if(this.$u){var e=this.$d;this.$y=e.getUTCFullYear(),this.$M=e.getUTCMonth(),this.$D=e.getUTCDate(),this.$W=e.getUTCDay(),this.$H=e.getUTCHours(),this.$m=e.getUTCMinutes(),this.$s=e.getUTCSeconds(),this.$ms=e.getUTCMilliseconds()}else u.call(this)};var s=i.utcOffset;i.utcOffset=function(r,a){var o=this.$utils().u;if(o(r))return this.$u?0:o(this.$offset)?s.call(this):this.$offset;if("string"==typeof r&&(r=function(e){void 0===e&&(e="");var r=e.match(t);if(!r)return null;var a=(""+r[0]).match(n)||["-",0,0],o=a[0],i=60*+a[1]+ +a[2];return 0===i?0:"+"===o?i:-i}(r),null===r))return this;var i=Math.abs(r)<=16?60*r:r,l=this;if(a)return l.$offset=i,l.$u=0===r,l;if(0!==r){var u=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(l=this.local().add(i+u,e)).$offset=i,l.$x.$localOffset=u}else l=this.utc();return l};var c=i.format;i.format=function(e){var t=e||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return c.call(this,t)},i.valueOf=function(){var e=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*e},i.isUTC=function(){return!!this.$u},i.toISOString=function(){return this.toDate().toISOString()},i.toString=function(){return this.toDate().toUTCString()};var f=i.toDate;i.toDate=function(e){return"s"===e&&this.$offset?o(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():f.call(this)};var d=i.diff;i.diff=function(e,t,n){if(e&&this.$u===e.$u)return d.call(this,e,t,n);var r=this.local(),a=o(e).local();return d.call(r,a,t,n)}}}()},679:(e,t,n)=>{"use strict";var r=n(296),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),h=u(n),g=0;g<i.length;++g){var y=i[g];if(!(o[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=d(n,y);try{s(t,y,v)}catch(e){}}}}return t}},103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case h:case u:return e;default:return t}}case a:return t}}}function x(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===o},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===a},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},296:(e,t,n)=>{"use strict";e.exports=n(103)},703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),a=n(840);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},m={};function h(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!f.call(m,e)||!f.call(p,e)&&(d.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);g[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),A=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),_=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),O=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),$=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var R,D=Object.assign;function I(e){if(void 0===R)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);R=t&&t[1]||""}return"\n"+R+e}var F=!1;function j(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l]){var u="\n"+a[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?I(e):""}function B(e){switch(e.tag){case 5:return I(e.type);case 16:return I("Lazy");case 13:return I("Suspense");case 19:return I("SuspenseList");case 0:case 2:case 15:return j(e.type,!1);case 11:return j(e.type.render,!1);case 1:return j(e.type,!0);default:return""}}function U(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case C:return"Profiler";case A:return"StrictMode";case O:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case $:return null!==(t=e.displayName||null)?t:U(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return U(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return U(t);case 8:return t===A?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(te(n)){if(1<n.length)throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function oe(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){me.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,Ae=null;function Ce(e){if(e=ba(e)){if("function"!=typeof xe)throw Error(o(280));var t=e.stateNode;t&&(t=ka(t),xe(e.stateNode,e.type,t))}}function Ee(e){Se?Ae?Ae.push(e):Ae=[e]:Se=e}function _e(){if(Se){var e=Se,t=Ae;if(Ae=Se=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function Oe(){}var Te=!1;function $e(e,t,n){if(Te)return e(t,n);Te=!0;try{return Pe(e,t,n)}finally{Te=!1,(null!==Se||null!==Ae)&&(Oe(),_e())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=ka(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var ze=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){ze=!1}function Le(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Re=!1,De=null,Ie=!1,Fe=null,je={onError:function(e){Re=!0,De=e}};function Be(e,t,n,r,a,o,i,l,u){Re=!1,De=null,Le.apply(je,arguments)}function Ue(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ue(e)!==e)throw Error(o(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ue(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=i;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=i;break}if(u===r){l=!0,r=a,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=a;break}if(u===r){l=!0,r=i,n=a;break}u=u.sibling}if(!l)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Ke=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ge=a.unstable_shouldYield,qe=a.unstable_requestPaint,Xe=a.unstable_now,Ze=a.unstable_getCurrentPriorityLevel,Je=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,ot=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,o=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~a;0!==l?r=ft(l):0!=(o&=i)&&(r=ft(o))}else 0!=(i=n&~a)?r=ft(i):0!==o&&(r=ft(o));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(o=t&-t)||16===a&&0!=(4194240&o)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,xt,St,At,Ct,Et=!1,_t=[],Pt=null,Ot=null,Tt=null,$t=new Map,Nt=new Map,zt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":$t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Rt(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[a]},null!==t&&null!==(t=ba(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Dt(e){var t=va(e.target);if(null!==t){var n=Ue(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ct(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ba(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){It(e)&&n.delete(t)}function jt(){Et=!1,null!==Pt&&It(Pt)&&(Pt=null),null!==Ot&&It(Ot)&&(Ot=null),null!==Tt&&It(Tt)&&(Tt=null),$t.forEach(Ft),Nt.forEach(Ft)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Et||(Et=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,jt)))}function Ut(e){function t(t){return Bt(t,e)}if(0<_t.length){Bt(_t[0],e);for(var n=1;n<_t.length;n++){var r=_t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Bt(Pt,e),null!==Ot&&Bt(Ot,e),null!==Tt&&Bt(Tt,e),$t.forEach(t),Nt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)Dt(n),null===n.blockedOn&&zt.shift()}var Ht=w.ReactCurrentBatchConfig,Wt=!0;function Vt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Yt(e,t,n,r){var a=bt,o=Ht.transition;Ht.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=a,Ht.transition=o}}function Kt(e,t,n,r){if(Wt){var a=Gt(e,t,n,r);if(null===a)Wr(e,t,r,Qt,n),Lt(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Pt=Rt(Pt,e,t,n,r,a),!0;case"dragenter":return Ot=Rt(Ot,e,t,n,r,a),!0;case"mouseover":return Tt=Rt(Tt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return $t.set(o,Rt($t.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Nt.set(o,Rt(Nt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==a;){var o=ba(a);if(null!==o&&kt(o),null===(o=Gt(e,t,n,r))&&Wr(e,t,r,Qt,n),o===a)break;a=o}null!==a&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var Qt=null;function Gt(e,t,n,r){if(Qt=null,null!==(e=va(e=ke(r))))if(null===(t=Ue(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Jt=a.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=an(sn),fn=D({},sn,{view:0,detail:0}),dn=an(fn),pn=D({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(on=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=on=0,un=e),on)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=an(pn),hn=an(D({},pn,{dataTransfer:0})),gn=an(D({},fn,{relatedTarget:0})),yn=an(D({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=D({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=an(vn),wn=an(D({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function An(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Cn(){return An}var En=D({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=an(En),Pn=an(D({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=an(D({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Tn=an(D({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),$n=D({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an($n),zn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Rn=c&&"TextEvent"in window&&!Ln,Dn=c&&(!Mn||Ln&&8<Ln&&11>=Ln),In=String.fromCharCode(32),Fn=!1;function jn(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Vn(e,t,n,r){Ee(r),0<(t=Yr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Kn=null;function Qn(e){Ir(e,0)}function Gn(e){if(K(wa(e)))return e}function qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Yn&&(Yn.detachEvent("onpropertychange",nr),Kn=Yn=null)}function nr(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];Vn(t,Kn,e,ke(e)),$e(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Yn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function or(e,t){if("click"===e)return Gn(t)}function ir(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!f.call(t,a)||!lr(e[a],t[a]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function mr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,o=Math.min(r.start,a);r=void 0===r.end?o:Math.min(r.end,a),!e.extend&&o>r&&(a=r,r=o,o=a),a=cr(n,o);var i=cr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var hr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,yr=null,vr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Yr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},Sr={},Ar={};function Cr(e){if(Sr[e])return Sr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ar)return Sr[e]=n[t];return e}c&&(Ar=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Er=Cr("animationend"),_r=Cr("animationiteration"),Pr=Cr("animationstart"),Or=Cr("transitionend"),Tr=new Map,$r="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Tr.set(e,t),u(t,[e])}for(var zr=0;zr<$r.length;zr++){var Mr=$r[zr];Nr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Nr(Er,"onAnimationEnd"),Nr(_r,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Or,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,l,u,s){if(Be.apply(this,arguments),Re){if(!Re)throw Error(o(198));var c=De;Re=!1,De=null,Ie||(Ie=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Ir(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Dr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Dr(a,l,s),o=u}}}if(Ie)throw e=Fe,Ie=!1,Fe=null,e}function Fr(e,t){var n=t[ha];void 0===n&&(n=t[ha]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Br="_reactListening"+Math.random().toString(36).slice(2);function Ur(e){if(!e[Br]){e[Br]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Br]||(t[Br]=!0,jr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(qt(t)){case 1:var a=Vt;break;case 4:a=Yt;break;default:a=Kt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=va(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}$e((function(){var r=o,a=ke(n),i=[];e:{var l=Tr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=hn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Er:case _r:case Pr:u=yn;break;case Or:u=Tn;break;case"scroll":u=dn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Pn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Ne(m,d))&&c.push(Vr(m,h,p))),f)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!va(s)&&!s[ma])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?va(s):null)&&(s!==(f=Ue(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?l:wa(u),p=null==s?l:wa(s),(l=new c(h,m+"leave",u,n,a)).target=f,l.relatedTarget=p,h=null,va(a)===r&&((c=new c(d,m+"enter",s,n,a)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Kr(p))m++;for(p=0,h=d;h;h=Kr(h))p++;for(;0<m-p;)c=Kr(c),m--;for(;0<p-m;)d=Kr(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==u&&Qr(i,l,u,c,!1),null!==s&&null!==f&&Qr(i,f,s,c,!0)}if("select"===(u=(l=r?wa(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=qn;else if(Wn(l))if(Xn)g=ir;else{g=ar;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Vn(i,g,n,a):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&ee(l,"number",l.value)),y=r?wa(r):window,e){case"focusin":(Wn(y)||"true"===y.contentEditable)&&(gr=y,yr=r,vr=null);break;case"focusout":vr=yr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,a);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":wr(i,n,a)}var v;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?jn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(v=en()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,Un=!0)),0<(y=Yr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:y}),(v||null!==(v=Bn(n)))&&(b.data=v))),(v=Rn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,In);case"textInput":return(e=t.data)===In&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Mn&&jn(e,t)?(e=en(),Jt=Zt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=v)}Ir(i,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Ne(e,n))&&r.unshift(Vr(e,o,a)),null!=(o=Ne(e,t))&&r.push(Vr(e,o,a))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Ne(n,o))&&i.unshift(Vr(n,u,l)):a||null!=(u=Ne(n,o))&&i.push(Vr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Gr=/\r\n?/g,qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(qr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(o(425))}function Jr(){}var ea=null,ta=null;function na(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ra="function"==typeof setTimeout?setTimeout:void 0,aa="function"==typeof clearTimeout?clearTimeout:void 0,oa="function"==typeof Promise?Promise:void 0,ia="function"==typeof queueMicrotask?queueMicrotask:void 0!==oa?function(e){return oa.resolve(null).then(e).catch(la)}:ra;function la(e){setTimeout((function(){throw e}))}function ua(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function sa(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fa=Math.random().toString(36).slice(2),da="__reactFiber$"+fa,pa="__reactProps$"+fa,ma="__reactContainer$"+fa,ha="__reactEvents$"+fa,ga="__reactListeners$"+fa,ya="__reactHandles$"+fa;function va(e){var t=e[da];if(t)return t;for(var n=e.parentNode;n;){if(t=n[ma]||n[da]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ca(e);null!==e;){if(n=e[da])return n;e=ca(e)}return t}n=(e=n).parentNode}return null}function ba(e){return!(e=e[da]||e[ma])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wa(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function ka(e){return e[pa]||null}var xa=[],Sa=-1;function Aa(e){return{current:e}}function Ca(e){0>Sa||(e.current=xa[Sa],xa[Sa]=null,Sa--)}function Ea(e,t){Sa++,xa[Sa]=e.current,e.current=t}var _a={},Pa=Aa(_a),Oa=Aa(!1),Ta=_a;function $a(e,t){var n=e.type.contextTypes;if(!n)return _a;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Na(e){return null!=e.childContextTypes}function za(){Ca(Oa),Ca(Pa)}function Ma(e,t,n){if(Pa.current!==_a)throw Error(o(168));Ea(Pa,t),Ea(Oa,n)}function La(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(o(108,H(e)||"Unknown",a));return D({},n,r)}function Ra(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_a,Ta=Pa.current,Ea(Pa,e),Ea(Oa,Oa.current),!0}function Da(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=La(e,t,Ta),r.__reactInternalMemoizedMergedChildContext=e,Ca(Oa),Ca(Pa),Ea(Pa,e)):Ca(Oa),Ea(Oa,n)}var Ia=null,Fa=!1,ja=!1;function Ba(e){null===Ia?Ia=[e]:Ia.push(e)}function Ua(){if(!ja&&null!==Ia){ja=!0;var e=0,t=bt;try{var n=Ia;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ia=null,Fa=!1}catch(t){throw null!==Ia&&(Ia=Ia.slice(e+1)),Ke(Je,Ua),t}finally{bt=t,ja=!1}}return null}var Ha=w.ReactCurrentBatchConfig;function Wa(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Va=Aa(null),Ya=null,Ka=null,Qa=null;function Ga(){Qa=Ka=Ya=null}function qa(e){var t=Va.current;Ca(Va),e._currentValue=t}function Xa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Za(e,t){Ya=e,Qa=Ka=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(kl=!0),e.firstContext=null)}function Ja(e){var t=e._currentValue;if(Qa!==e)if(e={context:e,memoizedValue:t,next:null},null===Ka){if(null===Ya)throw Error(o(308));Ka=e,Ya.dependencies={lanes:0,firstContext:e}}else Ka=Ka.next=e;return t}var eo=null,to=!1;function no(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ro(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function oo(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,ts(e)?(null===(e=n.interleaved)?(t.next=t,null===eo?eo=[n]:eo.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function io(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var a=e.updateQueue;to=!1;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==o){var f=a.baseState;for(i=0,c=s=u=null,l=o;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var m=e,h=l;switch(d=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(p,f,d):m))break e;f=D({},f,d);break e;case 2:to=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=a.effects)?a.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=a.shared.pending))break;l=(d=l).next,d.next=null,a.lastBaseUpdate=d,a.shared.pending=null}}if(null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===o&&(a.shared.lanes=0);zu|=i,e.lanes=i,e.memoizedState=f}}function so(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(o(191,a));a.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Ue(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Zu(e),o=ao(r,a);o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Xu(),a=Zu(e),o=ao(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),oo(e,o),null!==(t=Ju(e,a,r))&&io(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Xu(),r=Zu(e),a=ao(n,r);a.tag=2,null!=t&&(a.callback=t),oo(e,a),null!==(t=Ju(e,r,n))&&io(t,e,r)}};function mo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(a,o))}function ho(e,t,n){var r=!1,a=_a,o=t.contextType;return"object"==typeof o&&null!==o?o=Ja(o):(a=Na(t)?Ta:Pa.current,o=(r=null!=(r=t.contextTypes))?$a(e,a):_a),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=co,no(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=Ja(o):(o=Na(t)?Ta:Pa.current,a.context=$a(e,o)),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),uo(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var vo=[],bo=0,wo=null,ko=0,xo=[],So=0,Ao=null,Co=1,Eo="";function _o(e,t){vo[bo++]=ko,vo[bo++]=wo,wo=e,ko=t}function Po(e,t,n){xo[So++]=Co,xo[So++]=Eo,xo[So++]=Ao,Ao=e;var r=Co;e=Eo;var a=32-it(r)-1;r&=~(1<<a),n+=1;var o=32-it(t)+a;if(30<o){var i=a-a%5;o=(r&(1<<i)-1).toString(32),r>>=i,a-=i,Co=1<<32-it(t)+a|n<<a|r,Eo=o+e}else Co=1<<o|n<<a|r,Eo=e}function Oo(e){null!==e.return&&(_o(e,1),Po(e,1,0))}function To(e){for(;e===wo;)wo=vo[--bo],vo[bo]=null,ko=vo[--bo],vo[bo]=null;for(;e===Ao;)Ao=xo[--So],xo[So]=null,Eo=xo[--So],xo[So]=null,Co=xo[--So],xo[So]=null}var $o=null,No=null,zo=!1,Mo=null;function Lo(e,t){var n=Ts(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Ro(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,$o=e,No=sa(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,$o=e,No=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ao?{id:Co,overflow:Eo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ts(18,null,null,0)).stateNode=t,n.return=e,e.child=n,$o=e,No=null,!0);default:return!1}}function Do(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Io(e){if(zo){var t=No;if(t){var n=t;if(!Ro(e,t)){if(Do(e))throw Error(o(418));t=sa(n.nextSibling);var r=$o;t&&Ro(e,t)?Lo(r,n):(e.flags=-4097&e.flags|2,zo=!1,$o=e)}}else{if(Do(e))throw Error(o(418));e.flags=-4097&e.flags|2,zo=!1,$o=e}}}function Fo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;$o=e}function jo(e){if(e!==$o)return!1;if(!zo)return Fo(e),zo=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!na(e.type,e.memoizedProps)),t&&(t=No)){if(Do(e)){for(e=No;e;)e=sa(e.nextSibling);throw Error(o(418))}for(;t;)Lo(e,t),t=sa(t.nextSibling)}if(Fo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){No=sa(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}No=null}}else No=$o?sa(e.stateNode.nextSibling):null;return!0}function Bo(){No=$o=null,zo=!1}function Uo(e){null===Mo?Mo=[e]:Mo.push(e)}function Ho(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=a.refs;t===co&&(t=a.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function Wo(e,t){throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Vo(e){return(0,e._init)(e._payload)}function Yo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Ns(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Rs(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){var o=n.type;return o===S?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===o||"object"==typeof o&&null!==o&&o.$$typeof===N&&Vo(o)===t.type)?((r=a(t,n.props)).ref=Ho(e,t,n),r.return=e,r):((r=zs(n.type,n.key,n.props,null,e.mode,r)).ref=Ho(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ds(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Rs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=zs(t.type,t.key,t.props,null,e.mode,n)).ref=Ho(e,null,t),n.return=e,n;case x:return(t=Ds(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ms(t,e.mode,n,null)).return=e,t;Wo(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?s(e,t,n,r):null;case x:return n.key===a?c(e,t,n,r):null;case N:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||L(n))return null!==a?null:f(e,t,n,r,null);Wo(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case N:return m(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||L(r))return f(t,e=e.get(n)||null,r,a,null);Wo(t,r)}return null}function h(a,o,l,u){for(var s=null,c=null,f=o,h=o=0,g=null;null!==f&&h<l.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var y=p(a,f,l[h],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(a,f),o=i(y,o,h),null===c?s=y:c.sibling=y,c=y,f=g}if(h===l.length)return n(a,f),zo&&_o(a,h),s;if(null===f){for(;h<l.length;h++)null!==(f=d(a,l[h],u))&&(o=i(f,o,h),null===c?s=f:c.sibling=f,c=f);return zo&&_o(a,h),s}for(f=r(a,f);h<l.length;h++)null!==(g=m(f,a,h,l[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),o=i(g,o,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(a,e)})),zo&&_o(a,h),s}function g(a,l,u,s){var c=L(u);if("function"!=typeof c)throw Error(o(150));if(null==(u=c.call(u)))throw Error(o(151));for(var f=c=null,h=l,g=l=0,y=null,v=u.next();null!==h&&!v.done;g++,v=u.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=p(a,h,v.value,s);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(a,h),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,h=y}if(v.done)return n(a,h),zo&&_o(a,g),c;if(null===h){for(;!v.done;g++,v=u.next())null!==(v=d(a,v.value,s))&&(l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return zo&&_o(a,g),c}for(h=r(a,h);!v.done;g++,v=u.next())null!==(v=m(h,a,g,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),l=i(v,l,g),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach((function(e){return t(a,e)})),zo&&_o(a,g),c}return function e(r,o,i,u){if("object"==typeof i&&null!==i&&i.type===S&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=o;null!==c;){if(c.key===s){if((s=i.type)===S){if(7===c.tag){n(r,c.sibling),(o=a(c,i.props.children)).return=r,r=o;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Vo(s)===c.type){n(r,c.sibling),(o=a(c,i.props)).ref=Ho(r,c,i),o.return=r,r=o;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===S?((o=Ms(i.props.children,r.mode,u,i.key)).return=r,r=o):((u=zs(i.type,i.key,i.props,null,r.mode,u)).ref=Ho(r,o,i),u.return=r,r=u)}return l(r);case x:e:{for(c=i.key;null!==o;){if(o.key===c){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(r,o.sibling),(o=a(o,i.children||[])).return=r,r=o;break e}n(r,o);break}t(r,o),o=o.sibling}(o=Ds(i,r.mode,u)).return=r,r=o}return l(r);case N:return e(r,o,(c=i._init)(i._payload),u)}if(te(i))return h(r,o,i,u);if(L(i))return g(r,o,i,u);Wo(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==o&&6===o.tag?(n(r,o.sibling),(o=a(o,i)).return=r,r=o):(n(r,o),(o=Rs(i,r.mode,u)).return=r,r=o),l(r)):n(r,o)}}var Ko=Yo(!0),Qo=Yo(!1),Go={},qo=Aa(Go),Xo=Aa(Go),Zo=Aa(Go);function Jo(e){if(e===Go)throw Error(o(174));return e}function ei(e,t){switch(Ea(Zo,t),Ea(Xo,e),Ea(qo,Go),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ca(qo),Ea(qo,t)}function ti(){Ca(qo),Ca(Xo),Ca(Zo)}function ni(e){Jo(Zo.current);var t=Jo(qo.current),n=ue(t,e.type);t!==n&&(Ea(Xo,e),Ea(qo,n))}function ri(e){Xo.current===e&&(Ca(qo),Ca(Xo))}var ai=Aa(0);function oi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ii=[];function li(){for(var e=0;e<ii.length;e++)ii[e]._workInProgressVersionPrimary=null;ii.length=0}var ui=w.ReactCurrentDispatcher,si=w.ReactCurrentBatchConfig,ci=0,fi=null,di=null,pi=null,mi=!1,hi=!1,gi=0,yi=0;function vi(){throw Error(o(321))}function bi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function wi(e,t,n,r,a,i){if(ci=i,fi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ui.current=null===e||null===e.memoizedState?rl:al,e=n(r,a),hi){i=0;do{if(hi=!1,gi=0,25<=i)throw Error(o(301));i+=1,pi=di=null,t.updateQueue=null,ui.current=ol,e=n(r,a)}while(hi)}if(ui.current=nl,t=null!==di&&null!==di.next,ci=0,pi=di=fi=null,mi=!1,t)throw Error(o(300));return e}function ki(){var e=0!==gi;return gi=0,e}function xi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===pi?fi.memoizedState=pi=e:pi=pi.next=e,pi}function Si(){if(null===di){var e=fi.alternate;e=null!==e?e.memoizedState:null}else e=di.next;var t=null===pi?fi.memoizedState:pi.next;if(null!==t)pi=t,di=e;else{if(null===e)throw Error(o(310));e={memoizedState:(di=e).memoizedState,baseState:di.baseState,baseQueue:di.baseQueue,queue:di.queue,next:null},null===pi?fi.memoizedState=pi=e:pi=pi.next=e}return pi}function Ai(e,t){return"function"==typeof t?t(e):t}function Ci(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=di,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var l=a.next;a.next=i.next,i.next=l}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ci&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,fi.lanes|=f,zu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(kl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,fi.lanes|=i,zu|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ei(e){var t=Si(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{i=e(i,l.action),l=l.next}while(l!==a);lr(i,t.memoizedState)||(kl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function _i(){}function Pi(e,t){var n=fi,r=Si(),a=t(),i=!lr(r.memoizedState,a);if(i&&(r.memoizedState=a,kl=!0),r=r.queue,Fi($i.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==pi&&1&pi.memoizedState.tag){if(n.flags|=2048,Mi(9,Ti.bind(null,n,r,a,t),void 0,null),null===Eu)throw Error(o(349));0!=(30&ci)||Oi(n,t,a)}return a}function Oi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ti(e,t,n,r){t.value=n,t.getSnapshot=r,Ni(t)&&Ju(e,1,-1)}function $i(e,t,n){return n((function(){Ni(t)&&Ju(e,1,-1)}))}function Ni(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function zi(e){var t=xi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t.queue=e,e=e.dispatch=Xi.bind(null,fi,e),[t.memoizedState,e]}function Mi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=fi.updateQueue)?(t={lastEffect:null,stores:null},fi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Li(){return Si().memoizedState}function Ri(e,t,n,r){var a=xi();fi.flags|=e,a.memoizedState=Mi(1|t,n,void 0,void 0===r?null:r)}function Di(e,t,n,r){var a=Si();r=void 0===r?null:r;var o=void 0;if(null!==di){var i=di.memoizedState;if(o=i.destroy,null!==r&&bi(r,i.deps))return void(a.memoizedState=Mi(t,n,o,r))}fi.flags|=e,a.memoizedState=Mi(1|t,n,o,r)}function Ii(e,t){return Ri(8390656,8,e,t)}function Fi(e,t){return Di(2048,8,e,t)}function ji(e,t){return Di(4,2,e,t)}function Bi(e,t){return Di(4,4,e,t)}function Ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Hi(e,t,n){return n=null!=n?n.concat([e]):null,Di(4,4,Ui.bind(null,t,e),n)}function Wi(){}function Vi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=Si();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&bi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ki(e,t,n){return 0==(21&ci)?(e.baseState&&(e.baseState=!1,kl=!0),e.memoizedState=n):(lr(n,t)||(n=ht(),fi.lanes|=n,zu|=n,e.baseState=!0),t)}function Qi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=si.transition;si.transition={};try{e(!1),t()}finally{bt=n,si.transition=r}}function Gi(){return Si().memoizedState}function qi(e,t,n){var r=Zu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zi(e)?Ji(t,n):(el(e,t,n),null!==(e=Ju(e,r,n=Xu()))&&tl(e,t,r))}function Xi(e,t,n){var r=Zu(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zi(e))Ji(t,a);else{el(e,t,a);var o=e.alternate;if(0===e.lanes&&(null===o||0===o.lanes)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=o(i,n);if(a.hasEagerState=!0,a.eagerState=l,lr(l,i))return}catch(e){}null!==(e=Ju(e,r,n=Xu()))&&tl(e,t,r)}}function Zi(e){var t=e.alternate;return e===fi||null!==t&&t===fi}function Ji(e,t){hi=mi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function el(e,t,n){ts(e)?(null===(e=t.interleaved)?(n.next=n,null===eo?eo=[t]:eo.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function tl(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var nl={readContext:Ja,useCallback:vi,useContext:vi,useEffect:vi,useImperativeHandle:vi,useInsertionEffect:vi,useLayoutEffect:vi,useMemo:vi,useReducer:vi,useRef:vi,useState:vi,useDebugValue:vi,useDeferredValue:vi,useTransition:vi,useMutableSource:vi,useSyncExternalStore:vi,useId:vi,unstable_isNewReconciler:!1},rl={readContext:Ja,useCallback:function(e,t){return xi().memoizedState=[e,void 0===t?null:t],e},useContext:Ja,useEffect:Ii,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ri(4194308,4,Ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ri(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ri(4,2,e,t)},useMemo:function(e,t){var n=xi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=xi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qi.bind(null,fi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},xi().memoizedState=e},useState:zi,useDebugValue:Wi,useDeferredValue:function(e){return xi().memoizedState=e},useTransition:function(){var e=zi(!1),t=e[0];return e=Qi.bind(null,e[1]),xi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=fi,a=xi();if(zo){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===Eu)throw Error(o(349));0!=(30&ci)||Oi(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ii($i.bind(null,r,i,e),[e]),r.flags|=2048,Mi(9,Ti.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=xi(),t=Eu.identifierPrefix;if(zo){var n=Eo;t=":"+t+"R"+(n=(Co&~(1<<32-it(Co)-1)).toString(32)+n),0<(n=gi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=yi++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},al={readContext:Ja,useCallback:Vi,useContext:Ja,useEffect:Fi,useImperativeHandle:Hi,useInsertionEffect:ji,useLayoutEffect:Bi,useMemo:Yi,useReducer:Ci,useRef:Li,useState:function(){return Ci(Ai)},useDebugValue:Wi,useDeferredValue:function(e){return Ki(Si(),di.memoizedState,e)},useTransition:function(){return[Ci(Ai)[0],Si().memoizedState]},useMutableSource:_i,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1},ol={readContext:Ja,useCallback:Vi,useContext:Ja,useEffect:Fi,useImperativeHandle:Hi,useInsertionEffect:ji,useLayoutEffect:Bi,useMemo:Yi,useReducer:Ei,useRef:Li,useState:function(){return Ei(Ai)},useDebugValue:Wi,useDeferredValue:function(e){var t=Si();return null===di?t.memoizedState=e:Ki(t,di.memoizedState,e)},useTransition:function(){return[Ei(Ai)[0],Si().memoizedState]},useMutableSource:_i,useSyncExternalStore:Pi,useId:Gi,unstable_isNewReconciler:!1};function il(e,t){try{var n="",r=t;do{n+=B(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ul,sl,cl,fl="function"==typeof WeakMap?WeakMap:Map;function dl(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bu||(Bu=!0,Uu=r),ll(0,t)},n}function pl(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){ll(0,t)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){ll(0,t),"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fl;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=As.bind(null,e,t,n),t.then(e,e))}function hl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gl(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ao(-1,1)).tag=2,oo(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function yl(e,t){if(!zo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function vl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function bl(e,t,n){var r=t.pendingProps;switch(To(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return vl(t),null;case 1:case 17:return Na(t.type)&&za(),vl(t),null;case 3:return r=t.stateNode,ti(),Ca(Oa),Ca(Pa),li(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(jo(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Mo&&(os(Mo),Mo=null))),vl(t),null;case 5:ri(t);var a=Jo(Zo.current);if(n=t.type,null!==e&&null!=t.stateNode)sl(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(o(166));return vl(t),null}if(e=Jo(qo.current),jo(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[da]=t,r[pa]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":q(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":ae(r,i),Fr("invalid",r)}for(var u in ve(n,i),a=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),a=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":Y(r),J(r,i,!0);break;case"textarea":Y(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[da]=t,e[pa]=r,ul(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),a=r;break;case"iframe":case"object":case"embed":Fr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Lr.length;a++)Fr(Lr[a],e);a=r;break;case"source":Fr("error",e),a=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),a=r;break;case"details":Fr("toggle",e),a=r;break;case"input":q(e,r),a=G(e,r),Fr("invalid",e);break;case"option":default:a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=D({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Fr("invalid",e)}for(i in ve(n,a),s=a)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":Y(e),J(e,r,!1);break;case"textarea":Y(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return vl(t),null;case 6:if(e&&null!=t.stateNode)cl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(n=Jo(Zo.current),Jo(qo.current),jo(t)){if(r=t.stateNode,n=t.memoizedProps,r[da]=t,(i=r.nodeValue!==n)&&null!==(e=$o))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[da]=t,t.stateNode=r}return vl(t),null;case 13:if(Ca(ai),r=t.memoizedState,zo&&null!==No&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=No;r;)r=sa(r.nextSibling);return Bo(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=jo(t),null===e){if(!r)throw Error(o(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(o(317));r[da]=t}else Bo(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return vl(t),null}return null!==Mo&&(os(Mo),Mo=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?jo(t):n=null!==e.memoizedState,r!==n&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ai.current)?0===$u&&($u=3):ms())),null!==t.updateQueue&&(t.flags|=4),vl(t),null);case 4:return ti(),null===e&&Ur(t.stateNode.containerInfo),vl(t),null;case 10:return qa(t.type._context),vl(t),null;case 19:if(Ca(ai),null===(i=t.memoizedState))return vl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)yl(i,!1);else{if(0!==$u||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=oi(e))){for(t.flags|=128,yl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Ea(ai,1&ai.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Fu&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=oi(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),yl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!zo)return vl(t),null}else 2*Xe()-i.renderingStartTime>Fu&&1073741824!==n&&(t.flags|=128,r=!0,yl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ai.current,Ea(ai,r?1&n|2:1&n),t):(vl(t),null);case 22:case 23:return cs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ou)&&(vl(t),6&t.subtreeFlags&&(t.flags|=8192)):vl(t),null;case 24:case 25:return null}throw Error(o(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},sl=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Jo(qo.current);var o,i=null;switch(n){case"input":a=G(e,a),r=G(e,r),i=[];break;case"select":a=D({},a,{value:void 0}),r=D({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ve(n,r),n=null,a)if(!r.hasOwnProperty(c)&&a.hasOwnProperty(c)&&null!=a[c])if("style"===c){var u=a[c];for(o in u)u.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=a?a[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(o in u)!u.hasOwnProperty(o)||s&&s.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in s)s.hasOwnProperty(o)&&u[o]!==s[o]&&(n||(n={}),n[o]=s[o])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},cl=function(e,t,n,r){n!==r&&(t.flags|=4)};var wl=w.ReactCurrentOwner,kl=!1;function xl(e,t,n,r){t.child=null===e?Qo(t,null,n,r):Ko(t,e.child,n,r)}function Sl(e,t,n,r,a){n=n.render;var o=t.ref;return Za(t,a),r=wi(e,t,n,r,o,a),n=ki(),null===e||kl?(zo&&n&&Oo(t),t.flags|=1,xl(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Al(e,t,n,r,a){if(null===e){var o=n.type;return"function"!=typeof o||$s(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=zs(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,Cl(e,t,o,r,a))}if(o=e.child,0==(e.lanes&a)){var i=o.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Wl(e,t,a)}return t.flags|=1,(e=Ns(o,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,a){if(null!==e){var o=e.memoizedProps;if(ur(o,r)&&e.ref===t.ref){if(kl=!1,t.pendingProps=r=o,0==(e.lanes&a))return t.lanes=e.lanes,Wl(e,t,a);0!=(131072&e.flags)&&(kl=!0)}}return Pl(e,t,n,r,a)}function El(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Ea(Tu,Ou),Ou|=n;else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Ea(Tu,Ou),Ou|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==o?o.baseLanes:n,Ea(Tu,Ou),Ou|=r}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,Ea(Tu,Ou),Ou|=r;return xl(e,t,a,n),t.child}function _l(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Pl(e,t,n,r,a){var o=Na(n)?Ta:Pa.current;return o=$a(t,o),Za(t,a),n=wi(e,t,n,r,o,a),r=ki(),null===e||kl?(zo&&r&&Oo(t),t.flags|=1,xl(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Wl(e,t,a))}function Ol(e,t,n,r,a){if(Na(n)){var o=!0;Ra(t)}else o=!1;if(Za(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ho(t,n,r),yo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Ja(s):$a(t,s=Na(n)?Ta:Pa.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&go(t,i,r,s),to=!1;var d=t.memoizedState;i.state=d,uo(t,r,i,a),u=t.memoizedState,l!==r||d!==u||Oa.current||to?("function"==typeof c&&(fo(t,n,c,r),u=t.memoizedState),(l=to||mo(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,ro(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Wa(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Ja(u):$a(t,u=Na(n)?Ta:Pa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&go(t,i,r,u),to=!1,d=t.memoizedState,i.state=d,uo(t,r,i,a);var m=t.memoizedState;l!==f||d!==m||Oa.current||to?("function"==typeof p&&(fo(t,n,p,r),m=t.memoizedState),(s=to||mo(t,n,s,r,d,m,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Tl(e,t,n,r,o,a)}function Tl(e,t,n,r,a,o){_l(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Da(t,n,!1),Wl(e,t,o);r=t.stateNode,wl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ko(t,e.child,null,o),t.child=Ko(t,null,l,o)):xl(e,t,l,o),t.memoizedState=r.state,a&&Da(t,n,!0),t.child}function $l(e){var t=e.stateNode;t.pendingContext?Ma(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ma(0,t.context,!1),ei(e,t.containerInfo)}function Nl(e,t,n,r,a){return Bo(),Uo(a),t.flags|=256,xl(e,t,n,r),t.child}var zl={dehydrated:null,treeContext:null,retryLane:0};function Ml(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ll(e,t){return{baseLanes:e.baseLanes|t,cachePool:null,transitions:e.transitions}}function Rl(e,t,n){var r,a=t.pendingProps,i=ai.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Ea(ai,1&i),null===e)return Io(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,l?(a=t.mode,l=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==l?(l.childLanes=0,l.pendingProps=i):l=Ls(i,a,0,null),e=Ms(e,a,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ml(n),t.memoizedState=zl,e):Dl(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(u)return 256&t.flags?(t.flags&=-257,jl(e,t,n,Error(o(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=a.fallback,i=t.mode,a=Ls({mode:"visible",children:a.children},i,0,null),(l=Ms(l,i,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,0!=(1&t.mode)&&Ko(t,e.child,null,n),t.child.memoizedState=Ml(n),t.memoizedState=zl,l);if(0==(1&t.mode))t=jl(e,t,n,null);else if("$!"===r.data)t=jl(e,t,n,Error(o(419)));else if(a=0!=(n&e.childLanes),kl||a){if(null!==(a=Eu)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(a=0!=(l&(a.suspendedLanes|n))?0:l)&&a!==i.retryLane&&(i.retryLane=a,Ju(e,a,-1))}ms(),t=jl(e,t,n,Error(o(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=Es.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,No=sa(r.nextSibling),$o=t,zo=!0,Mo=null,null!==n&&(xo[So++]=Co,xo[So++]=Eo,xo[So++]=Ao,Co=n.id,Eo=n.overflow,Ao=t),(t=Dl(t,t.pendingProps.children)).flags|=4096);return t}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Ml(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=zl,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}return l?(a=Fl(e,t,a.children,a.fallback,n),l=t.child,i=e.child.memoizedState,l.memoizedState=null===i?Ml(n):Ll(i,n),l.childLanes=e.childLanes&~n,t.memoizedState=zl,a):(n=Il(e,t,a.children,n),t.memoizedState=null,n)}function Dl(e,t){return(t=Ls({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Il(e,t,n,r){var a=e.child;return e=a.sibling,n=Ns(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Fl(e,t,n,r,a){var o=t.mode,i=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&o)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Ns(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=Ns(i,r):(r=Ms(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function jl(e,t,n,r){return null!==r&&Uo(r),Ko(t,e.child,null,n),(e=Dl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Xa(e.return,t,n)}function Ul(e,t,n,r,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=a)}function Hl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(xl(e,t,r.children,n),0!=(2&(r=ai.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bl(e,n,t);else if(19===e.tag)Bl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Ea(ai,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===oi(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ul(t,!1,a,n,o);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===oi(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ul(t,!0,n,null,o);break;case"together":Ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ns(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ns(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vl(e,t){switch(To(t),t.tag){case 1:return Na(t.type)&&za(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ti(),Ca(Oa),Ca(Pa),li(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ri(t),null;case 13:if(Ca(ai),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));Bo()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ca(ai),null;case 4:return ti(),null;case 10:return qa(t.type._context),null;case 22:case 23:return cs(),null;default:return null}}var Yl=!1,Kl=!1,Ql="function"==typeof WeakSet?WeakSet:Set,Gl=null;function ql(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Ss(e,t,n)}else n.current=null}function Xl(e,t,n){try{n()}catch(n){Ss(e,t,n)}}var Zl=!1;function Jl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var o=a.destroy;a.destroy=void 0,void 0!==o&&Xl(t,n,o)}a=a.next}while(a!==r)}}function eu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function tu(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function nu(e){var t=e.alternate;null!==t&&(e.alternate=null,nu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[da],delete t[pa],delete t[ha],delete t[ga],delete t[ya]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ru(e){return 5===e.tag||3===e.tag||4===e.tag}function au(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ru(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ou(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ou(e,t,n),e=e.sibling;null!==e;)ou(e,t,n),e=e.sibling}function iu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(iu(e,t,n),e=e.sibling;null!==e;)iu(e,t,n),e=e.sibling}var lu=null,uu=!1;function su(e,t,n){for(n=n.child;null!==n;)cu(e,t,n),n=n.sibling}function cu(e,t,n){if(ot&&"function"==typeof ot.onCommitFiberUnmount)try{ot.onCommitFiberUnmount(at,n)}catch(e){}switch(n.tag){case 5:Kl||ql(n,t);case 6:var r=lu,a=uu;lu=null,su(e,t,n),uu=a,null!==(lu=r)&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):lu.removeChild(n.stateNode));break;case 18:null!==lu&&(uu?(e=lu,n=n.stateNode,8===e.nodeType?ua(e.parentNode,n):1===e.nodeType&&ua(e,n),Ut(e)):ua(lu,n.stateNode));break;case 4:r=lu,a=uu,lu=n.stateNode.containerInfo,uu=!0,su(e,t,n),lu=r,uu=a;break;case 0:case 11:case 14:case 15:if(!Kl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){a=r=r.next;do{var o=a,i=o.destroy;o=o.tag,void 0!==i&&(0!=(2&o)||0!=(4&o))&&Xl(n,t,i),a=a.next}while(a!==r)}su(e,t,n);break;case 1:if(!Kl&&(ql(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Ss(n,t,e)}su(e,t,n);break;case 21:su(e,t,n);break;case 22:1&n.mode?(Kl=(r=Kl)||null!==n.memoizedState,su(e,t,n),Kl=r):su(e,t,n);break;default:su(e,t,n)}}function fu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ql),t.forEach((function(t){var r=_s.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:lu=u.stateNode,uu=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,uu=!0;break e}u=u.return}if(null===lu)throw Error(o(160));cu(i,l,a),lu=null,uu=!1;var s=a.alternate;null!==s&&(s.return=null),a.return=null}catch(e){Ss(a,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(du(t,e),mu(e),4&r){try{Jl(3,e,e.return),eu(3,e)}catch(t){Ss(e,e.return,t)}try{Jl(5,e,e.return)}catch(t){Ss(e,e.return,t)}}break;case 1:du(t,e),mu(e),512&r&&null!==n&&ql(n,n.return);break;case 5:if(du(t,e),mu(e),512&r&&null!==n&&ql(n,n.return),32&e.flags){var a=e.stateNode;try{de(a,"")}catch(t){Ss(e,e.return,t)}}if(4&r&&null!=(a=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(a,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(a,d):"dangerouslySetInnerHTML"===f?fe(a,d):"children"===f?de(a,d):b(a,f,d,c)}switch(u){case"input":Z(a,i);break;case"textarea":oe(a,i);break;case"select":var p=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!i.multiple;var m=i.value;null!=m?ne(a,!!i.multiple,m,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(a,!!i.multiple,i.defaultValue,!0):ne(a,!!i.multiple,i.multiple?[]:"",!1))}a[pa]=i}catch(t){Ss(e,e.return,t)}}break;case 6:if(du(t,e),mu(e),4&r){if(null===e.stateNode)throw Error(o(162));c=e.stateNode,f=e.memoizedProps;try{c.nodeValue=f}catch(t){Ss(e,e.return,t)}}break;case 3:if(du(t,e),mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ut(t.containerInfo)}catch(t){Ss(e,e.return,t)}break;case 4:default:du(t,e),mu(e);break;case 13:du(t,e),mu(e),8192&(c=e.child).flags&&null!==c.memoizedState&&(null===c.alternate||null===c.alternate.memoizedState)&&(Iu=Xe()),4&r&&fu(e);break;case 22:if(c=null!==n&&null!==n.memoizedState,1&e.mode?(Kl=(f=Kl)||c,du(t,e),Kl=f):du(t,e),mu(e),8192&r){f=null!==e.memoizedState;e:for(d=null,p=e;;){if(5===p.tag){if(null===d){d=p;try{a=p.stateNode,f?"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=p.stateNode,l=null!=(s=p.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=he("display",l))}catch(t){Ss(e,e.return,t)}}}else if(6===p.tag){if(null===d)try{p.stateNode.nodeValue=f?"":p.memoizedProps}catch(t){Ss(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;d===p&&(d=null),p=p.return}d===p&&(d=null),p.sibling.return=p.return,p=p.sibling}if(f&&!c&&0!=(1&e.mode))for(Gl=e,e=e.child;null!==e;){for(c=Gl=e;null!==Gl;){switch(d=(f=Gl).child,f.tag){case 0:case 11:case 14:case 15:Jl(4,f,f.return);break;case 1:if(ql(f,f.return),"function"==typeof(i=f.stateNode).componentWillUnmount){p=f,m=f.return;try{a=p,i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(e){Ss(p,m,e)}}break;case 5:ql(f,f.return);break;case 22:if(null!==f.memoizedState){vu(c);continue}}null!==d?(d.return=f,Gl=d):vu(c)}e=e.sibling}}break;case 19:du(t,e),mu(e),4&r&&fu(e);case 21:}}function mu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ru(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 5:var a=r.stateNode;32&r.flags&&(de(a,""),r.flags&=-33),iu(e,au(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;ou(e,au(e),i);break;default:throw Error(o(161))}}catch(t){Ss(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function hu(e,t,n){Gl=e,gu(e,t,n)}function gu(e,t,n){for(var r=0!=(1&e.mode);null!==Gl;){var a=Gl,o=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Yl;if(!i){var l=a.alternate,u=null!==l&&null!==l.memoizedState||Kl;l=Yl;var s=Kl;if(Yl=i,(Kl=u)&&!s)for(Gl=a;null!==Gl;)u=(i=Gl).child,22===i.tag&&null!==i.memoizedState?bu(a):null!==u?(u.return=i,Gl=u):bu(a);for(;null!==o;)Gl=o,gu(o,t,n),o=o.sibling;Gl=a,Yl=l,Kl=s}yu(e)}else 0!=(8772&a.subtreeFlags)&&null!==o?(o.return=a,Gl=o):yu(e)}}function yu(e){for(;null!==Gl;){var t=Gl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Kl||eu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Kl)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Wa(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&so(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}so(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(o(163))}Kl||512&t.flags&&tu(t)}catch(e){Ss(t,t.return,e)}}if(t===e){Gl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Gl=n;break}Gl=t.return}}function vu(e){for(;null!==Gl;){var t=Gl;if(t===e){Gl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Gl=n;break}Gl=t.return}}function bu(e){for(;null!==Gl;){var t=Gl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eu(4,t)}catch(e){Ss(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){Ss(t,a,e)}}var o=t.return;try{tu(t)}catch(e){Ss(t,o,e)}break;case 5:var i=t.return;try{tu(t)}catch(e){Ss(t,i,e)}}}catch(e){Ss(t,t.return,e)}if(t===e){Gl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Gl=l;break}Gl=t.return}}var wu,ku=Math.ceil,xu=w.ReactCurrentDispatcher,Su=w.ReactCurrentOwner,Au=w.ReactCurrentBatchConfig,Cu=0,Eu=null,_u=null,Pu=0,Ou=0,Tu=Aa(0),$u=0,Nu=null,zu=0,Mu=0,Lu=0,Ru=null,Du=null,Iu=0,Fu=1/0,ju=null,Bu=!1,Uu=null,Hu=null,Wu=!1,Vu=null,Yu=0,Ku=0,Qu=null,Gu=-1,qu=0;function Xu(){return 0!=(6&Cu)?Xe():-1!==Gu?Gu:Gu=Xe()}function Zu(e){return 0==(1&e.mode)?1:0!=(2&Cu)&&0!==Pu?Pu&-Pu:null!==Ha.transition?(0===qu&&(qu=ht()),qu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:qt(e.type)}function Ju(e,t,n){if(50<Ku)throw Ku=0,Qu=null,Error(o(185));var r=es(e,t);return null===r?null:(yt(r,t,n),0!=(2&Cu)&&r===Eu||(r===Eu&&(0==(2&Cu)&&(Mu|=t),4===$u&&is(r,Pu)),ns(r,n),1===t&&0===Cu&&0==(1&e.mode)&&(Fu=Xe()+500,Fa&&Ua())),r)}function es(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ts(e){return(null!==Eu||null!==eo)&&0!=(1&e.mode)&&0==(2&Cu)}function ns(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,o=e.pendingLanes;0<o;){var i=31-it(o),l=1<<i,u=a[i];-1===u?0!=(l&n)&&0==(l&r)||(a[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}(e,t);var r=dt(e,e===Eu?Pu:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fa=!0,Ba(e)}(ls.bind(null,e)):Ba(ls.bind(null,e)),ia((function(){0===Cu&&Ua()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ps(n,rs.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function rs(e,t){if(Gu=-1,qu=0,0!=(6&Cu))throw Error(o(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Eu?Pu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=hs(e,r);else{t=r;var a=Cu;Cu|=2;var i=ps();for(Eu===e&&Pu===t||(ju=null,Fu=Xe()+500,fs(e,t));;)try{ys();break}catch(t){ds(e,t)}Ga(),xu.current=i,Cu=a,null!==_u?t=0:(Eu=null,Pu=0,t=$u)}if(0!==t){if(2===t&&0!==(a=mt(e))&&(r=a,t=as(e,a)),1===t)throw n=Nu,fs(e,0),is(e,r),ns(e,Xe()),n;if(6===t)is(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],o=a.getSnapshot;a=a.value;try{if(!lr(o(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=hs(e,r))&&0!==(i=mt(e))&&(r=i,t=as(e,i)),1===t))throw n=Nu,fs(e,0),is(e,r),ns(e,Xe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(o(345));case 2:case 5:ws(e,Du,ju);break;case 3:if(is(e,r),(130023424&r)===r&&10<(t=Iu+500-Xe())){if(0!==dt(e,0))break;if(((a=e.suspendedLanes)&r)!==r){Xu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=ra(ws.bind(null,e,Du,ju),t);break}ws(e,Du,ju);break;case 4:if(is(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>a&&(a=l),r&=~i}if(r=a,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ku(r/1960))-r)){e.timeoutHandle=ra(ws.bind(null,e,Du,ju),r);break}ws(e,Du,ju);break;default:throw Error(o(329))}}}return ns(e,Xe()),e.callbackNode===n?rs.bind(null,e):null}function as(e,t){var n=Ru;return e.current.memoizedState.isDehydrated&&(fs(e,t).flags|=256),2!==(e=hs(e,t))&&(t=Du,Du=n,null!==t&&os(t)),e}function os(e){null===Du?Du=e:Du.push.apply(Du,e)}function is(e,t){for(t&=~Lu,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&Cu))throw Error(o(327));ks();var t=dt(e,0);if(0==(1&t))return ns(e,Xe()),null;var n=hs(e,t);if(0!==e.tag&&2===n){var r=mt(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Nu,fs(e,0),is(e,t),ns(e,Xe()),n;if(6===n)throw Error(o(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Du,ju),ns(e,Xe()),null}function us(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&(Fu=Xe()+500,Fa&&Ua())}}function ss(e){null!==Vu&&0===Vu.tag&&0==(6&Cu)&&ks();var t=Cu;Cu|=1;var n=Au.transition,r=bt;try{if(Au.transition=null,bt=1,e)return e()}finally{bt=r,Au.transition=n,0==(6&(Cu=t))&&Ua()}}function cs(){Ou=Tu.current,Ca(Tu)}function fs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,aa(n)),null!==_u)for(n=_u.return;null!==n;){var r=n;switch(To(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&za();break;case 3:ti(),Ca(Oa),Ca(Pa),li();break;case 5:ri(r);break;case 4:ti();break;case 13:case 19:Ca(ai);break;case 10:qa(r.type._context);break;case 22:case 23:cs()}n=n.return}if(Eu=e,_u=e=Ns(e.current,null),Pu=Ou=t,$u=0,Nu=null,Lu=Mu=zu=0,Du=Ru=null,null!==eo){for(t=0;t<eo.length;t++)if(null!==(r=(n=eo[t]).interleaved)){n.interleaved=null;var a=r.next,o=n.pending;if(null!==o){var i=o.next;o.next=a,r.next=i}n.pending=r}eo=null}return e}function ds(e,t){for(;;){var n=_u;try{if(Ga(),ui.current=nl,mi){for(var r=fi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}mi=!1}if(ci=0,pi=di=fi=null,hi=!1,gi=0,Su.current=null,null===n||null===n.return){$u=1,Nu=t,_u=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Pu,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var m=hl(l);if(null!==m){m.flags&=-257,gl(m,l,u,0,t),1&m.mode&&ml(i,c,t),s=c;var h=(t=m).updateQueue;if(null===h){var g=new Set;g.add(s),t.updateQueue=g}else h.add(s);break e}if(0==(1&t)){ml(i,c,t),ms();break e}s=Error(o(426))}else if(zo&&1&u.mode){var y=hl(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gl(y,l,u,0,t),Uo(s);break e}}i=s,4!==$u&&($u=2),null===Ru?Ru=[i]:Ru.push(i),s=il(s,u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,lo(u,dl(0,s,t));break e;case 1:i=s;var v=u.type,b=u.stateNode;if(0==(128&u.flags)&&("function"==typeof v.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hu||!Hu.has(b)))){u.flags|=65536,t&=-t,u.lanes|=t,lo(u,pl(u,i,t));break e}}u=u.return}while(null!==u)}bs(n)}catch(e){t=e,_u===n&&null!==n&&(_u=n=n.return);continue}break}}function ps(){var e=xu.current;return xu.current=nl,null===e?nl:e}function ms(){0!==$u&&3!==$u&&2!==$u||($u=4),null===Eu||0==(268435455&zu)&&0==(268435455&Mu)||is(Eu,Pu)}function hs(e,t){var n=Cu;Cu|=2;var r=ps();for(Eu===e&&Pu===t||(ju=null,fs(e,t));;)try{gs();break}catch(t){ds(e,t)}if(Ga(),Cu=n,xu.current=r,null!==_u)throw Error(o(261));return Eu=null,Pu=0,$u}function gs(){for(;null!==_u;)vs(_u)}function ys(){for(;null!==_u&&!Ge();)vs(_u)}function vs(e){var t=wu(e.alternate,e,Ou);e.memoizedProps=e.pendingProps,null===t?bs(e):_u=t,Su.current=null}function bs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=bl(n,t,Ou)))return void(_u=n)}else{if(null!==(n=Vl(n,t)))return n.flags&=32767,void(_u=n);if(null===e)return $u=6,void(_u=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(_u=t);_u=t=e}while(null!==t);0===$u&&($u=5)}function ws(e,t,n){var r=bt,a=Au.transition;try{Au.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Vu);if(0!=(6&Cu))throw Error(o(327));n=e.finishedWork;var a=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),o=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~o}}(e,i),e===Eu&&(_u=Eu=null,Pu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wu||(Wu=!0,Ps(tt,(function(){return ks(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Au.transition,Au.transition=null;var l=bt;bt=1;var u=Cu;Cu|=4,Su.current=null,function(e,t){if(ea=Wt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==a&&3!==d.nodeType||(u=l+a),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=l),p===i&&++f===r&&(s=l),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(ta={focusedElem:e,selectionRange:n},Wt=!1,Gl=t;null!==Gl;)if(e=(t=Gl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Gl=e;else for(;null!==Gl;){t=Gl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,y=h.memoizedState,v=t.stateNode,b=v.getSnapshotBeforeUpdate(t.elementType===t.type?g:Wa(t.type,g),y);v.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;if(1===w.nodeType)w.textContent="";else if(9===w.nodeType){var k=w.body;null!=k&&(k.textContent="")}break;default:throw Error(o(163))}}catch(e){Ss(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Gl=e;break}Gl=t.return}h=Zl,Zl=!1}(e,n),pu(n,e),mr(ta),Wt=!!ea,ta=ea=null,e.current=n,hu(n,e,a),qe(),Cu=u,bt=l,Au.transition=i}else e.current=n;if(Wu&&(Wu=!1,Vu=e,Yu=a),0===(i=e.pendingLanes)&&(Hu=null),function(e){if(ot&&"function"==typeof ot.onCommitFiberRoot)try{ot.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ns(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r(t[n]);if(Bu)throw Bu=!1,e=Uu,Uu=null,e;0!=(1&Yu)&&0!==e.tag&&ks(),0!=(1&(i=e.pendingLanes))?e===Qu?Ku++:(Ku=0,Qu=e):Ku=0,Ua()}(e,t,n,r)}finally{Au.transition=a,bt=r}return null}function ks(){if(null!==Vu){var e=wt(Yu),t=Au.transition,n=bt;try{if(Au.transition=null,bt=16>e?16:e,null===Vu)var r=!1;else{if(e=Vu,Vu=null,Yu=0,0!=(6&Cu))throw Error(o(331));var a=Cu;for(Cu|=4,Gl=e.current;null!==Gl;){var i=Gl,l=i.child;if(0!=(16&Gl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Gl=c;null!==Gl;){var f=Gl;switch(f.tag){case 0:case 11:case 15:Jl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Gl=d;else for(;null!==Gl;){var p=(f=Gl).sibling,m=f.return;if(nu(f),f===c){Gl=null;break}if(null!==p){p.return=m,Gl=p;break}Gl=m}}}var h=i.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var y=g.sibling;g.sibling=null,g=y}while(null!==g)}}Gl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Gl=l;else e:for(;null!==Gl;){if(0!=(2048&(i=Gl).flags))switch(i.tag){case 0:case 11:case 15:Jl(9,i,i.return)}var v=i.sibling;if(null!==v){v.return=i.return,Gl=v;break e}Gl=i.return}}var b=e.current;for(Gl=b;null!==Gl;){var w=(l=Gl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Gl=w;else e:for(l=b;null!==Gl;){if(0!=(2048&(u=Gl).flags))try{switch(u.tag){case 0:case 11:case 15:eu(9,u)}}catch(e){Ss(u,u.return,e)}if(u===l){Gl=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Gl=k;break e}Gl=u.return}}if(Cu=a,Ua(),ot&&"function"==typeof ot.onPostCommitFiberRoot)try{ot.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,Au.transition=t}}return!1}function xs(e,t,n){oo(e,t=dl(0,t=il(n,t),1)),t=Xu(),null!==(e=es(e,1))&&(yt(e,1,t),ns(e,t))}function Ss(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){oo(t,e=pl(t,e=il(n,e),1)),e=Xu(),null!==(t=es(t,1))&&(yt(t,1,e),ns(t,e));break}}t=t.return}}function As(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Xu(),e.pingedLanes|=e.suspendedLanes&n,Eu===e&&(Pu&n)===n&&(4===$u||3===$u&&(130023424&Pu)===Pu&&500>Xe()-Iu?fs(e,0):Lu|=n),ns(e,t)}function Cs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Xu();null!==(e=es(e,t))&&(yt(e,t,n),ns(e,n))}function Es(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function _s(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(o(314))}null!==r&&r.delete(t),Cs(e,n)}function Ps(e,t){return Ke(e,t)}function Os(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ts(e,t,n,r){return new Os(e,t,n,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ns(e,t){var n=e.alternate;return null===n?((n=Ts(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function zs(e,t,n,r,a,i){var l=2;if(r=e,"function"==typeof e)$s(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Ms(n.children,a,i,t);case A:l=8,a|=8;break;case C:return(e=Ts(12,n,t,2|a)).elementType=C,e.lanes=i,e;case O:return(e=Ts(13,n,t,a)).elementType=O,e.lanes=i,e;case T:return(e=Ts(19,n,t,a)).elementType=T,e.lanes=i,e;case z:return Ls(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:l=10;break e;case _:l=9;break e;case P:l=11;break e;case $:l=14;break e;case N:l=16,r=null;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=Ts(l,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Ms(e,t,n,r){return(e=Ts(7,e,r,t)).lanes=n,e}function Ls(e,t,n,r){return(e=Ts(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={},e}function Rs(e,t,n){return(e=Ts(6,e,null,t)).lanes=n,e}function Ds(e,t,n){return(t=Ts(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Is(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Fs(e,t,n,r,a,o,i,l,u){return e=new Is(e,t,n,l,u),1===t?(t=1,!0===o&&(t|=8)):t=0,o=Ts(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},no(o),e}function js(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bs(e){if(!e)return _a;e:{if(Ue(e=e._reactInternals)!==e||1!==e.tag)throw Error(o(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Na(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(o(171))}if(1===e.tag){var n=e.type;if(Na(n))return La(e,n,t)}return t}function Us(e,t,n,r,a,o,i,l,u){return(e=Fs(n,r,!0,e,0,o,0,l,u)).context=Bs(null),n=e.current,(o=ao(r=Xu(),a=Zu(n))).callback=null!=t?t:null,oo(n,o),e.current.lanes=a,yt(e,a,r),ns(e,r),e}function Hs(e,t,n,r){var a=t.current,o=Xu(),i=Zu(a);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),oo(a,t),null!==(e=Ju(a,i,o))&&io(e,a,i),i}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ys(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}wu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oa.current)kl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return kl=!1,function(e,t,n){switch(t.tag){case 3:$l(t),Bo();break;case 5:ni(t);break;case 1:Na(t.type)&&Ra(t);break;case 4:ei(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;Ea(Va,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Ea(ai,1&ai.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Rl(e,t,n):(Ea(ai,1&ai.current),null!==(e=Wl(e,t,n))?e.sibling:null);Ea(ai,1&ai.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),Ea(ai,ai.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Wl(e,t,n)}(e,t,n);kl=0!=(131072&e.flags)}else kl=!1,zo&&0!=(1048576&t.flags)&&Po(t,ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=$a(t,Pa.current);Za(t,n),a=wi(null,t,r,e,a,n);var i=ki();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Na(r)?(i=!0,Ra(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,no(t),a.updater=po,t.stateNode=a,a._reactInternals=t,yo(t,r,e,n),t=Tl(null,t,r,!0,i,n)):(t.tag=0,zo&&i&&Oo(t),xl(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===$)return 14}return 2}(r),e=Wa(r,e),a){case 0:t=Pl(null,t,r,e,n);break e;case 1:t=Ol(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=Al(null,t,r,Wa(r.type,e),n);break e}throw Error(o(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,Pl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ol(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 3:e:{if($l(t),null===e)throw Error(o(387));r=t.pendingProps,a=(i=t.memoizedState).element,ro(e,t),uo(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Nl(e,t,r,n,a=Error(o(423)));break e}if(r!==a){t=Nl(e,t,r,n,a=Error(o(424)));break e}for(No=sa(t.stateNode.containerInfo.firstChild),$o=t,zo=!0,Mo=null,n=Qo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Bo(),r===a){t=Wl(e,t,n);break e}xl(e,t,r,n)}t=t.child}return t;case 5:return ni(t),null===e&&Io(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,na(r,a)?l=null:null!==i&&na(r,i)&&(t.flags|=32),_l(e,t),xl(e,t,l,n),t.child;case 6:return null===e&&Io(t),null;case 13:return Rl(e,t,n);case 4:return ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ko(t,null,r,n):xl(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,Sl(e,t,r,a=t.elementType===r?a:Wa(r,a),n);case 7:return xl(e,t,t.pendingProps,n),t.child;case 8:case 12:return xl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,l=a.value,Ea(Va,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===a.children&&!Oa.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=ao(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),Xa(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(o(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Xa(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}xl(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Za(t,n),r=r(a=Ja(a)),t.flags|=1,xl(e,t,r,n),t.child;case 14:return a=Wa(r=t.type,t.pendingProps),Al(e,t,r,a=Wa(r.type,a),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Wa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Na(r)?(e=!0,Ra(t)):e=!1,Za(t,n),ho(t,r,a),yo(t,r,a,n),Tl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return El(e,t,n)}throw Error(o(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function qs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function Js(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o;if("function"==typeof a){var l=a;a=function(){var e=Ws(i);l.call(e)}}Hs(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var o=r;r=function(){var e=Ws(i);o.call(e)}}var i=Us(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=i,e[ma]=i.current,Ur(8===e.nodeType?e.parentNode:e),ss(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var l=r;r=function(){var e=Ws(u);l.call(e)}}var u=Fs(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=u,e[ma]=u.current,Ur(8===e.nodeType?e.parentNode:e),ss((function(){Hs(t,u,n,r)})),u}(n,t,e,a,r);return Ws(i)}Gs.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Hs(e,t,null,null)},Gs.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ss((function(){Hs(null,e,null,null)})),t[ma]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=At();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&Dt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(vt(t,1|n),ns(t,Xe()),0==(6&Cu)&&(Fu=Xe()+500,Ua()))}break;case 13:var r=Xu();ss((function(){return Ju(e,1,r)})),Ys(e,1)}},xt=function(e){13===e.tag&&(Ju(e,134217728,Xu()),Ys(e,134217728))},St=function(e){if(13===e.tag){var t=Xu(),n=Zu(e);Ju(e,n,t),Ys(e,n)}},At=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ka(r);if(!a)throw Error(o(90));K(r),Z(r,a)}}}break;case"textarea":oe(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=us,Oe=ss;var ec={usingClientEntryPoint:!1,Events:[ba,wa,ka,Ee,_e,us]},tc={findFiberByHostInstance:va,bundleType:0,version:"18.1.0",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.1.0-next-22edb9f77-20220426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{at=rc.inject(nc),ot=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!qs(t))throw Error(o(200));return js(e,t,null,n)},t.createRoot=function(e,t){if(!qs(e))throw Error(o(299));var n=!1,r="",a=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Fs(e,1,!1,null,0,n,0,r,a),e[ma]=t.current,Ur(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return ss(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(o(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!qs(e))throw Error(o(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",l=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Us(t,null,e,1,null!=n?n:null,a,0,i,l),e[ma]=t.current,Ur(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Gs(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(o(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(o(40));return!!e._reactRootContainer&&(ss((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[ma]=null}))})),!0)},t.unstable_batchedUpdates=us,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(o(200));if(null==e||void 0===e._reactInternals)throw Error(o(38));return Js(e,t,n,!1,r)},t.version="18.1.0-next-22edb9f77-20220426"},745:(e,t,n)=>{"use strict";var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{"use strict";var r=n(294),a=Symbol.for("react.element"),o=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:a,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),o=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,h(w,y.prototype),w.isPureReactComponent=!0;var k=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},A={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var a,o={},i=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,a)&&!A.hasOwnProperty(a)&&(o[a]=t[a]);var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(a in u=e.defaultProps)void 0===o[a]&&(o[a]=u[a]);return{$$typeof:n,type:e,key:i,ref:l,props:o,_owner:S.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,a,o,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===o?"."+P(u,0):o,k(i)?(a="",null!=e&&(a=e.replace(_,"$&/")+"/"),O(i,t,a,"",(function(e){return e}))):null!=i&&(E(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,o=""===o?".":o+":",k(e))for(var s=0;s<e.length;s++){var c=o+P(l=e[s],s);u+=O(l,t,a,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=O(l=l.value,t,a,c=o+P(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return O(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function $(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},z={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:z,ReactCurrentOwner:S};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=a,t.Profiler=i,t.PureComponent=b,t.StrictMode=o,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=h({},e.props),o=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)x.call(t,s)&&!A.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}return{$$typeof:n,type:e.type,key:o,ref:i,props:a,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:$}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.1.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<o(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>o(u,n))s<a&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<a&&0>o(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,z(x);else{var t=r(c);null!==t&&M(k,t.startTime-e)}}function x(e,n){h=!1,g&&(g=!1,v(E),E=-1),m=!0;var o=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!O());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&a(s),w(n)}else a(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&M(k,f.startTime-n),u=!1}return u}finally{d=null,p=o,m=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,A=!1,C=null,E=-1,_=5,P=-1;function O(){return!(t.unstable_now()-P<_)}function T(){if(null!==C){var e=t.unstable_now();P=e;var n=!0;try{n=C(!0,e)}finally{n?S():(A=!1,C=null)}}else A=!1}if("function"==typeof b)S=function(){b(T)};else if("undefined"!=typeof MessageChannel){var $=new MessageChannel,N=$.port2;$.port1.onmessage=T,S=function(){N.postMessage(null)}}else S=function(){y(T,0)};function z(e){C=e,A||(A=!0,S())}function M(e,n){E=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,z(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,o){var i=t.unstable_now();switch(o="object"==typeof o&&null!==o&&"number"==typeof(o=o.delay)&&0<o?i+o:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:o,expirationTime:l=o+l,sortIndex:-1},o>i?(e.sortIndex=o,n(c,e),null===r(s)&&e===r(c)&&(g?(v(E),E=-1):g=!0,M(k,o-i))):(e.sortIndex=l,n(s,e),h||m||(h=!0,z(x))),e},t.unstable_shouldYield=O,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=o[s]||0,f="".concat(s," ").concat(c);o[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=a(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:m,references:1})}i.push(f)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var l=n(o[i]);t[l].references--}for(var u=r(e,a),s=0;s<o.length;s++){var c=n(o[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},480:()=>{}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={id:e,exports:{}};return n[e].call(o.exports,o,o.exports,a),o.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nc=void 0,(()=>{"use strict";var e=a(294),t=a.t(e,2),n=a(745),r=a(379),o=a.n(r),i=a(795),l=a.n(i),u=a(569),s=a.n(u),c=a(565),f=a.n(c),d=a(216),p=a.n(d),m=a(589),h=a.n(m),g=a(312),y={};function v(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}function b(){return b=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b.apply(this,arguments)}function w(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=w(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}y.styleTagTransform=h(),y.setAttributes=f(),y.insert=s().bind(null,"head"),y.domAPI=l(),y.insertStyleElement=p(),o()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;const k=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=w(e))&&(r&&(r+=" "),r+=t);return r};function x(e,t,n){const r={};return Object.keys(e).forEach((a=>{r[a]=e[a].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}var S=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),A=Math.abs,C=String.fromCharCode,E=Object.assign;function _(e){return e.trim()}function P(e,t,n){return e.replace(t,n)}function O(e,t){return e.indexOf(t)}function T(e,t){return 0|e.charCodeAt(t)}function $(e,t,n){return e.slice(t,n)}function N(e){return e.length}function z(e){return e.length}function M(e,t){return t.push(e),e}var L=1,R=1,D=0,I=0,F=0,j="";function B(e,t,n,r,a,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:o,line:L,column:R,length:i,return:""}}function U(e,t){return E(B("",null,null,"",null,null,0),e,{length:-e.length},t)}function H(){return F=I>0?T(j,--I):0,R--,10===F&&(R=1,L--),F}function W(){return F=I<D?T(j,I++):0,R++,10===F&&(R=1,L++),F}function V(){return T(j,I)}function Y(){return I}function K(e,t){return $(j,e,t)}function Q(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function G(e){return L=R=1,D=N(j=e),I=0,[]}function q(e){return j="",e}function X(e){return _(K(I-1,ee(91===e?e+2:40===e?e+1:e)))}function Z(e){for(;(F=V())&&F<33;)W();return Q(e)>2||Q(F)>3?"":" "}function J(e,t){for(;--t&&W()&&!(F<48||F>102||F>57&&F<65||F>70&&F<97););return K(e,Y()+(t<6&&32==V()&&32==W()))}function ee(e){for(;W();)switch(F){case e:return I;case 34:case 39:34!==e&&39!==e&&ee(F);break;case 40:41===e&&ee(e);break;case 92:W()}return I}function te(e,t){for(;W()&&e+F!==57&&(e+F!==84||47!==V()););return"/*"+K(t,I-1)+"*"+C(47===e?e:W())}function ne(e){for(;!Q(V());)W();return K(e,I)}var re="-ms-",ae="-webkit-",oe="comm",ie="rule",le="decl",ue="@keyframes";function se(e,t){for(var n="",r=z(e),a=0;a<r;a++)n+=t(e[a],a,e,t)||"";return n}function ce(e,t,n,r){switch(e.type){case"@import":case le:return e.return=e.return||e.value;case oe:return"";case ue:return e.return=e.value+"{"+se(e.children,r)+"}";case ie:e.value=e.props.join(",")}return N(n=se(e.children,r))?e.return=e.value+"{"+n+"}":""}function fe(e){return q(de("",null,null,null,[""],e=G(e),0,[0],e))}function de(e,t,n,r,a,o,i,l,u){for(var s=0,c=0,f=i,d=0,p=0,m=0,h=1,g=1,y=1,v=0,b="",w=a,k=o,x=r,S=b;g;)switch(m=v,v=W()){case 40:if(108!=m&&58==T(S,f-1)){-1!=O(S+=P(X(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:S+=X(v);break;case 9:case 10:case 13:case 32:S+=Z(m);break;case 92:S+=J(Y()-1,7);continue;case 47:switch(V()){case 42:case 47:M(me(te(W(),Y()),t,n),u);break;default:S+="/"}break;case 123*h:l[s++]=N(S)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:p>0&&N(S)-f&&M(p>32?he(S+";",r,n,f-1):he(P(S," ","")+";",r,n,f-2),u);break;case 59:S+=";";default:if(M(x=pe(S,t,n,s,c,a,l,b,w=[],k=[],f),o),123===v)if(0===c)de(S,t,x,x,w,o,f,l,k);else switch(99===d&&110===T(S,3)?100:d){case 100:case 109:case 115:de(e,x,x,r&&M(pe(e,x,x,0,0,a,l,b,a,w=[],f),k),a,k,f,l,r?w:k);break;default:de(S,x,x,x,[""],k,0,l,k)}}s=c=p=0,h=y=1,b=S="",f=i;break;case 58:f=1+N(S),p=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==H())continue;switch(S+=C(v),v*h){case 38:y=c>0?1:(S+="\f",-1);break;case 44:l[s++]=(N(S)-1)*y,y=1;break;case 64:45===V()&&(S+=X(W())),d=V(),c=f=N(b=S+=ne(Y())),v++;break;case 45:45===m&&2==N(S)&&(h=0)}}return o}function pe(e,t,n,r,a,o,i,l,u,s,c){for(var f=a-1,d=0===a?o:[""],p=z(d),m=0,h=0,g=0;m<r;++m)for(var y=0,v=$(e,f+1,f=A(h=i[m])),b=e;y<p;++y)(b=_(h>0?d[y]+" "+v:P(v,/&\f/g,d[y])))&&(u[g++]=b);return B(e,t,n,0===a?ie:l,u,s,c)}function me(e,t,n){return B(e,t,n,oe,C(F),$(e,2,-2),0)}function he(e,t,n,r){return B(e,t,n,le,$(e,0,r),$(e,r+1,-1),r)}var ge=function(e,t,n){for(var r=0,a=0;r=a,a=V(),38===r&&12===a&&(t[n]=1),!Q(a);)W();return K(e,I)},ye=new WeakMap,ve=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ye.get(n))&&!r){ye.set(e,!0);for(var a=[],o=function(e,t){return q(function(e,t){var n=-1,r=44;do{switch(Q(r)){case 0:38===r&&12===V()&&(t[n]=1),e[n]+=ge(I-1,t,n);break;case 2:e[n]+=X(r);break;case 4:if(44===r){e[++n]=58===V()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=C(r)}}while(r=W());return e}(G(e),t))}(t,a),i=n.props,l=0,u=0;l<o.length;l++)for(var s=0;s<i.length;s++,u++)e.props[u]=a[l]?o[l].replace(/&\f/g,i[s]):i[s]+" "+o[l]}}},be=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function we(e,t){switch(function(e,t){return 45^T(e,0)?(((t<<2^T(e,0))<<2^T(e,1))<<2^T(e,2))<<2^T(e,3):0}(e,t)){case 5103:return"-webkit-print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ae+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ae+e+"-moz-"+e+re+e+e;case 6828:case 4268:return ae+e+re+e+e;case 6165:return ae+e+re+"flex-"+e+e;case 5187:return ae+e+P(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return ae+e+re+"flex-item-"+P(e,/flex-|-self/,"")+e;case 4675:return ae+e+re+"flex-line-pack"+P(e,/align-content|flex-|-self/,"")+e;case 5548:return ae+e+re+P(e,"shrink","negative")+e;case 5292:return ae+e+re+P(e,"basis","preferred-size")+e;case 6060:return"-webkit-box-"+P(e,"-grow","")+ae+e+re+P(e,"grow","positive")+e;case 4554:return ae+P(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return P(P(P(e,/(zoom-|grab)/,"-webkit-$1"),/(image-set)/,"-webkit-$1"),e,"")+e;case 5495:case 3959:return P(e,/(image-set\([^]*)/,"-webkit-$1$`$1");case 4968:return P(P(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+ae+e+e;case 4095:case 3583:case 4068:case 2532:return P(e,/(.+)-inline(.+)/,"-webkit-$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(N(e)-1-t>6)switch(T(e,t+1)){case 109:if(45!==T(e,t+4))break;case 102:return P(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1-moz-"+(108==T(e,t+3)?"$3":"$2-$3"))+e;case 115:return~O(e,"stretch")?we(P(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==T(e,t+1))break;case 6444:switch(T(e,N(e)-3-(~O(e,"!important")&&10))){case 107:return P(e,":",":-webkit-")+e;case 101:return P(e,/(.+:)([^;!]+)(;|!.+)?/,"$1-webkit-"+(45===T(e,14)?"inline-":"")+"box$3$1-webkit-$2$3$1-ms-$2box$3")+e}break;case 5936:switch(T(e,t+11)){case 114:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ae+e+re+P(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ae+e+re+e+e}return e}var ke=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case le:e.return=we(e.value,e.length);break;case ue:return se([U(e,{value:P(e.value,"@","@-webkit-")})],r);case ie:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return se([U(e,{props:[P(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return se([U(e,{props:[P(t,/:(plac\w+)/,":-webkit-input-$1")]}),U(e,{props:[P(t,/:(plac\w+)/,":-moz-$1")]}),U(e,{props:[P(t,/:(plac\w+)/,"-ms-input-$1")]})],r)}return""}))}}];const xe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,a,o=e.stylisPlugins||ke,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var u,s,c,f,d=[ce,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(s=[ve,be].concat(o,d),c=z(s),function(e,t,n,r){for(var a="",o=0;o<c;o++)a+=s[o](e,t,n,r)||"";return a});a=function(e,t,n,r){u=n,se(fe(e?e+"{"+t.styles+"}":t.styles),p),r&&(m.inserted[t.name]=!0)};var m={key:t,sheet:new S({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:a};return m.sheet.hydrate(l),m};a(679);const Se=function(e){for(var t,n=0,r=0,a=e.length;a>=4;++r,a-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(a){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Ae={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},Ce=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Ee=/[A-Z]|^ms/g,_e=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Pe=function(e){return 45===e.charCodeAt(1)},Oe=function(e){return null!=e&&"boolean"!=typeof e},Te=Ce((function(e){return Pe(e)?e:e.replace(Ee,"-$&").toLowerCase()})),$e=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(_e,(function(e,t,n){return ze={name:t,styles:n,next:ze},t}))}return 1===Ae[e]||Pe(e)||"number"!=typeof t||0===t?t:t+"px"};function Ne(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return ze={name:n.name,styles:n.styles,next:ze},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)ze={name:r.name,styles:r.styles,next:ze},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var a=0;a<n.length;a++)r+=Ne(e,t,n[a])+";";else for(var o in n){var i=n[o];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=o+"{"+t[i]+"}":Oe(i)&&(r+=Te(o)+":"+$e(o,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Ne(e,t,i);switch(o){case"animation":case"animationName":r+=Te(o)+":"+l+";";break;default:r+=o+"{"+l+"}"}}else for(var u=0;u<i.length;u++)Oe(i[u])&&(r+=Te(o)+":"+$e(o,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=ze,o=n(e);return ze=a,Ne(e,t,o)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var ze,Me=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Le=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";ze=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=Ne(n,t,o)):a+=o[0];for(var i=1;i<e.length;i++)a+=Ne(n,t,e[i]),r&&(a+=o[i]);Me.lastIndex=0;for(var l,u="";null!==(l=Me.exec(a));)u+="-"+l[1];return{name:Se(a)+u,styles:a,next:ze}},Re=!!t.useInsertionEffect&&t.useInsertionEffect,De=Re||function(e){return e()};function Ie(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Le(t)}Re||e.useLayoutEffect;var Fe=function(){var e=Ie.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};function je(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function Be(e){if("string"!=typeof e)throw new Error(je(7));return e.charAt(0).toUpperCase()+e.slice(1)}const Ue=Be;function He(e,t){const n=b({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=b({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const a=e[r]||{},o=t[r];n[r]={},o&&Object.keys(o)?a&&Object.keys(a)?(n[r]=b({},o),Object.keys(a).forEach((e=>{n[r][e]=He(a[e],o[e])}))):n[r]=o:n[r]=a}else void 0===n[r]&&(n[r]=e[r])})),n}function We(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?He(t.components[n].defaultProps,r):r}function Ve(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function Ye(e){if(!Ve(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=Ye(e[n])})),t}function Ke(e,t,n={clone:!0}){const r=n.clone?b({},e):e;return Ve(e)&&Ve(t)&&Object.keys(t).forEach((a=>{"__proto__"!==a&&(Ve(t[a])&&a in e&&Ve(e[a])?r[a]=Ke(e[a],t[a],n):n.clone?r[a]=Ve(t[a])?Ye(t[a]):t[a]:r[a]=t[a])})),r}const Qe=["values","unit","step"];const Ge={borderRadius:4},qe={xs:0,sm:600,md:900,lg:1200,xl:1536},Xe={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${qe[e]}px)`};function Ze(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||Xe;return t.reduce(((r,a,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||Xe;return Object.keys(t).reduce(((r,a)=>{if(-1!==Object.keys(e.values||qe).indexOf(a))r[e.up(a)]=n(t[a],a);else{const e=a;r[e]=t[e]}return r}),{})}return n(t)}function Je(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function et(e,t,n,r=n){let a;return a="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Je(e,n)||r,t&&(a=t(a,r,e)),a}const tt=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:a}=e,o=e=>{if(null==e[t])return null;const o=e[t],i=Je(e.theme,r)||{};return Ze(e,o,(e=>{let r=et(i,a,e);return e===r&&"string"==typeof e&&(r=et(i,a,`${t}${"default"===e?"":Be(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},nt=function(e,t){return t?Ke(e,t,{clone:!1}):e},rt={m:"margin",p:"padding"},at={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},ot={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},it=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!ot[e])return[e];e=ot[e]}const[t,n]=e.split(""),r=rt[t],a=at[n]||"";return Array.isArray(a)?a.map((e=>r+e)):[r+a]})(e)),t[e])}(),lt=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],ut=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],st=[...lt,...ut];function ct(e,t,n,r){var a;const o=null!=(a=Je(e,t,!1))?a:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function ft(e){return ct(e,"spacing",8)}function dt(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function pt(e,t){const n=ft(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const a=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=dt(t,n),e)),{})}(it(n),r);return Ze(e,e[n],a)}(e,t,r,n))).reduce(nt,{})}function mt(e){return pt(e,lt)}function ht(e){return pt(e,ut)}function gt(e){return pt(e,st)}mt.propTypes={},mt.filterProps=lt,ht.propTypes={},ht.filterProps=ut,gt.propTypes={},gt.filterProps=st;const yt=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?nt(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function vt(e){return"number"!=typeof e?e:`${e}px solid`}const bt=tt({prop:"border",themeKey:"borders",transform:vt}),wt=tt({prop:"borderTop",themeKey:"borders",transform:vt}),kt=tt({prop:"borderRight",themeKey:"borders",transform:vt}),xt=tt({prop:"borderBottom",themeKey:"borders",transform:vt}),St=tt({prop:"borderLeft",themeKey:"borders",transform:vt}),At=tt({prop:"borderColor",themeKey:"palette"}),Ct=tt({prop:"borderTopColor",themeKey:"palette"}),Et=tt({prop:"borderRightColor",themeKey:"palette"}),_t=tt({prop:"borderBottomColor",themeKey:"palette"}),Pt=tt({prop:"borderLeftColor",themeKey:"palette"}),Ot=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=ct(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:dt(t,e)});return Ze(e,e.borderRadius,n)}return null};Ot.propTypes={},Ot.filterProps=["borderRadius"],yt(bt,wt,kt,xt,St,At,Ct,Et,_t,Pt,Ot);const Tt=e=>{if(void 0!==e.gap&&null!==e.gap){const t=ct(e.theme,"spacing",8),n=e=>({gap:dt(t,e)});return Ze(e,e.gap,n)}return null};Tt.propTypes={},Tt.filterProps=["gap"];const $t=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=ct(e.theme,"spacing",8),n=e=>({columnGap:dt(t,e)});return Ze(e,e.columnGap,n)}return null};$t.propTypes={},$t.filterProps=["columnGap"];const Nt=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=ct(e.theme,"spacing",8),n=e=>({rowGap:dt(t,e)});return Ze(e,e.rowGap,n)}return null};function zt(e,t){return"grey"===t?t:e}function Mt(e){return e<=1&&0!==e?100*e+"%":e}Nt.propTypes={},Nt.filterProps=["rowGap"],yt(Tt,$t,Nt,tt({prop:"gridColumn"}),tt({prop:"gridRow"}),tt({prop:"gridAutoFlow"}),tt({prop:"gridAutoColumns"}),tt({prop:"gridAutoRows"}),tt({prop:"gridTemplateColumns"}),tt({prop:"gridTemplateRows"}),tt({prop:"gridTemplateAreas"}),tt({prop:"gridArea"})),yt(tt({prop:"color",themeKey:"palette",transform:zt}),tt({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:zt}),tt({prop:"backgroundColor",themeKey:"palette",transform:zt}));const Lt=tt({prop:"width",transform:Mt}),Rt=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,a;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(a=r.values)?void 0:a[t])||qe[t]||Mt(t)}};return Ze(e,e.maxWidth,t)}return null};Rt.filterProps=["maxWidth"];const Dt=tt({prop:"minWidth",transform:Mt}),It=tt({prop:"height",transform:Mt}),Ft=tt({prop:"maxHeight",transform:Mt}),jt=tt({prop:"minHeight",transform:Mt}),Bt=(tt({prop:"size",cssProperty:"width",transform:Mt}),tt({prop:"size",cssProperty:"height",transform:Mt}),yt(Lt,Rt,Dt,It,Ft,jt,tt({prop:"boxSizing"})),{border:{themeKey:"borders",transform:vt},borderTop:{themeKey:"borders",transform:vt},borderRight:{themeKey:"borders",transform:vt},borderBottom:{themeKey:"borders",transform:vt},borderLeft:{themeKey:"borders",transform:vt},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Ot},color:{themeKey:"palette",transform:zt},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:zt},backgroundColor:{themeKey:"palette",transform:zt},p:{style:ht},pt:{style:ht},pr:{style:ht},pb:{style:ht},pl:{style:ht},px:{style:ht},py:{style:ht},padding:{style:ht},paddingTop:{style:ht},paddingRight:{style:ht},paddingBottom:{style:ht},paddingLeft:{style:ht},paddingX:{style:ht},paddingY:{style:ht},paddingInline:{style:ht},paddingInlineStart:{style:ht},paddingInlineEnd:{style:ht},paddingBlock:{style:ht},paddingBlockStart:{style:ht},paddingBlockEnd:{style:ht},m:{style:mt},mt:{style:mt},mr:{style:mt},mb:{style:mt},ml:{style:mt},mx:{style:mt},my:{style:mt},margin:{style:mt},marginTop:{style:mt},marginRight:{style:mt},marginBottom:{style:mt},marginLeft:{style:mt},marginX:{style:mt},marginY:{style:mt},marginInline:{style:mt},marginInlineStart:{style:mt},marginInlineEnd:{style:mt},marginBlock:{style:mt},marginBlockStart:{style:mt},marginBlockEnd:{style:mt},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Tt},rowGap:{style:Nt},columnGap:{style:$t},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:Mt},maxWidth:{style:Rt},minWidth:{transform:Mt},height:{transform:Mt},maxHeight:{transform:Mt},minHeight:{transform:Mt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),Ut=function(){function e(e,t,n,r){const a={[e]:t,theme:n},o=r[e];if(!o)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:u,style:s}=o;if(null==t)return null;const c=Je(n,l)||{};return s?s(a):Ze(a,t,(t=>{let n=et(c,u,t);return t===n&&"string"==typeof t&&(n=et(c,u,`${e}${"default"===t?"":Be(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){var r;const{sx:a,theme:o={}}=n||{};if(!a)return null;const i=null!=(r=o.unstable_sxConfig)?r:Bt;function l(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const a=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),l=Object.keys(a);let u=a;return Object.keys(r).forEach((n=>{const a="function"==typeof(l=r[n])?l(o):l;var l;if(null!=a)if("object"==typeof a)if(i[n])u=nt(u,e(n,a,o,i));else{const e=Ze({theme:o},a,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,a)?u=nt(u,e):u[n]=t({sx:a,theme:o})}else u=nt(u,e(n,a,o,i))})),s=u,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),s);var s}return Array.isArray(a)?a.map(l):l(a)}}();Ut.filterProps=["sx"];const Ht=Ut,Wt=["breakpoints","palette","spacing","shape"],Vt=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:a,shape:o={}}=e,i=v(e,Wt),l=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,a=v(e,Qe),o=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>b({},e,{[t.key]:t.val})),{})})(t),i=Object.keys(o);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function s(e,a){const o=i.indexOf(a);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[i[o]]?t[i[o]]:a)-r/100}${n})`}return b({keys:i,values:o,up:l,down:u,between:s,only:function(e){return i.indexOf(e)+1<i.length?s(e,i[i.indexOf(e)+1]):l(e)},not:function(e){const t=i.indexOf(e);return 0===t?l(i[1]):t===i.length-1?u(i[t]):s(e,i[i.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},a)}(n),u=function(e=8){if(e.mui)return e;const t=ft({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(a);let s=Ke({breakpoints:l,direction:"ltr",components:{},palette:b({mode:"light"},r),spacing:u,shape:b({},Ge,o)},i);return s=t.reduce(((e,t)=>Ke(e,t)),s),s.unstable_sxConfig=b({},Bt,null==i?void 0:i.unstable_sxConfig),s.unstable_sx=function(e){return Ht({sx:e,theme:this})},s},Yt=e.createContext(null),Kt=Vt(),Qt=function(t=Kt){return function(t=null){const n=e.useContext(Yt);return n&&(r=n,0!==Object.keys(r).length)?n:t;var r}(t)};function Gt(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function qt(e){if(e.type)return e;if("#"===e.charAt(0))return qt(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(je(9,e));let r,a=e.substring(t+1,e.length-1);if("color"===n){if(a=a.split(" "),r=a.shift(),4===a.length&&"/"===a[3].charAt(0)&&(a[3]=a[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(je(10,r))}else a=a.split(",");return a=a.map((e=>parseFloat(e))),{type:n,values:a,colorSpace:r}}function Xt(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Zt(e){let t="hsl"===(e=qt(e)).type||"hsla"===e.type?qt(function(e){e=qt(e);const{values:t}=e,n=t[0],r=t[1]/100,a=t[2]/100,o=r*Math.min(a,1-a),i=(e,t=(e+n/30)%12)=>a-o*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const u=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Xt({type:l,values:u})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Jt(e,t){if(e=qt(e),t=Gt(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Xt(e)}function en(e,t){if(e=qt(e),t=Gt(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Xt(e)}const tn={black:"#000",white:"#fff"},nn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},rn="#f3e5f5",an="#ce93d8",on="#ba68c8",ln="#ab47bc",un="#9c27b0",sn="#7b1fa2",cn="#e57373",fn="#ef5350",dn="#f44336",pn="#d32f2f",mn="#c62828",hn="#ffb74d",gn="#ffa726",yn="#ff9800",vn="#f57c00",bn="#e65100",wn="#e3f2fd",kn="#90caf9",xn="#42a5f5",Sn="#1976d2",An="#1565c0",Cn="#4fc3f7",En="#29b6f6",_n="#03a9f4",Pn="#0288d1",On="#01579b",Tn="#81c784",$n="#66bb6a",Nn="#4caf50",zn="#388e3c",Mn="#2e7d32",Ln="#1b5e20",Rn=["mode","contrastThreshold","tonalOffset"],Dn={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:tn.white,default:tn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},In={text:{primary:tn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:tn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Fn(e,t,n,r){const a=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=en(e.main,a):"dark"===t&&(e.dark=Jt(e.main,o)))}const jn=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Bn={textTransform:"uppercase"},Un='"Roboto", "Helvetica", "Arial", sans-serif';function Hn(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Un,fontSize:a=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:l=500,fontWeightBold:u=700,htmlFontSize:s=16,allVariants:c,pxToRem:f}=n,d=v(n,jn),p=a/14,m=f||(e=>e/s*p+"rem"),h=(e,t,n,a,o)=>{return b({fontFamily:r,fontWeight:e,fontSize:m(t),lineHeight:n},r===Un?{letterSpacing:(i=a/t,Math.round(1e5*i)/1e5+"em")}:{},o,c);var i},g={h1:h(o,96,1.167,-1.5),h2:h(o,60,1.2,-.5),h3:h(i,48,1.167,0),h4:h(i,34,1.235,.25),h5:h(i,24,1.334,0),h6:h(l,20,1.6,.15),subtitle1:h(i,16,1.75,.15),subtitle2:h(l,14,1.57,.1),body1:h(i,16,1.5,.15),body2:h(i,14,1.43,.15),button:h(l,14,1.75,.4,Bn),caption:h(i,12,1.66,.4),overline:h(i,12,2.66,1,Bn)};return Ke(b({htmlFontSize:s,pxToRem:m,fontFamily:r,fontSize:a,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:l,fontWeightBold:u},g),d,{clone:!1})}function Wn(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Vn=["none",Wn(0,2,1,-1,0,1,1,0,0,1,3,0),Wn(0,3,1,-2,0,2,2,0,0,1,5,0),Wn(0,3,3,-2,0,3,4,0,0,1,8,0),Wn(0,2,4,-1,0,4,5,0,0,1,10,0),Wn(0,3,5,-1,0,5,8,0,0,1,14,0),Wn(0,3,5,-1,0,6,10,0,0,1,18,0),Wn(0,4,5,-2,0,7,10,1,0,2,16,1),Wn(0,5,5,-3,0,8,10,1,0,3,14,2),Wn(0,5,6,-3,0,9,12,1,0,3,16,2),Wn(0,6,6,-3,0,10,14,1,0,4,18,3),Wn(0,6,7,-4,0,11,15,1,0,4,20,3),Wn(0,7,8,-4,0,12,17,2,0,5,22,4),Wn(0,7,8,-4,0,13,19,2,0,5,24,4),Wn(0,7,9,-4,0,14,21,2,0,5,26,4),Wn(0,8,9,-5,0,15,22,2,0,6,28,5),Wn(0,8,10,-5,0,16,24,2,0,6,30,5),Wn(0,8,11,-5,0,17,26,2,0,6,32,5),Wn(0,9,11,-5,0,18,28,2,0,7,34,6),Wn(0,9,12,-6,0,19,29,2,0,7,36,6),Wn(0,10,13,-6,0,20,31,3,0,8,38,7),Wn(0,10,13,-6,0,21,33,3,0,8,40,7),Wn(0,10,14,-6,0,22,35,3,0,8,42,7),Wn(0,11,14,-7,0,23,36,3,0,9,44,8),Wn(0,11,15,-7,0,24,38,3,0,9,46,8)],Yn=["duration","easing","delay"],Kn={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Qn={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Gn(e){return`${Math.round(e)}ms`}function qn(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Xn(e){const t=b({},Kn,e.easing),n=b({},Qn,e.duration);return b({getAutoHeightDuration:qn,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:o=t.easeInOut,delay:i=0}=r;return v(r,Yn),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:Gn(a)} ${o} ${"string"==typeof i?i:Gn(i)}`)).join(",")}},e,{easing:t,duration:n})}const Zn={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Jn=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const er=function(e={},...t){const{mixins:n={},palette:r={},transitions:a={},typography:o={}}=e,i=v(e,Jn);if(e.vars)throw new Error(je(18));const l=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,a=v(e,Rn),o=e.primary||function(e="light"){return"dark"===e?{main:kn,light:wn,dark:xn}:{main:Sn,light:xn,dark:An}}(t),i=e.secondary||function(e="light"){return"dark"===e?{main:an,light:rn,dark:ln}:{main:un,light:on,dark:sn}}(t),l=e.error||function(e="light"){return"dark"===e?{main:dn,light:cn,dark:pn}:{main:pn,light:fn,dark:mn}}(t),u=e.info||function(e="light"){return"dark"===e?{main:En,light:Cn,dark:Pn}:{main:Pn,light:_n,dark:On}}(t),s=e.success||function(e="light"){return"dark"===e?{main:$n,light:Tn,dark:zn}:{main:Mn,light:Nn,dark:Ln}}(t),c=e.warning||function(e="light"){return"dark"===e?{main:gn,light:hn,dark:vn}:{main:"#ed6c02",light:yn,dark:bn}}(t);function f(e){const t=function(e,t){const n=Zt(e),r=Zt(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,In.text.primary)>=n?In.text.primary:Dn.text.primary;return t}const d=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:o=700})=>{if(!(e=b({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(je(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(je(12,t?` (${t})`:"",JSON.stringify(e.main)));return Fn(e,"light",a,r),Fn(e,"dark",o,r),e.contrastText||(e.contrastText=f(e.main)),e},p={dark:In,light:Dn};return Ke(b({common:b({},tn),mode:t,primary:d({color:o,name:"primary"}),secondary:d({color:i,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:d({color:l,name:"error"}),warning:d({color:c,name:"warning"}),info:d({color:u,name:"info"}),success:d({color:s,name:"success"}),grey:nn,contrastThreshold:n,getContrastText:f,augmentColor:d,tonalOffset:r},p[t]),a)}(r),u=Vt(e);let s=Ke(u,{mixins:(c=u.breakpoints,f=n,b({toolbar:{minHeight:56,[c.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[c.up("sm")]:{minHeight:64}}},f)),palette:l,shadows:Vn.slice(),typography:Hn(l,o),transitions:Xn(a),zIndex:b({},Zn)});var c,f;return s=Ke(s,i),s=t.reduce(((e,t)=>Ke(e,t)),s),s.unstable_sxConfig=b({},Bt,null==i?void 0:i.unstable_sxConfig),s.unstable_sx=function(e){return Ht({sx:e,theme:this})},s},tr=er();function nr({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return We({theme:Qt(n),name:t,props:e})}({props:e,name:t,defaultTheme:tr})}var rr=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const ar=Ce((function(e){return rr.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var or=(0,e.createContext)("undefined"!=typeof HTMLElement?xe({key:"css"}):null);or.Provider;var ir=function(t){return(0,e.forwardRef)((function(n,r){var a=(0,e.useContext)(or);return t(n,a,r)}))},lr=(0,e.createContext)({});function ur(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var sr=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},cr=ar,fr=function(e){return"theme"!==e},dr=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?cr:fr},pr=function(e,t,n){var r;if(t){var a=t.shouldForwardProp;r=e.__emotion_forwardProp&&a?function(t){return e.__emotion_forwardProp(t)&&a(t)}:a}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},mr=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return sr(t,n,r),De((function(){return function(e,t,n){sr(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}(t,n,r)})),null};var hr=function t(n,r){var a,o,i=n.__emotion_real===n,l=i&&n.__emotion_base||n;void 0!==r&&(a=r.label,o=r.target);var u=pr(n,r,i),s=u||dr(l),c=!s("as");return function(){var f=arguments,d=i&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==a&&d.push("label:"+a+";"),null==f[0]||void 0===f[0].raw)d.push.apply(d,f);else{d.push(f[0][0]);for(var p=f.length,m=1;m<p;m++)d.push(f[m],f[0][m])}var h=ir((function(t,n,r){var a=c&&t.as||l,i="",f=[],p=t;if(null==t.theme){for(var m in p={},t)p[m]=t[m];p.theme=(0,e.useContext)(lr)}"string"==typeof t.className?i=ur(n.registered,f,t.className):null!=t.className&&(i=t.className+" ");var h=Le(d.concat(f),n.registered,p);i+=n.key+"-"+h.name,void 0!==o&&(i+=" "+o);var g=c&&void 0===u?dr(a):s,y={};for(var v in t)c&&"as"===v||g(v)&&(y[v]=t[v]);return y.className=i,y.ref=r,(0,e.createElement)(e.Fragment,null,(0,e.createElement)(mr,{cache:n,serialized:h,isStringTag:"string"==typeof a}),(0,e.createElement)(a,y))}));return h.displayName=void 0!==a?a:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",h.defaultProps=n.defaultProps,h.__emotion_real=h,h.__emotion_base=l,h.__emotion_styles=d,h.__emotion_forwardProp=u,Object.defineProperty(h,"toString",{value:function(){return"."+o}}),h.withComponent=function(e,n){return t(e,b({},r,n,{shouldForwardProp:pr(h,n,!0)})).apply(void 0,d)},h}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){hr[e]=hr(e)}));const gr=hr;function yr(e,t){return gr(e,t)}const vr=["variant"];function br(e){return 0===e.length}function wr(e){const{variant:t}=e,n=v(e,vr);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?br(r)?e[t]:Be(e[t]):`${br(r)?t:Be(t)}${Be(e[t].toString())}`})),r}const kr=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],xr=["theme"],Sr=["theme"];function Ar(e){return 0===Object.keys(e).length}function Cr(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const Er=Vt(),_r=function(e={}){const{defaultTheme:t=Er,rootShouldForwardProp:n=Cr,slotShouldForwardProp:r=Cr}=e,a=e=>{const n=Ar(e.theme)?t:e.theme;return Ht(b({},e,{theme:n}))};return a.__mui_systemSx=!0,(e,o={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=e.__emotion_styles.filter((e=>!(null!=e&&e.__mui_systemSx))))})(e);const{name:i,slot:l,skipVariantsResolver:u,skipSx:s,overridesResolver:c}=o,f=v(o,kr),d=void 0!==u?u:l&&"Root"!==l||!1,p=s||!1;let m=Cr;"Root"===l?m=n:l?m=r:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(m=void 0);const h=yr(e,b({shouldForwardProp:m,label:void 0},f)),g=(e,...n)=>{const r=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:r}=n,a=v(n,xr);return e(b({theme:Ar(r)?t:r},a))}:e)):[];let o=e;i&&c&&r.push((e=>{const n=Ar(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(i,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a(b({},e,{theme:n})):a})),c(e,t)}return null})),i&&!d&&r.push((e=>{const n=Ar(e.theme)?t:e.theme;return((e,t,n,r)=>{var a,o;const{ownerState:i={}}=e,l=[],u=null==n||null==(a=n.components)||null==(o=a[r])?void 0:o.variants;return u&&u.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[wr(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=wr(e.props);r[t]=e.style})),r})(i,n),n,i)})),p||r.push(a);const l=r.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");o=[...e,...t],o.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(o=n=>{let{theme:r}=n,a=v(n,Sr);return e(b({theme:Ar(r)?t:r},a))});return h(o,...r)};return h.withConfig&&(g.withConfig=h.withConfig),g}}({defaultTheme:tr,rootShouldForwardProp:e=>Cr(e)&&"classes"!==e}),Pr=_r,Or=e=>e,Tr=(()=>{let e=Or;return{configure(t){e=t},generate:t=>e(t),reset(){e=Or}}})(),$r={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function Nr(e,t,n="Mui"){const r=$r[t];return r?`${n}-${r}`:`${Tr.generate(e)}-${t}`}function zr(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Nr(e,t,n)})),r}function Mr(e){return Nr("MuiCircularProgress",e)}zr("MuiCircularProgress",["root","determinate","indeterminate","colorPrimary","colorSecondary","svg","circle","circleDeterminate","circleIndeterminate","circleDisableShrink"]);var Lr=a(893);const Rr=["className","color","disableShrink","size","style","thickness","value","variant"];let Dr,Ir,Fr,jr,Br=e=>e;const Ur=Fe(Dr||(Dr=Br`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)),Hr=Fe(Ir||(Ir=Br`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)),Wr=Pr("span",{name:"MuiCircularProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],t[`color${Ue(n.color)}`]]}})((({ownerState:e,theme:t})=>b({display:"inline-block"},"determinate"===e.variant&&{transition:t.transitions.create("transform")},"inherit"!==e.color&&{color:(t.vars||t).palette[e.color].main})),(({ownerState:e})=>"indeterminate"===e.variant&&Ie(Fr||(Fr=Br`
      animation: ${0} 1.4s linear infinite;
    `),Ur))),Vr=Pr("svg",{name:"MuiCircularProgress",slot:"Svg",overridesResolver:(e,t)=>t.svg})({display:"block"}),Yr=Pr("circle",{name:"MuiCircularProgress",slot:"Circle",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.circle,t[`circle${Ue(n.variant)}`],n.disableShrink&&t.circleDisableShrink]}})((({ownerState:e,theme:t})=>b({stroke:"currentColor"},"determinate"===e.variant&&{transition:t.transitions.create("stroke-dashoffset")},"indeterminate"===e.variant&&{strokeDasharray:"80px, 200px",strokeDashoffset:0})),(({ownerState:e})=>"indeterminate"===e.variant&&!e.disableShrink&&Ie(jr||(jr=Br`
      animation: ${0} 1.4s ease-in-out infinite;
    `),Hr))),Kr=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiCircularProgress"}),{className:r,color:a="primary",disableShrink:o=!1,size:i=40,style:l,thickness:u=3.6,value:s=0,variant:c="indeterminate"}=n,f=v(n,Rr),d=b({},n,{color:a,disableShrink:o,size:i,thickness:u,value:s,variant:c}),p=(e=>{const{classes:t,variant:n,color:r,disableShrink:a}=e;return x({root:["root",n,`color${Ue(r)}`],svg:["svg"],circle:["circle",`circle${Ue(n)}`,a&&"circleDisableShrink"]},Mr,t)})(d),m={},h={},g={};if("determinate"===c){const e=2*Math.PI*((44-u)/2);m.strokeDasharray=e.toFixed(3),g["aria-valuenow"]=Math.round(s),m.strokeDashoffset=`${((100-s)/100*e).toFixed(3)}px`,h.transform="rotate(-90deg)"}return(0,Lr.jsx)(Wr,b({className:k(p.root,r),style:b({width:i,height:i},h,l),ownerState:d,ref:t,role:"progressbar"},g,f,{children:(0,Lr.jsx)(Vr,{className:p.svg,ownerState:d,viewBox:"22 22 44 44",children:(0,Lr.jsx)(Yr,{className:p.circle,style:m,ownerState:d,cx:44,cy:44,r:(44-u)/2,fill:"none",strokeWidth:u})})}))})),Qr=["sx"];function Gr(e){const{sx:t}=e,n=v(e,Qr),{systemProps:r,otherProps:a}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},a=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:Bt;return Object.keys(e).forEach((t=>{a[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let o;return o=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return Ve(n)?b({},r,n):r}:b({},r,t),b({},a,{sx:o})}const qr=["className","component"],Xr=function(t={}){const{defaultTheme:n,defaultClassName:r="MuiBox-root",generateClassName:a}=t,o=yr("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(Ht);return e.forwardRef((function(e,t){const i=Qt(n),l=Gr(e),{className:u,component:s="div"}=l,c=v(l,qr);return(0,Lr.jsx)(o,b({as:s,ref:t,className:k(u,a?a(r):r),theme:i},c))}))}({defaultTheme:er(),defaultClassName:"MuiBox-root",generateClassName:Tr.generate}),Zr=Xr;var Jr=a(484),ea=a.n(Jr),ta=a(178),na=a.n(ta),ra=a(387),aa=a.n(ra),oa=a(212),ia=a.n(oa);ea().extend(na()),ea().extend(aa()),ea().extend(ia());const la=ea();var ua=a(697),sa=a.n(ua);function ca(e){return Nr("MuiLinearProgress",e)}zr("MuiLinearProgress",["root","colorPrimary","colorSecondary","determinate","indeterminate","buffer","query","dashed","dashedColorPrimary","dashedColorSecondary","bar","barColorPrimary","barColorSecondary","bar1Indeterminate","bar1Determinate","bar1Buffer","bar2Indeterminate","bar2Buffer"]);const fa=["className","color","value","valueBuffer","variant"];let da,pa,ma,ha,ga,ya,va=e=>e;const ba=Fe(da||(da=va`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)),wa=Fe(pa||(pa=va`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)),ka=Fe(ma||(ma=va`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)),xa=(e,t)=>"inherit"===t?"currentColor":e.vars?e.vars.palette.LinearProgress[`${t}Bg`]:"light"===e.palette.mode?en(e.palette[t].main,.62):Jt(e.palette[t].main,.5),Sa=Pr("span",{name:"MuiLinearProgress",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`color${Ue(n.color)}`],t[n.variant]]}})((({ownerState:e,theme:t})=>b({position:"relative",overflow:"hidden",display:"block",height:4,zIndex:0,"@media print":{colorAdjust:"exact"},backgroundColor:xa(t,e.color)},"inherit"===e.color&&"buffer"!==e.variant&&{backgroundColor:"none","&::before":{content:'""',position:"absolute",left:0,top:0,right:0,bottom:0,backgroundColor:"currentColor",opacity:.3}},"buffer"===e.variant&&{backgroundColor:"transparent"},"query"===e.variant&&{transform:"rotate(180deg)"}))),Aa=Pr("span",{name:"MuiLinearProgress",slot:"Dashed",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.dashed,t[`dashedColor${Ue(n.color)}`]]}})((({ownerState:e,theme:t})=>{const n=xa(t,e.color);return b({position:"absolute",marginTop:0,height:"100%",width:"100%"},"inherit"===e.color&&{opacity:.3},{backgroundImage:`radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`,backgroundSize:"10px 10px",backgroundPosition:"0 -23px"})}),Ie(ha||(ha=va`
    animation: ${0} 3s infinite linear;
  `),ka)),Ca=Pr("span",{name:"MuiLinearProgress",slot:"Bar1",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t[`barColor${Ue(n.color)}`],("indeterminate"===n.variant||"query"===n.variant)&&t.bar1Indeterminate,"determinate"===n.variant&&t.bar1Determinate,"buffer"===n.variant&&t.bar1Buffer]}})((({ownerState:e,theme:t})=>b({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left",backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"determinate"===e.variant&&{transition:"transform .4s linear"},"buffer"===e.variant&&{zIndex:1,transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Ie(ga||(ga=va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `),ba))),Ea=Pr("span",{name:"MuiLinearProgress",slot:"Bar2",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.bar,t[`barColor${Ue(n.color)}`],("indeterminate"===n.variant||"query"===n.variant)&&t.bar2Indeterminate,"buffer"===n.variant&&t.bar2Buffer]}})((({ownerState:e,theme:t})=>b({width:"100%",position:"absolute",left:0,bottom:0,top:0,transition:"transform 0.2s linear",transformOrigin:"left"},"buffer"!==e.variant&&{backgroundColor:"inherit"===e.color?"currentColor":(t.vars||t).palette[e.color].main},"inherit"===e.color&&{opacity:.3},"buffer"===e.variant&&{backgroundColor:xa(t,e.color),transition:"transform .4s linear"})),(({ownerState:e})=>("indeterminate"===e.variant||"query"===e.variant)&&Ie(ya||(ya=va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `),wa))),_a=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiLinearProgress"}),{className:r,color:a="primary",value:o,valueBuffer:i,variant:l="indeterminate"}=n,u=v(n,fa),s=b({},n,{color:a,variant:l}),c=(e=>{const{classes:t,variant:n,color:r}=e;return x({root:["root",`color${Ue(r)}`,n],dashed:["dashed",`dashedColor${Ue(r)}`],bar1:["bar",`barColor${Ue(r)}`,("indeterminate"===n||"query"===n)&&"bar1Indeterminate","determinate"===n&&"bar1Determinate","buffer"===n&&"bar1Buffer"],bar2:["bar","buffer"!==n&&`barColor${Ue(r)}`,"buffer"===n&&`color${Ue(r)}`,("indeterminate"===n||"query"===n)&&"bar2Indeterminate","buffer"===n&&"bar2Buffer"]},ca,t)})(s),f=Qt(tr),d={},p={bar1:{},bar2:{}};if(("determinate"===l||"buffer"===l)&&void 0!==o){d["aria-valuenow"]=Math.round(o),d["aria-valuemin"]=0,d["aria-valuemax"]=100;let e=o-100;"rtl"===f.direction&&(e=-e),p.bar1.transform=`translateX(${e}%)`}if("buffer"===l&&void 0!==i){let e=(i||0)-100;"rtl"===f.direction&&(e=-e),p.bar2.transform=`translateX(${e}%)`}return(0,Lr.jsxs)(Sa,b({className:k(c.root,r),ownerState:s,role:"progressbar"},d,{ref:t},u,{children:["buffer"===l?(0,Lr.jsx)(Aa,{className:c.dashed,ownerState:s}):null,(0,Lr.jsx)(Ca,{className:c.bar1,ownerState:s,style:p.bar1}),"determinate"===l?null:(0,Lr.jsx)(Ea,{className:c.bar2,ownerState:s,style:p.bar2})]}))}));function Pa(e){return Nr("MuiTypography",e)}zr("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const Oa=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],Ta=Pr("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.variant&&t[n.variant],"inherit"!==n.align&&t[`align${Ue(n.align)}`],n.noWrap&&t.noWrap,n.gutterBottom&&t.gutterBottom,n.paragraph&&t.paragraph]}})((({theme:e,ownerState:t})=>b({margin:0},t.variant&&e.typography[t.variant],"inherit"!==t.align&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16}))),$a={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},Na={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},za=e.forwardRef((function(e,t){const n=nr({props:e,name:"MuiTypography"}),r=(e=>Na[e]||e)(n.color),a=Gr(b({},n,{color:r})),{align:o="inherit",className:i,component:l,gutterBottom:u=!1,noWrap:s=!1,paragraph:c=!1,variant:f="body1",variantMapping:d=$a}=a,p=v(a,Oa),m=b({},a,{align:o,color:r,className:i,component:l,gutterBottom:u,noWrap:s,paragraph:c,variant:f,variantMapping:d}),h=l||(c?"p":d[f]||$a[f])||"span",g=(e=>{const{align:t,gutterBottom:n,noWrap:r,paragraph:a,variant:o,classes:i}=e;return x({root:["root",o,"inherit"!==e.align&&`align${Ue(t)}`,n&&"gutterBottom",r&&"noWrap",a&&"paragraph"]},Pa,i)})(m);return(0,Lr.jsx)(Ta,b({as:h,ref:t,ownerState:m,className:k(g.root,i)},p))}));function Ma(){return Ma=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ma.apply(this,arguments)}function La(t){return e.createElement(Zr,{sx:{display:"flex",alignItems:"center"}},e.createElement(Zr,{sx:{width:"100%",mr:1}},e.createElement(_a,Ma({variant:"determinate"},t))),e.createElement(Zr,{sx:{minWidth:35}},e.createElement(za,{variant:"body2",color:"text.secondary"},"".concat(Math.round(t.value),"%"))))}La.propTypes={value:sa().number.isRequired};var Ra=a(214),Da=a.n(Ra),Ia=a(867),Fa={};function ja(t){var n=t.data,r=t.setDataSelection,a=t.dataSelection;return e.createElement("nav",null,e.createElement("ul",null,n.map((function(t,n){return e.createElement("li",{key:(o=t.file,Da()(o))},e.createElement("button",{type:"button",className:a===n&&"active",onClick:function(){return r(n)}},function(e){return e.split("/").pop()}(t.file)," ",e.createElement("strong",null,"(",Math.round(t.output.percent),"%)"),e.createElement("div",null,t.output.time_remaining," ",t.name&&"- ".concat(t.name)),e.createElement("div",null,e.createElement("em",null,t.output.action))));var o}))))}function Ba(e){return Ba="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ba(e)}function Ua(){Ua=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",i=r.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var a=t&&t.prototype instanceof f?t:f,o=Object.create(a.prototype),i=new S(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(a,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw o;return{value:void 0,done:!0}}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=w(i,n);if(l){if(l===c)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=s(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===c)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var c={};function f(){}function d(){}function p(){}var m={};l(m,a,(function(){return this}));var h=Object.getPrototypeOf,g=h&&h(h(A([])));g&&g!==t&&n.call(g,a)&&(m=g);var y=p.prototype=f.prototype=Object.create(m);function v(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function r(a,o,i,l){var u=s(e[a],e,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==Ba(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var a;this._invoke=function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return c;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return c}var r=s(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,c;var a=r.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,c):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,c)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function A(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}return d.prototype=p,l(y,"constructor",p),l(p,"constructor",d),d.displayName=l(p,i,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,p):(e.__proto__=p,l(e,i,"GeneratorFunction")),e.prototype=Object.create(y),e},e.awrap=function(e){return{__await:e}},v(b.prototype),l(b.prototype,o,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new b(u(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},v(y),l(y,i,"Generator"),l(y,a,(function(){return this})),l(y,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],i=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var l=n.call(o,"catchLoc"),u=n.call(o,"finallyLoc");if(l&&u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&n.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,c):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),c},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),c}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;x(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:A(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),c}},e}function Ha(e){return function(e){if(Array.isArray(e))return Ya(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||Va(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wa(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||Va(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Va(e,t){if(e){if("string"==typeof e)return Ya(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ya(e,t):void 0}}function Ya(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ka(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function Qa(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){Ka(o,r,a,i,l,"next",e)}function l(e){Ka(o,r,a,i,l,"throw",e)}i(void 0)}))}}function Ga(e,t,n,r,a){return qa.apply(this,arguments)}function qa(){return qa=Qa(Ua().mark((function e(t,n,r,a,o){var i,l,u,s,c,f=arguments;return Ua().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,clearTimeout(window.dataTimeout),e.next=4,fetch("active.json").then((function(e){return e.json()}));case 4:return i=e.sent,t(i),e.next=8,fetch("filelist.json").then((function(e){return e.json()}));case 8:return l=e.sent,n(l),e.next=12,fetch("disk.json").then((function(e){return e.json()}));case 12:return u=e.sent,r(u),e.next=16,fetch("utilization.json").then((function(e){return e.json()}));case 16:return s=e.sent,a(s),e.next=20,fetch("status.json").then((function(e){return e.json()}));case 20:c=e.sent,o(c),window.dataTimeout=setTimeout((function(){Ga.apply(void 0,Ha(f))}),1e3),e.next=28;break;case 25:e.prev=25,e.t0=e.catch(0),window.dataTimeout=setTimeout((function(){Ga.apply(void 0,Ha(f))}),1e3);case 28:case"end":return e.stop()}}),e,null,[[0,25]])}))),qa.apply(this,arguments)}function Xa(e){var t=["gb","mb","kb"].find((function(t){return e[t]>=1}));return Math.round(100*e[t])/100+t}Fa.styleTagTransform=h(),Fa.setAttributes=f(),Fa.insert=s().bind(null,"head"),Fa.domAPI=l(),Fa.insertStyleElement=p(),o()(Ia.Z,Fa),Ia.Z&&Ia.Z.locals&&Ia.Z.locals,ja.propTypes={data:sa().object.isRequired,setDataSelection:sa().func.isRequired,dataSelection:sa().number.isRequired};const Za=function(){var t=Wa((0,e.useState)(!1),2),n=t[0],r=t[1],a=Wa((0,e.useState)([]),2),o=a[0],i=a[1],l=Wa((0,e.useState)(!1),2),u=l[0],s=l[1],c=Wa((0,e.useState)(!1),2),f=c[0],d=c[1],p=Wa((0,e.useState)(!1),2),m=p[0],h=p[1],g=Wa((0,e.useState)(0),2),y=g[0],v=g[1];if([n,o,u,f,m].filter((function(e){return!e})).length>0)return Ga(r,i,s,d,h),e.createElement(Zr,{sx:{display:"flex"}},e.createElement(Kr,null));var b,w,k,x=n[y];return e.createElement("div",{className:"container image"},e.createElement("div",{className:"overline"}),e.createElement("h1",null,"Optimized video encoding"),n&&n.length>0&&e.createElement(ja,{data:n,dataSelection:y,setDataSelection:v}),x&&e.createElement("div",{className:"widget center"},e.createElement("strong",null,x.file)," ","(",x.video_stream.codec_name,"/",x.audio_streams[0].codec_name,")"),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"CPU"),e.createElement(La,{value:f.cpu})),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Memory"),e.createElement(La,{value:f.memory}))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Elapsed"),x.output.run_time),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Timecode"),x.output.timemark),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Profile"),x.name),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Audio Languages"),x.audio_streams.map((function(e){var t;return null===(t=e.tags)||void 0===t?void 0:t.language})).reduce((function(e,t){return e.includes(t)||e.push(t),e}),[]).join(", "))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Expected completed time"),(b=x.output.est_completed_seconds,k="MM/DD/YYYY HH:mm:ss",(w=la().add(b,"seconds")).isSame(la(),"day")&&(k="HH:mm:ss"),w.format(k))),e.createElement("div",{className:"widget"},e.createElement("strong",null,"ETA"),x.output.time_remaining)),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Files Remaining"),m.unprocessed_files.toLocaleString()),x&&e.createElement("div",{className:"widget"},e.createElement("strong",null,"File Progress"),e.createElement(La,{value:x.output.percent}))),e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Library Coverage"),e.createElement(La,{value:Math.round(m.library_coverage)}))),x&&e.createElement("div",{className:"flex"},e.createElement("div",{className:"widget"},e.createElement("strong",null,"Original Size"),Xa(x.output.size.original)),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Current Size"),Xa(x.output.size.progress)),e.createElement("div",{className:"widget"},e.createElement("strong",null,"Est. Final Size"),e.createElement("em",null,"".concat(Math.round(100*+x.output.size.estimated_final.change.replace("%",""))/100,"%")),Xa(x.output.size.estimated_final))),x&&e.createElement("div",{className:"widget center"},e.createElement("strong",null,"Command"),x.ffmpeg_cmd),e.createElement("div",{className:"flex quarter disks"},!(null!=u&&u.map)&&e.createElement("div",{className:"widget center"},"Loading..."),(null==u?void 0:u.map)&&(null==u?void 0:u.map((function(t){return e.createElement("div",{className:["widget",t.above_threshold&&"danger"].filter((function(e){return e})).join(" ")},e.createElement("strong",null,t.mounted),e.createElement("em",null,[t.used,"of",t.size].join(" ")),e.createElement(La,{value:t.percent_used,className:[t.above_threshold&&"danger"].filter((function(e){return e})).join(" ")}))})))),e.createElement("div",{className:"widget list"},!(null!=o&&o.map)&&e.createElement("em",null,"Loading..."),e.createElement("strong",null,"Next"," ",o.length.toLocaleString()," ","queued files"),e.createElement("div",{className:"overflow"},(null==o?void 0:o.map)&&e.createElement("table",null,e.createElement("tr",null,e.createElement("th",null,"#"),e.createElement("th",null,"Priority"),e.createElement("th",null,"Path"),e.createElement("th",null,"Size"),e.createElement("th",null,"Resolution"),e.createElement("th",null,"Codec"),e.createElement("th",null,"Encode version")),o.map((function(t,n){return e.createElement("tr",null,e.createElement("td",null,n+1),e.createElement("td",null,t.priority),e.createElement("td",null,t.path),e.createElement("td",null,function(e){for(var t=+e,n=0;t>1024;)t/=1024,n+=1;return"".concat(Math.round(100*t)/100).concat(["kb","mb","gb"][n])}(t.size)),e.createElement("td",null,t.resolution),e.createElement("td",null,t.codec),e.createElement("td",null,t.encode_version))}))))))};(0,n.s)(document.getElementById("app")).render(e.createElement(Za,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdB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QU0sS0FBTSxNQVF5QnhZLElBdUwvQnlZLENBQW9CM25FLEVBQUU4bUMsT0FDM0IsMEJBQUs5bUMsRUFBRTRuRSxZQUNQLDBCQUFLNW5FLEVBQUU2bkUsT0FDUCwwQkFBSzduRSxFQUFFOG5FLDBCQzFQWjV6QixFQUFBQSxFQUFBQSxHQUFXamxDLFNBQVM4NEQsZUFBZSxRQUUzQ3grRCxPQUFPLGdCQUFDLEdBQUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL2NyZWF0ZSBmYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9jb3JlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9jcnlwdG8tanMvbWQ1LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL0hvbWUvSG9tZS5zY3NzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24vTmF2LnNjc3MiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vaXNTYW1lT3JBZnRlci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvZGF5anMvcGx1Z2luL3RpbWV6b25lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vdXRjLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9Ib21lL0hvbWUuc2Nzcz83ZGMyIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1V0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVG9rZW5pemVyLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvU2VyaWFsaXplci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9QYXJzZXIuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9NaWRkbGV3YXJlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC9lbW90aW9uLXVuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NlcmlhbGl6ZS9kaXN0L2Vtb3Rpb24tc2VyaWFsaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy9kaXN0L2Vtb3Rpb24tdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Jlc29sdmVQcm9wcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9zaGFwZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29tcG9zZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NHcmlkLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9kZWZhdWx0U3hDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lV2l0aG91dERlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvY29tbW9uLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvb3JhbmdlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVByb3BzL3VzZVRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9lbW90aW9uLWlzLXByb3AtdmFsaWQuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tZWxlbWVudC02YTg4M2RhOS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC9lbW90aW9uLXV0aWxzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsZWQvYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N0eWxlZC1lbmdpbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVTdHlsZWQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vQ2xhc3NOYW1lR2VuZXJhdG9yL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMvZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzL2NpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9leHRlbmRTeFByb3AuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVCb3guanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQm94L0JveC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvZGF5anMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MvbGluZWFyUHJvZ3Jlc3NDbGFzc2VzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0xpbmVhclByb2dyZXNzL0xpbmVhclByb2dyZXNzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9UeXBvZ3JhcGh5L3R5cG9ncmFwaHlDbGFzc2VzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbC9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbC5qc3giLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9OYXYuc2Nzcz80M2U2Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24vTmF2LmpzeCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9Ib21lL0hvbWUuanN4Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0cm9vdC5DcnlwdG9KUyA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0LypnbG9iYWxzIHdpbmRvdywgZ2xvYmFsLCByZXF1aXJlKi9cblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblxuXHQgICAgdmFyIGNyeXB0bztcblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gd2luZG93LmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBpbiB3ZWIgd29ya2VyIChCcm93c2VyKVxuXHQgICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHNlbGYuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGZyb20gd29ya2VyXG5cdCAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXMuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gZ2xvYmFsVGhpcy5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSAoZXhwZXJpbWVudGFsIElFIDExKSBjcnlwdG8gZnJvbSB3aW5kb3cgKEJyb3dzZXIpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubXNDcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cubXNDcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSBnbG9iYWwgKE5vZGVKUylcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbC5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGltcG9ydCB2aWEgcmVxdWlyZSAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICB9XG5cblx0ICAgIC8qXG5cdCAgICAgKiBDcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcHNldWRvcmFuZG9tIG51bWJlciBnZW5lcmF0b3Jcblx0ICAgICAqXG5cdCAgICAgKiBBcyBNYXRoLnJhbmRvbSgpIGlzIGNyeXB0b2dyYXBoaWNhbGx5IG5vdCBzYWZlIHRvIHVzZVxuXHQgICAgICovXG5cdCAgICB2YXIgY3J5cHRvU2VjdXJlUmFuZG9tSW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmIChjcnlwdG8pIHtcblx0ICAgICAgICAgICAgLy8gVXNlIGdldFJhbmRvbVZhbHVlcyBtZXRob2QgKEJyb3dzZXIpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gVXNlIHJhbmRvbUJ5dGVzIG1ldGhvZCAoTm9kZUpTKVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKDQpLnJlYWRJbnQzMkxFKCk7XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05hdGl2ZSBjcnlwdG8gbW9kdWxlIGNvdWxkIG5vdCBiZSB1c2VkIHRvIGdldCBzZWN1cmUgcmFuZG9tIG51bWJlci4nKTtcblx0ICAgIH07XG5cblx0ICAgIC8qXG5cdCAgICAgKiBMb2NhbCBwb2x5ZmlsbCBvZiBPYmplY3QuY3JlYXRlXG5cblx0ICAgICAqL1xuXHQgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBGKCkge31cblxuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG5cdCAgICAgICAgICAgIHZhciBzdWJ0eXBlO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xuXG5cdCAgICAgICAgICAgIHN1YnR5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAgICAgICAgIEYucHJvdG90eXBlID0gbnVsbDtcblxuXHQgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICB9O1xuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGlicmFyeSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2xpYiA9IEMubGliID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7XG5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLFxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTcGF3blxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSB8fCB0aGlzLmluaXQgPT09IHN1YnR5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhhdFNpZ0J5dGVzOyBqICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGopID4+PiAyXSA9IHRoYXRXb3Jkc1tqID4+PiAyXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcFxuXHQgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CeXRlczsgaSArPSA0KSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkcy5wdXNoKGNyeXB0b1NlY3VyZVJhbmRvbUludCgpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJsb2NrcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbkJsb2Nrc1JlYWR5ID0gZGF0YVNpZ0J5dGVzIC8gYmxvY2tTaXplQnl0ZXM7XG5cdCAgICAgICAgICAgIGlmIChkb0ZsdXNoKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBSb3VuZCB1cCB0byBpbmNsdWRlIHBhcnRpYWwgYmxvY2tzXG5cdCAgICAgICAgICAgICAgICBuQmxvY2tzUmVhZHkgPSBNYXRoLmNlaWwobkJsb2Nrc1JlYWR5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLFxuXHQgICAgICAgICAgICAgICAgLy8gbGVzcyB0aGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IG11c3QgcmVtYWluIGluIHRoZSBidWZmZXJcblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGgubWF4KChuQmxvY2tzUmVhZHkgfCAwKSAtIHRoaXMuX21pbkJ1ZmZlclNpemUsIDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgd29yZHMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5Xb3Jkc1JlYWR5ID0gbkJsb2Nrc1JlYWR5ICogYmxvY2tTaXplO1xuXG5cdCAgICAgICAgICAgIC8vIENvdW50IGJ5dGVzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGJsb2Nrc1xuXHQgICAgICAgICAgICBpZiAobldvcmRzUmVhZHkpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG5Xb3Jkc1JlYWR5OyBvZmZzZXQgKz0gYmxvY2tTaXplKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1hbGdvcml0aG0gbG9naWNcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb1Byb2Nlc3NCbG9jayhkYXRhV29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBwcm9jZXNzZWQgd29yZHNcblx0ICAgICAgICAgICAgICAgIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoTWF0aCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIENvbnN0YW50cyB0YWJsZVxuXHQgICAgdmFyIFQgPSBbXTtcblxuXHQgICAgLy8gQ29tcHV0ZSBjb25zdGFudHNcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG5cdCAgICAgICAgICAgIFRbaV0gPSAoTWF0aC5hYnMoTWF0aC5zaW4oaSArIDEpKSAqIDB4MTAwMDAwMDAwKSB8IDA7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBNRDUgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBNRDUgPSBDX2FsZ28uTUQ1ID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICAweDY3NDUyMzAxLCAweGVmY2RhYjg5LFxuXHQgICAgICAgICAgICAgICAgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NlxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0X2kgPSBvZmZzZXQgKyBpO1xuXHQgICAgICAgICAgICAgICAgdmFyIE1fb2Zmc2V0X2kgPSBNW29mZnNldF9pXTtcblxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXRfaV0gPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSAgfCAoTV9vZmZzZXRfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8wICA9IE1bb2Zmc2V0ICsgMF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xICA9IE1bb2Zmc2V0ICsgMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8yICA9IE1bb2Zmc2V0ICsgMl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8zICA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF80ICA9IE1bb2Zmc2V0ICsgNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF81ICA9IE1bb2Zmc2V0ICsgNV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF82ICA9IE1bb2Zmc2V0ICsgNl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF83ICA9IE1bb2Zmc2V0ICsgN107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF84ICA9IE1bb2Zmc2V0ICsgOF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF85ICA9IE1bb2Zmc2V0ICsgOV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMCA9IE1bb2Zmc2V0ICsgMTBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTEgPSBNW29mZnNldCArIDExXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEyID0gTVtvZmZzZXQgKyAxMl07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMyA9IE1bb2Zmc2V0ICsgMTNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTQgPSBNW29mZnNldCArIDE0XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE1ID0gTVtvZmZzZXQgKyAxNV07XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGEgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgYiA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBjID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIGQgPSBIWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGF0aW9uXG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNywgIFRbMF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMSwgIDEyLCBUWzFdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNywgVFsyXSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8zLCAgMjIsIFRbM10pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDcsICBUWzRdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzUsICAxMiwgVFs1XSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTcsIFRbNl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfNywgIDIyLCBUWzddKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA3LCAgVFs4XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF85LCAgMTIsIFRbOV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xMSwgMjIsIFRbMTFdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA3LCAgVFsxMl0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTMsIDEyLCBUWzEzXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTcsIFRbMTRdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE1LCAyMiwgVFsxNV0pO1xuXG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF8xLCAgNSwgIFRbMTZdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzYsICA5LCAgVFsxN10pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE0LCBUWzE4XSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF8wLCAgMjAsIFRbMTldKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA1LCAgVFsyMF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTAsIDksICBUWzIxXSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTQsIFRbMjJdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzQsICAyMCwgVFsyM10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDUsICBUWzI0XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xNCwgOSwgIFRbMjVdKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNCwgVFsyNl0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfOCwgIDIwLCBUWzI3XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNSwgIFRbMjhdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzIsICA5LCAgVFsyOV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE0LCBUWzMwXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF8xMiwgMjAsIFRbMzFdKTtcblxuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDQsICBUWzMyXSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF84LCAgMTEsIFRbMzNdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNiwgVFszNF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTQsIDIzLCBUWzM1XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xLCAgNCwgIFRbMzZdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzQsICAxMSwgVFszN10pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfNywgIDE2LCBUWzM4XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8xMCwgMjMsIFRbMzldKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA0LCAgVFs0MF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMCwgIDExLCBUWzQxXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTYsIFRbNDJdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzYsICAyMywgVFs0M10pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgIDQsICBUWzQ0XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8xMiwgMTEsIFRbNDVdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNiwgVFs0Nl0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMiwgIDIzLCBUWzQ3XSk7XG5cblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA2LCAgVFs0OF0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfNywgIDEwLCBUWzQ5XSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTUsIFRbNTBdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzUsICAyMSwgVFs1MV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDYsICBUWzUyXSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8zLCAgMTAsIFRbNTNdKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNSwgVFs1NF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgIDIxLCBUWzU1XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNiwgIFRbNTZdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE1LCAxMCwgVFs1N10pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE1LCBUWzU4XSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xMywgMjEsIFRbNTldKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA2LCAgVFs2MF0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTUsIFRbNjJdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzksICAyMSwgVFs2M10pO1xuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsSCA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKTtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxMID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCA4KSAgfCAobkJpdHNUb3RhbEggPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCAyNCkgfCAobkJpdHNUb3RhbEggPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDgpICB8IChuQml0c1RvdGFsTCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDI0KSB8IChuQml0c1RvdGFsTCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IChkYXRhV29yZHMubGVuZ3RoICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoO1xuXHQgICAgICAgICAgICB2YXIgSCA9IGhhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgICAgICB2YXIgSF9pID0gSFtpXTtcblxuXHQgICAgICAgICAgICAgICAgSFtpXSA9ICgoKEhfaSA8PCA4KSAgfCAoSF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gRkYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArICgoYiAmIGMpIHwgKH5iICYgZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gR0coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArICgoYiAmIGQpIHwgKGMgJiB+ZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gSEgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArIChiIF4gYyBeIGQpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gSUkoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuXHQgICAgICAgIHZhciBuID0gYSArIChjIF4gKGIgfCB+ZCkpICsgeCArIHQ7XG5cdCAgICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYjtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuTUQ1ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoTUQ1KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNNRDUobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjTUQ1ID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKE1ENSk7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLk1ENTtcblxufSkpOyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL25vcm1hbGl6ZS83LjAuMC9ub3JtYWxpemUubWluLmNzcyk7XCJdKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIip7Ym94LXNpemluZzpib3JkZXItYm94fWJvZHksaHRtbHtmb250LXNpemU6MTZweDtmb250LWZhbWlseTpcXFwiTGF0b1xcXCIsc2Fucy1zZXJpZjtiYWNrZ3JvdW5kLWNvbG9yOiNlZWV9ZmlndXJlLGltZ3t3aWR0aDoxMDAlO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOjAgYXV0b31we2xpbmUtaGVpZ2h0OjEuMmVtfS5jYXB0aW9uLGZpZ2NhcHRpb257Zm9udC1zaXplOi45cmVtO2NvbG9yOiM4ZThhOGE7cGFkZGluZzo1cHggMH0uY29udGFpbmVye3dpZHRoOjEwMCU7bWF4LXdpZHRoOjgwMHB4O3BhZGRpbmc6MTBweDttYXJnaW46MCBhdXRvfS5jb250YWluZXIuaW1hZ2V7bWF4LXdpZHRoOjgwMHB4O3BhZGRpbmc6MH0uY29udGFpbmVyLmltYWdlIC5jYXB0aW9uLC5jb250YWluZXIuaW1hZ2UgZmlnY2FwdGlvbntwYWRkaW5nOjVweCAxMHB4fS5kZXNrdG9we2Rpc3BsYXk6bm9uZX0ubW9iaWxle2Rpc3BsYXk6YmxvY2t9I2FwcHtwYWRkaW5nOjEwcHh9QG1lZGlhKG1pbi13aWR0aDogNjgxcHgpeyNhcHB7cGFkZGluZzowfX0ub3ZlcmFsbD5kaXZ7bWFyZ2luLWJvdHRvbTotOHB4fS5vdmVyYWxsPmRpdjpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOi0yNSV9Lm92ZXJsaW5le21heC13aWR0aDoyMCU7aGVpZ2h0OjFweDtib3JkZXItYm90dG9tOjVweCBzb2xpZCAjMzc5MmNiO21hcmdpbjoxMHB4IDAgLTEwcHggMH0uc2NyZWVue3dpZHRoOjEwMCU7bWluLWhlaWdodDoxMDB2aH0uc2NyZWVuLnBhZGR7cGFkZGluZy10b3A6MjUlfS52aWRlb3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlO2hlaWdodDowO3BhZGRpbmctYm90dG9tOjU2LjI1JX0udmlkZW8udmVydGljYWx7cGFkZGluZy1ib3R0b206MTc3Ljc3Nzc3Nzc3NzglfS52aWRlbyBpZnJhbWUsLnZpZGVvIHZpZGVve3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dG9wOjA7bGVmdDowO2JvcmRlcjowfS53aWRnZXR7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6NXB4O3BhZGRpbmc6MTBweDttYXgtd2lkdGg6ODAwcHg7bWFyZ2luLWJvdHRvbToxMHB4O3RleHQtYWxpZ246Y2VudGVyfS53aWRnZXQgLm92ZXJmbG93e292ZXJmbG93LXg6YXV0b30ud2lkZ2V0LmNlbnRlcnttYXJnaW46MCBhdXRvIDEwcHh9LndpZGdldC5saXN0IG9sLC53aWRnZXQubGlzdCB1bHt0ZXh0LWFsaWduOmxlZnR9LndpZGdldC5saXN0IG9sIGxpLC53aWRnZXQubGlzdCB1bCBsaXtwYWRkaW5nLWxlZnQ6MTBweH0ud2lkZ2V0IHN0cm9uZywud2lkZ2V0IGVte2Rpc3BsYXk6YmxvY2t9LndpZGdldCBlbXtmb250LXNpemU6LjlyZW19LndpZGdldCB0YWJsZXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2V9LndpZGdldCB0YWJsZSB0ciB0ZHtwYWRkaW5nOjVweH0ud2lkZ2V0IHRhYmxlIHRyOm50aC1jaGlsZChldmVuKXtiYWNrZ3JvdW5kLWNvbG9yOiNmOWY5Zjl9LmRpc2tzIC53aWRnZXQgLmRhbmdlcj4qe2JhY2tncm91bmQtY29sb3I6cmVkfUBtZWRpYShtaW4td2lkdGg6IDY4MXB4KXsuZGVza3RvcHtkaXNwbGF5OmJsb2NrfS5tb2JpbGV7ZGlzcGxheTpub25lfS5mbGV4e2Rpc3BsYXk6ZmxleDt0ZXh0LWFsaWduOmNlbnRlcjtmbGV4LXdyYXA6d3JhcDtnYXA6MTBweDttYXgtd2lkdGg6ODAwcHg7bWFyZ2luOjAgYXV0b30uZmxleD5kaXZ7ZmxleDoxfS5mbGV4LnF1YXJ0ZXI+ZGl2e2ZsZXgtYmFzaXM6MjUlfS5jaXJjbGV7bWF4LXdpZHRoOjQwcHg7bWFyZ2luOjAgYXV0b319QG1lZGlhKG1pbi13aWR0aDogODA1cHgpey5jb250YWluZXJ7cGFkZGluZzowfX1AbWVkaWEobWluLXdpZHRoOiAxMjA1cHgpey5jb250YWluZXIuaW1hZ2UgLmNhcHRpb24sLmNvbnRhaW5lci5pbWFnZSBmaWdjYXB0aW9ue3BhZGRpbmc6NXB4IDB9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0hvbWUvSG9tZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQWdCQSxFQUNFLHFCQUFBLENBR0YsVUFHRSxjQUFBLENBQ0EsNkJBQUEsQ0FDQSxxQkFBQSxDQUdGLFdBR0UsVUFBQSxDQUNBLGFBQUEsQ0FDQSxhQUFBLENBR0YsRUFDRSxpQkFBQSxDQUdGLG9CQUVFLGVBQUEsQ0FDQSxhQUFBLENBQ0EsYUFBQSxDQUtGLFdBQ0UsVUFBQSxDQUNBLGVBQUEsQ0FDQSxZQUFBLENBQ0EsYUFBQSxDQUdGLGlCQUNFLGVBQUEsQ0FDQSxTQUFBLENBR0Ysc0RBRUUsZ0JBQUEsQ0FHRixTQUNFLFlBQUEsQ0FHRixRQUNFLGFBQUEsQ0FHRixLQUNFLFlBQUEsQ0FFQSx5QkFIRixLQUlJLFNBQUEsQ0FBQSxDQUtGLGFBQ0Usa0JBQUEsQ0FFQSx5QkFDRSxlQUFBLENBS04sVUFDRSxhQUFBLENBQ0EsVUFBQSxDQUNBLCtCQUFBLENBQ0EscUJBQUEsQ0FJRixRQUNFLFVBQUEsQ0FDQSxnQkFBQSxDQUdGLGFBQ0UsZUFBQSxDQUdGLE9BQ0UsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsUUFBQSxDQUNBLHFCQUFBLENBR0YsZ0JBQ0UsOEJBQUEsQ0FHRiwyQkFFRSxpQkFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsS0FBQSxDQUNBLE1BQUEsQ0FDQSxRQUFBLENBR0YsUUFDRSxxQkFBQSxDQUNBLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGVBQUEsQ0FDQSxrQkFBQSxDQUNBLGlCQUFBLENBRUEsa0JBQ0UsZUFBQSxDQUdGLGVBQ0Usa0JBQUEsQ0FJQSxnQ0FFRSxlQUFBLENBQ0Esc0NBQ0UsaUJBQUEsQ0FLTiwwQkFFRSxhQUFBLENBR0YsV0FDRSxlQUFBLENBR0YsY0FDRSx3QkFBQSxDQUVFLG9CQUNFLFdBQUEsQ0FFRixpQ0FDRSx3QkFBQSxDQVNGLHlCQUNFLG9CQUFBLENBUVIseUJBR0UsU0FDRSxhQUFBLENBR0YsUUFDRSxZQUFBLENBR0YsTUFDRSxZQUFBLENBQ0EsaUJBQUEsQ0FDQSxjQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FDQSxhQUFBLENBRUEsVUFDRSxNQUFBLENBSUEsa0JBQ0UsY0FBQSxDQUtOLFFBQ0UsY0FBQSxDQUNBLGFBQUEsQ0FBQSxDQWFKLHlCQUdFLFdBQ0UsU0FBQSxDQUFBLENBTUosMEJBR0Usc0RBRUUsYUFBQSxDQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qXFxuVGhpcyBpcyBhIGdvb2QgbGF5b3V0IGZvciBhIG1vYmlsZS1maXJzdCBDU1MgdGVtcGxhdGUuXFxuRm9sbG93aW5nIHRoaXMgZmxvdyB3aWxsIG1pbmltaXplIHRoZSBudW1iZXIgb2Ygc3R5bGVzIHlvdSBuZWVkIHRvIHdyaXRlIGFuZCB3aWxsIGVuc3VyZSB5b3UgYXJlIHRoaW5raW5nLCBkZXNpZ25pbmcgYW5kIGRldmVsb3BpbmcgbW9iaWxlLWZpcnN0Llxcbk1vc3Qgb2YgeW91ciBzdHlsZXMgZ2V0IHdyaXR0ZW4gbGlrZSBzdGFuZGFyZCBDU1MsIGJ1dCBmb3IgeW91ciBtb2JpbGUgcHJlc2VudGF0aW9uLiBHZW5lcmFsbHkgc3BlYWtpbmcsIGEgZ29vZCBtb2JpbGUgcHJlc2VudGlvbiB3aWxsIHN0cmV0Y2ggb3V0IG5pY2VseSBmb3IgbGFyZ2VyIHNjcmVlbnMuXFxuXFxuU29tZXRpbWVzLCB3aGVuIHdlIHN0cmV0Y2ggb3V0IHRvIGxhcmdlciBzY3JlZW5zLCB3ZSBuZWVkIHRvIG1ha2UgbWlub3IgdHdlYWtzIGZvciB0aGUgbGFyZ2VyIGRldmljZXMgLS0geW91IGNhbiBtYWtlIHRoZXNlIHR3ZWFrcyBpbiB0aGUgdGFibGV0IG1lZGlhIHF1ZXJ5LCBvciBpZiB0aGUgaXNzdWUgZXhpc3RzIG9uIGRlc2t0b3Agb25seSwgdGhlIGRlc2t0b3AgbWVkaWEgcXVlcnkuXFxuWW91IHdpbGwgZmluZCB0aGlzIGlzIGZhciBlYXNpZXIgdGhhbiB0aGUgb3Bwb3NpdGUgdGFzayBvZiB1c2luZyBDU1MgdG8gY3JhbSB5b3VyIGRlc2t0b3AgZXhwZXJpZW5jZSBpbnRvIGEgbW9iaWxlIGRldmljZS5cXG4qL1xcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXG4gTE9BRFMgSU4gQSBOSUNFIFJFU0VUIFRPIEVOU1VSRSBBTEwgQlJPV1NFUlMgSEFWRSBUSEUgU0FNRSBCQVNFIFNUWUxFU1xcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5AaW1wb3J0IHVybCgnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbm9ybWFsaXplLzcuMC4wL25vcm1hbGl6ZS5taW4uY3NzJyk7XFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBNT0JJTEUvQkFTRSBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG4vKiogU0VUIEJPUkRFUiBCT1ggRVZFUllXSEVSRSAqL1xcbioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLyoqIEFQUExZIEJBU0UgVEFHIFNUWUxFUyAqL1xcbmJvZHksXFxuaHRtbCB7XFxuICAvKiBTZXRzIGRlZmF1bHQgZm9udC1zaXplIHRvIDE2cHgsIGVuc3VyaW5nIDFlbSA9IDE2cHg7ICovXFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LWZhbWlseTogJ0xhdG8nLCBzYW5zLXNlcmlmO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXG59XFxuLyoqIFJFU1BPTlNJVkUgSU1BR0VTICovXFxuZmlndXJlLFxcbmltZyB7XFxuICAvKiBTZXRzIGltYWdlIHdpZHRoIHRvIG1hdGNoIHBhcmVudCAqL1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG5wIHtcXG4gIGxpbmUtaGVpZ2h0OiAxLjJlbTtcXG59XFxuLyoqIENhcHRpb24gc3R5bGVzICovXFxuLmNhcHRpb24sXFxuZmlnY2FwdGlvbiB7XFxuICBmb250LXNpemU6IDAuOXJlbTtcXG4gIGNvbG9yOiAjOGU4YThhO1xcbiAgcGFkZGluZzogNXB4IDA7XFxufVxcbi8qKiBCQVNFIENMQVNTRVMgKi9cXG4vKiogQ29udGFpbmVyIHN0eWxlcyB0byBrZWVwIGNvbnRlbnQgZnJvbSBiZWNvbWluZyB0b28gd2lkZSBvciBjb21pbmcgdG9vIGNsb3NlIHRvXFxuKiBtb2JpbGUgZWRnZSAqL1xcbi5jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG4vKiogSW1hZ2VzIGFyZSBhbGxvd2VkIHRvIGJlIGEgbGl0dGxlIHdpZGVyIHdoZW4gYnJva2VuIG91dCBpbnRvIHRoZWlyIG93biBjb250YWluZXIgKi9cXG4uY29udGFpbmVyLmltYWdlIHtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4uY29udGFpbmVyLmltYWdlIC5jYXB0aW9uLFxcbi5jb250YWluZXIuaW1hZ2UgZmlnY2FwdGlvbiB7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG59XFxuXFxuLmRlc2t0b3Age1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1vYmlsZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuI2FwcCB7XFxuICBwYWRkaW5nOiAxMHB4O1xcblxcbiAgQG1lZGlhIChtaW4td2lkdGg6IDY4MXB4KSB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICB9XFxufVxcblxcbi5vdmVyYWxsIHtcXG4gID4gZGl2IHtcXG4gICAgbWFyZ2luLWJvdHRvbTogLThweDtcXG5cXG4gICAgJjpmaXJzdC1jaGlsZCB7XFxuICAgICAgbWFyZ2luLXRvcDogLTI1JTtcXG4gICAgfVxcbiAgfVxcbn1cXG5cXG4ub3ZlcmxpbmUge1xcbiAgbWF4LXdpZHRoOiAyMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJvcmRlci1ib3R0b206IDVweCBzb2xpZCAjMzc5MmNiO1xcbiAgbWFyZ2luOiAxMHB4IDAgLTEwcHggMDtcXG59XFxuXFxuLyoqIFNjcmVlbnMgYXJlIHRoZSBzaXplIG9mIGF0IGxlYXN0IG9uZSBkZXZpY2Ugc2NyZWVuICovXFxuLnNjcmVlbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbn1cXG4vKiogZm9yIHZlcnRpY2FsIGNlbnRlcmluZyAqL1xcbi5zY3JlZW4ucGFkZCB7XFxuICBwYWRkaW5nLXRvcDogMjUlO1xcbn1cXG4vKiogdmlkZW8gc2V0dXAgKi9cXG4udmlkZW8ge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogY2FsYyg5IC8gMTYgKiAxMDAlKTtcXG59XFxuXFxuLnZpZGVvLnZlcnRpY2FsIHtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDE2IC8gOSAqIDEwMCUpO1xcbn1cXG5cXG4udmlkZW8gaWZyYW1lLFxcbi52aWRlbyB2aWRlbyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXI6IDA7XFxufVxcblxcbi53aWRnZXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXG4gIC5vdmVyZmxvdyB7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICB9XFxuXFxuICAmLmNlbnRlciB7XFxuICAgIG1hcmdpbjogMCBhdXRvIDEwcHg7XFxuICB9XFxuXFxuICAmLmxpc3Qge1xcbiAgICBvbCxcXG4gICAgdWwge1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgbGkge1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgc3Ryb25nLFxcbiAgZW0ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIGVtIHtcXG4gICAgZm9udC1zaXplOiAwLjlyZW07XFxuICB9XFxuXFxuICB0YWJsZSB7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICAgIHRyIHtcXG4gICAgICB0ZCB7XFxuICAgICAgICBwYWRkaW5nOiA1cHg7XFxuICAgICAgfVxcbiAgICAgICY6bnRoLWNoaWxkKGV2ZW4pIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOWY5Zjk7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcblxcbi5kaXNrcyB7XFxuICAud2lkZ2V0IHtcXG4gICAgLmRhbmdlciB7XFxuICAgICAgPiAqIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMDA7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxufVxcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcXG4gIFlPVVIgVEFCTEVUL0RFU0tUT1AgU1RZTEVTIEdPIEhFUkVcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuQG1lZGlhIChtaW4td2lkdGg6IDY4MXB4KSB7XFxuICAvKiBBbnkgYWRqdXN0bWVudHMgZm9yIHRhYmxldHMgYW5kIGxhcmdlciBnbyBoZXJlLlxcbiAgICBOb3RlIHRoZXNlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gYW55dGhpbmcgNjgxcHggb3IgbGFyZ2VyIC0tIHNvIHRhYmxldCBBTkQgZGVza3RvcCAqL1xcbiAgLmRlc2t0b3Age1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIC5tb2JpbGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcblxcbiAgLmZsZXgge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgZ2FwOiAxMHB4O1xcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG5cXG4gICAgPiBkaXYge1xcbiAgICAgIGZsZXg6IDE7XFxuICAgIH1cXG5cXG4gICAgJi5xdWFydGVyIHtcXG4gICAgICA+IGRpdiB7XFxuICAgICAgICBmbGV4LWJhc2lzOiAyNSU7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICAuY2lyY2xlIHtcXG4gICAgbWF4LXdpZHRoOiA0MHB4O1xcbiAgICBtYXJnaW46IDAgYXV0bztcXG4gIH1cXG59XFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBERVNLVE9QLU9OTFkgU1RZTEVTIEdPIEhFUkVcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuQG1lZGlhIChtaW4td2lkdGg6IDc2OXB4KSB7XFxuICAvKiBBbnkgYWRqdXN0bWVudHMgZm9yIGRlc2t0b3AgYW5kIGxhcmdlciBnbyBoZXJlLlxcbiAgICBOb3RlIHRoZXNlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gYW55dGhpbmcgNzY5cHggb3IgbGFyZ2VyIC0tIHNvIGRlc2t0b3AgKi9cXG59XFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBNRURJVU0tREVTS1RPUC1PTkxZIFNUWUxFUyBHTyBIRVJFXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbkBtZWRpYSAobWluLXdpZHRoOiA4MDVweCkge1xcbiAgLyogQW55IGFkanVzdG1lbnRzIGZvciBkZXNrdG9wIGFuZCBsYXJnZXIgZ28gaGVyZS5cXG4gICAgTm90ZSB0aGVzZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvIGFueXRoaW5nIDc2OXB4IG9yIGxhcmdlciAtLSBzbyBkZXNrdG9wICovXFxuICAuY29udGFpbmVyIHtcXG4gICAgcGFkZGluZzogMDtcXG4gIH1cXG59XFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBMQVJHRSBERVNLVE9QLU9OTFkgU1RZTEVTIEdPIEhFUkVcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuQG1lZGlhIChtaW4td2lkdGg6IDEyMDVweCkge1xcbiAgLyogQW55IGFkanVzdG1lbnRzIGZvciBkZXNrdG9wIGFuZCBsYXJnZXIgZ28gaGVyZS5cXG4gICAgTm90ZSB0aGVzZSBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIHRvIGFueXRoaW5nIDc2OXB4IG9yIGxhcmdlciAtLSBzbyBkZXNrdG9wICovXFxuICAuY29udGFpbmVyLmltYWdlIC5jYXB0aW9uLFxcbiAgLmNvbnRhaW5lci5pbWFnZSBmaWdjYXB0aW9uIHtcXG4gICAgcGFkZGluZzogNXB4IDA7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIm5hdntvdmVyZmxvdy15OmF1dG87LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2g7bWF4LWhlaWdodDoyMHZoO21hcmdpbjowIGF1dG8gMjJweH1uYXYgdWx7bWFyZ2luOjA7cGFkZGluZzowfW5hdiB1bCBsaXtsaXN0LXN0eWxlOm5vbmU7ZGlzcGxheTpibG9jaztwYWRkaW5nOjEwcHg7bWFyZ2luOjEwcHh9bmF2IHVsIGxpIGJ1dHRvbntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Ym9yZGVyOjA7YmFja2dyb3VuZDojZmZmO21hcmdpbi1yaWdodDoxMHB4O2N1cnNvcjpwb2ludGVyO3dpZHRoOjEwMCU7cGFkZGluZzoyMnB4O2NvbG9yOiMwMDB9bmF2IHVsIGxpIGJ1dHRvbi5hY3RpdmV7Ym9yZGVyLWJvdHRvbTozcHggc29saWQgIzAwMH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdi5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLElBQ0UsZUFBQSxDQUVBLGdDQUFBLENBQ0EsZUFBQSxDQUNBLGtCQUFBLENBRUEsT0FDRSxRQUFBLENBQ0EsU0FBQSxDQUVBLFVBQ0UsZUFBQSxDQUNBLGFBQUEsQ0FDQSxZQUFBLENBQ0EsV0FBQSxDQUVBLGlCQUNFLHdCQUFBLENBQ0EsUUFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSxVQUFBLENBQ0EsWUFBQSxDQUNBLFVBQUEsQ0FFQSx3QkFDRSw0QkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJuYXYge1xcbiAgb3ZlcmZsb3cteTogYXV0bztcXG4gIC8qIG1vbWVudHVtIHNjcm9sbGluZyAqL1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbiAgbWF4LWhlaWdodDogMjB2aDtcXG4gIG1hcmdpbjogMCBhdXRvIDIycHg7XFxuXFxuICB1bCB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG5cXG4gICAgbGkge1xcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgcGFkZGluZzogMTBweDtcXG4gICAgICBtYXJnaW46IDEwcHg7XFxuXFxuICAgICAgYnV0dG9uIHtcXG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiAwO1xcbiAgICAgICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgcGFkZGluZzogMjJweDtcXG4gICAgICAgIGNvbG9yOiAjMDAwO1xcblxcbiAgICAgICAgJi5hY3RpdmUge1xcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQgIzAwMDtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anM9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PTFlMyxlPTZlNCxuPTM2ZTUscj1cIm1pbGxpc2Vjb25kXCIsaT1cInNlY29uZFwiLHM9XCJtaW51dGVcIix1PVwiaG91clwiLGE9XCJkYXlcIixvPVwid2Vla1wiLGM9XCJtb250aFwiLGY9XCJxdWFydGVyXCIsaD1cInllYXJcIixkPVwiZGF0ZVwiLGw9XCJJbnZhbGlkIERhdGVcIiwkPS9eKFxcZHs0fSlbLS9dPyhcXGR7MSwyfSk/Wy0vXT8oXFxkezAsMn0pW1R0XFxzXSooXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Wy46XT8oXFxkKyk/JC8seT0vXFxbKFteXFxdXSspXXxZezEsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csTT17bmFtZTpcImVuXCIsd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSxtb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG9yZGluYWw6ZnVuY3Rpb24odCl7dmFyIGU9W1widGhcIixcInN0XCIsXCJuZFwiLFwicmRcIl0sbj10JTEwMDtyZXR1cm5cIltcIit0KyhlWyhuLTIwKSUxMF18fGVbbl18fGVbMF0pK1wiXVwifX0sbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9U3RyaW5nKHQpO3JldHVybiFyfHxyLmxlbmd0aD49ZT90OlwiXCIrQXJyYXkoZSsxLXIubGVuZ3RoKS5qb2luKG4pK3R9LHY9e3M6bSx6OmZ1bmN0aW9uKHQpe3ZhciBlPS10LnV0Y09mZnNldCgpLG49TWF0aC5hYnMoZSkscj1NYXRoLmZsb29yKG4vNjApLGk9biU2MDtyZXR1cm4oZTw9MD9cIitcIjpcIi1cIikrbShyLDIsXCIwXCIpK1wiOlwiK20oaSwyLFwiMFwiKX0sbTpmdW5jdGlvbiB0KGUsbil7aWYoZS5kYXRlKCk8bi5kYXRlKCkpcmV0dXJuLXQobixlKTt2YXIgcj0xMioobi55ZWFyKCktZS55ZWFyKCkpKyhuLm1vbnRoKCktZS5tb250aCgpKSxpPWUuY2xvbmUoKS5hZGQocixjKSxzPW4taTwwLHU9ZS5jbG9uZSgpLmFkZChyKyhzPy0xOjEpLGMpO3JldHVybisoLShyKyhuLWkpLyhzP2ktdTp1LWkpKXx8MCl9LGE6ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9NYXRoLmNlaWwodCl8fDA6TWF0aC5mbG9vcih0KX0scDpmdW5jdGlvbih0KXtyZXR1cm57TTpjLHk6aCx3Om8sZDphLEQ6ZCxoOnUsbTpzLHM6aSxtczpyLFE6Zn1bdF18fFN0cmluZyh0fHxcIlwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL3MkLyxcIlwiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LGc9XCJlblwiLEQ9e307RFtnXT1NO3ZhciBwPVwiJGlzRGF5anNPYmplY3RcIixTPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgX3x8ISghdHx8IXRbcF0pfSx3PWZ1bmN0aW9uIHQoZSxuLHIpe3ZhciBpO2lmKCFlKXJldHVybiBnO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXt2YXIgcz1lLnRvTG93ZXJDYXNlKCk7RFtzXSYmKGk9cyksbiYmKERbc109bixpPXMpO3ZhciB1PWUuc3BsaXQoXCItXCIpO2lmKCFpJiZ1Lmxlbmd0aD4xKXJldHVybiB0KHVbMF0pfWVsc2V7dmFyIGE9ZS5uYW1lO0RbYV09ZSxpPWF9cmV0dXJuIXImJmkmJihnPWkpLGl8fCFyJiZnfSxPPWZ1bmN0aW9uKHQsZSl7aWYoUyh0KSlyZXR1cm4gdC5jbG9uZSgpO3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiBlP2U6e307cmV0dXJuIG4uZGF0ZT10LG4uYXJncz1hcmd1bWVudHMsbmV3IF8obil9LGI9djtiLmw9dyxiLmk9UyxiLnc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0LHtsb2NhbGU6ZS4kTCx1dGM6ZS4kdSx4OmUuJHgsJG9mZnNldDplLiRvZmZzZXR9KX07dmFyIF89ZnVuY3Rpb24oKXtmdW5jdGlvbiBNKHQpe3RoaXMuJEw9dyh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpLHRoaXMuJHg9dGhpcy4keHx8dC54fHx7fSx0aGlzW3BdPSEwfXZhciBtPU0ucHJvdG90eXBlO3JldHVybiBtLnBhcnNlPWZ1bmN0aW9uKHQpe3RoaXMuJGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRlLG49dC51dGM7aWYobnVsbD09PWUpcmV0dXJuIG5ldyBEYXRlKE5hTik7aWYoYi51KGUpKXJldHVybiBuZXcgRGF0ZTtpZihlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gbmV3IERhdGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJiEvWiQvaS50ZXN0KGUpKXt2YXIgcj1lLm1hdGNoKCQpO2lmKHIpe3ZhciBpPXJbMl0tMXx8MCxzPShyWzddfHxcIjBcIikuc3Vic3RyaW5nKDAsMyk7cmV0dXJuIG4/bmV3IERhdGUoRGF0ZS5VVEMoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscykpOm5ldyBEYXRlKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpfX1yZXR1cm4gbmV3IERhdGUoZSl9KHQpLHRoaXMuaW5pdCgpfSxtLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSxtLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBifSxtLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuJGQudG9TdHJpbmcoKT09PWwpfSxtLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPU8odCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sbS5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCk8dGhpcy5zdGFydE9mKGUpfSxtLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8Tyh0KX0sbS4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGIudSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LG0udW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LG0udmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sbS5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPSEhYi51KGUpfHxlLGY9Yi5wKHQpLGw9ZnVuY3Rpb24odCxlKXt2YXIgaT1iLncobi4kdT9EYXRlLlVUQyhuLiR5LGUsdCk6bmV3IERhdGUobi4keSxlLHQpLG4pO3JldHVybiByP2k6aS5lbmRPZihhKX0sJD1mdW5jdGlvbih0LGUpe3JldHVybiBiLncobi50b0RhdGUoKVt0XS5hcHBseShuLnRvRGF0ZShcInNcIiksKHI/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksbil9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELHY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChmKXtjYXNlIGg6cmV0dXJuIHI/bCgxLDApOmwoMzEsMTEpO2Nhc2UgYzpyZXR1cm4gcj9sKDEsTSk6bCgwLE0rMSk7Y2FzZSBvOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxEPSh5PGc/eSs3OnkpLWc7cmV0dXJuIGwocj9tLUQ6bSsoNi1EKSxNKTtjYXNlIGE6Y2FzZSBkOnJldHVybiAkKHYrXCJIb3Vyc1wiLDApO2Nhc2UgdTpyZXR1cm4gJCh2K1wiTWludXRlc1wiLDEpO2Nhc2UgczpyZXR1cm4gJCh2K1wiU2Vjb25kc1wiLDIpO2Nhc2UgaTpyZXR1cm4gJCh2K1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sbS5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSxtLiRzZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPWIucCh0KSxmPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSxsPShuPXt9LG5bYV09ZitcIkRhdGVcIixuW2RdPWYrXCJEYXRlXCIsbltjXT1mK1wiTW9udGhcIixuW2hdPWYrXCJGdWxsWWVhclwiLG5bdV09ZitcIkhvdXJzXCIsbltzXT1mK1wiTWludXRlc1wiLG5baV09ZitcIlNlY29uZHNcIixuW3JdPWYrXCJNaWxsaXNlY29uZHNcIixuKVtvXSwkPW89PT1hP3RoaXMuJEQrKGUtdGhpcy4kVyk6ZTtpZihvPT09Y3x8bz09PWgpe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZCwxKTt5LiRkW2xdKCQpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZCxNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgbCYmdGhpcy4kZFtsXSgkKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sbS5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sbS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbYi5wKHQpXSgpfSxtLmFkZD1mdW5jdGlvbihyLGYpe3ZhciBkLGw9dGhpcztyPU51bWJlcihyKTt2YXIgJD1iLnAoZikseT1mdW5jdGlvbih0KXt2YXIgZT1PKGwpO3JldHVybiBiLncoZS5kYXRlKGUuZGF0ZSgpK01hdGgucm91bmQodCpyKSksbCl9O2lmKCQ9PT1jKXJldHVybiB0aGlzLnNldChjLHRoaXMuJE0rcik7aWYoJD09PWgpcmV0dXJuIHRoaXMuc2V0KGgsdGhpcy4keStyKTtpZigkPT09YSlyZXR1cm4geSgxKTtpZigkPT09bylyZXR1cm4geSg3KTt2YXIgTT0oZD17fSxkW3NdPWUsZFt1XT1uLGRbaV09dCxkKVskXXx8MSxtPXRoaXMuJGQuZ2V0VGltZSgpK3IqTTtyZXR1cm4gYi53KG0sdGhpcyl9LG0uc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxlKX0sbS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuJGxvY2FsZSgpO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbi5pbnZhbGlkRGF0ZXx8bDt2YXIgcj10fHxcIllZWVktTU0tRERUSEg6bW06c3NaXCIsaT1iLnoodGhpcykscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1uLndlZWtkYXlzLGM9bi5tb250aHMsZj1uLm1lcmlkaWVtLGg9ZnVuY3Rpb24odCxuLGkscyl7cmV0dXJuIHQmJih0W25dfHx0KGUscikpfHxpW25dLnNsaWNlKDAscyl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGIucyhzJTEyfHwxMix0LFwiMFwiKX0sJD1mfHxmdW5jdGlvbih0LGUsbil7dmFyIHI9dDwxMj9cIkFNXCI6XCJQTVwiO3JldHVybiBuP3IudG9Mb3dlckNhc2UoKTpyfTtyZXR1cm4gci5yZXBsYWNlKHksKGZ1bmN0aW9uKHQscil7cmV0dXJuIHJ8fGZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJZWVwiOnJldHVybiBTdHJpbmcoZS4keSkuc2xpY2UoLTIpO2Nhc2VcIllZWVlcIjpyZXR1cm4gYi5zKGUuJHksNCxcIjBcIik7Y2FzZVwiTVwiOnJldHVybiBhKzE7Y2FzZVwiTU1cIjpyZXR1cm4gYi5zKGErMSwyLFwiMFwiKTtjYXNlXCJNTU1cIjpyZXR1cm4gaChuLm1vbnRoc1Nob3J0LGEsYywzKTtjYXNlXCJNTU1NXCI6cmV0dXJuIGgoYyxhKTtjYXNlXCJEXCI6cmV0dXJuIGUuJEQ7Y2FzZVwiRERcIjpyZXR1cm4gYi5zKGUuJEQsMixcIjBcIik7Y2FzZVwiZFwiOnJldHVybiBTdHJpbmcoZS4kVyk7Y2FzZVwiZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzTWluLGUuJFcsbywyKTtjYXNlXCJkZGRcIjpyZXR1cm4gaChuLndlZWtkYXlzU2hvcnQsZS4kVyxvLDMpO2Nhc2VcImRkZGRcIjpyZXR1cm4gb1tlLiRXXTtjYXNlXCJIXCI6cmV0dXJuIFN0cmluZyhzKTtjYXNlXCJISFwiOnJldHVybiBiLnMocywyLFwiMFwiKTtjYXNlXCJoXCI6cmV0dXJuIGQoMSk7Y2FzZVwiaGhcIjpyZXR1cm4gZCgyKTtjYXNlXCJhXCI6cmV0dXJuICQocyx1LCEwKTtjYXNlXCJBXCI6cmV0dXJuICQocyx1LCExKTtjYXNlXCJtXCI6cmV0dXJuIFN0cmluZyh1KTtjYXNlXCJtbVwiOnJldHVybiBiLnModSwyLFwiMFwiKTtjYXNlXCJzXCI6cmV0dXJuIFN0cmluZyhlLiRzKTtjYXNlXCJzc1wiOnJldHVybiBiLnMoZS4kcywyLFwiMFwiKTtjYXNlXCJTU1NcIjpyZXR1cm4gYi5zKGUuJG1zLDMsXCIwXCIpO2Nhc2VcIlpcIjpyZXR1cm4gaX1yZXR1cm4gbnVsbH0odCl8fGkucmVwbGFjZShcIjpcIixcIlwiKX0pKX0sbS51dGNPZmZzZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gMTUqLU1hdGgucm91bmQodGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpLzE1KX0sbS5kaWZmPWZ1bmN0aW9uKHIsZCxsKXt2YXIgJCx5PXRoaXMsTT1iLnAoZCksbT1PKHIpLHY9KG0udXRjT2Zmc2V0KCktdGhpcy51dGNPZmZzZXQoKSkqZSxnPXRoaXMtbSxEPWZ1bmN0aW9uKCl7cmV0dXJuIGIubSh5LG0pfTtzd2l0Y2goTSl7Y2FzZSBoOiQ9RCgpLzEyO2JyZWFrO2Nhc2UgYzokPUQoKTticmVhaztjYXNlIGY6JD1EKCkvMzticmVhaztjYXNlIG86JD0oZy12KS82MDQ4ZTU7YnJlYWs7Y2FzZSBhOiQ9KGctdikvODY0ZTU7YnJlYWs7Y2FzZSB1OiQ9Zy9uO2JyZWFrO2Nhc2UgczokPWcvZTticmVhaztjYXNlIGk6JD1nL3Q7YnJlYWs7ZGVmYXVsdDokPWd9cmV0dXJuIGw/JDpiLmEoJCl9LG0uZGF5c0luTW9udGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbmRPZihjKS4kRH0sbS4kbG9jYWxlPWZ1bmN0aW9uKCl7cmV0dXJuIERbdGhpcy4kTF19LG0ubG9jYWxlPWZ1bmN0aW9uKHQsZSl7aWYoIXQpcmV0dXJuIHRoaXMuJEw7dmFyIG49dGhpcy5jbG9uZSgpLHI9dyh0LGUsITApO3JldHVybiByJiYobi4kTD1yKSxufSxtLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIGIudyh0aGlzLiRkLHRoaXMpfSxtLnRvRGF0ZT1mdW5jdGlvbigpe3JldHVybiBuZXcgRGF0ZSh0aGlzLnZhbHVlT2YoKSl9LG0udG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNWYWxpZCgpP3RoaXMudG9JU09TdHJpbmcoKTpudWxsfSxtLnRvSVNPU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9JU09TdHJpbmcoKX0sbS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvVVRDU3RyaW5nKCl9LE19KCksaz1fLnByb3RvdHlwZTtyZXR1cm4gTy5wcm90b3R5cGU9ayxbW1wiJG1zXCIscl0sW1wiJHNcIixpXSxbXCIkbVwiLHNdLFtcIiRIXCIsdV0sW1wiJFdcIixhXSxbXCIkTVwiLGNdLFtcIiR5XCIsaF0sW1wiJERcIixkXV0uZm9yRWFjaCgoZnVuY3Rpb24odCl7a1t0WzFdXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy4kZyhlLHRbMF0sdFsxXSl9fSkpLE8uZXh0ZW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuJGl8fCh0KGUsXyxPKSx0LiRpPSEwKSxPfSxPLmxvY2FsZT13LE8uaXNEYXlqcz1TLE8udW5peD1mdW5jdGlvbih0KXtyZXR1cm4gTygxZTMqdCl9LE8uZW49RFtnXSxPLkxzPUQsTy5wPXt9LE99KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczplfHxzZWxmKS5kYXlqc19wbHVnaW5faXNTYW1lT3JBZnRlcj10KCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7dC5wcm90b3R5cGUuaXNTYW1lT3JBZnRlcj1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmlzU2FtZShlLHQpfHx0aGlzLmlzQWZ0ZXIoZSx0KX19fSkpOyIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGUpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anNfcGx1Z2luX3RpbWV6b25lPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD17eWVhcjowLG1vbnRoOjEsZGF5OjIsaG91cjozLG1pbnV0ZTo0LHNlY29uZDo1fSxlPXt9O3JldHVybiBmdW5jdGlvbihuLGksbyl7dmFyIHIsYT1mdW5jdGlvbih0LG4saSl7dm9pZCAwPT09aSYmKGk9e30pO3ZhciBvPW5ldyBEYXRlKHQpLHI9ZnVuY3Rpb24odCxuKXt2b2lkIDA9PT1uJiYobj17fSk7dmFyIGk9bi50aW1lWm9uZU5hbWV8fFwic2hvcnRcIixvPXQrXCJ8XCIraSxyPWVbb107cmV0dXJuIHJ8fChyPW5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIix7aG91cjEyOiExLHRpbWVab25lOnQseWVhcjpcIm51bWVyaWNcIixtb250aDpcIjItZGlnaXRcIixkYXk6XCIyLWRpZ2l0XCIsaG91cjpcIjItZGlnaXRcIixtaW51dGU6XCIyLWRpZ2l0XCIsc2Vjb25kOlwiMi1kaWdpdFwiLHRpbWVab25lTmFtZTppfSksZVtvXT1yKSxyfShuLGkpO3JldHVybiByLmZvcm1hdFRvUGFydHMobyl9LHU9ZnVuY3Rpb24oZSxuKXtmb3IodmFyIGk9YShlLG4pLHI9W10sdT0wO3U8aS5sZW5ndGg7dSs9MSl7dmFyIGY9aVt1XSxzPWYudHlwZSxtPWYudmFsdWUsYz10W3NdO2M+PTAmJihyW2NdPXBhcnNlSW50KG0sMTApKX12YXIgZD1yWzNdLGw9MjQ9PT1kPzA6ZCxoPXJbMF0rXCItXCIrclsxXStcIi1cIityWzJdK1wiIFwiK2wrXCI6XCIrcls0XStcIjpcIityWzVdK1wiOjAwMFwiLHY9K2U7cmV0dXJuKG8udXRjKGgpLnZhbHVlT2YoKS0odi09diUxZTMpKS82ZTR9LGY9aS5wcm90b3R5cGU7Zi50ej1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PXQmJih0PXIpO3ZhciBuLGk9dGhpcy51dGNPZmZzZXQoKSxhPXRoaXMudG9EYXRlKCksdT1hLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIix7dGltZVpvbmU6dH0pLGY9TWF0aC5yb3VuZCgoYS1uZXcgRGF0ZSh1KSkvMWUzLzYwKSxzPTE1Ki1NYXRoLnJvdW5kKGEuZ2V0VGltZXpvbmVPZmZzZXQoKS8xNSktZjtpZighTnVtYmVyKHMpKW49dGhpcy51dGNPZmZzZXQoMCxlKTtlbHNlIGlmKG49byh1LHtsb2NhbGU6dGhpcy4kTH0pLiRzZXQoXCJtaWxsaXNlY29uZFwiLHRoaXMuJG1zKS51dGNPZmZzZXQocywhMCksZSl7dmFyIG09bi51dGNPZmZzZXQoKTtuPW4uYWRkKGktbSxcIm1pbnV0ZVwiKX1yZXR1cm4gbi4keC4kdGltZXpvbmU9dCxufSxmLm9mZnNldE5hbWU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy4keC4kdGltZXpvbmV8fG8udHouZ3Vlc3MoKSxuPWEodGhpcy52YWx1ZU9mKCksZSx7dGltZVpvbmVOYW1lOnR9KS5maW5kKChmdW5jdGlvbih0KXtyZXR1cm5cInRpbWV6b25lbmFtZVwiPT09dC50eXBlLnRvTG93ZXJDYXNlKCl9KSk7cmV0dXJuIG4mJm4udmFsdWV9O3ZhciBzPWYuc3RhcnRPZjtmLnN0YXJ0T2Y9ZnVuY3Rpb24odCxlKXtpZighdGhpcy4keHx8IXRoaXMuJHguJHRpbWV6b25lKXJldHVybiBzLmNhbGwodGhpcyx0LGUpO3ZhciBuPW8odGhpcy5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tOnNzOlNTU1wiKSx7bG9jYWxlOnRoaXMuJEx9KTtyZXR1cm4gcy5jYWxsKG4sdCxlKS50eih0aGlzLiR4LiR0aW1lem9uZSwhMCl9LG8udHo9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4mJmUsYT1ufHxlfHxyLGY9dSgrbygpLGEpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiBvKHQpLnR6KGEpO3ZhciBzPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT10LTYwKmUqMWUzLG89dShpLG4pO2lmKGU9PT1vKXJldHVybltpLGVdO3ZhciByPXUoaS09NjAqKG8tZSkqMWUzLG4pO3JldHVybiBvPT09cj9baSxvXTpbdC02MCpNYXRoLm1pbihvLHIpKjFlMyxNYXRoLm1heChvLHIpXX0oby51dGModCxpKS52YWx1ZU9mKCksZixhKSxtPXNbMF0sYz1zWzFdLGQ9byhtKS51dGNPZmZzZXQoYyk7cmV0dXJuIGQuJHguJHRpbWV6b25lPWEsZH0sby50ei5ndWVzcz1mdW5jdGlvbigpe3JldHVybiBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmV9LG8udHouc2V0RGVmYXVsdD1mdW5jdGlvbih0KXtyPXR9fX0pKTsiLCIhZnVuY3Rpb24odCxpKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1pKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShpKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzX3BsdWdpbl91dGM9aSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PVwibWludXRlXCIsaT0vWystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZyxlPS8oWystXXxcXGRcXGQpL2c7cmV0dXJuIGZ1bmN0aW9uKHMsZixuKXt2YXIgdT1mLnByb3RvdHlwZTtuLnV0Yz1mdW5jdGlvbih0KXt2YXIgaT17ZGF0ZTp0LHV0YzohMCxhcmdzOmFyZ3VtZW50c307cmV0dXJuIG5ldyBmKGkpfSx1LnV0Yz1mdW5jdGlvbihpKXt2YXIgZT1uKHRoaXMudG9EYXRlKCkse2xvY2FsZTp0aGlzLiRMLHV0YzohMH0pO3JldHVybiBpP2UuYWRkKHRoaXMudXRjT2Zmc2V0KCksdCk6ZX0sdS5sb2NhbD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMudG9EYXRlKCkse2xvY2FsZTp0aGlzLiRMLHV0YzohMX0pfTt2YXIgbz11LnBhcnNlO3UucGFyc2U9ZnVuY3Rpb24odCl7dC51dGMmJih0aGlzLiR1PSEwKSx0aGlzLiR1dGlscygpLnUodC4kb2Zmc2V0KXx8KHRoaXMuJG9mZnNldD10LiRvZmZzZXQpLG8uY2FsbCh0aGlzLHQpfTt2YXIgcj11LmluaXQ7dS5pbml0PWZ1bmN0aW9uKCl7aWYodGhpcy4kdSl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0VVRDRnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0VVRDTW9udGgoKSx0aGlzLiREPXQuZ2V0VVRDRGF0ZSgpLHRoaXMuJFc9dC5nZXRVVENEYXkoKSx0aGlzLiRIPXQuZ2V0VVRDSG91cnMoKSx0aGlzLiRtPXQuZ2V0VVRDTWludXRlcygpLHRoaXMuJHM9dC5nZXRVVENTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRVVENNaWxsaXNlY29uZHMoKX1lbHNlIHIuY2FsbCh0aGlzKX07dmFyIGE9dS51dGNPZmZzZXQ7dS51dGNPZmZzZXQ9ZnVuY3Rpb24ocyxmKXt2YXIgbj10aGlzLiR1dGlscygpLnU7aWYobihzKSlyZXR1cm4gdGhpcy4kdT8wOm4odGhpcy4kb2Zmc2V0KT9hLmNhbGwodGhpcyk6dGhpcy4kb2Zmc2V0O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBzJiYocz1mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cIlwiKTt2YXIgcz10Lm1hdGNoKGkpO2lmKCFzKXJldHVybiBudWxsO3ZhciBmPShcIlwiK3NbMF0pLm1hdGNoKGUpfHxbXCItXCIsMCwwXSxuPWZbMF0sdT02MCorZlsxXSsgK2ZbMl07cmV0dXJuIDA9PT11PzA6XCIrXCI9PT1uP3U6LXV9KHMpLG51bGw9PT1zKSlyZXR1cm4gdGhpczt2YXIgdT1NYXRoLmFicyhzKTw9MTY/NjAqczpzLG89dGhpcztpZihmKXJldHVybiBvLiRvZmZzZXQ9dSxvLiR1PTA9PT1zLG87aWYoMCE9PXMpe3ZhciByPXRoaXMuJHU/dGhpcy50b0RhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpOi0xKnRoaXMudXRjT2Zmc2V0KCk7KG89dGhpcy5sb2NhbCgpLmFkZCh1K3IsdCkpLiRvZmZzZXQ9dSxvLiR4LiRsb2NhbE9mZnNldD1yfWVsc2Ugbz10aGlzLnV0YygpO3JldHVybiBvfTt2YXIgaD11LmZvcm1hdDt1LmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgaT10fHwodGhpcy4kdT9cIllZWVktTU0tRERUSEg6bW06c3NbWl1cIjpcIlwiKTtyZXR1cm4gaC5jYWxsKHRoaXMsaSl9LHUudmFsdWVPZj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJHV0aWxzKCkudSh0aGlzLiRvZmZzZXQpPzA6dGhpcy4kb2Zmc2V0Kyh0aGlzLiR4LiRsb2NhbE9mZnNldHx8dGhpcy4kZC5nZXRUaW1lem9uZU9mZnNldCgpKTtyZXR1cm4gdGhpcy4kZC52YWx1ZU9mKCktNmU0KnR9LHUuaXNVVEM9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuJHV9LHUudG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpfSx1LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9EYXRlKCkudG9VVENTdHJpbmcoKX07dmFyIGw9dS50b0RhdGU7dS50b0RhdGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJzXCI9PT10JiZ0aGlzLiRvZmZzZXQ/bih0aGlzLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW06c3M6U1NTXCIpKS50b0RhdGUoKTpsLmNhbGwodGhpcyl9O3ZhciBjPXUuZGlmZjt1LmRpZmY9ZnVuY3Rpb24odCxpLGUpe2lmKHQmJnRoaXMuJHU9PT10LiR1KXJldHVybiBjLmNhbGwodGhpcyx0LGksZSk7dmFyIHM9dGhpcy5sb2NhbCgpLGY9bih0KS5sb2NhbCgpO3JldHVybiBjLmNhbGwocyxmLGksZSl9fX0pKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksYmE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG5hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBvYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG9hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdChhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdChiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB0KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBxYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHJhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLFxucmEpO3pbYl09bmV3IHQoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShxYSxyYSk7eltiXT1uZXcgdChiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShxYSxyYSk7eltiXT1uZXcgdChiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHQoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gc2EoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP25hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB0YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx1YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx2YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx4YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBIYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIElhPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBKYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SWEmJmFbSWFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixLYTtmdW5jdGlvbiBMYShhKXtpZih2b2lkIDA9PT1LYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtLYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrS2ErYX12YXIgTWE9ITE7XG5mdW5jdGlvbiBOYShhLGIpe2lmKCFhfHxNYSlyZXR1cm5cIlwiO01hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e01hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TGEoYSk6XCJcIn1cbmZ1bmN0aW9uIE9hKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBMYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIExhKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBMYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIExhKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1OYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1OYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1OYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFBhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2Ugd2E6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdmE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHphOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHhhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRGE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQ2E6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgRmE6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlBhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgR2E6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFBhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBRYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBQYShiKTtjYXNlIDg6cmV0dXJuIGI9PT14YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBSYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBTYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9U2EoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFVhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1UYShhKSl9ZnVuY3Rpb24gVmEoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVNhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gV2EoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWGEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVJhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWmEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZzYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gJGEoYSxiKXtaYShhLGIpO3ZhciBjPVJhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFJhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8V2EoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBkYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZWIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1JhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBmYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGdiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihkYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6UmEoYyl9fVxuZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1SYShiLnZhbHVlKSxkPVJhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gaWIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBqYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24ga2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2piKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIGxiLG1iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle2xiPWxifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2xiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPWxiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG5iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgb2I9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scGI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKG9iKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3BiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7b2JbYl09b2JbYV19KX0pO2Z1bmN0aW9uIHFiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxvYi5oYXNPd25Qcm9wZXJ0eShhKSYmb2JbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gcmIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cWIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgc2I9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHRiKGEsYil7aWYoYil7aWYoc2JbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHViKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgdmI9bnVsbDtmdW5jdGlvbiB3YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHhiPW51bGwseWI9bnVsbCx6Yj1udWxsO1xuZnVuY3Rpb24gQWIoYSl7aWYoYT1CYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHhiKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9Q2IoYikseGIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGIoYSl7eWI/emI/emIucHVzaChhKTp6Yj1bYV06eWI9YX1mdW5jdGlvbiBFYigpe2lmKHliKXt2YXIgYT15YixiPXpiO3piPXliPW51bGw7QWIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUFiKGJbYV0pfX1mdW5jdGlvbiBGYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdiKCl7fXZhciBIYj0hMTtmdW5jdGlvbiBJYihhLGIsYyl7aWYoSGIpcmV0dXJuIGEoYixjKTtIYj0hMDt0cnl7cmV0dXJuIEZiKGEsYixjKX1maW5hbGx5e2lmKEhiPSExLG51bGwhPT15Ynx8bnVsbCE9PXpiKUdiKCksRWIoKX19XG5mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPUNiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgS2I9ITE7aWYoaWEpdHJ5e3ZhciBMYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTGIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0tiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLExiLExiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixMYixMYil9Y2F0Y2goYSl7S2I9ITF9ZnVuY3Rpb24gTWIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIE5iPSExLE9iPW51bGwsUGI9ITEsUWI9bnVsbCxSYj17b25FcnJvcjpmdW5jdGlvbihhKXtOYj0hMDtPYj1hfX07ZnVuY3Rpb24gU2IoYSxiLGMsZCxlLGYsZyxoLGspe05iPSExO09iPW51bGw7TWIuYXBwbHkoUmIsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtTYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoTmIpe2lmKE5iKXt2YXIgbD1PYjtOYj0hMTtPYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtQYnx8KFBiPSEwLFFiPWwpfX1mdW5jdGlvbiBVYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFZiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoVWIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWGIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VWIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gV2IoZSksYTtpZihmPT09ZClyZXR1cm4gV2IoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBZYihhKXthPVhiKGEpO3JldHVybiBudWxsIT09YT9aYihhKTpudWxsfWZ1bmN0aW9uIFpiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj1aYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciAkYj1iYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGFjPWJhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGJjPWJhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGNjPWJhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWJhLnVuc3RhYmxlX25vdyxkYz1iYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxlYz1iYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxmYz1iYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxnYz1iYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxoYz1iYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxpYz1iYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksamM9bnVsbCxrYz1udWxsO2Z1bmN0aW9uIGxjKGEpe2lmKGtjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2Mub25Db21taXRGaWJlclJvb3QpdHJ5e2tjLm9uQ29tbWl0RmliZXJSb290KGpjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBuYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bWMsb2M9TWF0aC5sb2cscGM9TWF0aC5MTjI7ZnVuY3Rpb24gbWMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ob2MoYSkvcGN8MCl8MH12YXIgcWM9NjQscmM9NDE5NDMwNDtcbmZ1bmN0aW9uIHNjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHRjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD1zYyhoKTooZiY9ZywwIT09ZiYmKGQ9c2MoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXNjKGcpOjAhPT1mJiYoZD1zYyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW5jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdWMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB2YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtbmMoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dWMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB4Yygpe3ZhciBhPXFjO3FjPDw9MTswPT09KHFjJjQxOTQyNDApJiYocWM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHljKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gemMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW5jKGIpO2FbYl09Y31mdW5jdGlvbiBBYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtbmMoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtbmMoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBDYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBEYyxFYyxGYyxHYyxIYyxJYz0hMSxKYz1bXSxLYz1udWxsLExjPW51bGwsTWM9bnVsbCxOYz1uZXcgTWFwLE9jPW5ldyBNYXAsUGM9W10sUWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gUmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpLYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gU2MoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1CYihiKSxudWxsIT09YiYmRWMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gS2M9U2MoS2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIExjPVNjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBNYz1TYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO05jLnNldChmLFNjKE5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxPYy5zZXQoZixTYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBVYyhhKXt2YXIgYj1WYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVViKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVZiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0hjKGEucHJpb3JpdHksZnVuY3Rpb24oKXtGYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBXYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WGMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7dmI9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3ZiPW51bGx9ZWxzZSByZXR1cm4gYj1CYihjKSxudWxsIT09YiYmRWMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWWMoYSxiLGMpe1djKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBaYygpe0ljPSExO251bGwhPT1LYyYmV2MoS2MpJiYoS2M9bnVsbCk7bnVsbCE9PUxjJiZXYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJldjKE1jKSYmKE1jPW51bGwpO05jLmZvckVhY2goWWMpO09jLmZvckVhY2goWWMpfVxuZnVuY3Rpb24gJGMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEljfHwoSWM9ITAsYmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhiYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxaYykpKX1cbmZ1bmN0aW9uIGFkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuICRjKGIsYSl9aWYoMDxKYy5sZW5ndGgpeyRjKEpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8SmMubGVuZ3RoO2MrKyl7dmFyIGQ9SmNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1LYyYmJGMoS2MsYSk7bnVsbCE9PUxjJiYkYyhMYyxhKTtudWxsIT09TWMmJiRjKE1jLGEpO05jLmZvckVhY2goYik7T2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8UGMubGVuZ3RoO2MrKylkPVBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxQYy5sZW5ndGgmJihjPVBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVVjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUGMuc2hpZnQoKX12YXIgYmQ9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsY2Q9ITA7XG5mdW5jdGlvbiBkZChhLGIsYyxkKXt2YXIgZT1DLGY9YmQudHJhbnNpdGlvbjtiZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxlZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxiZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGZkKGEsYixjLGQpe3ZhciBlPUMsZj1iZC50cmFuc2l0aW9uO2JkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGVkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGJkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBlZChhLGIsYyxkKXtpZihjZCl7dmFyIGU9WGMoYSxiLGMsZCk7aWYobnVsbD09PWUpZ2QoYSxiLGQsaGQsYyksUmMoYSxkKTtlbHNlIGlmKFRjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFJjKGEsZCksYiY0JiYtMTxRYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9QmIoZSk7bnVsbCE9PWYmJkRjKGYpO2Y9WGMoYSxiLGMsZCk7bnVsbD09PWYmJmdkKGEsYixkLGhkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGdkKGEsYixkLG51bGwsYyl9fXZhciBoZD1udWxsO1xuZnVuY3Rpb24gWGMoYSxiLGMsZCl7aGQ9bnVsbDthPXdiKGQpO2E9VmMoYSk7aWYobnVsbCE9PWEpaWYoYj1VYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1WYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aGQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGlkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGRjKCkpe2Nhc2UgZWM6cmV0dXJuIDE7Y2FzZSBmYzpyZXR1cm4gNDtjYXNlIGdjOmNhc2UgaGM6cmV0dXJuIDE2O2Nhc2UgaWM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGpkPW51bGwsa2Q9bnVsbCxsZD1udWxsO2Z1bmN0aW9uIG1kKCl7aWYobGQpcmV0dXJuIGxkO3ZhciBhLGI9a2QsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gamQ/amQudmFsdWU6amQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG5kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIG9kKCl7cmV0dXJuITB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHFkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP29kOnBkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9b2QpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9b2QpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6b2R9KTtyZXR1cm4gYn1cbnZhciByZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSxzZD1xZChyZCksdGQ9QSh7fSxyZCx7dmlldzowLGRldGFpbDowfSksdWQ9cWQodGQpLHZkLHdkLHhkLHpkPUEoe30sdGQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6eWQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eGQmJih4ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8odmQ9YS5zY3JlZW5YLXhkLnNjcmVlblgsd2Q9YS5zY3JlZW5ZLXhkLnNjcmVlblkpOndkPXZkPTAseGQ9YSk7cmV0dXJuIHZkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6d2R9fSksQWQ9cWQoemQpLEJkPUEoe30semQse2RhdGFUcmFuc2ZlcjowfSksQ2Q9cWQoQmQpLERkPUEoe30sdGQse3JlbGF0ZWRUYXJnZXQ6MH0pLEVkPXFkKERkKSxGZD1BKHt9LHJkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxHZD1xZChGZCksSGQ9QSh7fSxyZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLElkPXFkKEhkKSxKZD1BKHt9LHJkLHtkYXRhOjB9KSxLZD1xZChKZCksTGQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE5kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBPZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU5kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24geWQoKXtyZXR1cm4gT2R9XG52YXIgUGQ9QSh7fSx0ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1MZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1uZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/bmQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9uZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFFkPXFkKFBkKSxSZD1BKHt9LHpkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFNkPXFkKFJkKSxUZD1BKHt9LHRkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6eWR9KSxVZD1xZChUZCksVmQ9QSh7fSxyZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxXZD1xZChWZCksWGQ9QSh7fSx6ZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFlkPXFkKFhkKSxaZD1bOSwxMywyNywzMl0sJGQ9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGFlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGFlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGJlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYWUsY2U9aWEmJighJGR8fGFlJiY4PGFlJiYxMT49YWUpLGRlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGVlPSExO1xuZnVuY3Rpb24gZmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1aZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBnZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBoZT0hMTtmdW5jdGlvbiBpZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZ2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2VlPSEwO3JldHVybiBkZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1kZSYmZWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gamUoYSxiKXtpZihoZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhJGQmJmZlKGEsYik/KGE9bWQoKSxsZD1rZD1qZD1udWxsLGhlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBjZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIga2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFrZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbWUoYSxiLGMsZCl7RGIoZCk7Yj1uZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHNkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIG9lPW51bGwscGU9bnVsbDtmdW5jdGlvbiBxZShhKXtyZShhLDApfWZ1bmN0aW9uIHNlKGEpe3ZhciBiPXRlKGEpO2lmKFZhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgdmU9ITE7aWYoaWEpe3ZhciB3ZTtpZihpYSl7dmFyIHhlPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXhlKXt2YXIgeWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt5ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3hlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5ZS5vbmlucHV0fXdlPXhlfWVsc2Ugd2U9ITE7dmU9d2UmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gemUoKXtvZSYmKG9lLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEFlKSxwZT1vZT1udWxsKX1mdW5jdGlvbiBBZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmc2UocGUpKXt2YXIgYj1bXTttZShiLHBlLGEsd2IoYSkpO0liKHFlLGIpfX1cbmZ1bmN0aW9uIEJlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KHplKCksb2U9YixwZT1jLG9lLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEFlKSk6XCJmb2N1c291dFwiPT09YSYmemUoKX1mdW5jdGlvbiBDZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBzZShwZSl9ZnVuY3Rpb24gRGUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBzZShiKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBzZShiKX1mdW5jdGlvbiBGZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEdlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkZlO1xuZnVuY3Rpb24gSGUoYSxiKXtpZihHZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUdlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSWUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1JZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1JZShjKX19ZnVuY3Rpb24gS2UoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9LZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBMZSgpe2Zvcih2YXIgYT13aW5kb3csYj1XYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1XYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBNZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gTmUoYSl7dmFyIGI9TGUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJktlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZNZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1KZShjLGYpO3ZhciBnPUplKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgT2U9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxQZT1udWxsLFFlPW51bGwsUmU9bnVsbCxTZT0hMTtcbmZ1bmN0aW9uIFRlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtTZXx8bnVsbD09UGV8fFBlIT09V2EoZCl8fChkPVBlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk1lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksUmUmJkhlKFJlLGQpfHwoUmU9ZCxkPW5lKFFlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHNkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1QZSkpKX1cbmZ1bmN0aW9uIFVlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFZlPXthbmltYXRpb25lbmQ6VWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpVZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFdlPXt9LFhlPXt9O1xuaWEmJihYZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBWZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBWZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBWZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBWZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFllKGEpe2lmKFdlW2FdKXJldHVybiBXZVthXTtpZighVmVbYV0pcmV0dXJuIGE7dmFyIGI9VmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWGUpcmV0dXJuIFdlW2FdPWJbY107cmV0dXJuIGF9dmFyIFplPVllKFwiYW5pbWF0aW9uZW5kXCIpLCRlPVllKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGFmPVllKFwiYW5pbWF0aW9uc3RhcnRcIiksYmY9WWUoXCJ0cmFuc2l0aW9uZW5kXCIpLGNmPW5ldyBNYXAsZGY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGVmKGEsYil7Y2Yuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZmY9MDtmZjxkZi5sZW5ndGg7ZmYrKyl7dmFyIGdmPWRmW2ZmXSxoZj1nZi50b0xvd2VyQ2FzZSgpLGpmPWdmWzBdLnRvVXBwZXJDYXNlKCkrZ2Yuc2xpY2UoMSk7ZWYoaGYsXCJvblwiK2pmKX1lZihaZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2VmKCRlLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZWYoYWYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2VmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZWYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2VmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtlZihiZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIga2Y9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxsZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChrZikpO1xuZnVuY3Rpb24gbWYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VGIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHJlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bWYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTttZihlLGgsbCk7Zj1rfX19aWYoUGIpdGhyb3cgYT1RYixQYj0hMSxRYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbbmZdO3ZvaWQgMD09PWMmJihjPWJbbmZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwob2YoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBwZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7b2YoYyxhLGQsYil9dmFyIHFmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gcmYoYSl7aWYoIWFbcWZdKXthW3FmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobGYuaGFzKGIpfHxwZihiLCExLGEpLHBmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcWZdfHwoYltxZl09ITAscGYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gb2YoYSxiLGMsZCl7c3dpdGNoKGlkKGIpKXtjYXNlIDE6dmFyIGU9ZGQ7YnJlYWs7Y2FzZSA0OmU9ZmQ7YnJlYWs7ZGVmYXVsdDplPWVkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFLYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBnZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVZjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1JYihmdW5jdGlvbigpe3ZhciBkPWYsZT13YihjKSxnPVtdO1xuYTp7dmFyIGg9Y2YuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXNkLG09YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW5kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVFkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bT1cImZvY3VzXCI7az1FZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjptPVwiYmx1clwiO2s9RWQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1FZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QWQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkNkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VWQ7YnJlYWs7Y2FzZSBaZTpjYXNlICRlOmNhc2UgYWY6az1HZDticmVhaztjYXNlIGJmOms9V2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1ZZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUlkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9U2R9dmFyIHc9MCE9PShiJjQpLEo9IXcmJlwic2Nyb2xsXCI9PT1hLHY9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgeD1kLHI7bnVsbCE9PVxueDspe3I9eDt2YXIgRj1yLnN0YXRlTm9kZTs1PT09ci50YWcmJm51bGwhPT1GJiYocj1GLG51bGwhPT12JiYoRj1KYih4LHYpLG51bGwhPUYmJncucHVzaChzZih4LEYscikpKSk7aWYoSilicmVhazt4PXgucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgsbSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXZiJiYobT1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoVmMobSl8fG1bdGZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobT1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxtPW0/VmMobSk6bnVsbCxudWxsIT09XG5tJiYoSj1VYihtKSxtIT09Snx8NSE9PW0udGFnJiY2IT09bS50YWcpKW09bnVsbH1lbHNlIGs9bnVsbCxtPWQ7aWYoayE9PW0pe3c9QWQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3Y9XCJvbk1vdXNlRW50ZXJcIjt4PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1TZCxGPVwib25Qb2ludGVyTGVhdmVcIix2PVwib25Qb2ludGVyRW50ZXJcIix4PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnRlKGspO3I9bnVsbD09bT9oOnRlKG0pO2g9bmV3IHcoRix4K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9cjtGPW51bGw7VmMoZSk9PT1kJiYodz1uZXcgdyh2LHgrXCJlbnRlclwiLG0sYyxlKSx3LnRhcmdldD1yLHcucmVsYXRlZFRhcmdldD1KLEY9dyk7Sj1GO2lmKGsmJm0pYjp7dz1rO3Y9bTt4PTA7Zm9yKHI9dztyO3I9dWYocikpeCsrO3I9MDtmb3IoRj12O0Y7Rj11ZihGKSlyKys7Zm9yKDswPHgtcjspdz11Zih3KSx4LS07Zm9yKDswPHIteDspdj1cbnVmKHYpLHItLTtmb3IoO3gtLTspe2lmKHc9PT12fHxudWxsIT09diYmdz09PXYuYWx0ZXJuYXRlKWJyZWFrIGI7dz11Zih3KTt2PXVmKHYpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmdmYoZyxoLGssdywhMSk7bnVsbCE9PW0mJm51bGwhPT1KJiZ2ZihnLEosbSx3LCEwKX19fWE6e2g9ZD90ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBaPXVlO2Vsc2UgaWYobGUoaCkpaWYodmUpWj1FZTtlbHNle1o9Q2U7dmFyIHlhPUJlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoWj1EZSk7aWYoWiYmKFo9WihhLGQpKSl7bWUoZyxaLGMsZSk7YnJlYWsgYX15YSYmeWEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih5YT1oLl93cmFwcGVyU3RhdGUpJiZcbnlhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX15YT1kP3RlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihsZSh5YSl8fFwidHJ1ZVwiPT09eWEuY29udGVudEVkaXRhYmxlKVBlPXlhLFFlPWQsUmU9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpSZT1RZT1QZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpTZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6U2U9ITE7VGUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihPZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlRlKGcsYyxlKX12YXIgYWI7aWYoJGQpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGNhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2E9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1jYT12b2lkIDB9ZWxzZSBoZT9mZShhLGMpJiYoY2E9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoY2E9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7Y2EmJihjZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihoZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWNhP1wib25Db21wb3NpdGlvbkVuZFwiPT09Y2EmJmhlJiYoYWI9bWQoKSk6KGpkPWUsa2Q9XCJ2YWx1ZVwiaW4gamQ/amQudmFsdWU6amQudGV4dENvbnRlbnQsaGU9ITApKSx5YT1uZShkLGNhKSwwPHlhLmxlbmd0aCYmKGNhPW5ldyBLZChjYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmNhLGxpc3RlbmVyczp5YX0pLGFiP2NhLmRhdGE9YWI6KGFiPWdlKGMpLG51bGwhPT1hYiYmKGNhLmRhdGE9YWIpKSkpO2lmKGFiPWJlP2llKGEsYyk6amUoYSxjKSlkPW5lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IEtkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPWFiKX1yZShnLGIpfSl9ZnVuY3Rpb24gc2YoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBuZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUpiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHNmKGEsZixlKSksZj1KYihhLGIpLG51bGwhPWYmJmQucHVzaChzZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHVmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB2ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUpiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHNmKGMsayxoKSkpOmV8fChrPUpiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHNmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHdmPS9cXHJcXG4/L2cseGY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHlmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2Uod2YsXCJcXG5cIikucmVwbGFjZSh4ZixcIlwiKX1mdW5jdGlvbiB6ZihhLGIsYyl7Yj15ZihiKTtpZih5ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQWYoKXt9XG52YXIgQmY9bnVsbCxDZj1udWxsO2Z1bmN0aW9uIERmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEVmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxJZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBHZj9mdW5jdGlvbihhKXtyZXR1cm4gR2YucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKEhmKX06RWY7ZnVuY3Rpb24gSGYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTthZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YWQoYil9ZnVuY3Rpb24gS2YoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIExmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBNZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxOZj1cIl9fcmVhY3RGaWJlciRcIitNZixPZj1cIl9fcmVhY3RQcm9wcyRcIitNZix0Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTWYsbmY9XCJfX3JlYWN0RXZlbnRzJFwiK01mLFBmPVwiX19yZWFjdExpc3RlbmVycyRcIitNZixRZj1cIl9fcmVhY3RIYW5kbGVzJFwiK01mO1xuZnVuY3Rpb24gVmMoYSl7dmFyIGI9YVtOZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdGZdfHxjW05mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUxmKGEpO251bGwhPT1hOyl7aWYoYz1hW05mXSlyZXR1cm4gYzthPUxmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCYihhKXthPWFbTmZdfHxhW3RmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdGUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gQ2IoYSl7cmV0dXJuIGFbT2ZdfHxudWxsfXZhciBSZj1bXSxTZj0tMTtmdW5jdGlvbiBUZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5TZnx8KGEuY3VycmVudD1SZltTZl0sUmZbU2ZdPW51bGwsU2YtLSl9ZnVuY3Rpb24gRyhhLGIpe1NmKys7UmZbU2ZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVWY9e30sSD1UZihVZiksVmY9VGYoITEpLFdmPVVmO2Z1bmN0aW9uIFhmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBZZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIFpmKCl7RShWZik7RShIKX1mdW5jdGlvbiAkZihhLGIsYyl7aWYoSC5jdXJyZW50IT09VWYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhWZixjKX1mdW5jdGlvbiBhZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFFhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGJnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxVZjtXZj1ILmN1cnJlbnQ7RyhILGEpO0coVmYsVmYuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gY2coYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1hZyhhLGIsV2YpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFZmKSxFKEgpLEcoSCxhKSk6RShWZik7RyhWZixjKX12YXIgZGc9bnVsbCxlZz0hMSxmZz0hMTtmdW5jdGlvbiBnZyhhKXtudWxsPT09ZGc/ZGc9W2FdOmRnLnB1c2goYSl9ZnVuY3Rpb24gaGcoYSl7ZWc9ITA7Z2coYSl9XG5mdW5jdGlvbiBpZygpe2lmKCFmZyYmbnVsbCE9PWRnKXtmZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZGc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1kZz1udWxsO2VnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1kZyYmKGRnPWRnLnNsaWNlKGErMSkpLCRiKGVjLGlnKSxlO31maW5hbGx5e0M9YixmZz0hMX19cmV0dXJuIG51bGx9dmFyIGpnPXRhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGtnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBsZz1UZihudWxsKSxtZz1udWxsLG5nPW51bGwsb2c9bnVsbDtmdW5jdGlvbiBwZygpe29nPW5nPW1nPW51bGx9XG5mdW5jdGlvbiBxZyhhKXt2YXIgYj1sZy5jdXJyZW50O0UobGcpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHJnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gc2coYSxiKXttZz1hO29nPW5nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodGc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdWcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKG9nIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PW5nKXtpZihudWxsPT09bWcpdGhyb3cgRXJyb3IocCgzMDgpKTtuZz1hO21nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBuZz1uZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIHZnPW51bGwsd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiYoYz1jLnNoYXJlZCxCZyhhKT8oYT1jLmludGVybGVhdmVkLG51bGw9PT1hPyhiLm5leHQ9YixudWxsPT09dmc/dmc9W2NdOnZnLnB1c2goYykpOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLmludGVybGVhdmVkPWIpOihhPWMucGVuZGluZyxudWxsPT09YT9iLm5leHQ9YjooYi5uZXh0PWEubmV4dCxhLm5leHQ9YiksYy5wZW5kaW5nPWIpKX1mdW5jdGlvbiBDZyhhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0JjKGEsYyl9fVxuZnVuY3Rpb24gRGcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIEVnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtudWxsIT09biYmKG49bi51cGRhdGVRdWV1ZSxoPW4ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9uLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgdT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtoPWY7ZG97dmFyIHE9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcSk9PT1xKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbT1hLHc9aDtxPWI7eT1jO3N3aXRjaCh3LnRhZyl7Y2FzZSAxOm09dy5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtKXt1PW0uY2FsbCh5LHUscSk7YnJlYWsgYX11PW07YnJlYWsgYTtjYXNlIDM6bS5mbGFncz1tLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm09dy5wYXlsb2FkO3E9XCJmdW5jdGlvblwiPT09dHlwZW9mIG0/bS5jYWxsKHksdSxxKTptO2lmKG51bGw9PT1xfHx2b2lkIDA9PT1xKWJyZWFrIGE7dT1BKHt9LHUscSk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscT1lLmVmZmVjdHMsbnVsbD09PXE/ZS5lZmZlY3RzPVtoXTpxLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpxLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj15LGs9dSk6bj1uLm5leHQ9eSxnfD1xO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgcT1oLGg9cS5uZXh0LHEubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cSxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPXUpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO0ZnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9dX19XG5mdW5jdGlvbiBHZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBIZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBJZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgTWc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VWIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SmcoKSxlPUtnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtiPUxnKGEsZSxkKTtudWxsIT09YiYmQ2coYixhLGUpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUpnKCksZT1LZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtiPUxnKGEsZSxkKTtudWxsIT09YiYmQ2coYixhLGUpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUpnKCksZD1LZyhhKSxlPXpnKGMsXG5kKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtBZyhhLGUpO2I9TGcoYSxkLGMpO251bGwhPT1iJiZDZyhiLGEsZCl9fTtmdW5jdGlvbiBOZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFIZShjLGQpfHwhSGUoZSxmKTohMH1cbmZ1bmN0aW9uIE9nKGEsYixjKXt2YXIgZD0hMSxlPVVmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXVnKGYpOihlPVlmKGIpP1dmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1hmKGEsZSk6VWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1NZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZNZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIFFnKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9SGc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD11ZyhmKTooZj1ZZihiKT9XZjpILmN1cnJlbnQsZS5jb250ZXh0PVhmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihJZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZNZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxFZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX12YXIgUmc9W10sU2c9MCxUZz1udWxsLFVnPTAsVmc9W10sV2c9MCxYZz1udWxsLFlnPTEsWmc9XCJcIjtmdW5jdGlvbiAkZyhhLGIpe1JnW1NnKytdPVVnO1JnW1NnKytdPVRnO1RnPWE7VWc9Yn1cbmZ1bmN0aW9uIGFoKGEsYixjKXtWZ1tXZysrXT1ZZztWZ1tXZysrXT1aZztWZ1tXZysrXT1YZztYZz1hO3ZhciBkPVlnO2E9Wmc7dmFyIGU9MzItbmMoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItbmMoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztZZz0xPDwzMi1uYyhiKStlfGM8PGV8ZDtaZz1mK2F9ZWxzZSBZZz0xPDxmfGM8PGV8ZCxaZz1hfWZ1bmN0aW9uIGJoKGEpe251bGwhPT1hLnJldHVybiYmKCRnKGEsMSksYWgoYSwxLDApKX1mdW5jdGlvbiBjaChhKXtmb3IoO2E9PT1UZzspVGc9UmdbLS1TZ10sUmdbU2ddPW51bGwsVWc9UmdbLS1TZ10sUmdbU2ddPW51bGw7Zm9yKDthPT09WGc7KVhnPVZnWy0tV2ddLFZnW1dnXT1udWxsLFpnPVZnWy0tV2ddLFZnW1dnXT1udWxsLFlnPVZnWy0tV2ddLFZnW1dnXT1udWxsfXZhciBkaD1udWxsLGVoPW51bGwsST0hMSxmaD1udWxsO1xuZnVuY3Rpb24gZ2goYSxiKXt2YXIgYz1oaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIGloKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLGRoPWEsZWg9S2YoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLGRoPWEsZWg9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PVhnP3tpZDpZZyxvdmVyZmxvdzpaZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPWhoKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLGRoPWEsZWg9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBqaChhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIGtoKGEpe2lmKEkpe3ZhciBiPWVoO2lmKGIpe3ZhciBjPWI7aWYoIWloKGEsYikpe2lmKGpoKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1LZihjLm5leHRTaWJsaW5nKTt2YXIgZD1kaDtiJiZpaChhLGIpP2doKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEsZGg9YSl9fWVsc2V7aWYoamgoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO2RoPWF9fX1mdW5jdGlvbiBsaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47ZGg9YX1cbmZ1bmN0aW9uIG1oKGEpe2lmKGEhPT1kaClyZXR1cm4hMTtpZighSSlyZXR1cm4gbGgoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFEZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9ZWgpKXtpZihqaChhKSl7Zm9yKGE9ZWg7YTspYT1LZihhLm5leHRTaWJsaW5nKTt0aHJvdyBFcnJvcihwKDQxOCkpO31mb3IoO2I7KWdoKGEsYiksYj1LZihiLm5leHRTaWJsaW5nKX1saChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2VoPUtmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlxuXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31laD1udWxsfX1lbHNlIGVoPWRoP0tmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIG5oKCl7ZWg9ZGg9bnVsbDtJPSExfWZ1bmN0aW9uIG9oKGEpe251bGw9PT1maD9maD1bYV06ZmgucHVzaChhKX1cbmZ1bmN0aW9uIHBoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09SGcmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHFoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHJoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiBzaChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT10aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXVoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT13YSlyZXR1cm4gbihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09R2EmJnJoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9cGgoYSxiLGMpLGQucmV0dXJuPWEsZDtkPXZoKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXBoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9d2goYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gdShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXVoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHVhOnJldHVybiBjPXZoKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9cGgoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHZhOnJldHVybiBiPXdoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEdhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHUoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGRiKGIpfHxKYShiKSlyZXR1cm4gYj14aChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtxaChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHEoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHVhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBHYTpyZXR1cm4gZT1jLl9pbml0LHEoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihkYihjKXx8SmEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO3FoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEdhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihkYihkKXx8SmEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO3FoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBtKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG49bnVsbCxyPWcsbT1nPTAseD1udWxsO251bGwhPT1yJiZtPGgubGVuZ3RoO20rKyl7ci5pbmRleD5tPyh4PXIscj1udWxsKTp4PXIuc2libGluZzt2YXIgdj1xKGUscixoW21dLGspO2lmKG51bGw9PT12KXtudWxsPT09ciYmKHI9eCk7YnJlYWt9YSYmciYmbnVsbD09PXYuYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHYsZyxtKTtudWxsPT09bj9sPXY6bi5zaWJsaW5nPXY7bj12O3I9eH1pZihtPT09aC5sZW5ndGgpcmV0dXJuIGMoZSxyKSxJJiYkZyhlLG0pLGw7aWYobnVsbD09PXIpe2Zvcig7bTxoLmxlbmd0aDttKyspcj11KGUsaFttXSxrKSxudWxsIT09ciYmKGc9ZihyLGcsbSksbnVsbD09PW4/bD1yOm4uc2libGluZz1yLG49cik7SSYmJGcoZSxtKTtyZXR1cm4gbH1mb3Iocj1kKGUscik7bTxoLmxlbmd0aDttKyspeD15KHIsZSxtLGhbbV0sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnIuZGVsZXRlKG51bGw9PT1cbngua2V5P206eC5rZXkpLGc9Zih4LGcsbSksbnVsbD09PW4/bD14Om4uc2libGluZz14LG49eCk7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiYkZyhlLG0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9SmEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciBuPWw9bnVsbCxtPWcscj1nPTAseD1udWxsLHY9aC5uZXh0KCk7bnVsbCE9PW0mJiF2LmRvbmU7cisrLHY9aC5uZXh0KCkpe20uaW5kZXg+cj8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHc9cShlLG0sdi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih3LGcscik7bnVsbD09PW4/bD13Om4uc2libGluZz13O249dzttPXh9aWYodi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiYkZyhlLHIpLGw7aWYobnVsbD09PW0pe2Zvcig7IXYuZG9uZTtyKyssdj1oLm5leHQoKSl2PXUoZSx2LnZhbHVlLGspLG51bGwhPT12JiYoZz1mKHYsZyxyKSxudWxsPT09bj9sPXY6bi5zaWJsaW5nPXYsbj12KTtJJiYkZyhlLHIpO3JldHVybiBsfWZvcihtPWQoZSxtKTshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9eShtLGUscix2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09di5rZXk/cjp2LmtleSksZz1mKHYsZyxyKSxudWxsPT09bj9sPXY6bi5zaWJsaW5nPXYsbj12KTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJiRnKGUscik7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT13YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB1YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT13YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2EmJnJoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1waChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09d2E/KGQ9eGgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXZoKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXBoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB2YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXdoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgR2E6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGRiKGYpKXJldHVybiBtKGEsZCxmLGgpO2lmKEphKGYpKXJldHVybiB3KGEsZCxmLGgpO3FoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9dWgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgeWg9c2goITApLHpoPXNoKCExKSxBaD17fSxCaD1UZihBaCksQ2g9VGYoQWgpLERoPVRmKEFoKTtmdW5jdGlvbiBFaChhKXtpZihhPT09QWgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBGaChhLGIpe0coRGgsYik7RyhDaCxhKTtHKEJoLEFoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmtiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1rYihiLGEpfUUoQmgpO0coQmgsYil9ZnVuY3Rpb24gR2goKXtFKEJoKTtFKENoKTtFKERoKX1cbmZ1bmN0aW9uIEhoKGEpe0VoKERoLmN1cnJlbnQpO3ZhciBiPUVoKEJoLmN1cnJlbnQpO3ZhciBjPWtiKGIsYS50eXBlKTtiIT09YyYmKEcoQ2gsYSksRyhCaCxjKSl9ZnVuY3Rpb24gSWgoYSl7Q2guY3VycmVudD09PWEmJihFKEJoKSxFKENoKSl9dmFyIEs9VGYoMCk7XG5mdW5jdGlvbiBKaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgS2g9W107XG5mdW5jdGlvbiBMaCgpe2Zvcih2YXIgYT0wO2E8S2gubGVuZ3RoO2ErKylLaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO0toLmxlbmd0aD0wfXZhciBNaD10YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLE5oPXRhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLE9oPTAsTD1udWxsLE09bnVsbCxOPW51bGwsUGg9ITEsUWg9ITEsUmg9MCxTaD0wO2Z1bmN0aW9uIE8oKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBUaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFHZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gVWgoYSxiLGMsZCxlLGYpe09oPWY7TD1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7TWguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9WaDpXaDthPWMoZCxlKTtpZihRaCl7Zj0wO2Rve1FoPSExO1JoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO049TT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtNaC5jdXJyZW50PVhoO2E9YyhkLGUpfXdoaWxlKFFoKX1NaC5jdXJyZW50PVloO2I9bnVsbCE9PU0mJm51bGwhPT1NLm5leHQ7T2g9MDtOPU09TD1udWxsO1BoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBaaCgpe3ZhciBhPTAhPT1SaDtSaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gJGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09Tj9MLm1lbW9pemVkU3RhdGU9Tj1hOk49Ti5uZXh0PWE7cmV0dXJuIE59ZnVuY3Rpb24gYWkoKXtpZihudWxsPT09TSl7dmFyIGE9TC5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9TS5uZXh0O3ZhciBiPW51bGw9PT1OP0wubWVtb2l6ZWRTdGF0ZTpOLm5leHQ7aWYobnVsbCE9PWIpTj1iLE09YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7TT1hO2E9e21lbW9pemVkU3RhdGU6TS5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpNLmJhc2VTdGF0ZSxiYXNlUXVldWU6TS5iYXNlUXVldWUscXVldWU6TS5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1OP0wubWVtb2l6ZWRTdGF0ZT1OPWE6Tj1OLm5leHQ9YX1yZXR1cm4gTn1cbmZ1bmN0aW9uIGJpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gY2koYSl7dmFyIGI9YWkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1NLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG49bC5sYW5lO2lmKChPaCZuKT09PW4pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciB1PXtsYW5lOm4sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXUsZz1kKTprPWsubmV4dD11O0wubGFuZXN8PW47Rmd8PW59bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7R2UoZCxiLm1lbW9pemVkU3RhdGUpfHwodGc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTC5sYW5lc3w9ZixGZ3w9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGRpKGEpe3ZhciBiPWFpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtHZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh0Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGVpKCl7fVxuZnVuY3Rpb24gZmkoYSxiKXt2YXIgYz1MLGQ9YWkoKSxlPWIoKSxmPSFHZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLHRnPSEwKTtkPWQucXVldWU7Z2koaGkuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09TiYmTi5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2lpKDksamkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09UCl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oT2gmMzApfHxraShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24ga2koYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1MLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LEwudXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gamkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtsaShiKSYmTGcoYSwxLC0xKX1mdW5jdGlvbiBoaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtsaShiKSYmTGcoYSwxLC0xKX0pfWZ1bmN0aW9uIGxpKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUdlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIG1pKGEpe3ZhciBiPSRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YmksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1uaS5iaW5kKG51bGwsTCxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9TC51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxMLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIG9pKCl7cmV0dXJuIGFpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBwaShhLGIsYyxkKXt2YXIgZT0kaCgpO0wuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWlpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBxaShhLGIsYyxkKXt2YXIgZT1haSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1NKXt2YXIgZz1NLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJlRoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWlpKGIsYyxmLGQpO3JldHVybn19TC5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9aWkoMXxiLGMsZixkKX1mdW5jdGlvbiByaShhLGIpe3JldHVybiBwaSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBnaShhLGIpe3JldHVybiBxaSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiBzaShhLGIpe3JldHVybiBxaSg0LDIsYSxiKX1mdW5jdGlvbiB0aShhLGIpe3JldHVybiBxaSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHVpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gdmkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBxaSg0LDQsdWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gd2koKXt9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1haSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmVGgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiB5aShhLGIpe3ZhciBjPWFpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZUaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiB6aShhLGIsYyl7aWYoMD09PShPaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsdGc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0dlKGMsYil8fChjPXhjKCksTC5sYW5lc3w9YyxGZ3w9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gQWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9TmgudHJhbnNpdGlvbjtOaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsTmgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBCaSgpe3JldHVybiBhaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBDaShhLGIsYyl7dmFyIGQ9S2coYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07RGkoYSk/RWkoYixjKTooRmkoYSxiLGMpLGM9SmcoKSxhPUxnKGEsZCxjKSxudWxsIT09YSYmR2koYSxiLGQpKX1cbmZ1bmN0aW9uIG5pKGEsYixjKXt2YXIgZD1LZyhhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihEaShhKSlFaShiLGUpO2Vsc2V7RmkoYSxiLGUpO3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoR2UoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fWM9SmcoKTthPUxnKGEsZCxjKTtudWxsIT09YSYmR2koYSxiLGQpfX1mdW5jdGlvbiBEaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PUx8fG51bGwhPT1iJiZiPT09TH1cbmZ1bmN0aW9uIEVpKGEsYil7UWg9UGg9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBGaShhLGIsYyl7QmcoYSk/KGE9Yi5pbnRlcmxlYXZlZCxudWxsPT09YT8oYy5uZXh0PWMsbnVsbD09PXZnP3ZnPVtiXTp2Zy5wdXNoKGIpKTooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5pbnRlcmxlYXZlZD1jKTooYT1iLnBlbmRpbmcsbnVsbD09PWE/Yy5uZXh0PWM6KGMubmV4dD1hLm5leHQsYS5uZXh0PWMpLGIucGVuZGluZz1jKX1mdW5jdGlvbiBHaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0JjKGEsYyl9fVxudmFyIFloPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazpPLHVzZUNvbnRleHQ6Tyx1c2VFZmZlY3Q6Tyx1c2VJbXBlcmF0aXZlSGFuZGxlOk8sdXNlSW5zZXJ0aW9uRWZmZWN0Ok8sdXNlTGF5b3V0RWZmZWN0Ok8sdXNlTWVtbzpPLHVzZVJlZHVjZXI6Tyx1c2VSZWY6Tyx1c2VTdGF0ZTpPLHVzZURlYnVnVmFsdWU6Tyx1c2VEZWZlcnJlZFZhbHVlOk8sdXNlVHJhbnNpdGlvbjpPLHVzZU11dGFibGVTb3VyY2U6Tyx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpPLHVzZUlkOk8sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxWaD17cmVhZENvbnRleHQ6dWcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXskaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnVnLHVzZUVmZmVjdDpyaSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gcGkoNDE5NDMwOCxcbjQsdWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBwaSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9JGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9JGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1DaS5iaW5kKG51bGwsTCxhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG4kaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTptaSx1c2VEZWJ1Z1ZhbHVlOndpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuICRoKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bWkoITEpLGI9YVswXTthPUFpLmJpbmQobnVsbCxhWzFdKTskaCgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUwsZT0kaCgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1QKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShPaCYzMCl8fGtpKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7cmkoaGkuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtpaSg5LGppLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9JGgoKSxiPVAuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1aZzt2YXIgZD1ZZztjPShkJn4oMTw8MzItbmMoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9UmgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVNoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxXaD17cmVhZENvbnRleHQ6dWcsdXNlQ2FsbGJhY2s6eGksdXNlQ29udGV4dDp1Zyx1c2VFZmZlY3Q6Z2ksdXNlSW1wZXJhdGl2ZUhhbmRsZTp2aSx1c2VJbnNlcnRpb25FZmZlY3Q6c2ksdXNlTGF5b3V0RWZmZWN0OnRpLHVzZU1lbW86eWksdXNlUmVkdWNlcjpjaSx1c2VSZWY6b2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gY2koYmkpfSxcbnVzZURlYnVnVmFsdWU6d2ksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1haSgpO3JldHVybiB6aShiLE0ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWNpKGJpKVswXSxiPWFpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTplaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmaSx1c2VJZDpCaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFhoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazp4aSx1c2VDb250ZXh0OnVnLHVzZUVmZmVjdDpnaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnZpLHVzZUluc2VydGlvbkVmZmVjdDpzaSx1c2VMYXlvdXRFZmZlY3Q6dGksdXNlTWVtbzp5aSx1c2VSZWR1Y2VyOmRpLHVzZVJlZjpvaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBkaShiaSl9LHVzZURlYnVnVmFsdWU6d2ksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1haSgpO3JldHVybiBudWxsPT09XG5NP2IubWVtb2l6ZWRTdGF0ZT1hOnppKGIsTS5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZGkoYmkpWzBdLGI9YWkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmVpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZpLHVzZUlkOkJpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gSGkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9T2EoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIElpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fVxudmFyIEppPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIEtpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpfHwoTGk9ITAsTWk9ZCk7SWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBOaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtJaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7SWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1PaT9PaT1uZXcgU2V0KFt0aGlzXSk6T2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFBpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgSmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1RaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBSaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPXpnKC0xLDEpLGIudGFnPTIsQWcoYyxiKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBUaSxVaSxWaSxXaTtcblRpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtVaT1mdW5jdGlvbigpe307XG5WaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7RWgoQmguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1YYShhLGUpO2Q9WGEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1mYihhLGUpO2Q9ZmIoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1BZil9dGIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O1dpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gWGkoYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUShhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIFlpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztjaChiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBRKGIpLG51bGw7Y2FzZSAxOnJldHVybiBZZihiLnR5cGUpJiZaZigpLFEoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtHaCgpO0UoVmYpO0UoSCk7TGgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpbWgoYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT1maCYmKFppKGZoKSxmaD1udWxsKSk7VWkoYSxiKTtRKGIpO3JldHVybiBudWxsO2Nhc2UgNTpJaChiKTt2YXIgZT1FaChEaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlWaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UShiKTtyZXR1cm4gbnVsbH1hPUVoKEJoLmN1cnJlbnQpO2lmKG1oKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW05mXT1iO2RbT2ZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGtmLmxlbmd0aDtlKyspRChrZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOllhKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2IoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXRiKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZ6ZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZ6ZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VWEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpVYShkKTtpYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1BZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWpiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbTmZdPWI7YVtPZl09ZDtUaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz11YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxrZi5sZW5ndGg7ZSsrKUQoa2ZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WWEoYSxkKTtlPVhhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Z2IoYSxkKTtlPWZiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH10YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9yYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbWIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZuYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmbmIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmc2EoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpVYShhKTtjYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlVhKGEpO2liKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitSYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ViKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZlYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QWYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVEoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKVdpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9RWgoRGguY3VycmVudCk7RWgoQmguY3VycmVudCk7aWYobWgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtOZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxuZGgsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6emYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmemYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbTmZdPWIsYi5zdGF0ZU5vZGU9ZH1RKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShLKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihJJiZudWxsIT09ZWgmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSl7Zm9yKGQ9ZWg7ZDspZD1LZihkLm5leHRTaWJsaW5nKTtuaCgpO2IuZmxhZ3N8PTk4NTYwO3JldHVybiBifWlmKG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtkPW1oKGIpO2lmKG51bGw9PT1hKXtpZighZCl0aHJvdyBFcnJvcihwKDMxOCkpO2Q9XG5iLm1lbW9pemVkU3RhdGU7ZD1udWxsIT09ZD9kLmRlaHlkcmF0ZWQ6bnVsbDtpZighZCl0aHJvdyBFcnJvcihwKDMxNykpO2RbTmZdPWJ9ZWxzZSBuaCgpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UShiKTtyZXR1cm4gbnVsbH1udWxsIT09ZmgmJihaaShmaCksZmg9bnVsbCk7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT9taChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7ZCE9PWMmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oSy5jdXJyZW50JjEpPzA9PT1SJiYoUj0zKTokaSgpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtRKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gR2goKSxVaShhLGIpLG51bGw9PT1hJiZyZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxRKGIpLFxubnVsbDtjYXNlIDEwOnJldHVybiBxZyhiLnR5cGUuX2NvbnRleHQpLFEoYiksbnVsbDtjYXNlIDE3OnJldHVybiBZZihiLnR5cGUpJiZaZigpLFEoYiksbnVsbDtjYXNlIDE5OkUoSyk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFEoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClYaShmLCExKTtlbHNle2lmKDAhPT1SfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9SmgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtYaShmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2NixnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1cbm51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coSyxLLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+YWomJihiLmZsYWdzfD1cbjEyOCxkPSEwLFhpKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPUpoKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksWGkoZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFEoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPmFqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLFhpKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9XG5CKCksYi5zaWJsaW5nPW51bGwsYz1LLmN1cnJlbnQsRyhLLGQ/YyYxfDI6YyYxKSxiO1EoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGNqJjEwNzM3NDE4MjQpJiYoUShiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlEoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9dmFyIGRqPXRhLlJlYWN0Q3VycmVudE93bmVyLHRnPSExO2Z1bmN0aW9uIGVqKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/emgoYixudWxsLGMsZCk6eWgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBmaihhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7c2coYixlKTtkPVVoKGEsYixjLGQsZixlKTtjPVpoKCk7aWYobnVsbCE9PWEmJiF0ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLGdqKGEsYixlKTtJJiZjJiZiaChiKTtiLmZsYWdzfD0xO2VqKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhaWooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsamooYSxiLGYsZCxlKTthPXZoKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SGU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiBnaihhLGIsZSl9Yi5mbGFnc3w9MTthPXRoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gamooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEhlKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYodGc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKHRnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsZ2ooYSxiLGUpfXJldHVybiBraihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gbGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKG1qLGNqKSxjanw9YztlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGQ9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YyxHKG1qLGNqKSxjanw9ZDtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcobWosY2opLGNqfD1hLG51bGw7XG5lbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKG1qLGNqKSxjanw9ZDtlaihhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBuaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBraihhLGIsYyxkLGUpe3ZhciBmPVlmKGMpP1dmOkguY3VycmVudDtmPVhmKGIsZik7c2coYixlKTtjPVVoKGEsYixjLGQsZixlKTtkPVpoKCk7aWYobnVsbCE9PWEmJiF0ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLGdqKGEsYixlKTtJJiZkJiZiaChiKTtiLmZsYWdzfD0xO2VqKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2ooYSxiLGMsZCxlKXtpZihZZihjKSl7dmFyIGY9ITA7YmcoYil9ZWxzZSBmPSExO3NnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE9nKGIsYyxkKSxRZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD11ZyhsKToobD1ZZihjKT9XZjpILmN1cnJlbnQsbD1YZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyx1PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTt1fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmUGcoYixnLGQsbCk7d2c9ITE7dmFyIHE9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cTtFZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cSE9PWt8fFZmLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKElnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TmcoYixjLGgsZCxxLGssbCkpPyh1fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDprZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3U9Yi5wZW5kaW5nUHJvcHM7cT1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az11ZyhrKTooaz1ZZihjKT9XZjpILmN1cnJlbnQsaz1YZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXV8fHEhPT1rKSYmUGcoYixnLGQsayk7d2c9ITE7cT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1xO0VnKGIsZCxnLGUpO3ZhciBtPWIubWVtb2l6ZWRTdGF0ZTtoIT09dXx8cSE9PW18fFZmLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKElnKGIsYyx5LGQpLG09Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TmcoYixjLGwsZCxxLG0sayl8fCExKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG0sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxtLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9bSksZy5wcm9wcz1kLGcuc3RhdGU9bSxnLmNvbnRleHQ9XG5rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIHBqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHBqKGEsYixjLGQsZSxmKXtuaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmY2coYixjLCExKSxnaihhLGIsZik7ZD1iLnN0YXRlTm9kZTtkai5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPXloKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9eWgoYixudWxsLGgsZikpOmVqKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmNnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcWooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD8kZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiYkZihhLGIuY29udGV4dCwhMSk7RmgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlKXtuaCgpO29oKGUpO2IuZmxhZ3N8PTI1NjtlaihhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgc2o9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiB0aihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19ZnVuY3Rpb24gdWooYSxiKXtyZXR1cm57YmFzZUxhbmVzOmEuYmFzZUxhbmVzfGIsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6YS50cmFuc2l0aW9uc319XG5mdW5jdGlvbiB2aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1LLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coSyxlJjEpO2lmKG51bGw9PT1hKXtraChiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7ZT1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGU9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjplfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmUpOmY9d2ooZSxkLDAsbnVsbCksYT14aChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT10aihjKSxiLm1lbW9pemVkU3RhdGU9c2osYSk6eGooYixlKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7aD1lLmRlaHlkcmF0ZWQ7aWYobnVsbCE9PWgpe2lmKGcpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LHlqKGEsYixjLEVycm9yKHAoNDIyKSkpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD13aih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj14aChmLGUsYyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJnloKGIsYS5jaGlsZCxcbm51bGwsYyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPXRqKGMpO2IubWVtb2l6ZWRTdGF0ZT1zajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSliPXlqKGEsYixjLG51bGwpO2Vsc2UgaWYoXCIkIVwiPT09aC5kYXRhKWI9eWooYSxiLGMsRXJyb3IocCg0MTkpKSk7ZWxzZSBpZihkPTAhPT0oYyZhLmNoaWxkTGFuZXMpLHRnfHxkKXtkPVA7aWYobnVsbCE9PWQpe3N3aXRjaChjJi1jKXtjYXNlIDQ6Zj0yO2JyZWFrO2Nhc2UgMTY6Zj04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpmPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmY9XG4yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDpmPTB9ZD0wIT09KGYmKGQuc3VzcGVuZGVkTGFuZXN8YykpPzA6ZjswIT09ZCYmZCE9PWUucmV0cnlMYW5lJiYoZS5yZXRyeUxhbmU9ZCxMZyhhLGQsLTEpKX0kaSgpO2I9eWooYSxiLGMsRXJyb3IocCg0MjEpKSl9ZWxzZVwiJD9cIj09PWguZGF0YT8oYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXpqLmJpbmQobnVsbCxhKSxoLl9yZWFjdFJldHJ5PWIsYj1udWxsKTooYz1lLnRyZWVDb250ZXh0LGVoPUtmKGgubmV4dFNpYmxpbmcpLGRoPWIsST0hMCxmaD1udWxsLG51bGwhPT1jJiYoVmdbV2crK109WWcsVmdbV2crK109WmcsVmdbV2crK109WGcsWWc9Yy5pZCxaZz1jLm92ZXJmbG93LFhnPWIpLGI9eGooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiksYi5mbGFnc3w9NDA5Nik7cmV0dXJuIGJ9aWYoZilyZXR1cm4gZD1BaihhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxcbmYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT90aihjKTp1aihlLGMpLGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNqLGQ7Yz1CaihhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPUFqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT90aihjKTp1aihlLGMpLGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNqLGQ7Yz1CaihhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB4aihhLGIpe2I9d2ooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifVxuZnVuY3Rpb24gQmooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPXRoKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjEpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoZD1iLmRlbGV0aW9ucyxudWxsPT09ZD8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYSkpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiBBaihhLGIsYyxkLGUpe3ZhciBmPWIubW9kZTthPWEuY2hpbGQ7dmFyIGc9YS5zaWJsaW5nLGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMSkmJmIuY2hpbGQhPT1hPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxiLmRlbGV0aW9ucz1udWxsKTooYz10aChhLGgpLGMuc3VidHJlZUZsYWdzPWEuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09Zz9kPXRoKGcsZCk6KGQ9eGgoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aihhLGIsYyxkKXtudWxsIT09ZCYmb2goZCk7eWgoYixhLmNoaWxkLG51bGwsYyk7YT14aihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gQ2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtyZyhhLnJldHVybixiLGMpfWZ1bmN0aW9uIERqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiBFaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2VqKGEsYixkLmNoaWxkcmVuLGMpO2Q9Sy5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJkNqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpQ2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKEssZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUpoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7RGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1KaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9RGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6RGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0ZnfD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz10aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9dGgoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIEZqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpxaihiKTtuaCgpO2JyZWFrO2Nhc2UgNTpIaChiKTticmVhaztjYXNlIDE6WWYoYi50eXBlKSYmYmcoYik7YnJlYWs7Y2FzZSA0OkZoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhsZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoSyxLLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHZqKGEsYixjKTtHKEssSy5jdXJyZW50JjEpO2E9Z2ooYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKEssSy5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiBFaihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhLLEsuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGxqKGEsYixjKX1yZXR1cm4gZ2ooYSxiLGMpfVxuZnVuY3Rpb24gR2ooYSxiKXtjaChiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWWYoYi50eXBlKSYmWmYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEdoKCksRShWZiksRShIKSxMaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEloKGIpLG51bGw7Y2FzZSAxMzpFKEspO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtuaCgpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKEspLG51bGw7Y2FzZSA0OnJldHVybiBHaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcWcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYmooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgSGo9ITEsUz0hMSxJaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxUPW51bGw7ZnVuY3Rpb24gSmooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtVKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIEtqKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1UoYSxiLGQpfX12YXIgTGo9ITE7XG5mdW5jdGlvbiBNaihhLGIpe0JmPWNkO2E9TGUoKTtpZihNZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChaKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbj0wLHU9YSxxPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXt1IT09Y3x8MCE9PWUmJjMhPT11Lm5vZGVUeXBlfHwoaD1nK2UpO3UhPT1mfHwwIT09ZCYmMyE9PXUubm9kZVR5cGV8fChrPWcrZCk7Mz09PXUubm9kZVR5cGUmJihnKz1cbnUubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXUuZmlyc3RDaGlsZCkpYnJlYWs7cT11O3U9eX1mb3IoOzspe2lmKHU9PT1hKWJyZWFrIGI7cT09PWMmJisrbD09PWUmJihoPWcpO3E9PT1mJiYrK249PT1kJiYoaz1nKTtpZihudWxsIT09KHk9dS5uZXh0U2libGluZykpYnJlYWs7dT1xO3E9dS5wYXJlbnROb2RlfXU9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0NmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2NkPSExO2ZvcihUPWI7bnVsbCE9PVQ7KWlmKGI9VCxhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixUPWE7ZWxzZSBmb3IoO251bGwhPT1UOyl7Yj1UO3RyeXt2YXIgbT1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1tKXt2YXIgdz1tLm1lbW9pemVkUHJvcHMsSj1tLm1lbW9pemVkU3RhdGUsdj1iLnN0YXRlTm9kZSx4PXYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT93OmtnKGIudHlwZSx3KSxKKTt2Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXh9YnJlYWs7Y2FzZSAzOnZhciByPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoMT09PXIubm9kZVR5cGUpci50ZXh0Q29udGVudD1cIlwiO2Vsc2UgaWYoOT09PXIubm9kZVR5cGUpe3ZhciBGPXIuYm9keTtudWxsIT1GJiYoRi50ZXh0Q29udGVudD1cIlwiKX1icmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKFope1UoYixiLnJldHVybixaKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47VD1hO2JyZWFrfVQ9Yi5yZXR1cm59bT1MajtMaj0hMTtyZXR1cm4gbX1cbmZ1bmN0aW9uIE5qKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJktqKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIE9qKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBQaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gUWooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFFqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbTmZdLGRlbGV0ZSBiW09mXSxkZWxldGUgYltuZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW1FmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gUmooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBTaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxSaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gVGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUFmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFRqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gVWooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihVaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVVqKGEsYixjKSxhPWEuc2libGluZ312YXIgVj1udWxsLFZqPSExO2Z1bmN0aW9uIFdqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylYaihhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7aWYoa2MmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7a2Mub25Db21taXRGaWJlclVubW91bnQoamMsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlN8fEpqKGMsYik7Y2FzZSA2OnZhciBkPVYsZT1WajtWPW51bGw7V2ooYSxiLGMpO1Y9ZDtWaj1lO251bGwhPT1WJiYoVmo/KGE9VixjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpWLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09ViYmKFZqPyhhPVYsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9KZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJkpmKGEsYyksYWQoYSkpOkpmKFYsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1WO2U9Vmo7Vj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1ZqPSEwO1xuV2ooYSxiLGMpO1Y9ZDtWaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighUyYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/S2ooYyxiLGcpOjAhPT0oZiY0KSYmS2ooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9V2ooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighUyYmKEpqKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtVKGMsYixoKX1XaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpXaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oUz0oZD1TKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFdqKGEsYixjKSxTPWQpOldqKGEsYixjKTticmVhaztkZWZhdWx0OldqKGEsYixjKX19ZnVuY3Rpb24gWWooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgSWopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1aai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGFrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpWPWguc3RhdGVOb2RlO1ZqPSExO2JyZWFrIGE7Y2FzZSAzOlY9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztWaj0hMDticmVhayBhO2Nhc2UgNDpWPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Vmo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1WKXRocm93IEVycm9yKHAoMTYwKSk7WGooZixnLGUpO1Y9bnVsbDtWaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VShlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWJrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBiayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphayhiLGEpO2NrKGEpO2lmKGQmNCl7dHJ5e05qKDMsYSxhLnJldHVybiksT2ooMyxhKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9dHJ5e05qKDUsYSxhLnJldHVybil9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX1icmVhaztjYXNlIDE6YWsoYixhKTtjayhhKTtkJjUxMiYmbnVsbCE9PWMmJkpqKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTphayhiLGEpO2NrKGEpO2QmNTEyJiZudWxsIT09YyYmSmooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e25iKGUsXCJcIil9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZaYShlLGYpO3ViKGgsZyk7dmFyIGw9dWIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG49a1tnXSx1PWtbZysxXTtcInN0eWxlXCI9PT1uP3JiKGUsdSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bj9tYihlLHUpOlwiY2hpbGRyZW5cIj09PW4/bmIoZSx1KTpzYShlLG4sdSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6JGEoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcT1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZWIoZSwhIWYubXVsdGlwbGUseSwhMSk6cSE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ViKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmViKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbT2ZdPWZ9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX1icmVhaztjYXNlIDY6YWsoYixhKTtjayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2w9YS5zdGF0ZU5vZGU7bj1hLm1lbW9pemVkUHJvcHM7dHJ5e2wubm9kZVZhbHVlPW59Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX1icmVhaztjYXNlIDM6YWsoYixhKTtjayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXthZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX1icmVhaztjYXNlIDQ6YWsoYixhKTtjayhhKTticmVhaztjYXNlIDEzOmFrKGIsYSk7Y2soYSk7bD1hLmNoaWxkO2wuZmxhZ3MmODE5MiYmbnVsbCE9PWwubWVtb2l6ZWRTdGF0ZSYmKG51bGw9PT1sLmFsdGVybmF0ZXx8bnVsbD09PWwuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUpJiZcbihkaz1CKCkpO2QmNCYmWWooYSk7YnJlYWs7Y2FzZSAyMjpsPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhTPShuPVMpfHxsLGFrKGIsYSksUz1uKTphayhiLGEpO2NrKGEpO2lmKGQmODE5Mil7bj1udWxsIT09YS5tZW1vaXplZFN0YXRlO2E6Zm9yKHU9bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09dSl7dT1xO3RyeXtlPXEuc3RhdGVOb2RlLG4/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PXFiKFwiZGlzcGxheVwiLGcpKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fX1lbHNlIGlmKDY9PT1cbnEudGFnKXtpZihudWxsPT09dSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPW4/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7dT09PXEmJih1PW51bGwpO3E9cS5yZXR1cm59dT09PXEmJih1PW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9aWYobiYmIWwmJjAhPT0oYS5tb2RlJjEpKWZvcihUPWEsYT1hLmNoaWxkO251bGwhPT1hOyl7Zm9yKGw9VD1hO251bGwhPT1UOyl7bj1UO3U9bi5jaGlsZDtzd2l0Y2gobi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpOaig0LFxubixuLnJldHVybik7YnJlYWs7Y2FzZSAxOkpqKG4sbi5yZXR1cm4pO2Y9bi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50V2lsbFVubW91bnQpe3E9bjt5PW4ucmV0dXJuO3RyeXtlPXEsZi5wcm9wcz1lLm1lbW9pemVkUHJvcHMsZi5zdGF0ZT1lLm1lbW9pemVkU3RhdGUsZi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKG0pe1UocSx5LG0pfX1icmVhaztjYXNlIDU6SmoobixuLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09bi5tZW1vaXplZFN0YXRlKXtlayhsKTtjb250aW51ZX19bnVsbCE9PXU/KHUucmV0dXJuPW4sVD11KTplayhsKX1hPWEuc2libGluZ319YnJlYWs7Y2FzZSAxOTphayhiLGEpO2NrKGEpO2QmNCYmWWooYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmFrKGIsYSksY2soYSl9fVxuZnVuY3Rpb24gY2soYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihSaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG5iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1TaihhKTtVaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9U2ooYSk7VGooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1UoYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gZmsoYSxiLGMpe1Q9YTtnayhhLGIsYyl9XG5mdW5jdGlvbiBnayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1UOyl7dmFyIGU9VCxmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8SGo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFM7aD1Iajt2YXIgbD1TO0hqPWc7aWYoKFM9aykmJiFsKWZvcihUPWU7bnVsbCE9PVQ7KWc9VCxrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9oayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxUPWspOmhrKGUpO2Zvcig7bnVsbCE9PWY7KVQ9ZixnayhmLGIsYyksZj1mLnNpYmxpbmc7VD1lO0hqPWg7Uz1sfWlrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFQ9Zik6aWsoYSxiLGMpfX1cbmZ1bmN0aW9uIGlrKGEpe2Zvcig7bnVsbCE9PVQ7KXt2YXIgYj1UO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6U3x8T2ooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhUylpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczprZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZHZyhiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9R2coYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbj1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW4pe3ZhciB1PW4uZGVoeWRyYXRlZDtudWxsIT09dSYmYWQodSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVN8fGIuZmxhZ3MmNTEyJiZQaihiKX1jYXRjaChxKXtVKGIsYi5yZXR1cm4scSl9fWlmKGI9PT1hKXtUPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Q9YzticmVha31UPWIucmV0dXJufX1mdW5jdGlvbiBlayhhKXtmb3IoO251bGwhPT1UOyl7dmFyIGI9VDtpZihiPT09YSl7VD1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47VD1jO2JyZWFrfVQ9Yi5yZXR1cm59fVxuZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09VDspe3ZhciBiPVQ7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7T2ooNCxiKX1jYXRjaChrKXtVKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VShiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtQaihiKX1jYXRjaChrKXtVKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1BqKGIpfWNhdGNoKGspe1UoYixnLGspfX19Y2F0Y2goayl7VShiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtUPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtUPWg7YnJlYWt9VD1iLnJldHVybn19XG52YXIgams9TWF0aC5jZWlsLGtrPXRhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbGs9dGEuUmVhY3RDdXJyZW50T3duZXIsbWs9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsVz0wLFA9bnVsbCxYPW51bGwsWT0wLGNqPTAsbWo9VGYoMCksUj0wLG5rPW51bGwsRmc9MCxvaz0wLHBrPTAscWs9bnVsbCxyaz1udWxsLGRrPTAsYWo9SW5maW5pdHksc2s9bnVsbCxMaT0hMSxNaT1udWxsLE9pPW51bGwsdGs9ITEsdWs9bnVsbCx2az0wLHdrPTAseGs9bnVsbCx5az0tMSx6az0wO2Z1bmN0aW9uIEpnKCl7cmV0dXJuIDAhPT0oVyY2KT9CKCk6LTEhPT15az95azp5az1CKCl9XG5mdW5jdGlvbiBLZyhhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KFcmMikmJjAhPT1ZKXJldHVybiBZJi1ZO2lmKG51bGwhPT1qZy50cmFuc2l0aW9uKXJldHVybiAwPT09emsmJih6az14YygpKSx6azthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmlkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gTGcoYSxiLGMpe2lmKDUwPHdrKXRocm93IHdrPTAseGs9bnVsbCxFcnJvcihwKDE4NSkpO3ZhciBkPUFrKGEsYik7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7emMoZCxiLGMpO2lmKDA9PT0oVyYyKXx8ZCE9PVApZD09PVAmJigwPT09KFcmMikmJihva3w9YiksND09PVImJkJrKGQsWSkpLENrKGQsYyksMT09PWImJjA9PT1XJiYwPT09KGEubW9kZSYxKSYmKGFqPUIoKSs1MDAsZWcmJmlnKCkpO3JldHVybiBkfVxuZnVuY3Rpb24gQWsoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfWZ1bmN0aW9uIEJnKGEpe3JldHVybihudWxsIT09UHx8bnVsbCE9PXZnKSYmMCE9PShhLm1vZGUmMSkmJjA9PT0oVyYyKX1cbmZ1bmN0aW9uIENrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7dmMoYSxiKTt2YXIgZD10YyhhLGE9PT1QP1k6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmFjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYWMoYyk7aWYoMT09PWIpMD09PWEudGFnP2hnKERrLmJpbmQobnVsbCxhKSk6Z2coRGsuYmluZChudWxsLGEpKSxJZihmdW5jdGlvbigpezA9PT1XJiZpZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKENjKGQpKXtjYXNlIDE6Yz1lYzticmVhaztjYXNlIDQ6Yz1mYzticmVhaztjYXNlIDE2OmM9Z2M7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1pYzticmVhaztkZWZhdWx0OmM9Z2N9Yz1FayhjLEZrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBGayhhLGIpe3lrPS0xO3prPTA7aWYoMCE9PShXJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoR2soKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXRjKGEsYT09PVA/WTowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SGsoYSxkKTtlbHNle2I9ZDt2YXIgZT1XO1d8PTI7dmFyIGY9SWsoKTtpZihQIT09YXx8WSE9PWIpc2s9bnVsbCxhaj1CKCkrNTAwLEprKGEsYik7ZG8gdHJ5e0trKCk7YnJlYWt9Y2F0Y2goaCl7TGsoYSxoKX13aGlsZSgxKTtwZygpO2trLmN1cnJlbnQ9ZjtXPWU7bnVsbCE9PVg/Yj0wOihQPW51bGwsWT0wLGI9Uil9aWYoMCE9PWIpezI9PT1iJiYoZT13YyhhKSwwIT09ZSYmKGQ9ZSxiPU1rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxkKSxDayhhLEIoKSksYztpZig2PT09YilCayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIU5rKGUpJiYoYj1IayhhLGQpLDI9PT1iJiYoZj13YyhhKSwwIT09ZiYmKGQ9ZixiPU1rKGEsZikpKSwxPT09YikpdGhyb3cgYz1uayxKayhhLDApLEJrKGEsZCksQ2soYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpPayhhLHJrLHNrKTticmVhaztjYXNlIDM6QmsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9ZGsrNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXRjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7SmcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUVmKE9rLmJpbmQobnVsbCxhLHJrLHNrKSxiKTticmVha31PayhhLHJrLHNrKTticmVhaztjYXNlIDQ6QmsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1uYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpqayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1FZihPay5iaW5kKG51bGwsYSxyayxzayksZCk7YnJlYWt9T2soYSxyayxzayk7YnJlYWs7Y2FzZSA1Ok9rKGEscmssc2spO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1DayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Gay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE1rKGEsYil7dmFyIGM9cWs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoSmsoYSxiKS5mbGFnc3w9MjU2KTthPUhrKGEsYik7MiE9PWEmJihiPXJrLHJrPWMsbnVsbCE9PWImJlppKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBaaShhKXtudWxsPT09cms/cms9YTpyay5wdXNoLmFwcGx5KHJrLGEpfVxuZnVuY3Rpb24gTmsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFHZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIEJrKGEsYil7YiY9fnBrO2ImPX5vazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW5jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBEayhhKXtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtHaygpO3ZhciBiPXRjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBDayhhLEIoKSksbnVsbDt2YXIgYz1IayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXdjKGEpOzAhPT1kJiYoYj1kLGM9TWsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1uayxKayhhLDApLEJrKGEsYiksQ2soYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO09rKGEscmssc2spO0NrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFBrKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YywwPT09VyYmKGFqPUIoKSs1MDAsZWcmJmlnKCkpfX1mdW5jdGlvbiBRayhhKXtudWxsIT09dWsmJjA9PT11ay50YWcmJjA9PT0oVyY2KSYmR2soKTt2YXIgYj1XO1d8PTE7dmFyIGM9bWsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKG1rLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLG1rLnRyYW5zaXRpb249YyxXPWIsMD09PShXJjYpJiZpZygpfX1mdW5jdGlvbiBiaigpe2NqPW1qLmN1cnJlbnQ7RShtail9XG5mdW5jdGlvbiBKayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxGZihjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO2NoKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZaZigpO2JyZWFrO2Nhc2UgMzpHaCgpO0UoVmYpO0UoSCk7TGgoKTticmVhaztjYXNlIDU6SWgoZCk7YnJlYWs7Y2FzZSA0OkdoKCk7YnJlYWs7Y2FzZSAxMzpFKEspO2JyZWFrO2Nhc2UgMTk6RShLKTticmVhaztjYXNlIDEwOnFnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOmJqKCl9Yz1jLnJldHVybn1QPWE7WD1hPXRoKGEuY3VycmVudCxudWxsKTtZPWNqPWI7Uj0wO25rPW51bGw7cGs9b2s9Rmc9MDtyaz1xaz1udWxsO2lmKG51bGwhPT12Zyl7Zm9yKGI9XG4wO2I8dmcubGVuZ3RoO2IrKylpZihjPXZnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfXZnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBMayhhLGIpe2Rve3ZhciBjPVg7dHJ5e3BnKCk7TWguY3VycmVudD1ZaDtpZihQaCl7Zm9yKHZhciBkPUwubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9UGg9ITF9T2g9MDtOPU09TD1udWxsO1FoPSExO1JoPTA7bGsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1I9MTtuaz1iO1g9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVk7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxuPWgsdT1uLnRhZztpZigwPT09KG4ubW9kZSYxKSYmKDA9PT11fHwxMT09PXV8fDE1PT09dSkpe3ZhciBxPW4uYWx0ZXJuYXRlO3E/KG4udXBkYXRlUXVldWU9cS51cGRhdGVRdWV1ZSxuLm1lbW9pemVkU3RhdGU9cS5tZW1vaXplZFN0YXRlLFxubi5sYW5lcz1xLmxhbmVzKToobi51cGRhdGVRdWV1ZT1udWxsLG4ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1SaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztTaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZQaShmLGwsYik7Yj15O2s9bDt2YXIgbT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1tKXt2YXIgdz1uZXcgU2V0O3cuYWRkKGspO2IudXBkYXRlUXVldWU9d31lbHNlIG0uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1BpKGYsbCxiKTskaSgpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1SaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7U2koSixnLGgsZixiKTtvaChrKTticmVhayBhfX1mPWs7NCE9PVImJihSPTIpO251bGw9PT1xaz9xaz1bZl06cWsucHVzaChmKTtrPUhpKGssaCk7aD1nO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZmxhZ3N8PTY1NTM2O1xuYiY9LWI7aC5sYW5lc3w9Yjt2YXIgdj1LaShoLGssYik7RGcoaCx2KTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIHg9aC50eXBlLHI9aC5zdGF0ZU5vZGU7aWYoMD09PShoLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1yJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygci5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1PaXx8IU9pLmhhcyhyKSkpKXtoLmZsYWdzfD02NTUzNjtiJj0tYjtoLmxhbmVzfD1iO3ZhciBGPU5pKGgsZixiKTtEZyhoLEYpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVJrKGMpfWNhdGNoKFope2I9WjtYPT09YyYmbnVsbCE9PWMmJihYPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIElrKCl7dmFyIGE9a2suY3VycmVudDtray5jdXJyZW50PVloO3JldHVybiBudWxsPT09YT9ZaDphfVxuZnVuY3Rpb24gJGkoKXtpZigwPT09Unx8Mz09PVJ8fDI9PT1SKVI9NDtudWxsPT09UHx8MD09PShGZyYyNjg0MzU0NTUpJiYwPT09KG9rJjI2ODQzNTQ1NSl8fEJrKFAsWSl9ZnVuY3Rpb24gSGsoYSxiKXt2YXIgYz1XO1d8PTI7dmFyIGQ9SWsoKTtpZihQIT09YXx8WSE9PWIpc2s9bnVsbCxKayhhLGIpO2RvIHRyeXtTaygpO2JyZWFrfWNhdGNoKGUpe0xrKGEsZSl9d2hpbGUoMSk7cGcoKTtXPWM7a2suY3VycmVudD1kO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHAoMjYxKSk7UD1udWxsO1k9MDtyZXR1cm4gUn1mdW5jdGlvbiBTaygpe2Zvcig7bnVsbCE9PVg7KVRrKFgpfWZ1bmN0aW9uIEtrKCl7Zm9yKDtudWxsIT09WCYmIWJjKCk7KVRrKFgpfWZ1bmN0aW9uIFRrKGEpe3ZhciBiPVVrKGEuYWx0ZXJuYXRlLGEsY2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9SayhhKTpYPWI7bGsuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gUmsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9WWkoYyxiLGNqKSxudWxsIT09Yyl7WD1jO3JldHVybn19ZWxzZXtjPUdqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1g9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7Uj02O1g9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtYPWI7cmV0dXJufVg9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09UiYmKFI9NSl9ZnVuY3Rpb24gT2soYSxiLGMpe3ZhciBkPUMsZT1tay50cmFuc2l0aW9uO3RyeXttay50cmFuc2l0aW9uPW51bGwsQz0xLFZrKGEsYixjLGQpfWZpbmFsbHl7bWsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZrKGEsYixjLGQpe2RvIEdrKCk7d2hpbGUobnVsbCE9PXVrKTtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0FjKGEsZik7YT09PVAmJihYPVA9bnVsbCxZPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8dGt8fCh0az0hMCxFayhnYyxmdW5jdGlvbigpe0drKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPW1rLnRyYW5zaXRpb247bWsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9VztXfD00O2xrLmN1cnJlbnQ9bnVsbDtNaihhLGMpO2JrKGMsYSk7TmUoQ2YpO2NkPSEhQmY7Q2Y9QmY9bnVsbDthLmN1cnJlbnQ9YztmayhjLGEsZSk7Y2MoKTtXPWg7Qz1nO21rLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3RrJiYodGs9ITEsdWs9YSx2az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoT2k9bnVsbCk7bGMoYy5zdGF0ZU5vZGUsZCk7Q2soYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKylkKGJbY10pO2lmKExpKXRocm93IExpPSExLGE9TWksTWk9bnVsbCxhOzAhPT0odmsmMSkmJjAhPT1hLnRhZyYmR2soKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09eGs/d2srKzood2s9MCx4az1hKTp3az0wO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBHaygpe2lmKG51bGwhPT11ayl7dmFyIGE9Q2ModmspLGI9bWsudHJhbnNpdGlvbixjPUM7dHJ5e21rLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09dWspdmFyIGQ9ITE7ZWxzZXthPXVrO3VrPW51bGw7dms9MDtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1XO1d8PTQ7Zm9yKFQ9YS5jdXJyZW50O251bGwhPT1UOyl7dmFyIGY9VCxnPWYuY2hpbGQ7aWYoMCE9PShULmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihUPWw7bnVsbCE9PVQ7KXt2YXIgbj1UO3N3aXRjaChuLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpOaig4LG4sZil9dmFyIHU9bi5jaGlsZDtpZihudWxsIT09dSl1LnJldHVybj1uLFQ9dTtlbHNlIGZvcig7bnVsbCE9PVQ7KXtuPVQ7dmFyIHE9bi5zaWJsaW5nLHk9bi5yZXR1cm47UWoobik7aWYobj09PVxubCl7VD1udWxsO2JyZWFrfWlmKG51bGwhPT1xKXtxLnJldHVybj15O1Q9cTticmVha31UPXl9fX12YXIgbT1mLmFsdGVybmF0ZTtpZihudWxsIT09bSl7dmFyIHc9bS5jaGlsZDtpZihudWxsIT09dyl7bS5jaGlsZD1udWxsO2Rve3ZhciBKPXcuc2libGluZzt3LnNpYmxpbmc9bnVsbDt3PUp9d2hpbGUobnVsbCE9PXcpfX1UPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVD1nO2Vsc2UgYjpmb3IoO251bGwhPT1UOyl7Zj1UO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6TmooOSxmLGYucmV0dXJuKX12YXIgdj1mLnNpYmxpbmc7aWYobnVsbCE9PXYpe3YucmV0dXJuPWYucmV0dXJuO1Q9djticmVhayBifVQ9Zi5yZXR1cm59fXZhciB4PWEuY3VycmVudDtmb3IoVD14O251bGwhPT1UOyl7Zz1UO3ZhciByPWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxucilyLnJldHVybj1nLFQ9cjtlbHNlIGI6Zm9yKGc9eDtudWxsIT09VDspe2g9VDtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpPaig5LGgpfX1jYXRjaChaKXtVKGgsaC5yZXR1cm4sWil9aWYoaD09PWcpe1Q9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47VD1GO2JyZWFrIGJ9VD1oLnJldHVybn19Vz1lO2lnKCk7aWYoa2MmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2tjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChqYyxhKX1jYXRjaChaKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxtay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFdrKGEsYixjKXtiPUhpKGMsYik7Yj1LaShhLGIsMSk7QWcoYSxiKTtiPUpnKCk7YT1BayhhLDEpO251bGwhPT1hJiYoemMoYSwxLGIpLENrKGEsYikpfVxuZnVuY3Rpb24gVShhLGIsYyl7aWYoMz09PWEudGFnKVdrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1drKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PU9pfHwhT2kuaGFzKGQpKSl7YT1IaShjLGEpO2E9TmkoYixhLDEpO0FnKGIsYSk7YT1KZygpO2I9QWsoYiwxKTtudWxsIT09YiYmKHpjKGIsMSxhKSxDayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SmcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7UD09PWEmJihZJmMpPT09YyYmKDQ9PT1SfHwzPT09UiYmKFkmMTMwMDIzNDI0KT09PVkmJjUwMD5CKCktZGs/SmsoYSwwKTpwa3w9Yyk7Q2soYSxiKX1mdW5jdGlvbiBYayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXJjLHJjPDw9MSwwPT09KHJjJjEzMDAyMzQyNCkmJihyYz00MTk0MzA0KSkpO3ZhciBjPUpnKCk7YT1BayhhLGIpO251bGwhPT1hJiYoemMoYSxiLGMpLENrKGEsYykpfWZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtYayhhLGMpfVxuZnVuY3Rpb24gWmooYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WGsoYSxjKX12YXIgVWs7XG5Vaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFZmLmN1cnJlbnQpdGc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiB0Zz0hMSxGaihhLGIsYyk7dGc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSB0Zz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJmFoKGIsVWcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVhmKGIsSC5jdXJyZW50KTtzZyhiLGMpO2U9VWgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVpoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/XG4oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPW51bGwsWWYoZCk/KGY9ITAsYmcoYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCx4ZyhiKSxlLnVwZGF0ZXI9TWcsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLFFnKGIsZCxhLGMpLGI9cGoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmYmgoYiksZWoobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1ZayhkKTthPWtnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWtqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1vaihudWxsLGIsXG5kLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9ZmoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1oaihudWxsLGIsZCxrZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixkLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTprZyhkLGUpLGtqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTprZyhkLGUpLG9qKGEsYixkLGUsYyk7Y2FzZSAzOmE6e3FqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDt5ZyhhLGIpO0VnKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLFxuY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUVycm9yKHAoNDIzKSk7Yj1yaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1FcnJvcihwKDQyNCkpO2I9cmooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKGVoPUtmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksZGg9YixJPSEwLGZoPW51bGwsYz16aChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtuaCgpO2lmKGQ9PT1lKXtiPWdqKGEsYixjKTticmVhayBhfWVqKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEhoKGIpLG51bGw9PT1hJiZraChiKSxkPWIudHlwZSxlPVxuYi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRGYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkRmKGQsZikmJihiLmZsYWdzfD0zMiksbmooYSxiKSxlaihhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmtoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdmooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gRmgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9eWgoYixudWxsLGQsYyk6ZWooYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTprZyhkLGUpLGZqKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBlaihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGVqKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGVqKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO2c9ZS52YWx1ZTtHKGxnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoR2UoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFWZi5jdXJyZW50KXtiPWdqKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPXpnKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbj1sLnBlbmRpbmc7bnVsbD09PW4/ay5uZXh0PVxuazooay5uZXh0PW4ubmV4dCxuLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO3JnKGYucmV0dXJuLGMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtyZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9ZWooYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO1xuY2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHNnKGIsYyksZT11ZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxlaihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9a2coZCxiLnBlbmRpbmdQcm9wcyksZT1rZyhkLnR5cGUsZSksaGooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBqaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxZZihkKT8oYT0hMCxiZyhiKSk6YT0hMSxzZyhiLGMpLE9nKGIsZCxlKSxRZyhiLGQsZSxjKSxwaihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEVqKGEsYixjKTtjYXNlIDIyOnJldHVybiBsaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsXG5iLnRhZykpO307ZnVuY3Rpb24gRWsoYSxiKXtyZXR1cm4gJGIoYSxiKX1mdW5jdGlvbiBaayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBoaChhLGIsYyxkKXtyZXR1cm4gbmV3IFprKGEsYixjLGQpfVxuZnVuY3Rpb24gaWooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBZayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gaWooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUNhKXJldHVybiAxMTtpZihhPT09RmEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gdGgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1oaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gdmgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWlqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHdhOnJldHVybiB4aChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHhhOmc9ODtlfD04O2JyZWFrO2Nhc2UgemE6cmV0dXJuIGE9aGgoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT16YSxhLmxhbmVzPWYsYTtjYXNlIERhOnJldHVybiBhPWhoKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPURhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9aGgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBIYTpyZXR1cm4gd2ooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEFhOmc9MTA7YnJlYWsgYTtjYXNlIEJhOmc9OTticmVhayBhO2Nhc2UgQ2E6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBGYTpnPTE0O2JyZWFrIGE7Y2FzZSBHYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9aGgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiB4aChhLGIsYyxkKXthPWhoKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB3aihhLGIsYyxkKXthPWhoKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUhhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17fTtyZXR1cm4gYX1mdW5jdGlvbiB1aChhLGIsYyl7YT1oaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB3aChhLGIsYyl7Yj1oaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRrKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9eWMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9eWMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9eWMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGFsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyAkayhhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPWhoKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07eGcoZik7cmV0dXJuIGF9ZnVuY3Rpb24gYmwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp2YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGNsKGEpe2lmKCFhKXJldHVybiBVZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFViKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWWYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihZZihjKSlyZXR1cm4gYWcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZGwoYSxiLGMsZCxlLGYsZyxoLGspe2E9YWwoYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9Y2wobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1KZygpO2U9S2coYyk7Zj16ZyhkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO0FnKGMsZik7YS5jdXJyZW50LmxhbmVzPWU7emMoYSxlLGQpO0NrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZWwoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SmcoKSxnPUtnKGUpO2M9Y2woYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO2E9TGcoZSxnLGYpO251bGwhPT1hJiZDZyhhLGUsZyk7cmV0dXJuIGd9XG5mdW5jdGlvbiBmbChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGdsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBobChhLGIpe2dsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZnbChhLGIpfWZ1bmN0aW9uIGlsKCl7cmV0dXJuIG51bGx9dmFyIGpsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBrbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbmxsLnByb3RvdHlwZS5yZW5kZXI9a2wucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtlbChhLGIsbnVsbCxudWxsKX07bGwucHJvdG90eXBlLnVubW91bnQ9a2wucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztRayhmdW5jdGlvbigpe2VsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt0Zl09bnVsbH19O2Z1bmN0aW9uIGxsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubGwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUdjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxQYy5sZW5ndGgmJjAhPT1iJiZiPFBjW2NdLnByaW9yaXR5O2MrKyk7UGMuc3BsaWNlKGMsMCxhKTswPT09YyYmVWMoYSl9fTtmdW5jdGlvbiBtbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gbmwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIG9sKCl7fVxuZnVuY3Rpb24gcGwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9ZmwoZyk7Zi5jYWxsKGEpfX12YXIgZz1kbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixvbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt0Zl09Zy5jdXJyZW50O3JmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtRaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Zmwoayk7aC5jYWxsKGEpfX12YXIgaz1hbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIsb2wpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdGZdPWsuY3VycmVudDtyZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UWsoZnVuY3Rpb24oKXtlbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gcWwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9ZmwoZyk7aC5jYWxsKGEpfX1lbChiLGcsYSxlKX1lbHNlIGc9cGwoYyxiLGEsZSxkKTtyZXR1cm4gZmwoZyl9RGM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz1zYyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihCYyhiLGN8MSksQ2soYixCKCkpLDA9PT0oVyY2KSYmKGFqPUIoKSs1MDAsaWcoKSkpfWJyZWFrO2Nhc2UgMTM6dmFyIGQ9SmcoKTtRayhmdW5jdGlvbigpe3JldHVybiBMZyhhLDEsZCl9KTtobChhLDEpfX07RWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SmcoKTtMZyhhLDEzNDIxNzcyOCxiKTtobChhLDEzNDIxNzcyOCl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUpnKCksYz1LZyhhKTtMZyhhLGMsYik7aGwoYSxjKX19O0djPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0hjPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnhiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6JGEoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUNiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtWYShkKTskYShkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmViKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmI9UGs7R2I9UWs7XG52YXIgcmw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0JiLHRlLENiLERiLEViLFBrXX0sc2w9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlZjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMS4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB0bD17YnVuZGxlVHlwZTpzbC5idW5kbGVUeXBlLHZlcnNpb246c2wudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnNsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6c2wucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVliKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpzbC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5pbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMS4wLW5leHQtMjJlZGI5Zjc3LTIwMjIwNDI2XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgdWw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF1bC5pc0Rpc2FibGVkJiZ1bC5zdXBwb3J0c0ZpYmVyKXRyeXtqYz11bC5pbmplY3QodGwpLGtjPXVsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1ybDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW1sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGJsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighbWwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1qbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9YWwoYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt0Zl09Yi5jdXJyZW50O3JmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGtsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1ZYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBRayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighbmwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcWwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW1sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1qbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZGwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt0Zl09Yi5jdXJyZW50O3JmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbGwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighbmwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcWwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFFrKGZ1bmN0aW9uKCl7cWwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3RmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9UGs7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFubChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gcWwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjEuMC1uZXh0LTIyZWRiOWY3Ny0yMDIyMDQyNlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMS4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ib21lLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Ib21lLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpIHtcbiAgY29uc3Qgb3V0cHV0ID0ge307XG4gIE9iamVjdC5rZXlzKHNsb3RzKS5mb3JFYWNoKFxuICAvLyBgT2JqZXQua2V5cyhzbG90cylgIGNhbid0IGJlIHdpZGVyIHRoYW4gYFRgIGJlY2F1c2Ugd2UgaW5mZXIgYFRgIGZyb20gYHNsb3RzYC5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8xMjI1MyNpc3N1ZWNvbW1lbnQtMjYzMTMyMjA4XG4gIHNsb3QgPT4ge1xuICAgIG91dHB1dFtzbG90XSA9IHNsb3RzW3Nsb3RdLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgYWNjLnB1c2goZ2V0VXRpbGl0eUNsYXNzKGtleSkpO1xuICAgICAgICBpZiAoY2xhc3NlcyAmJiBjbGFzc2VzW2tleV0pIHtcbiAgICAgICAgICBhY2MucHVzaChjbGFzc2VzW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKS5qb2luKCcgJyk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxudmFyIFN0eWxlU2hlZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBVc2luZyBOb2RlIGluc3RlYWQgb2YgSFRNTEVsZW1lbnQgc2luY2UgY29udGFpbmVyIG1heSBiZSBhIFNoYWRvd1Jvb3RcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2luc2VydFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHZhciBiZWZvcmU7XG5cbiAgICAgIGlmIChfdGhpcy50YWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoX3RoaXMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5pbnNlcnRpb25Qb2ludC5uZXh0U2libGluZztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcmVwZW5kKSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuYmVmb3JlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSBfdGhpcy50YWdzW190aGlzLnRhZ3MubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGFnLCBiZWZvcmUpO1xuXG4gICAgICBfdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9O1xuXG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMucHJlcGVuZCA9IG9wdGlvbnMucHJlcGVuZDtcbiAgICB0aGlzLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgICB0aGlzLmJlZm9yZSA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3R5bGVTaGVldC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmh5ZHJhdGUgPSBmdW5jdGlvbiBoeWRyYXRlKG5vZGVzKSB7XG4gICAgbm9kZXMuZm9yRWFjaCh0aGlzLl9pbnNlcnRUYWcpO1xuICB9O1xuXG4gIF9wcm90by5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgIC8vIHRoZSBtYXggbGVuZ3RoIGlzIGhvdyBtYW55IHJ1bGVzIHdlIGhhdmUgcGVyIHN0eWxlIHRhZywgaXQncyA2NTAwMCBpbiBzcGVlZHkgbW9kZVxuICAgIC8vIGl0J3MgMSBpbiBkZXYgYmVjYXVzZSB3ZSBpbnNlcnQgc291cmNlIG1hcHMgdGhhdCBtYXAgYSBzaW5nbGUgcnVsZSB0byBhIGxvY2F0aW9uXG4gICAgLy8gYW5kIHlvdSBjYW4gb25seSBoYXZlIG9uZSBzb3VyY2UgbWFwIHBlciBzdHlsZSB0YWdcbiAgICBpZiAodGhpcy5jdHIgJSAodGhpcy5pc1NwZWVkeSA/IDY1MDAwIDogMSkgPT09IDApIHtcbiAgICAgIHRoaXMuX2luc2VydFRhZyhjcmVhdGVTdHlsZUVsZW1lbnQodGhpcykpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0ICYmIHJ1bGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1O1xuXG4gICAgICBpZiAoaXNJbXBvcnRSdWxlICYmIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlKSB7XG4gICAgICAgIC8vIHRoaXMgd291bGQgb25seSBjYXVzZSBwcm9ibGVtIGluIHNwZWVkeSBtb2RlXG4gICAgICAgIC8vIGJ1dCB3ZSBkb24ndCB3YW50IGVuYWJsaW5nIHNwZWVkeSB0byBhZmZlY3QgdGhlIG9ic2VydmFibGUgYmVoYXZpb3JcbiAgICAgICAgLy8gc28gd2UgcmVwb3J0IHRoaXMgZXJyb3IgYXQgYWxsIHRpbWVzXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UncmUgYXR0ZW1wdGluZyB0byBpbnNlcnQgdGhlIGZvbGxvd2luZyBydWxlOlxcblwiICsgcnVsZSArICdcXG5cXG5gQGltcG9ydGAgcnVsZXMgbXVzdCBiZSBiZWZvcmUgYWxsIG90aGVyIHR5cGVzIG9mIHJ1bGVzIGluIGEgc3R5bGVzaGVldCBidXQgb3RoZXIgcnVsZXMgaGF2ZSBhbHJlYWR5IGJlZW4gaW5zZXJ0ZWQuIFBsZWFzZSBlbnN1cmUgdGhhdCBgQGltcG9ydGAgcnVsZXMgYXJlIGJlZm9yZSBhbGwgb3RoZXIgcnVsZXMuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlIHx8ICFpc0ltcG9ydFJ1bGU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIHVsdHJhZmFzdCB2ZXJzaW9uLCB3b3JrcyBhY3Jvc3MgYnJvd3NlcnNcbiAgICAgICAgLy8gdGhlIGJpZyBkcmF3YmFjayBpcyB0aGF0IHRoZSBjc3Mgd29uJ3QgYmUgZWRpdGFibGUgaW4gZGV2dG9vbHNcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhLzooLW1vei1wbGFjZWhvbGRlcnwtbW96LWZvY3VzLWlubmVyfC1tb3otZm9jdXNyaW5nfC1tcy1pbnB1dC1wbGFjZWhvbGRlcnwtbW96LXJlYWQtd3JpdGV8LW1vei1yZWFkLW9ubHl8LW1zLWNsZWFyfC1tcy1leHBhbmR8LW1zLXJldmVhbCl7Ly50ZXN0KHJ1bGUpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZSAmJiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFic1xuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgdmFyIGZyb20gPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCB2YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnblxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzaCAodmFsdWUsIGxlbmd0aCkge1xuXHRyZXR1cm4gY2hhcmF0KHZhbHVlLCAwKSBeIDQ1ID8gKCgoKCgoKGxlbmd0aCA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMCkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAxKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDIpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMykgOiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmltICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUudHJpbSgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nP31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoICh2YWx1ZSwgcGF0dGVybikge1xuXHRyZXR1cm4gKHZhbHVlID0gcGF0dGVybi5leGVjKHZhbHVlKSkgPyB2YWx1ZVswXSA6IHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0geyhzdHJpbmd8UmVnRXhwKX0gcGF0dGVyblxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlICh2YWx1ZSwgcGF0dGVybiwgcmVwbGFjZW1lbnQpIHtcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbmRleG9mICh2YWx1ZSwgc2VhcmNoKSB7XG5cdHJldHVybiB2YWx1ZS5pbmRleE9mKHNlYXJjaClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuIiwiaW1wb3J0IHtmcm9tLCB0cmltLCBjaGFyYXQsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIGFzc2lnbn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG5leHBvcnQgdmFyIGxpbmUgPSAxXG5leHBvcnQgdmFyIGNvbHVtbiA9IDFcbmV4cG9ydCB2YXIgbGVuZ3RoID0gMFxuZXhwb3J0IHZhciBwb3NpdGlvbiA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVyID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXJzID0gJydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdIHwgc3RyaW5nfSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3RbXSB8IHN0cmluZ30gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHJldHVybiB7dmFsdWU6IHZhbHVlLCByb290OiByb290LCBwYXJlbnQ6IHBhcmVudCwgdHlwZTogdHlwZSwgcHJvcHM6IHByb3BzLCBjaGlsZHJlbjogY2hpbGRyZW4sIGxpbmU6IGxpbmUsIGNvbHVtbjogY29sdW1uLCBsZW5ndGg6IGxlbmd0aCwgcmV0dXJuOiAnJ31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhciAoKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPiAwID8gY2hhcmF0KGNoYXJhY3RlcnMsIC0tcG9zaXRpb24pIDogMFxuXG5cdGlmIChjb2x1bW4tLSwgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lLS1cblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbmV4dCAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uIDwgbGVuZ3RoID8gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKyspIDogMFxuXG5cdGlmIChjb2x1bW4rKywgY2hhcmFjdGVyID09PSAxMClcblx0XHRjb2x1bW4gPSAxLCBsaW5lKytcblxuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGVlayAoKSB7XG5cdHJldHVybiBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24pXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FyZXQgKCkge1xuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG5cdHJldHVybiBzdWJzdHIoY2hhcmFjdGVycywgYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW4gKHR5cGUpIHtcblx0c3dpdGNoICh0eXBlKSB7XG5cdFx0Ly8gXFwwIFxcdCBcXG4gXFxyIFxccyB3aGl0ZXNwYWNlIHRva2VuXG5cdFx0Y2FzZSAwOiBjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRyZXR1cm4gNVxuXHRcdC8vICEgKyAsIC8gPiBAIH4gaXNvbGF0ZSB0b2tlblxuXHRcdGNhc2UgMzM6IGNhc2UgNDM6IGNhc2UgNDQ6IGNhc2UgNDc6IGNhc2UgNjI6IGNhc2UgNjQ6IGNhc2UgMTI2OlxuXHRcdC8vIDsgeyB9IGJyZWFrcG9pbnQgdG9rZW5cblx0XHRjYXNlIDU5OiBjYXNlIDEyMzogY2FzZSAxMjU6XG5cdFx0XHRyZXR1cm4gNFxuXHRcdC8vIDogYWNjb21wYW5pZWQgdG9rZW5cblx0XHRjYXNlIDU4OlxuXHRcdFx0cmV0dXJuIDNcblx0XHQvLyBcIiAnICggWyBvcGVuaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDQwOiBjYXNlIDkxOlxuXHRcdFx0cmV0dXJuIDJcblx0XHQvLyApIF0gY2xvc2luZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSA0MTogY2FzZSA5Mzpcblx0XHRcdHJldHVybiAxXG5cdH1cblxuXHRyZXR1cm4gMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7YW55W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGxpbmUgPSBjb2x1bW4gPSAxLCBsZW5ndGggPSBzdHJsZW4oY2hhcmFjdGVycyA9IHZhbHVlKSwgcG9zaXRpb24gPSAwLCBbXVxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVhbGxvYyAodmFsdWUpIHtcblx0cmV0dXJuIGNoYXJhY3RlcnMgPSAnJywgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdCAodHlwZSkge1xuXHRyZXR1cm4gdHJpbShzbGljZShwb3NpdGlvbiAtIDEsIGRlbGltaXRlcih0eXBlID09PSA5MSA/IHR5cGUgKyAyIDogdHlwZSA9PT0gNDAgPyB0eXBlICsgMSA6IHR5cGUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHRva2VuaXplcihhbGxvYyh2YWx1ZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlICh0eXBlKSB7XG5cdHdoaWxlIChjaGFyYWN0ZXIgPSBwZWVrKCkpXG5cdFx0aWYgKGNoYXJhY3RlciA8IDMzKVxuXHRcdFx0bmV4dCgpXG5cdFx0ZWxzZVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gdG9rZW4odHlwZSkgPiAyIHx8IHRva2VuKGNoYXJhY3RlcikgPiAzID8gJycgOiAnICdcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZXIgKGNoaWxkcmVuKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG5cdFx0XHRjYXNlIDA6IGFwcGVuZChpZGVudGlmaWVyKHBvc2l0aW9uIC0gMSksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Y2FzZSAyOiBhcHBlbmQoZGVsaW1pdChjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6IGFwcGVuZChmcm9tKGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdH1cblxuXHRyZXR1cm4gY2hpbGRyZW5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBpbmcgKGluZGV4LCBjb3VudCkge1xuXHR3aGlsZSAoLS1jb3VudCAmJiBuZXh0KCkpXG5cdFx0Ly8gbm90IDAtOSBBLUYgYS1mXG5cdFx0aWYgKGNoYXJhY3RlciA8IDQ4IHx8IGNoYXJhY3RlciA+IDEwMiB8fCAoY2hhcmFjdGVyID4gNTcgJiYgY2hhcmFjdGVyIDwgNjUpIHx8IChjaGFyYWN0ZXIgPiA3MCAmJiBjaGFyYWN0ZXIgPCA5NykpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiBzbGljZShpbmRleCwgY2FyZXQoKSArIChjb3VudCA8IDYgJiYgcGVlaygpID09IDMyICYmIG5leHQoKSA9PSAzMikpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXRlciAodHlwZSkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHQvLyBdICkgXCIgJ1xuXHRcdFx0Y2FzZSB0eXBlOlxuXHRcdFx0XHRyZXR1cm4gcG9zaXRpb25cblx0XHRcdC8vIFwiICdcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6XG5cdFx0XHRcdGlmICh0eXBlICE9PSAzNCAmJiB0eXBlICE9PSAzOSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHR5cGUgPT09IDQxKVxuXHRcdFx0XHRcdGRlbGltaXRlcih0eXBlKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdG5leHQoKVxuXHRcdFx0XHRicmVha1xuXHRcdH1cblxuXHRyZXR1cm4gcG9zaXRpb25cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ZXIgKHR5cGUsIGluZGV4KSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0Ly8gLy9cblx0XHRpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDcgKyAxMClcblx0XHRcdGJyZWFrXG5cdFx0Ly8gLypcblx0XHRlbHNlIGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0MiArIDQyICYmIHBlZWsoKSA9PT0gNDcpXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiAnLyonICsgc2xpY2UoaW5kZXgsIHBvc2l0aW9uIC0gMSkgKyAnKicgKyBmcm9tKHR5cGUgPT09IDQ3ID8gdHlwZSA6IG5leHQoKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aWZpZXIgKGluZGV4KSB7XG5cdHdoaWxlICghdG9rZW4ocGVlaygpKSlcblx0XHRuZXh0KClcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIHBvc2l0aW9uKVxufVxuIiwiZXhwb3J0IHZhciBNUyA9ICctbXMtJ1xuZXhwb3J0IHZhciBNT1ogPSAnLW1vei0nXG5leHBvcnQgdmFyIFdFQktJVCA9ICctd2Via2l0LSdcblxuZXhwb3J0IHZhciBDT01NRU5UID0gJ2NvbW0nXG5leHBvcnQgdmFyIFJVTEVTRVQgPSAncnVsZSdcbmV4cG9ydCB2YXIgREVDTEFSQVRJT04gPSAnZGVjbCdcblxuZXhwb3J0IHZhciBQQUdFID0gJ0BwYWdlJ1xuZXhwb3J0IHZhciBNRURJQSA9ICdAbWVkaWEnXG5leHBvcnQgdmFyIElNUE9SVCA9ICdAaW1wb3J0J1xuZXhwb3J0IHZhciBDSEFSU0VUID0gJ0BjaGFyc2V0J1xuZXhwb3J0IHZhciBWSUVXUE9SVCA9ICdAdmlld3BvcnQnXG5leHBvcnQgdmFyIFNVUFBPUlRTID0gJ0BzdXBwb3J0cydcbmV4cG9ydCB2YXIgRE9DVU1FTlQgPSAnQGRvY3VtZW50J1xuZXhwb3J0IHZhciBOQU1FU1BBQ0UgPSAnQG5hbWVzcGFjZSdcbmV4cG9ydCB2YXIgS0VZRlJBTUVTID0gJ0BrZXlmcmFtZXMnXG5leHBvcnQgdmFyIEZPTlRfRkFDRSA9ICdAZm9udC1mYWNlJ1xuZXhwb3J0IHZhciBDT1VOVEVSX1NUWUxFID0gJ0Bjb3VudGVyLXN0eWxlJ1xuZXhwb3J0IHZhciBGT05UX0ZFQVRVUkVfVkFMVUVTID0gJ0Bmb250LWZlYXR1cmUtdmFsdWVzJ1xuIiwiaW1wb3J0IHtJTVBPUlQsIENPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OLCBLRVlGUkFNRVN9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVuLCBzaXplb2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZSAoY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHZhciBvdXRwdXQgPSAnJ1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNoaWxkcmVuKVxuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0b3V0cHV0ICs9IGNhbGxiYWNrKGNoaWxkcmVuW2ldLCBpLCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0cmV0dXJuIG91dHB1dFxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBJTVBPUlQ6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iLCJpbXBvcnQge0NPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2FicywgY2hhcmF0LCB0cmltLCBmcm9tLCBzaXplb2YsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIHJlcGxhY2UsIGluZGV4b2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7bm9kZSwgY2hhciwgcHJldiwgbmV4dCwgcGVlaywgY2FyZXQsIGFsbG9jLCBkZWFsbG9jLCBkZWxpbWl0LCB3aGl0ZXNwYWNlLCBlc2NhcGluZywgaWRlbnRpZmllciwgY29tbWVudGVyfSBmcm9tICcuL1Rva2VuaXplci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge29iamVjdFtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2MocGFyc2UoJycsIG51bGwsIG51bGwsIG51bGwsIFsnJ10sIHZhbHVlID0gYWxsb2ModmFsdWUpLCAwLCBbMF0sIHZhbHVlKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzZXRzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwc2V1ZG9cbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmdbXX0gZGVjbGFyYXRpb25zXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgcnVsZSwgcnVsZXMsIHJ1bGVzZXRzLCBwc2V1ZG8sIHBvaW50cywgZGVjbGFyYXRpb25zKSB7XG5cdHZhciBpbmRleCA9IDBcblx0dmFyIG9mZnNldCA9IDBcblx0dmFyIGxlbmd0aCA9IHBzZXVkb1xuXHR2YXIgYXRydWxlID0gMFxuXHR2YXIgcHJvcGVydHkgPSAwXG5cdHZhciBwcmV2aW91cyA9IDBcblx0dmFyIHZhcmlhYmxlID0gMVxuXHR2YXIgc2Nhbm5pbmcgPSAxXG5cdHZhciBhbXBlcnNhbmQgPSAxXG5cdHZhciBjaGFyYWN0ZXIgPSAwXG5cdHZhciB0eXBlID0gJydcblx0dmFyIHByb3BzID0gcnVsZXNcblx0dmFyIGNoaWxkcmVuID0gcnVsZXNldHNcblx0dmFyIHJlZmVyZW5jZSA9IHJ1bGVcblx0dmFyIGNoYXJhY3RlcnMgPSB0eXBlXG5cblx0d2hpbGUgKHNjYW5uaW5nKVxuXHRcdHN3aXRjaCAocHJldmlvdXMgPSBjaGFyYWN0ZXIsIGNoYXJhY3RlciA9IG5leHQoKSkge1xuXHRcdFx0Ly8gKFxuXHRcdFx0Y2FzZSA0MDpcblx0XHRcdFx0aWYgKHByZXZpb3VzICE9IDEwOCAmJiBjaGFyYXQoY2hhcmFjdGVycywgbGVuZ3RoIC0gMSkgPT0gNTgpIHtcblx0XHRcdFx0XHRpZiAoaW5kZXhvZihjaGFyYWN0ZXJzICs9IHJlcGxhY2UoZGVsaW1pdChjaGFyYWN0ZXIpLCAnJicsICcmXFxmJyksICcmXFxmJykgIT0gLTEpXG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSAtMVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdH1cblx0XHRcdC8vIFwiICcgW1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA5MTpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcdCBcXG4gXFxyIFxcc1xuXHRcdFx0Y2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IHdoaXRlc3BhY2UocHJldmlvdXMpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSBlc2NhcGluZyhjYXJldCgpIC0gMSwgNylcblx0XHRcdFx0Y29udGludWVcblx0XHRcdC8vIC9cblx0XHRcdGNhc2UgNDc6XG5cdFx0XHRcdHN3aXRjaCAocGVlaygpKSB7XG5cdFx0XHRcdFx0Y2FzZSA0MjogY2FzZSA0Nzpcblx0XHRcdFx0XHRcdGFwcGVuZChjb21tZW50KGNvbW1lbnRlcihuZXh0KCksIGNhcmV0KCkpLCByb290LCBwYXJlbnQpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9ICcvJ1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyB7XG5cdFx0XHRjYXNlIDEyMyAqIHZhcmlhYmxlOlxuXHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSBzdHJsZW4oY2hhcmFjdGVycykgKiBhbXBlcnNhbmRcblx0XHRcdC8vIH0gOyBcXDBcblx0XHRcdGNhc2UgMTI1ICogdmFyaWFibGU6IGNhc2UgNTk6IGNhc2UgMDpcblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdFx0XHQvLyBcXDAgfVxuXHRcdFx0XHRcdGNhc2UgMDogY2FzZSAxMjU6IHNjYW5uaW5nID0gMFxuXHRcdFx0XHRcdC8vIDtcblx0XHRcdFx0XHRjYXNlIDU5ICsgb2Zmc2V0OlxuXHRcdFx0XHRcdFx0aWYgKHByb3BlcnR5ID4gMCAmJiAoc3RybGVuKGNoYXJhY3RlcnMpIC0gbGVuZ3RoKSlcblx0XHRcdFx0XHRcdFx0YXBwZW5kKHByb3BlcnR5ID4gMzIgPyBkZWNsYXJhdGlvbihjaGFyYWN0ZXJzICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDEpIDogZGVjbGFyYXRpb24ocmVwbGFjZShjaGFyYWN0ZXJzLCAnICcsICcnKSArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAyKSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAIDtcblx0XHRcdFx0XHRjYXNlIDU5OiBjaGFyYWN0ZXJzICs9ICc7J1xuXHRcdFx0XHRcdC8vIHsgcnVsZS9hdC1ydWxlXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGFwcGVuZChyZWZlcmVuY2UgPSBydWxlc2V0KGNoYXJhY3RlcnMsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMgPSBbXSwgY2hpbGRyZW4gPSBbXSwgbGVuZ3RoKSwgcnVsZXNldHMpXG5cblx0XHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT09IDEyMylcblx0XHRcdFx0XHRcdFx0aWYgKG9mZnNldCA9PT0gMClcblx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByb290LCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcHJvcHMsIHJ1bGVzZXRzLCBsZW5ndGgsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGF0cnVsZSA9PT0gOTkgJiYgY2hhcmF0KGNoYXJhY3RlcnMsIDMpID09PSAxMTAgPyAxMDAgOiBhdHJ1bGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGQgbSBzXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDk6IGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZSh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJ1bGUgJiYgYXBwZW5kKHJ1bGVzZXQodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCAwLCAwLCBydWxlcywgcG9pbnRzLCB0eXBlLCBydWxlcywgcHJvcHMgPSBbXSwgbGVuZ3RoKSwgY2hpbGRyZW4pLCBydWxlcywgY2hpbGRyZW4sIGxlbmd0aCwgcG9pbnRzLCBydWxlID8gcHJvcHMgOiBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIFsnJ10sIGNoaWxkcmVuLCAwLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGluZGV4ID0gb2Zmc2V0ID0gcHJvcGVydHkgPSAwLCB2YXJpYWJsZSA9IGFtcGVyc2FuZCA9IDEsIHR5cGUgPSBjaGFyYWN0ZXJzID0gJycsIGxlbmd0aCA9IHBzZXVkb1xuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gOlxuXHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0bGVuZ3RoID0gMSArIHN0cmxlbihjaGFyYWN0ZXJzKSwgcHJvcGVydHkgPSBwcmV2aW91c1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0aWYgKHZhcmlhYmxlIDwgMSlcblx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09IDEyMylcblx0XHRcdFx0XHRcdC0tdmFyaWFibGVcblx0XHRcdFx0XHRlbHNlIGlmIChjaGFyYWN0ZXIgPT0gMTI1ICYmIHZhcmlhYmxlKysgPT0gMCAmJiBwcmV2KCkgPT0gMTI1KVxuXHRcdFx0XHRcdFx0Y29udGludWVcblxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3RlcnMgKz0gZnJvbShjaGFyYWN0ZXIpLCBjaGFyYWN0ZXIgKiB2YXJpYWJsZSkge1xuXHRcdFx0XHRcdC8vICZcblx0XHRcdFx0XHRjYXNlIDM4OlxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gb2Zmc2V0ID4gMCA/IDEgOiAoY2hhcmFjdGVycyArPSAnXFxmJywgLTEpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vICxcblx0XHRcdFx0XHRjYXNlIDQ0OlxuXHRcdFx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gKHN0cmxlbihjaGFyYWN0ZXJzKSAtIDEpICogYW1wZXJzYW5kLCBhbXBlcnNhbmQgPSAxXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEBcblx0XHRcdFx0XHRjYXNlIDY0OlxuXHRcdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdFx0aWYgKHBlZWsoKSA9PT0gNDUpXG5cdFx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChuZXh0KCkpXG5cblx0XHRcdFx0XHRcdGF0cnVsZSA9IHBlZWsoKSwgb2Zmc2V0ID0gbGVuZ3RoID0gc3RybGVuKHR5cGUgPSBjaGFyYWN0ZXJzICs9IGlkZW50aWZpZXIoY2FyZXQoKSkpLCBjaGFyYWN0ZXIrK1xuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0Y2FzZSA0NTpcblx0XHRcdFx0XHRcdGlmIChwcmV2aW91cyA9PT0gNDUgJiYgc3RybGVuKGNoYXJhY3RlcnMpID09IDIpXG5cdFx0XHRcdFx0XHRcdHZhcmlhYmxlID0gMFxuXHRcdFx0XHR9XG5cdFx0fVxuXG5cdHJldHVybiBydWxlc2V0c1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBwcm9wc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzZXQgKHZhbHVlLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKSB7XG5cdHZhciBwb3N0ID0gb2Zmc2V0IC0gMVxuXHR2YXIgcnVsZSA9IG9mZnNldCA9PT0gMCA/IHJ1bGVzIDogWycnXVxuXHR2YXIgc2l6ZSA9IHNpemVvZihydWxlKVxuXG5cdGZvciAodmFyIGkgPSAwLCBqID0gMCwgayA9IDA7IGkgPCBpbmRleDsgKytpKVxuXHRcdGZvciAodmFyIHggPSAwLCB5ID0gc3Vic3RyKHZhbHVlLCBwb3N0ICsgMSwgcG9zdCA9IGFicyhqID0gcG9pbnRzW2ldKSksIHogPSB2YWx1ZTsgeCA8IHNpemU7ICsreClcblx0XHRcdGlmICh6ID0gdHJpbShqID4gMCA/IHJ1bGVbeF0gKyAnICcgKyB5IDogcmVwbGFjZSh5LCAvJlxcZi9nLCBydWxlW3hdKSkpXG5cdFx0XHRcdHByb3BzW2srK10gPSB6XG5cblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgb2Zmc2V0ID09PSAwID8gUlVMRVNFVCA6IHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ICh2YWx1ZSwgcm9vdCwgcGFyZW50KSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIENPTU1FTlQsIGZyb20oY2hhcigpKSwgc3Vic3RyKHZhbHVlLCAyLCAtMiksIDApXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBsZW5ndGgpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgREVDTEFSQVRJT04sIHN1YnN0cih2YWx1ZSwgMCwgbGVuZ3RoKSwgc3Vic3RyKHZhbHVlLCBsZW5ndGggKyAxLCAtMSksIGxlbmd0aClcbn1cbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgeyBkZWFsbG9jLCBhbGxvYywgbmV4dCwgdG9rZW4sIGZyb20sIHBlZWssIGRlbGltaXQsIHNsaWNlLCBwb3NpdGlvbiwgUlVMRVNFVCwgY29tYmluZSwgbWF0Y2gsIHNlcmlhbGl6ZSwgY29weSwgcmVwbGFjZSwgV0VCS0lULCBNT1osIE1TLCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OLCBoYXNoLCBjaGFyYXQsIHN0cmxlbiwgaW5kZXhvZiwgc3RyaW5naWZ5LCBDT01NRU5ULCBydWxlc2hlZXQsIG1pZGRsZXdhcmUsIGNvbXBpbGUgfSBmcm9tICdzdHlsaXMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyA9IGZ1bmN0aW9uIGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhiZWdpbiwgcG9pbnRzLCBpbmRleCkge1xuICB2YXIgcHJldmlvdXMgPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gMDtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHBlZWsoKTsgLy8gJlxcZlxuXG4gICAgaWYgKHByZXZpb3VzID09PSAzOCAmJiBjaGFyYWN0ZXIgPT09IDEyKSB7XG4gICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV4dCgpO1xuICB9XG5cbiAgcmV0dXJuIHNsaWNlKGJlZ2luLCBwb3NpdGlvbik7XG59O1xuXG52YXIgdG9SdWxlcyA9IGZ1bmN0aW9uIHRvUnVsZXMocGFyc2VkLCBwb2ludHMpIHtcbiAgLy8gcHJldGVuZCB3ZSd2ZSBzdGFydGVkIHdpdGggYSBjb21tYVxuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGNoYXJhY3RlciA9IDQ0O1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLy8gJlxcZlxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSAzOCAmJiBwZWVrKCkgPT09IDEyKSB7XG4gICAgICAgICAgLy8gdGhpcyBpcyBub3QgMTAwJSBjb3JyZWN0LCB3ZSBkb24ndCBhY2NvdW50IGZvciBsaXRlcmFsIHNlcXVlbmNlcyBoZXJlIC0gbGlrZSBmb3IgZXhhbXBsZSBxdW90ZWQgc3RyaW5nc1xuICAgICAgICAgIC8vIHN0eWxpcyBpbnNlcnRzIFxcZiBhZnRlciAmIHRvIGtub3cgd2hlbiAmIHdoZXJlIGl0IHNob3VsZCByZXBsYWNlIHRoaXMgc2VxdWVuY2Ugd2l0aCB0aGUgY29udGV4dCBzZWxlY3RvclxuICAgICAgICAgIC8vIGFuZCB3aGVuIGl0IHNob3VsZCBqdXN0IGNvbmNhdGVuYXRlIHRoZSBvdXRlciBhbmQgaW5uZXIgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gaXQncyB2ZXJ5IHVubGlrZWx5IGZvciB0aGlzIHNlcXVlbmNlIHRvIGFjdHVhbGx5IGFwcGVhciBpbiBhIGRpZmZlcmVudCBjb250ZXh0LCBzbyB3ZSBqdXN0IGxldmVyYWdlIHRoaXMgZmFjdCBoZXJlXG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyhwb3NpdGlvbiAtIDEsIHBvaW50cywgaW5kZXgpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGRlbGltaXQoY2hhcmFjdGVyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgLy8gY29tbWFcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gNDQpIHtcbiAgICAgICAgICAvLyBjb2xvblxuICAgICAgICAgIHBhcnNlZFsrK2luZGV4XSA9IHBlZWsoKSA9PT0gNTggPyAnJlxcZicgOiAnJztcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gcGFyc2VkW2luZGV4XS5sZW5ndGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgLy8gZmFsbHRocm91Z2hcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBmcm9tKGNoYXJhY3Rlcik7XG4gICAgfVxuICB9IHdoaWxlIChjaGFyYWN0ZXIgPSBuZXh0KCkpO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG52YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKSB7XG4gIHJldHVybiBkZWFsbG9jKHRvUnVsZXMoYWxsb2ModmFsdWUpLCBwb2ludHMpKTtcbn07IC8vIFdlYWtTZXQgd291bGQgYmUgbW9yZSBhcHByb3ByaWF0ZSwgYnV0IG9ubHkgV2Vha01hcCBpcyBzdXBwb3J0ZWQgaW4gSUUxMVxuXG5cbnZhciBmaXhlZEVsZW1lbnRzID0gLyogI19fUFVSRV9fICovbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXQgPSBmdW5jdGlvbiBjb21wYXQoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgIWVsZW1lbnQucGFyZW50IHx8IC8vIHBvc2l0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGNvbnRhaW5zIHBzZXVkb1xuICAvLyBuZWdhdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBoYXMgYmVlbiBhbHJlYWR5IHByZWZpeGVkXG4gIGVsZW1lbnQubGVuZ3RoIDwgMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWUsXG4gICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgdmFyIGlzSW1wbGljaXRSdWxlID0gZWxlbWVudC5jb2x1bW4gPT09IHBhcmVudC5jb2x1bW4gJiYgZWxlbWVudC5saW5lID09PSBwYXJlbnQubGluZTtcblxuICB3aGlsZSAocGFyZW50LnR5cGUgIT09ICdydWxlJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgfSAvLyBzaG9ydC1jaXJjdWl0IGZvciB0aGUgc2ltcGxlc3QgY2FzZVxuXG5cbiAgaWYgKGVsZW1lbnQucHJvcHMubGVuZ3RoID09PSAxICYmIHZhbHVlLmNoYXJDb2RlQXQoMCkgIT09IDU4XG4gIC8qIGNvbG9uICovXG4gICYmICFmaXhlZEVsZW1lbnRzLmdldChwYXJlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGlmIHRoaXMgaXMgYW4gaW1wbGljaXRseSBpbnNlcnRlZCBydWxlICh0aGUgb25lIGVhZ2VybHkgaW5zZXJ0ZWQgYXQgdGhlIGVhY2ggbmV3IG5lc3RlZCBsZXZlbClcbiAgLy8gdGhlbiB0aGUgcHJvcHMgaGFzIGFscmVhZHkgYmVlbiBtYW5pcHVsYXRlZCBiZWZvcmVoYW5kIGFzIHRoZXkgdGhhdCBhcnJheSBpcyBzaGFyZWQgYmV0d2VlbiBpdCBhbmQgaXRzIFwicnVsZSBwYXJlbnRcIlxuXG5cbiAgaWYgKGlzSW1wbGljaXRSdWxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZml4ZWRFbGVtZW50cy5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gIHZhciBwb2ludHMgPSBbXTtcbiAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModmFsdWUsIHBvaW50cyk7XG4gIHZhciBwYXJlbnRSdWxlcyA9IHBhcmVudC5wcm9wcztcblxuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcGFyZW50UnVsZXMubGVuZ3RoOyBqKyssIGsrKykge1xuICAgICAgZWxlbWVudC5wcm9wc1trXSA9IHBvaW50c1tpXSA/IHJ1bGVzW2ldLnJlcGxhY2UoLyZcXGYvZywgcGFyZW50UnVsZXNbal0pIDogcGFyZW50UnVsZXNbal0gKyBcIiBcIiArIHJ1bGVzW2ldO1xuICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZTtcblxuICAgIGlmICggLy8gY2hhcmNvZGUgZm9yIGxcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgICB2YWx1ZS5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgLy8gdGhpcyBpZ25vcmVzIGxhYmVsXG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gICAgICBlbGVtZW50LnZhbHVlID0gJyc7XG4gICAgfVxuICB9XG59O1xudmFyIGlnbm9yZUZsYWcgPSAnZW1vdGlvbi1kaXNhYmxlLXNlcnZlci1yZW5kZXJpbmctdW5zYWZlLXNlbGVjdG9yLXdhcm5pbmctcGxlYXNlLWRvLW5vdC11c2UtdGhpcy10aGUtd2FybmluZy1leGlzdHMtZm9yLWEtcmVhc29uJztcblxudmFyIGlzSWdub3JpbmdDb21tZW50ID0gZnVuY3Rpb24gaXNJZ25vcmluZ0NvbW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlID09PSAnY29tbScgJiYgZWxlbWVudC5jaGlsZHJlbi5pbmRleE9mKGlnbm9yZUZsYWcpID4gLTE7XG59O1xuXG52YXIgY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0gPSBmdW5jdGlvbiBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybShjYWNoZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICAgIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCBjYWNoZS5jb21wYXQpIHJldHVybjtcbiAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGVsZW1lbnQudmFsdWUubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IGVsZW1lbnQucGFyZW50ID09PSBjaGlsZHJlblswXTsgLy8gaW4gbmVzdGVkIHJ1bGVzIGNvbW1lbnRzIGJlY29tZSBjaGlsZHJlbiBvZiB0aGUgXCJhdXRvLWluc2VydGVkXCIgcnVsZVxuICAgICAgLy9cbiAgICAgIC8vIGNvbnNpZGVyaW5nIHRoaXMgaW5wdXQ6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgIC5iIC8qIGNvbW0gKi8ge31cbiAgICAgIC8vICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyB9XG4gICAgICAvLyB3ZSBnZXQgb3V0cHV0IGNvcnJlc3BvbmRpbmcgdG8gdGhpczpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgJiB7XG4gICAgICAvLyAgICAgLyogY29tbSAqL1xuICAgICAgLy8gICAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIC5iIHt9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjb21tZW50Q29udGFpbmVyID0gaXNOZXN0ZWQgPyBjaGlsZHJlblswXS5jaGlsZHJlbiA6IC8vIGdsb2JhbCBydWxlIGF0IHRoZSByb290IGxldmVsXG4gICAgICBjaGlsZHJlbjtcblxuICAgICAgZm9yICh2YXIgaSA9IGNvbW1lbnRDb250YWluZXIubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21tZW50Q29udGFpbmVyW2ldO1xuXG4gICAgICAgIGlmIChub2RlLmxpbmUgPCBlbGVtZW50LmxpbmUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBpdCBpcyBxdWl0ZSB3ZWlyZCBidXQgY29tbWVudHMgYXJlICp1c3VhbGx5KiBwdXQgYXQgYGNvbHVtbjogZWxlbWVudC5jb2x1bW4gLSAxYFxuICAgICAgICAvLyBzbyB3ZSBzZWVrICpmcm9tIHRoZSBlbmQqIGZvciB0aGUgbm9kZSB0aGF0IGlzIGVhcmxpZXIgdGhhbiB0aGUgcnVsZSdzIGBlbGVtZW50YCBhbmQgY2hlY2sgdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgYWxzbyBtYXRjaCBpbnB1dHMgbGlrZSB0aGlzOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLyogY29tbSAqL1xuICAgICAgICAvLyAgIC5iIHt9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cbiAgICAgICAgLy8gYnV0IHRoYXQgaXMgZmluZVxuICAgICAgICAvL1xuICAgICAgICAvLyBpdCB3b3VsZCBiZSB0aGUgZWFzaWVzdCB0byBjaGFuZ2UgdGhlIHBsYWNlbWVudCBvZiB0aGUgY29tbWVudCB0byBiZSB0aGUgZmlyc3QgY2hpbGQgb2YgdGhlIHJ1bGU6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAuYiB7IC8qIGNvbW0gKi8gfVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vIHdpdGggc3VjaCBpbnB1dHMgd2Ugd291bGRuJ3QgaGF2ZSB0byBzZWFyY2ggZm9yIHRoZSBjb21tZW50IGF0IGFsbFxuICAgICAgICAvLyBUT0RPOiBjb25zaWRlciBjaGFuZ2luZyB0aGlzIGNvbW1lbnQgcGxhY2VtZW50IGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblxuXG4gICAgICAgIGlmIChub2RlLmNvbHVtbiA8IGVsZW1lbnQuY29sdW1uKSB7XG4gICAgICAgICAgaWYgKGlzSWdub3JpbmdDb21tZW50KG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHBzZXVkbyBjbGFzcyBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcyArIFwiXFxcIiBpcyBwb3RlbnRpYWxseSB1bnNhZmUgd2hlbiBkb2luZyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIFRyeSBjaGFuZ2luZyBpdCB0byBcXFwiXCIgKyB1bnNhZmVQc2V1ZG9DbGFzcy5zcGxpdCgnLWNoaWxkJylbMF0gKyBcIi1vZi10eXBlXFxcIi5cIik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgaXNJbXBvcnRSdWxlID0gZnVuY3Rpb24gaXNJbXBvcnRSdWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDEpID09PSAxMDUgJiYgZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMCkgPT09IDY0O1xufTtcblxudmFyIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyA9IGZ1bmN0aW9uIGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoIWlzSW1wb3J0UnVsZShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIHVzZSB0aGlzIHRvIHJlbW92ZSBpbmNvcnJlY3QgZWxlbWVudHMgZnJvbSBmdXJ0aGVyIHByb2Nlc3Npbmdcbi8vIHNvIHRoZXkgZG9uJ3QgZ2V0IGhhbmRlZCB0byB0aGUgYHNoZWV0YCAob3IgYW55dGhpbmcgZWxzZSlcbi8vIGFzIHRoYXQgY291bGQgcG90ZW50aWFsbHkgbGVhZCB0byBhZGRpdGlvbmFsIGxvZ3Mgd2hpY2ggaW4gdHVybiBjb3VsZCBiZSBvdmVyaGVsbWluZyB0byB0aGUgdXNlclxuXG5cbnZhciBudWxsaWZ5RWxlbWVudCA9IGZ1bmN0aW9uIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpIHtcbiAgZWxlbWVudC50eXBlID0gJyc7XG4gIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICBlbGVtZW50LmNoaWxkcmVuID0gJyc7XG4gIGVsZW1lbnQucHJvcHMgPSAnJztcbn07XG5cbnZhciBpbmNvcnJlY3RJbXBvcnRBbGFybSA9IGZ1bmN0aW9uIGluY29ycmVjdEltcG9ydEFsYXJtKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbikge1xuICBpZiAoIWlzSW1wb3J0UnVsZShlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbGVtZW50LnBhcmVudCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgbmVzdGVkIGluc2lkZSBvdGhlciBydWxlcy4gUGxlYXNlIG1vdmUgaXQgdG8gdGhlIHRvcCBsZXZlbCBhbmQgcHV0IGl0IGJlZm9yZSByZWd1bGFyIHJ1bGVzLiBLZWVwIGluIG1pbmQgdGhhdCB0aGV5IGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIGdsb2JhbCBzdHlsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzUHJlcGVuZGVkV2l0aFJlZ3VsYXJSdWxlcyhpbmRleCwgY2hpbGRyZW4pKSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBhZnRlciBvdGhlciBydWxlcy4gUGxlYXNlIHB1dCB5b3VyIGBAaW1wb3J0YCBydWxlcyBiZWZvcmUgeW91ciBvdGhlciBydWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWZhbGx0aHJvdWdoICovXG5cbmZ1bmN0aW9uIHByZWZpeCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHN3aXRjaCAoaGFzaCh2YWx1ZSwgbGVuZ3RoKSkge1xuICAgIC8vIGNvbG9yLWFkanVzdFxuICAgIGNhc2UgNTEwMzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAncHJpbnQtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYW5pbWF0aW9uLCBhbmltYXRpb24tKGRlbGF5fGRpcmVjdGlvbnxkdXJhdGlvbnxmaWxsLW1vZGV8aXRlcmF0aW9uLWNvdW50fG5hbWV8cGxheS1zdGF0ZXx0aW1pbmctZnVuY3Rpb24pXG5cbiAgICBjYXNlIDU3Mzc6XG4gICAgY2FzZSA0MjAxOlxuICAgIGNhc2UgMzE3NzpcbiAgICBjYXNlIDM0MzM6XG4gICAgY2FzZSAxNjQxOlxuICAgIGNhc2UgNDQ1NzpcbiAgICBjYXNlIDI5MjE6IC8vIHRleHQtZGVjb3JhdGlvbiwgZmlsdGVyLCBjbGlwLXBhdGgsIGJhY2tmYWNlLXZpc2liaWxpdHksIGNvbHVtbiwgYm94LWRlY29yYXRpb24tYnJlYWtcblxuICAgIGNhc2UgNTU3MjpcbiAgICBjYXNlIDYzNTY6XG4gICAgY2FzZSA1ODQ0OlxuICAgIGNhc2UgMzE5MTpcbiAgICBjYXNlIDY2NDU6XG4gICAgY2FzZSAzMDA1OiAvLyBtYXNrLCBtYXNrLWltYWdlLCBtYXNrLShtb2RlfGNsaXB8c2l6ZSksIG1hc2stKHJlcGVhdHxvcmlnaW4pLCBtYXNrLXBvc2l0aW9uLCBtYXNrLWNvbXBvc2l0ZSxcblxuICAgIGNhc2UgNjM5MTpcbiAgICBjYXNlIDU4Nzk6XG4gICAgY2FzZSA1NjIzOlxuICAgIGNhc2UgNjEzNTpcbiAgICBjYXNlIDQ1OTk6XG4gICAgY2FzZSA0ODU1OiAvLyBiYWNrZ3JvdW5kLWNsaXAsIGNvbHVtbnMsIGNvbHVtbi0oY291bnR8ZmlsbHxnYXB8cnVsZXxydWxlLWNvbG9yfHJ1bGUtc3R5bGV8cnVsZS13aWR0aHxzcGFufHdpZHRoKVxuXG4gICAgY2FzZSA0MjE1OlxuICAgIGNhc2UgNjM4OTpcbiAgICBjYXNlIDUxMDk6XG4gICAgY2FzZSA1MzY1OlxuICAgIGNhc2UgNTYyMTpcbiAgICBjYXNlIDM4Mjk6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhcHBlYXJhbmNlLCB1c2VyLXNlbGVjdCwgdHJhbnNmb3JtLCBoeXBoZW5zLCB0ZXh0LXNpemUtYWRqdXN0XG5cbiAgICBjYXNlIDUzNDk6XG4gICAgY2FzZSA0MjQ2OlxuICAgIGNhc2UgNDgxMDpcbiAgICBjYXNlIDY5Njg6XG4gICAgY2FzZSAyNzU2OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTU9aICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gZmxleCwgZmxleC1kaXJlY3Rpb25cblxuICAgIGNhc2UgNjgyODpcbiAgICBjYXNlIDQyNjg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gb3JkZXJcblxuICAgIGNhc2UgNjE2NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtJyArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYWxpZ24taXRlbXNcblxuICAgIGNhc2UgNTE4NzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHJlcGxhY2UodmFsdWUsIC8oXFx3KykuKyg6W15dKykvLCBXRUJLSVQgKyAnYm94LSQxJDInICsgTVMgKyAnZmxleC0kMSQyJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1zZWxmXG5cbiAgICBjYXNlIDU0NDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWl0ZW0tJyArIHJlcGxhY2UodmFsdWUsIC9mbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWNvbnRlbnRcblxuICAgIGNhc2UgNDY3NTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtbGluZS1wYWNrJyArIHJlcGxhY2UodmFsdWUsIC9hbGlnbi1jb250ZW50fGZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gZmxleC1zaHJpbmtcblxuICAgIGNhc2UgNTU0ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ3NocmluaycsICduZWdhdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1iYXNpc1xuXG4gICAgY2FzZSA1MjkyOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtZ3Jvd1xuXG4gICAgY2FzZSA2MDYwOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdib3gtJyArIHJlcGxhY2UodmFsdWUsICctZ3JvdycsICcnKSArIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnZ3JvdycsICdwb3NpdGl2ZScpICsgdmFsdWU7XG4gICAgLy8gdHJhbnNpdGlvblxuXG4gICAgY2FzZSA0NTU0OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHJlcGxhY2UodmFsdWUsIC8oW14tXSkodHJhbnNmb3JtKS9nLCAnJDEnICsgV0VCS0lUICsgJyQyJykgKyB2YWx1ZTtcbiAgICAvLyBjdXJzb3JcblxuICAgIGNhc2UgNjE4NzpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyh6b29tLXxncmFiKS8sIFdFQktJVCArICckMScpLCAvKGltYWdlLXNldCkvLCBXRUJLSVQgKyAnJDEnKSwgdmFsdWUsICcnKSArIHZhbHVlO1xuICAgIC8vIGJhY2tncm91bmQsIGJhY2tncm91bmQtaW1hZ2VcblxuICAgIGNhc2UgNTQ5NTpcbiAgICBjYXNlIDM5NTk6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyhpbWFnZS1zZXRcXChbXl0qKS8sIFdFQktJVCArICckMScgKyAnJGAkMScpO1xuICAgIC8vIGp1c3RpZnktY29udGVudFxuXG4gICAgY2FzZSA0OTY4OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZSh2YWx1ZSwgLyguKzopKGZsZXgtKT8oLiopLywgV0VCS0lUICsgJ2JveC1wYWNrOiQzJyArIE1TICsgJ2ZsZXgtcGFjazokMycpLCAvcy4rLWJbXjtdKy8sICdqdXN0aWZ5JykgKyBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIChtYXJnaW58cGFkZGluZyktaW5saW5lLShzdGFydHxlbmQpXG5cbiAgICBjYXNlIDQwOTU6XG4gICAgY2FzZSAzNTgzOlxuICAgIGNhc2UgNDA2ODpcbiAgICBjYXNlIDI1MzI6XG4gICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKyktaW5saW5lKC4rKS8sIFdFQktJVCArICckMSQyJykgKyB2YWx1ZTtcbiAgICAvLyAobWlufG1heCk/KHdpZHRofGhlaWdodHxpbmxpbmUtc2l6ZXxibG9jay1zaXplKVxuXG4gICAgY2FzZSA4MTE2OlxuICAgIGNhc2UgNzA1OTpcbiAgICBjYXNlIDU3NTM6XG4gICAgY2FzZSA1NTM1OlxuICAgIGNhc2UgNTQ0NTpcbiAgICBjYXNlIDU3MDE6XG4gICAgY2FzZSA0OTMzOlxuICAgIGNhc2UgNDY3NzpcbiAgICBjYXNlIDU1MzM6XG4gICAgY2FzZSA1Nzg5OlxuICAgIGNhc2UgNTAyMTpcbiAgICBjYXNlIDQ3NjU6XG4gICAgICAvLyBzdHJldGNoLCBtYXgtY29udGVudCwgbWluLWNvbnRlbnQsIGZpbGwtYXZhaWxhYmxlXG4gICAgICBpZiAoc3RybGVuKHZhbHVlKSAtIDEgLSBsZW5ndGggPiA2KSBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkpIHtcbiAgICAgICAgLy8gKG0pYXgtY29udGVudCwgKG0paW4tY29udGVudFxuICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAvLyAtXG4gICAgICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgNCkgIT09IDQ1KSBicmVhaztcbiAgICAgICAgLy8gKGYpaWxsLWF2YWlsYWJsZSwgKGYpaXQtY29udGVudFxuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoLispLShbXl0rKS8sICckMScgKyBXRUJLSVQgKyAnJDItJDMnICsgJyQxJyArIE1PWiArIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDMpID09IDEwOCA/ICckMycgOiAnJDItJDMnKSkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKHMpdHJldGNoXG5cbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgcmV0dXJuIH5pbmRleG9mKHZhbHVlLCAnc3RyZXRjaCcpID8gcHJlZml4KHJlcGxhY2UodmFsdWUsICdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGxlbmd0aCkgKyB2YWx1ZSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gcG9zaXRpb246IHN0aWNreVxuXG4gICAgY2FzZSA0OTQ5OlxuICAgICAgLy8gKHMpdGlja3k/XG4gICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSAhPT0gMTE1KSBicmVhaztcbiAgICAvLyBkaXNwbGF5OiAoZmxleHxpbmxpbmUtZmxleClcblxuICAgIGNhc2UgNjQ0NDpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBzdHJsZW4odmFsdWUpIC0gMyAtICh+aW5kZXhvZih2YWx1ZSwgJyFpbXBvcnRhbnQnKSAmJiAxMCkpKSB7XG4gICAgICAgIC8vIHN0aWMoayl5XG4gICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAnOicsICc6JyArIFdFQktJVCkgKyB2YWx1ZTtcbiAgICAgICAgLy8gKGlubGluZS0pP2ZsKGUpeFxuXG4gICAgICAgIGNhc2UgMTAxOlxuICAgICAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rOikoW147IV0rKSg7fCEuKyk/LywgJyQxJyArIFdFQktJVCArIChjaGFyYXQodmFsdWUsIDE0KSA9PT0gNDUgPyAnaW5saW5lLScgOiAnJykgKyAnYm94JDMnICsgJyQxJyArIFdFQktJVCArICckMiQzJyArICckMScgKyBNUyArICckMmJveCQzJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgLy8gd3JpdGluZy1tb2RlXG5cbiAgICBjYXNlIDU5MzY6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMTEpKSB7XG4gICAgICAgIC8vIHZlcnRpY2FsLWwocilcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0YicpICsgdmFsdWU7XG4gICAgICAgIC8vIHZlcnRpY2FsLXIobClcblxuICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiLXJsJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gaG9yaXpvbnRhbCgtKXRiXG5cbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ2xyJykgKyB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgcHJlZml4ZXIgPSBmdW5jdGlvbiBwcmVmaXhlcihlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKSBpZiAoIWVsZW1lbnRbXCJyZXR1cm5cIl0pIHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG4gICAgY2FzZSBERUNMQVJBVElPTjpcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEtFWUZSQU1FUzpcbiAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICB2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVClcbiAgICAgIH0pXSwgY2FsbGJhY2spO1xuXG4gICAgY2FzZSBSVUxFU0VUOlxuICAgICAgaWYgKGVsZW1lbnQubGVuZ3RoKSByZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcbiAgICAgICAgICAvLyA6cmVhZC0ob25seXx3cml0ZSlcbiAgICAgICAgICBjYXNlICc6cmVhZC1vbmx5JzpcbiAgICAgICAgICBjYXNlICc6cmVhZC13cml0ZSc6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgICAvLyA6cGxhY2Vob2xkZXJcblxuICAgICAgICAgIGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldXG4gICAgICAgICAgICB9KSwgY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0U3R5bGlzUGx1Z2lucyA9IFtwcmVmaXhlcl07XG5cbnZhciBjcmVhdGVDYWNoZSA9IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlKG9wdGlvbnMpIHtcbiAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgaGF2ZSB0byBjb25maWd1cmUgYGtleWAgZm9yIHlvdXIgY2FjaGUuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyB1bmlxdWUgKGFuZCBub3QgZXF1YWwgdG8gJ2NzcycpIGFzIGl0J3MgdXNlZCBmb3IgbGlua2luZyBzdHlsZXMgdG8geW91ciBjYWNoZS5cXG5cIiArIFwiSWYgbXVsdGlwbGUgY2FjaGVzIHNoYXJlIHRoZSBzYW1lIGtleSB0aGV5IG1pZ2h0IFxcXCJmaWdodFxcXCIgZm9yIGVhY2ggb3RoZXIncyBzdHlsZSBlbGVtZW50cy5cIik7XG4gIH1cblxuICBpZiAoIGtleSA9PT0gJ2NzcycpIHtcbiAgICB2YXIgc3NyU3R5bGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl06bm90KFtkYXRhLXNdKVwiKTsgLy8gZ2V0IFNTUmVkIHN0eWxlcyBvdXQgb2YgdGhlIHdheSBvZiBSZWFjdCdzIGh5ZHJhdGlvblxuICAgIC8vIGRvY3VtZW50LmhlYWQgaXMgYSBzYWZlIHBsYWNlIHRvIG1vdmUgdGhlbSB0byh0aG91Z2ggbm90ZSBkb2N1bWVudC5oZWFkIGlzIG5vdCBuZWNlc3NhcmlseSB0aGUgbGFzdCBwbGFjZSB0aGV5IHdpbGwgYmUpXG4gICAgLy8gbm90ZSB0aGlzIHZlcnkgdmVyeSBpbnRlbnRpb25hbGx5IHRhcmdldHMgYWxsIHN0eWxlIGVsZW1lbnRzIHJlZ2FyZGxlc3Mgb2YgdGhlIGtleSB0byBlbnN1cmVcbiAgICAvLyB0aGF0IGNyZWF0aW5nIGEgY2FjaGUgd29ya3MgaW5zaWRlIG9mIHJlbmRlciBvZiBhIFJlYWN0IGNvbXBvbmVudFxuXG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzc3JTdHlsZXMsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAvLyB3ZSB3YW50IHRvIG9ubHkgbW92ZSBlbGVtZW50cyB3aGljaCBoYXZlIGEgc3BhY2UgaW4gdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgIC8vIGJlY2F1c2UgdGhhdCBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhbiBFbW90aW9uIDExIHNlcnZlci1zaWRlIHJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgICAvLyB3aGlsZSB3ZSB3aWxsIGFscmVhZHkgaWdub3JlIEVtb3Rpb24gMTEgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGJlY2F1c2Ugb2YgdGhlIDpub3QoW2RhdGEtc10pIHBhcnQgaW4gdGhlIHNlbGVjdG9yXG4gICAgICAvLyBFbW90aW9uIDEwIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBkaWQgbm90IGhhdmUgZGF0YS1zIChidXQgaW1wb3J0YW50bHkgZGlkIG5vdCBoYXZlIGEgc3BhY2UgaW4gdGhlaXIgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZXMpXG4gICAgICAvLyBzbyBjaGVja2luZyBmb3IgdGhlIHNwYWNlIGVuc3VyZXMgdGhhdCBsb2FkaW5nIEVtb3Rpb24gMTEgYWZ0ZXIgRW1vdGlvbiAxMCBoYXMgaW5zZXJ0ZWQgc29tZSBzdHlsZXNcbiAgICAgIC8vIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgRW1vdGlvbiAxMCBzdHlsZXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICB2YXIgZGF0YUVtb3Rpb25BdHRyaWJ1dGUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJyk7XG5cbiAgICAgIGlmIChkYXRhRW1vdGlvbkF0dHJpYnV0ZS5pbmRleE9mKCcgJykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHN0eWxpc1BsdWdpbnMgPSBvcHRpb25zLnN0eWxpc1BsdWdpbnMgfHwgZGVmYXVsdFN0eWxpc1BsdWdpbnM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaWYgKC9bXmEtei1dLy50ZXN0KGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtb3Rpb24ga2V5IG11c3Qgb25seSBjb250YWluIGxvd2VyIGNhc2UgYWxwaGFiZXRpY2FsIGNoYXJhY3RlcnMgYW5kIC0gYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcGFzc2VkXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbnNlcnRlZCA9IHt9O1xuICB2YXIgY29udGFpbmVyO1xuICB2YXIgbm9kZXNUb0h5ZHJhdGUgPSBbXTtcblxuICB7XG4gICAgY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXIgfHwgZG9jdW1lbnQuaGVhZDtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKCAvLyB0aGlzIG1lYW5zIHdlIHdpbGwgaWdub3JlIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYSBzcGFjZSBpbiB0aGVtIHdoaWNoXG4gICAgLy8gbWVhbnMgdGhhdCB0aGUgc3R5bGUgZWxlbWVudHMgd2UncmUgbG9va2luZyBhdCBhcmUgb25seSBFbW90aW9uIDExIHNlcnZlci1yZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25ePVxcXCJcIiArIGtleSArIFwiIFxcXCJdXCIpLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIGF0dHJpYiA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbW90aW9uXCIpLnNwbGl0KCcgJyk7IC8vICRGbG93Rml4TWVcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhdHRyaWIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW5zZXJ0ZWRbYXR0cmliW2ldXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzVG9IeWRyYXRlLnB1c2gobm9kZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgX2luc2VydDtcblxuICB2YXIgb21uaXByZXNlbnRQbHVnaW5zID0gW2NvbXBhdCwgcmVtb3ZlTGFiZWxdO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgb21uaXByZXNlbnRQbHVnaW5zLnB1c2goY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oe1xuICAgICAgZ2V0IGNvbXBhdCgpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmNvbXBhdDtcbiAgICAgIH1cblxuICAgIH0pLCBpbmNvcnJlY3RJbXBvcnRBbGFybSk7XG4gIH1cblxuICB7XG4gICAgdmFyIGN1cnJlbnRTaGVldDtcbiAgICB2YXIgZmluYWxpemluZ1BsdWdpbnMgPSBbc3RyaW5naWZ5LCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudC5yb290KSB7XG4gICAgICAgIGlmIChlbGVtZW50W1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50W1wicmV0dXJuXCJdKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnZhbHVlICYmIGVsZW1lbnQudHlwZSAhPT0gQ09NTUVOVCkge1xuICAgICAgICAgIC8vIGluc2VydCBlbXB0eSBydWxlIGluIG5vbi1wcm9kdWN0aW9uIGVudmlyb25tZW50c1xuICAgICAgICAgIC8vIHNvIEBlbW90aW9uL2plc3QgY2FuIGdyYWIgYGtleWAgZnJvbSB0aGUgKEpTKURPTSBmb3IgY2FjaGVzIHdpdGhvdXQgYW55IHJ1bGVzIGluc2VydGVkIHlldFxuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudC52YWx1ZSArIFwie31cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IDogcnVsZXNoZWV0KGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KHJ1bGUpO1xuICAgIH0pXTtcbiAgICB2YXIgc2VyaWFsaXplciA9IG1pZGRsZXdhcmUob21uaXByZXNlbnRQbHVnaW5zLmNvbmNhdChzdHlsaXNQbHVnaW5zLCBmaW5hbGl6aW5nUGx1Z2lucykpO1xuXG4gICAgdmFyIHN0eWxpcyA9IGZ1bmN0aW9uIHN0eWxpcyhzdHlsZXMpIHtcbiAgICAgIHJldHVybiBzZXJpYWxpemUoY29tcGlsZShzdHlsZXMpLCBzZXJpYWxpemVyKTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICBjdXJyZW50U2hlZXQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdXJyZW50U2hlZXQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBzZXJpYWxpemVkLm1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBzdHlsaXMoc2VsZWN0b3IgPyBzZWxlY3RvciArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIiA6IHNlcmlhbGl6ZWQuc3R5bGVzKTtcblxuICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgIGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHksXG4gICAgICBwcmVwZW5kOiBvcHRpb25zLnByZXBlbmQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogb3B0aW9ucy5pbnNlcnRpb25Qb2ludFxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgY2FjaGUuc2hlZXQuaHlkcmF0ZShub2Rlc1RvSHlkcmF0ZSk7XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwiaW1wb3J0IHtNUywgTU9aLCBXRUJLSVQsIFJVTEVTRVQsIEtFWUZSQU1FUywgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7bWF0Y2gsIGNoYXJhdCwgc3Vic3RyLCBzdHJsZW4sIHNpemVvZiwgcmVwbGFjZSwgY29tYmluZX0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtjb3B5LCB0b2tlbml6ZX0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5pbXBvcnQge3NlcmlhbGl6ZX0gZnJvbSAnLi9TZXJpYWxpemVyLmpzJ1xuaW1wb3J0IHtwcmVmaXh9IGZyb20gJy4vUHJlZml4ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbltdfSBjb2xsZWN0aW9uXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmUgKGNvbGxlY3Rpb24pIHtcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjb2xsZWN0aW9uKVxuXG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRcdHZhciBvdXRwdXQgPSAnJ1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRcdG91dHB1dCArPSBjb2xsZWN0aW9uW2ldKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHx8ICcnXG5cblx0XHRyZXR1cm4gb3V0cHV0XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2hlZXQgKGNhbGxiYWNrKSB7XG5cdHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdGlmICghZWxlbWVudC5yb290KVxuXHRcdFx0aWYgKGVsZW1lbnQgPSBlbGVtZW50LnJldHVybilcblx0XHRcdFx0Y2FsbGJhY2soZWxlbWVudClcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlZml4ZXIgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0aWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpXG5cdFx0aWYgKCFlbGVtZW50LnJldHVybilcblx0XHRcdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0XHRcdGNhc2UgREVDTEFSQVRJT046IGVsZW1lbnQucmV0dXJuID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoLCBjaGlsZHJlbilcblx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0Y2FzZSBLRVlGUkFNRVM6XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7dmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpfSldLCBjYWxsYmFjaylcblx0XHRcdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0XHRcdGlmIChlbGVtZW50Lmxlbmd0aClcblx0XHRcdFx0XHRcdHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzpyZWFkLW9ubHknOiBjYXNlICc6cmVhZC13cml0ZSc6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHRcdC8vIDpwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgJzo6cGxhY2Vob2xkZXInOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgV0VCS0lUICsgJ2lucHV0LSQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgJzonICsgTU9aICsgJyQxJyldfSksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocGxhY1xcdyspLywgTVMgKyAnaW5wdXQtJDEnKV19KVxuXHRcdFx0XHRcdFx0XHRcdFx0XSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJydcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5hbWVzcGFjZSAoZWxlbWVudCkge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdGVsZW1lbnQucHJvcHMgPSBlbGVtZW50LnByb3BzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGNvbWJpbmUodG9rZW5pemUodmFsdWUpLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBjaGlsZHJlbikge1xuXHRcdFx0XHRcdHN3aXRjaCAoY2hhcmF0KHZhbHVlLCAwKSkge1xuXHRcdFx0XHRcdFx0Ly8gXFxmXG5cdFx0XHRcdFx0XHRjYXNlIDEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc3Vic3RyKHZhbHVlLCAxLCBzdHJsZW4odmFsdWUpKVxuXHRcdFx0XHRcdFx0Ly8gXFwwICggKyA+IH5cblx0XHRcdFx0XHRcdGNhc2UgMDogY2FzZSA0MDogY2FzZSA0MzogY2FzZSA2MjogY2FzZSAxMjY6XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gOlxuXHRcdFx0XHRcdFx0Y2FzZSA1ODpcblx0XHRcdFx0XHRcdFx0aWYgKGNoaWxkcmVuWysraW5kZXhdID09PSAnZ2xvYmFsJylcblx0XHRcdFx0XHRcdFx0XHRjaGlsZHJlbltpbmRleF0gPSAnJywgY2hpbGRyZW5bKytpbmRleF0gPSAnXFxmJyArIHN1YnN0cihjaGlsZHJlbltpbmRleF0sIGluZGV4ID0gMSwgLTEpXG5cdFx0XHRcdFx0XHQvLyBcXHNcblx0XHRcdFx0XHRcdGNhc2UgMzI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAoaW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDA6IGVsZW1lbnQgPSB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNpemVvZihjaGlsZHJlbikgPiAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgaW5kZXggPSBzaXplb2YoY2hpbGRyZW4pIC0gMTogY2FzZSAyOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAyID8gdmFsdWUgKyBlbGVtZW50ICsgZWxlbWVudCA6IHZhbHVlICsgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0pXG5cdH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbi8vIFBvcnRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hYXBwbGVieS9zbWhhc2hlci9ibG9iLzYxYTA1MzBmMjgyNzdmMmU4NTBiZmMzOTYwMGNlNjFkMDJiNTE4ZGUvc3JjL011cm11ckhhc2gyLmNwcCNMMzctTDg2XG5mdW5jdGlvbiBtdXJtdXIyKHN0cikge1xuICAvLyAnbScgYW5kICdyJyBhcmUgbWl4aW5nIGNvbnN0YW50cyBnZW5lcmF0ZWQgb2ZmbGluZS5cbiAgLy8gVGhleSdyZSBub3QgcmVhbGx5ICdtYWdpYycsIHRoZXkganVzdCBoYXBwZW4gdG8gd29yayB3ZWxsLlxuICAvLyBjb25zdCBtID0gMHg1YmQxZTk5NTtcbiAgLy8gY29uc3QgciA9IDI0O1xuICAvLyBJbml0aWFsaXplIHRoZSBoYXNoXG4gIHZhciBoID0gMDsgLy8gTWl4IDQgYnl0ZXMgYXQgYSB0aW1lIGludG8gdGhlIGhhc2hcblxuICB2YXIgayxcbiAgICAgIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aDtcblxuICBmb3IgKDsgbGVuID49IDQ7ICsraSwgbGVuIC09IDQpIHtcbiAgICBrID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAxNiB8IChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMjQ7XG4gICAgayA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gICAgayBePVxuICAgIC8qIGsgPj4+IHI6ICovXG4gICAgayA+Pj4gMjQ7XG4gICAgaCA9XG4gICAgLyogTWF0aC5pbXVsKGssIG0pOiAqL1xuICAgIChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGsgPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNikgXlxuICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIEhhbmRsZSB0aGUgbGFzdCBmZXcgYnl0ZXMgb2YgdGhlIGlucHV0IGFycmF5XG5cblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMzpcbiAgICAgIGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcblxuICAgIGNhc2UgMTpcbiAgICAgIGggXj0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICAgICAgaCA9XG4gICAgICAvKiBNYXRoLmltdWwoaCwgbSk6ICovXG4gICAgICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICB9IC8vIERvIGEgZmV3IGZpbmFsIG1peGVzIG9mIHRoZSBoYXNoIHRvIGVuc3VyZSB0aGUgbGFzdCBmZXdcbiAgLy8gYnl0ZXMgYXJlIHdlbGwtaW5jb3Jwb3JhdGVkLlxuXG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9XG4gIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgKGggJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoaCA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgcmV0dXJuICgoaCBeIGggPj4+IDE1KSA+Pj4gMCkudG9TdHJpbmcoMzYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtdXJtdXIyO1xuIiwidmFyIHVuaXRsZXNzS2V5cyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBtc0dyaWRSb3c6IDEsXG4gIG1zR3JpZFJvd1NwYW46IDEsXG4gIG1zR3JpZENvbHVtbjogMSxcbiAgbXNHcmlkQ29sdW1uU3BhbjogMSxcbiAgZm9udFdlaWdodDogMSxcbiAgbGluZUhlaWdodDogMSxcbiAgb3BhY2l0eTogMSxcbiAgb3JkZXI6IDEsXG4gIG9ycGhhbnM6IDEsXG4gIHRhYlNpemU6IDEsXG4gIHdpZG93czogMSxcbiAgekluZGV4OiAxLFxuICB6b29tOiAxLFxuICBXZWJraXRMaW5lQ2xhbXA6IDEsXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IDEsXG4gIGZsb29kT3BhY2l0eTogMSxcbiAgc3RvcE9wYWNpdHk6IDEsXG4gIHN0cm9rZURhc2hhcnJheTogMSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogMSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogMSxcbiAgc3Ryb2tlT3BhY2l0eTogMSxcbiAgc3Ryb2tlV2lkdGg6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHVuaXRsZXNzS2V5cztcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyh2YXJ8YXR0cnxjb3VudGVycz98dXJsfGVsZW1lbnR8KCgocmVwZWF0aW5nLSk/KGxpbmVhcnxyYWRpYWwpKXxjb25pYyktZ3JhZGllbnQpXFwofChuby0pPyhvcGVufGNsb3NlKS1xdW90ZS87XG4gIHZhciBjb250ZW50VmFsdWVzID0gWydub3JtYWwnLCAnbm9uZScsICdpbml0aWFsJywgJ2luaGVyaXQnLCAndW5zZXQnXTtcbiAgdmFyIG9sZFByb2Nlc3NTdHlsZVZhbHVlID0gcHJvY2Vzc1N0eWxlVmFsdWU7XG4gIHZhciBtc1BhdHRlcm4gPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG4gIHZhciBoeXBoZW5hdGVkQ2FjaGUgPSB7fTtcblxuICBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ID09PSAnY29udGVudCcpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IGNvbnRlbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xICYmICFjb250ZW50VmFsdWVQYXR0ZXJuLnRlc3QodmFsdWUpICYmICh2YWx1ZS5jaGFyQXQoMCkgIT09IHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSB8fCB2YWx1ZS5jaGFyQXQoMCkgIT09ICdcIicgJiYgdmFsdWUuY2hhckF0KDApICE9PSBcIidcIikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgYSB2YWx1ZSBmb3IgJ2NvbnRlbnQnIHdpdGhvdXQgcXVvdGVzLCB0cnkgcmVwbGFjaW5nIGl0IHdpdGggYGNvbnRlbnQ6ICdcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIidgXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBvbGRQcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKTtcblxuICAgIGlmIChwcm9jZXNzZWQgIT09ICcnICYmICFpc0N1c3RvbVByb3BlcnR5KGtleSkgJiYga2V5LmluZGV4T2YoJy0nKSAhPT0gLTEgJiYgaHlwaGVuYXRlZENhY2hlW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaHlwaGVuYXRlZENhY2hlW2tleV0gPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzaW5nIGtlYmFiLWNhc2UgZm9yIGNzcyBwcm9wZXJ0aWVzIGluIG9iamVjdHMgaXMgbm90IHN1cHBvcnRlZC4gRGlkIHlvdSBtZWFuIFwiICsga2V5LnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoc3RyLCBfY2hhcikge1xuICAgICAgICByZXR1cm4gX2NoYXIudG9VcHBlckNhc2UoKTtcbiAgICAgIH0pICsgXCI/XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH07XG59XG5cbnZhciBub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSA9ICdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCAnICsgJ0BlbW90aW9uL2JhYmVsLXBsdWdpbiwgdGhlIHN3YyBFbW90aW9uIHBsdWdpbiwgb3IgYW5vdGhlciBFbW90aW9uLWF3YXJlICcgKyAnY29tcGlsZXIgdHJhbnNmb3JtLic7XG5cbmZ1bmN0aW9uIGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGludGVycG9sYXRpb24pIHtcbiAgaWYgKGludGVycG9sYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChpbnRlcnBvbGF0aW9uLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb24udG9TdHJpbmcoKSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICB7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uLmFuaW0gPT09IDEpIHtcbiAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICBuYW1lOiBpbnRlcnBvbGF0aW9uLm5hbWUsXG4gICAgICAgICAgICBzdHlsZXM6IGludGVycG9sYXRpb24uc3R5bGVzLFxuICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gaW50ZXJwb2xhdGlvbi5uYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uc3R5bGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGludGVycG9sYXRpb24ubmV4dDtcblxuICAgICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdCB0aGUgbW9zdCBlZmZpY2llbnQgdGhpbmcgZXZlciBidXQgdGhpcyBpcyBhIHByZXR0eSByYXJlIGNhc2VcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB3aWxsIGJlIHZlcnkgZmV3IGl0ZXJhdGlvbnMgb2YgdGhpcyBnZW5lcmFsbHlcbiAgICAgICAgICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5leHQubmFtZSxcbiAgICAgICAgICAgICAgICBzdHlsZXM6IG5leHQuc3R5bGVzLFxuICAgICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXMgPSBpbnRlcnBvbGF0aW9uLnN0eWxlcyArIFwiO1wiO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3R5bGVzICs9IGludGVycG9sYXRpb24ubWFwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbik7XG4gICAgICB9XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIGlmIChtZXJnZWRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzQ3Vyc29yID0gY3Vyc29yO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBpbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzKTtcbiAgICAgICAgICBjdXJzb3IgPSBwcmV2aW91c0N1cnNvcjtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRnVuY3Rpb25zIHRoYXQgYXJlIGludGVycG9sYXRlZCBpbiBjc3MgY2FsbHMgd2lsbCBiZSBzdHJpbmdpZmllZC5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIGhhdmUgYSBjc3MgY2FsbCBiYXNlZCBvbiBwcm9wcywgY3JlYXRlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgY3NzIGNhbGwgbGlrZSB0aGlzXFxuJyArICdsZXQgZHluYW1pY1N0eWxlID0gKHByb3BzKSA9PiBjc3NgY29sb3I6ICR7cHJvcHMuY29sb3J9YFxcbicgKyAnSXQgY2FuIGJlIGNhbGxlZCBkaXJlY3RseSB3aXRoIHByb3BzIG9yIGludGVycG9sYXRlZCBpbiBhIHN0eWxlZCBjYWxsIGxpa2UgdGhpc1xcbicgKyBcImxldCBTb21lQ29tcG9uZW50ID0gc3R5bGVkKCdkaXYnKWAke2R5bmFtaWNTdHlsZX1gXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICAgICAgdmFyIHJlcGxhY2VkID0gaW50ZXJwb2xhdGlvbi5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgIHZhciBmYWtlVmFyTmFtZSA9IFwiYW5pbWF0aW9uXCIgKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgICBtYXRjaGVkLnB1c2goXCJjb25zdCBcIiArIGZha2VWYXJOYW1lICsgXCIgPSBrZXlmcmFtZXNgXCIgKyBwMi5yZXBsYWNlKC9eQGtleWZyYW1lcyBhbmltYXRpb24tXFx3Ky8sICcnKSArIFwiYFwiKTtcbiAgICAgICAgICByZXR1cm4gXCIke1wiICsgZmFrZVZhck5hbWUgKyBcIn1cIjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignYGtleWZyYW1lc2Agb3V0cHV0IGdvdCBpbnRlcnBvbGF0ZWQgaW50byBwbGFpbiBzdHJpbmcsIHBsZWFzZSB3cmFwIGl0IHdpdGggYGNzc2AuXFxuXFxuJyArICdJbnN0ZWFkIG9mIGRvaW5nIHRoaXM6XFxuXFxuJyArIFtdLmNvbmNhdChtYXRjaGVkLCBbXCJgXCIgKyByZXBsYWNlZCArIFwiYFwiXSkuam9pbignXFxuJykgKyAnXFxuXFxuWW91IHNob3VsZCB3cmFwIGl0IHdpdGggYGNzc2AgbGlrZSB0aGlzOlxcblxcbicgKyAoXCJjc3NgXCIgKyByZXBsYWNlZCArIFwiYFwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gIH0gLy8gZmluYWxpemUgc3RyaW5nIHZhbHVlcyAocmVndWxhciBzdHJpbmdzIGFuZCBmdW5jdGlvbnMgaW50ZXJwb2xhdGVkIGludG8gY3NzIGNhbGxzKVxuXG5cbiAgaWYgKHJlZ2lzdGVyZWQgPT0gbnVsbCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0aW9uO1xuICB9XG5cbiAgdmFyIGNhY2hlZCA9IHJlZ2lzdGVyZWRbaW50ZXJwb2xhdGlvbl07XG4gIHJldHVybiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QobWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIG9iaikge1xuICB2YXIgc3RyaW5nID0gJyc7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHJpbmcgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqW2ldKSArIFwiO1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgICAgdmFyIHZhbHVlID0gb2JqW19rZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZCAhPSBudWxsICYmIHJlZ2lzdGVyZWRbdmFsdWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gX2tleSArIFwie1wiICsgcmVnaXN0ZXJlZFt2YWx1ZV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoX2tleSA9PT0gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUicgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihub0NvbXBvbmVudFNlbGVjdG9yTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlWzBdID09PSAnc3RyaW5nJyAmJiAocmVnaXN0ZXJlZCA9PSBudWxsIHx8IHJlZ2lzdGVyZWRbdmFsdWVbMF1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHZhbHVlLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZVtfaV0pKSB7XG4gICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZVtfaV0pICsgXCI7XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0ZWQgPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCB2YWx1ZSk7XG5cbiAgICAgICAgICBzd2l0Y2ggKF9rZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgICAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgX2tleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyBpbnRlcnBvbGF0ZWQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBsYWJlbFBhdHRlcm4gPSAvbGFiZWw6XFxzKihbXlxccztcXG57XSspXFxzKig7fCQpL2c7XG52YXIgc291cmNlTWFwUGF0dGVybjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc291cmNlTWFwUGF0dGVybiA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy9nO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICB9XG5cbiAgICBzdHlsZXMgKz0gc3RyaW5nc1swXTtcbiAgfSAvLyB3ZSBzdGFydCBhdCAxIHNpbmNlIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgZmlyc3QgYXJnXG5cblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgYXJnc1tpXSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc3RyaW5nc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpXTtcbiAgICB9XG4gIH1cblxuICB2YXIgc291cmNlTWFwO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2Uoc291cmNlTWFwUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICBzb3VyY2VNYXAgPSBtYXRjaDtcbiAgICAgIHJldHVybiAnJztcbiAgICB9KTtcbiAgfSAvLyB1c2luZyBhIGdsb2JhbCByZWdleCB3aXRoIC5leGVjIGlzIHN0YXRlZnVsIHNvIGxhc3RJbmRleCBoYXMgdG8gYmUgcmVzZXQgZWFjaCB0aW1lXG5cblxuICBsYWJlbFBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGlkZW50aWZpZXJOYW1lID0gJyc7XG4gIHZhciBtYXRjaDsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YjgwOWMyY2YyOTQ5ODAwYTBmNjFmYjVcblxuICB3aGlsZSAoKG1hdGNoID0gbGFiZWxQYXR0ZXJuLmV4ZWMoc3R5bGVzKSkgIT09IG51bGwpIHtcbiAgICBpZGVudGlmaWVyTmFtZSArPSAnLScgKyAvLyAkRmxvd0ZpeE1lIHdlIGtub3cgaXQncyBub3QgbnVsbFxuICAgIG1hdGNoWzFdO1xuICB9XG5cbiAgdmFyIG5hbWUgPSBoYXNoU3RyaW5nKHN0eWxlcykgKyBpZGVudGlmaWVyTmFtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWUgU2VyaWFsaXplZFN0eWxlcyB0eXBlIGRvZXNuJ3QgaGF2ZSB0b1N0cmluZyBwcm9wZXJ0eSAoYW5kIHdlIGRvbid0IHdhbnQgdG8gYWRkIGl0KVxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBtYXA6IHNvdXJjZU1hcCxcbiAgICAgIG5leHQ6IGN1cnNvcixcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFwiWW91IGhhdmUgdHJpZWQgdG8gc3RyaW5naWZ5IG9iamVjdCByZXR1cm5lZCBmcm9tIGBjc3NgIGZ1bmN0aW9uLiBJdCBpc24ndCBzdXBwb3NlZCB0byBiZSB1c2VkIGRpcmVjdGx5IChlLmcuIGFzIHZhbHVlIG9mIHRoZSBgY2xhc3NOYW1lYCBwcm9wKSwgYnV0IHJhdGhlciBoYW5kZWQgdG8gZW1vdGlvbiBzbyBpdCBjYW4gaGFuZGxlIGl0IChlLmcuIGFzIHZhbHVlIG9mIGBjc3NgIHByb3ApLlwiO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgbmV4dDogY3Vyc29yXG4gIH07XG59O1xuXG5leHBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxudmFyIHN5bmNGYWxsYmFjayA9IGZ1bmN0aW9uIHN5bmNGYWxsYmFjayhjcmVhdGUpIHtcbiAgcmV0dXJuIGNyZWF0ZSgpO1xufTtcblxudmFyIHVzZUluc2VydGlvbkVmZmVjdCA9IFJlYWN0Wyd1c2VJbnNlcnRpb24nICsgJ0VmZmVjdCddID8gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gOiBmYWxzZTtcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrID0gIHVzZUluc2VydGlvbkVmZmVjdCB8fCBzeW5jRmFsbGJhY2s7XG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrID0gdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHVzZUxheW91dEVmZmVjdDtcblxuZXhwb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTZhODgzZGE5LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS4xMC41XCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdGV4cG9ydHM6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9faXNvbGF0ZWQtaG5yc1wiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LWRldi1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG5cdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XCIuL21hY3JvXCI6IFwiLi9tYWNyby5qc1wiXG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJFbW90aW9uIENvbnRyaWJ1dG9yc1wiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjE4LjNcIixcblx0XHRcIkBlbW90aW9uL2JhYmVsLXBsdWdpblwiOiBcIl4xMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJpYWxpemVcIjogXCJeMS4xLjFcIixcblx0XHRcIkBlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi91dGlsc1wiOiBcIl4xLjIuMFwiLFxuXHRcdFwiQGVtb3Rpb24vd2Vhay1tZW1vaXplXCI6IFwiXjAuMy4wXCIsXG5cdFx0XCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiOiBcIl4zLjMuMVwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMC4wXCIsXG5cdFx0cmVhY3Q6IFwiPj0xNi44LjBcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzTWV0YToge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9LFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IHtcblx0XHRcdG9wdGlvbmFsOiB0cnVlXG5cdFx0fVxuXHR9LFxuXHRkZXZEZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMTguNVwiLFxuXHRcdFwiQGRlZmluaXRlbHl0eXBlZC9kdHNsaW50XCI6IFwiMC4wLjExMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMTAuNVwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzLXByZXR0aWZpZXJcIjogXCIxLjEuMVwiLFxuXHRcdFwiQGVtb3Rpb24vc2VydmVyXCI6IFwiMTEuMTAuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuMTAuNVwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCIsXG5cdFx0dHlwZXNjcmlwdDogXCJeNC41LjVcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCIsXG5cdFx0ZXhwb3J0czoge1xuXHRcdFx0ZW52Q29uZGl0aW9uczogW1xuXHRcdFx0XHRcImJyb3dzZXJcIixcblx0XHRcdFx0XCJ3b3JrZXJcIlxuXHRcdFx0XSxcblx0XHRcdGV4dHJhOiB7XG5cdFx0XHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFx0XHRcIi4vbWFjcm9cIjogXCIuL21hY3JvLmpzXCJcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkQXJyW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplZEFyciA9IFtdO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBzZXJpYWxpemVkQXJyLnB1c2goc2VyaWFsaXplZCk7IC8vIHJlZ2lzdHJhdGlvbiBoYXMgdG8gaGFwcGVuIGhlcmUgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1pZ2h0IGdldCBjb25zdW1lZCBieSBgY3hgXG5cbiAgICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZEFycjogc2VyaWFsaXplZEFyclxuICB9KSwgZWxlKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNywgIzI5MDUgZm9yIHNvbWUgcmVhc29uIEplc3QgYW5kIFZpdGVzdCBldmFsdWF0ZSBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZFxuXG4gIHZhciBpc1Rlc3RFbnYgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZpICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc1Rlc3RFbnYpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtdWkvdXRpbHMvbWFjcm9zL011aUVycm9yLm1hY3JvYCBpbnN0ZWFkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TXVpRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgLy8gQXBwbHkgYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyBpbiBsb29zZSBtb2RlXG4gIC8vIGxvb3NlIG1vZGUgaXMgc2FmZSBpZmYgd2UncmUgY29uY2F0ZW5hdGluZyBwcmltaXRpdmVzXG4gIC8vIHNlZSBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9iYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzI2xvb3NlXG4gIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xuICBsZXQgdXJsID0gJ2h0dHBzOi8vbXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIHJlc3QgcGFyYW1zIG92ZXItdHJhbnNwaWxlIGZvciB0aGlzIGNhc2VcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgdXJsICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gJ01pbmlmaWVkIE1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImltcG9ydCBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGZyb20gXCIuL2Zvcm1hdE11aUVycm9yTWVzc2FnZVwiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBpbiB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGBjYXBpdGFsaXplKHN0cmluZylcXGAgZXhwZWN0cyBhIHN0cmluZyBhcmd1bWVudC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNhcGl0YWxpemU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vKipcbiAqIEFkZCBrZXlzLCB2YWx1ZXMgb2YgYGRlZmF1bHRQcm9wc2AgdGhhdCBkb2VzIG5vdCBleGlzdCBpbiBgcHJvcHNgXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdFByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm5zIHtvYmplY3R9IHJlc29sdmVkIHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlc29sdmVQcm9wcyhkZWZhdWx0UHJvcHMsIHByb3BzKSB7XG4gIGNvbnN0IG91dHB1dCA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcykuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c3xzbG90cykkLykpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzW3Byb3BOYW1lXSwgb3V0cHV0W3Byb3BOYW1lXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wTmFtZS50b1N0cmluZygpLm1hdGNoKC9eKGNvbXBvbmVudHNQcm9wc3xzbG90UHJvcHMpJC8pKSB7XG4gICAgICBjb25zdCBkZWZhdWx0U2xvdFByb3BzID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXSB8fCB7fTtcbiAgICAgIGNvbnN0IHNsb3RQcm9wcyA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSB7fTtcbiAgICAgIGlmICghc2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhzbG90UHJvcHMpKSB7XG4gICAgICAgIC8vIFJlZHVjZSB0aGUgaXRlcmF0aW9uIGlmIHRoZSBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0U2xvdFByb3BzO1xuICAgICAgfSBlbHNlIGlmICghZGVmYXVsdFNsb3RQcm9wcyB8fCAhT2JqZWN0LmtleXMoZGVmYXVsdFNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIGRlZmF1bHQgc2xvdCBwcm9wcyBpcyBlbXB0eVxuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gc2xvdFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBzbG90UHJvcHMpO1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKS5mb3JFYWNoKHNsb3RQcm9wTmFtZSA9PiB7XG4gICAgICAgICAgb3V0cHV0W3Byb3BOYW1lXVtzbG90UHJvcE5hbWVdID0gcmVzb2x2ZVByb3BzKGRlZmF1bHRTbG90UHJvcHNbc2xvdFByb3BOYW1lXSwgc2xvdFByb3BzW3Nsb3RQcm9wTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG91dHB1dFtwcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgeyBpbnRlcm5hbF9yZXNvbHZlUHJvcHMgYXMgcmVzb2x2ZVByb3BzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgdGhlbWUsXG4gICAgbmFtZSxcbiAgICBwcm9wc1xuICB9ID0gcGFyYW1zO1xuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5jb21wb25lbnRzIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdIHx8ICF0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcykge1xuICAgIHJldHVybiBwcm9wcztcbiAgfVxuICByZXR1cm4gcmVzb2x2ZVByb3BzKHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzLCBwcm9wcyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChpdGVtKSB7XG4gIHJldHVybiBpdGVtICE9PSBudWxsICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBkZWVwQ2xvbmUoc291cmNlKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgb3V0cHV0W2tleV0gPSBkZWVwQ2xvbmUoc291cmNlW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyA9IHtcbiAgY2xvbmU6IHRydWVcbn0pIHtcbiAgY29uc3Qgb3V0cHV0ID0gb3B0aW9ucy5jbG9uZSA/IF9leHRlbmRzKHt9LCB0YXJnZXQpIDogdGFyZ2V0O1xuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgLy8gQXZvaWQgcHJvdG90eXBlIHBvbGx1dGlvblxuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pICYmIGtleSBpbiB0YXJnZXQgJiYgaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgLy8gU2luY2UgYG91dHB1dGAgaXMgYSBjbG9uZSBvZiBgdGFyZ2V0YCBhbmQgd2UgaGF2ZSBuYXJyb3dlZCBgdGFyZ2V0YCBpbiB0aGlzIGJsb2NrIHdlIGNhbiBjYXN0IHRvIHRoZSBzYW1lIHR5cGUuXG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuY2xvbmUpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSA/IGRlZXBDbG9uZShzb3VyY2Vba2V5XSkgOiBzb3VyY2Vba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl07XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludEtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5jb25zdCBzb3J0QnJlYWtwb2ludHNWYWx1ZXMgPSB2YWx1ZXMgPT4ge1xuICBjb25zdCBicmVha3BvaW50c0FzQXJyYXkgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLm1hcChrZXkgPT4gKHtcbiAgICBrZXksXG4gICAgdmFsOiB2YWx1ZXNba2V5XVxuICB9KSkgfHwgW107XG4gIC8vIFNvcnQgaW4gYXNjZW5kaW5nIG9yZGVyXG4gIGJyZWFrcG9pbnRzQXNBcnJheS5zb3J0KChicmVha3BvaW50MSwgYnJlYWtwb2ludDIpID0+IGJyZWFrcG9pbnQxLnZhbCAtIGJyZWFrcG9pbnQyLnZhbCk7XG4gIHJldHVybiBicmVha3BvaW50c0FzQXJyYXkucmVkdWNlKChhY2MsIG9iaikgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYWNjLCB7XG4gICAgICBbb2JqLmtleV06IG9iai52YWxcbiAgICB9KTtcbiAgfSwge30pO1xufTtcblxuLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICBjb25zdCB7XG4gICAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAgIC8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtKS5cbiAgICAgIHZhbHVlcyA9IHtcbiAgICAgICAgeHM6IDAsXG4gICAgICAgIC8vIHBob25lXG4gICAgICAgIHNtOiA2MDAsXG4gICAgICAgIC8vIHRhYmxldFxuICAgICAgICBtZDogOTAwLFxuICAgICAgICAvLyBzbWFsbCBsYXB0b3BcbiAgICAgICAgbGc6IDEyMDAsXG4gICAgICAgIC8vIGRlc2t0b3BcbiAgICAgICAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG4gICAgICB9LFxuXG4gICAgICB1bml0ID0gJ3B4JyxcbiAgICAgIHN0ZXAgPSA1XG4gICAgfSA9IGJyZWFrcG9pbnRzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHNvcnRCcmVha3BvaW50c1ZhbHVlcyh2YWx1ZXMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydGVkVmFsdWVzKTtcbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtYXgtd2lkdGg6JHt2YWx1ZSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3R5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydH0ke3VuaXR9KSBhbmQgYCArIGAobWF4LXdpZHRoOiR7KGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleF1dIDogZW5kKSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiB1cChrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG5vdChrZXkpIHtcbiAgICAvLyBoYW5kbGUgZmlyc3QgYW5kIGxhc3Qga2V5IHNlcGFyYXRlbHksIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHlcbiAgICBjb25zdCBrZXlJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpO1xuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cbiAgICBpZiAoa2V5SW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGRvd24oa2V5c1trZXlJbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSkucmVwbGFjZSgnQG1lZGlhJywgJ0BtZWRpYSBub3QgYWxsIGFuZCcpO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5cyxcbiAgICB2YWx1ZXM6IHNvcnRlZFZhbHVlcyxcbiAgICB1cCxcbiAgICBkb3duLFxuICAgIGJldHdlZW4sXG4gICAgb25seSxcbiAgICBub3QsXG4gICAgdW5pdFxuICB9LCBvdGhlcik7XG59IiwiY29uc3Qgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG4vLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cbmV4cG9ydCBjb25zdCB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICAvLyBwaG9uZVxuICBzbTogNjAwLFxuICAvLyB0YWJsZXRcbiAgbWQ6IDkwMCxcbiAgLy8gc21hbGwgbGFwdG9wXG4gIGxnOiAxMjAwLFxuICAvLyBkZXNrdG9wXG4gIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxufTtcblxuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gICAgICAvLyBrZXkgaXMgYnJlYWtwb2ludFxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMudmFsdWVzIHx8IHZhbHVlcykuaW5kZXhPZihicmVha3BvaW50KSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgbWVkaWFLZXkgPSB0aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpO1xuICAgICAgICBhY2NbbWVkaWFLZXldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSwgYnJlYWtwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NLZXkgPSBicmVha3BvaW50O1xuICAgICAgICBhY2NbY3NzS2V5XSA9IHByb3BWYWx1ZVtjc3NLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBuZXdTdHlsZUZ1bmN0aW9uID0gcHJvcHMgPT4ge1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gICAgY29uc3QgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgY29uc3QgZXh0ZW5kZWQgPSB0aGVtZUJyZWFrcG9pbnRzLmtleXMucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKHByb3BzW2tleV0pIHtcbiAgICAgICAgYWNjID0gYWNjIHx8IHt9O1xuICAgICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlRnVuY3Rpb24oX2V4dGVuZHMoe1xuICAgICAgICAgIHRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgbnVsbCk7XG4gICAgcmV0dXJuIG1lcmdlKGJhc2UsIGV4dGVuZGVkKTtcbiAgfTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAuLi5zdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzXTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQgPSB7fSkge1xuICB2YXIgX2JyZWFrcG9pbnRzSW5wdXQka2V5O1xuICBjb25zdCBicmVha3BvaW50c0luT3JkZXIgPSAoX2JyZWFrcG9pbnRzSW5wdXQka2V5ID0gYnJlYWtwb2ludHNJbnB1dC5rZXlzKSA9PSBudWxsID8gdm9pZCAwIDogX2JyZWFrcG9pbnRzSW5wdXQka2V5LnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50U3R5bGVLZXkgPSBicmVha3BvaW50c0lucHV0LnVwKGtleSk7XG4gICAgYWNjW2JyZWFrcG9pbnRTdHlsZUtleV0gPSB7fTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBicmVha3BvaW50c0luT3JkZXIgfHwge307XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludEtleXMsIHN0eWxlKSB7XG4gIHJldHVybiBicmVha3BvaW50S2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgY29uc3QgYnJlYWtwb2ludE91dHB1dCA9IGFjY1trZXldO1xuICAgIGNvbnN0IGlzQnJlYWtwb2ludFVudXNlZCA9ICFicmVha3BvaW50T3V0cHV0IHx8IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRPdXRwdXQpLmxlbmd0aCA9PT0gMDtcbiAgICBpZiAoaXNCcmVha3BvaW50VW51c2VkKSB7XG4gICAgICBkZWxldGUgYWNjW2tleV07XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHN0eWxlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUJyZWFrcG9pbnRzSW5PcmRlcihicmVha3BvaW50c0lucHV0LCAuLi5zdHlsZXMpIHtcbiAgY29uc3QgZW1wdHlCcmVha3BvaW50cyA9IGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdChicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3QgbWVyZ2VkT3V0cHV0ID0gW2VtcHR5QnJlYWtwb2ludHMsIC4uLnN0eWxlc10ucmVkdWNlKChwcmV2LCBuZXh0KSA9PiBkZWVwbWVyZ2UocHJldiwgbmV4dCksIHt9KTtcbiAgcmV0dXJuIHJlbW92ZVVudXNlZEJyZWFrcG9pbnRzKE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpLCBtZXJnZWRPdXRwdXQpO1xufVxuXG4vLyBjb21wdXRlIGJhc2UgZm9yIHJlc3BvbnNpdmUgdmFsdWVzOyBlLmcuLFxuLy8gWzEsMiwzXSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbi8vIHt4czogMSwgc206IDIsIG1kOiAzfSA9PiB7eHM6IHRydWUsIHNtOiB0cnVlLCBtZDogdHJ1ZX1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpIHtcbiAgLy8gZml4ZWQgdmFsdWVcbiAgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBiYXNlID0ge307XG4gIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMpO1xuICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKChicmVha3BvaW50LCBpKSA9PiB7XG4gICAgICBpZiAoaSA8IGJyZWFrcG9pbnRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJyZWFrcG9pbnRzS2V5cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgaWYgKGJyZWFrcG9pbnRWYWx1ZXNbYnJlYWtwb2ludF0gIT0gbnVsbCkge1xuICAgICAgICBiYXNlW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYmFzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyh7XG4gIHZhbHVlczogYnJlYWtwb2ludFZhbHVlcyxcbiAgYnJlYWtwb2ludHM6IHRoZW1lQnJlYWtwb2ludHMsXG4gIGJhc2U6IGN1c3RvbUJhc2Vcbn0pIHtcbiAgY29uc3QgYmFzZSA9IGN1c3RvbUJhc2UgfHwgY29tcHV0ZUJyZWFrcG9pbnRzQmFzZShicmVha3BvaW50VmFsdWVzLCB0aGVtZUJyZWFrcG9pbnRzKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYnJlYWtwb2ludFZhbHVlcztcbiAgfVxuICBsZXQgcHJldmlvdXM7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBicmVha3BvaW50LCBpKSA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYnJlYWtwb2ludFZhbHVlcykpIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXNbaV0gIT0gbnVsbCA/IGJyZWFrcG9pbnRWYWx1ZXNbaV0gOiBicmVha3BvaW50VmFsdWVzW3ByZXZpb3VzXTtcbiAgICAgIHByZXZpb3VzID0gaTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBicmVha3BvaW50VmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBicmVha3BvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoKG9iaiwgcGF0aCwgY2hlY2tWYXJzID0gdHJ1ZSkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDaGVjayBpZiBDU1MgdmFyaWFibGVzIGFyZSB1c2VkXG4gIGlmIChvYmogJiYgb2JqLnZhcnMgJiYgY2hlY2tWYXJzKSB7XG4gICAgY29uc3QgdmFsID0gYHZhcnMuJHtwYXRofWAuc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICYmIGFjY1tpdGVtXSA/IGFjY1tpdGVtXSA6IG51bGwsIG9iaik7XG4gICAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgaWYgKGFjYyAmJiBhY2NbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjY1tpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIG9iaik7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwsIHVzZXJWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsKSB7XG4gIGxldCB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZU1hcHBpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZyhwcm9wVmFsdWVGaW5hbCk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZU1hcHBpbmcpKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmdbcHJvcFZhbHVlRmluYWxdIHx8IHVzZXJWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGdldFBhdGgodGhlbWVNYXBwaW5nLCBwcm9wVmFsdWVGaW5hbCkgfHwgdXNlclZhbHVlO1xuICB9XG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICB2YWx1ZSA9IHRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlLCB0aGVtZU1hcHBpbmcpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHN0eWxlKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHByb3AsXG4gICAgY3NzUHJvcGVydHkgPSBvcHRpb25zLnByb3AsXG4gICAgdGhlbWVLZXksXG4gICAgdHJhbnNmb3JtXG4gIH0gPSBvcHRpb25zO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICBpZiAocHJvcHNbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWU7XG4gICAgY29uc3QgdGhlbWVNYXBwaW5nID0gZ2V0UGF0aCh0aGVtZSwgdGhlbWVLZXkpIHx8IHt9O1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIGlmIChwcm9wVmFsdWVGaW5hbCA9PT0gdmFsdWUgJiYgdHlwZW9mIHByb3BWYWx1ZUZpbmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBIYXZlbid0IGZvdW5kIHZhbHVlXG4gICAgICAgIHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgICBbcHJvcF06IHJlc3BvbnNpdmVQcm9wVHlwZVxuICB9IDoge307XG4gIGZuLmZpbHRlclByb3BzID0gW3Byb3BdO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBzdHlsZTsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHsgZ2V0UGF0aCB9IGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbmNvbnN0IHByb3BlcnRpZXMgPSB7XG4gIG06ICdtYXJnaW4nLFxuICBwOiAncGFkZGluZydcbn07XG5jb25zdCBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xuY29uc3QgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59O1xuXG4vLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuY29uc3QgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUocHJvcCA9PiB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuICBjb25zdCBbYSwgYl0gPSBwcm9wLnNwbGl0KCcnKTtcbiAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICBjb25zdCBkaXJlY3Rpb24gPSBkaXJlY3Rpb25zW2JdIHx8ICcnO1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkaXJlY3Rpb24pID8gZGlyZWN0aW9uLm1hcChkaXIgPT4gcHJvcGVydHkgKyBkaXIpIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xuZXhwb3J0IGNvbnN0IG1hcmdpbktleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAnbWFyZ2luSW5saW5lJywgJ21hcmdpbklubGluZVN0YXJ0JywgJ21hcmdpbklubGluZUVuZCcsICdtYXJnaW5CbG9jaycsICdtYXJnaW5CbG9ja1N0YXJ0JywgJ21hcmdpbkJsb2NrRW5kJ107XG5leHBvcnQgY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgdmFyIF9nZXRQYXRoO1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSAoX2dldFBhdGggPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSwgZmFsc2UpKSAhPSBudWxsID8gX2dldFBhdGggOiBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG4gIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHJldHVybiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsICdzcGFjaW5nJywgOCwgJ3NwYWNpbmcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyB8fCBwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHNwYWNpbmdLZXlzKTtcbn1cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuZnVuY3Rpb24gY29tcG9zZSguLi5zdHlsZXMpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiB7XG4gICAgc3R5bGUuZmlsdGVyUHJvcHMuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGFjY1twcm9wXSA9IHN0eWxlO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICAvLyBmYWxzZSBwb3NpdGl2ZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbiAgY29uc3QgZm4gPSBwcm9wcyA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKGFjYywgcHJvcCkgPT4ge1xuICAgICAgaWYgKGhhbmRsZXJzW3Byb3BdKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShhY2MsIGhhbmRsZXJzW3Byb3BdKHByb3BzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbiAgZm4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IE9iamVjdC5hc3NpZ24oYWNjLCBzdHlsZS5wcm9wVHlwZXMpLCB7fSkgOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBhY2MuY29uY2F0KHN0eWxlLmZpbHRlclByb3BzKSwgW10pO1xuICByZXR1cm4gZm47XG59XG5leHBvcnQgZGVmYXVsdCBjb21wb3NlOyIsImltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBib3JkZXJUcmFuc2Zvcm0odmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGAke3ZhbHVlfXB4IHNvbGlkYDtcbn1cbmV4cG9ydCBjb25zdCBib3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXInLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3BDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b21Db2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbUNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBib3JkZXJSYWRpdXMgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5ib3JkZXJSYWRpdXMgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5ib3JkZXJSYWRpdXMgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NoYXBlLmJvcmRlclJhZGl1cycsIDQsICdib3JkZXJSYWRpdXMnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGJvcmRlclJhZGl1czogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmJvcmRlclJhZGl1cywgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5ib3JkZXJSYWRpdXMucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgYm9yZGVyUmFkaXVzOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmJvcmRlclJhZGl1cy5maWx0ZXJQcm9wcyA9IFsnYm9yZGVyUmFkaXVzJ107XG5jb25zdCBib3JkZXJzID0gY29tcG9zZShib3JkZXIsIGJvcmRlclRvcCwgYm9yZGVyUmlnaHQsIGJvcmRlckJvdHRvbSwgYm9yZGVyTGVmdCwgYm9yZGVyQ29sb3IsIGJvcmRlclRvcENvbG9yLCBib3JkZXJSaWdodENvbG9yLCBib3JkZXJCb3R0b21Db2xvciwgYm9yZGVyTGVmdENvbG9yLCBib3JkZXJSYWRpdXMpO1xuZXhwb3J0IGRlZmF1bHQgYm9yZGVyczsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBnYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5nYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5nYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnZ2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBnYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5nYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuZ2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5nYXAuZmlsdGVyUHJvcHMgPSBbJ2dhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgY29sdW1uR2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IHJvd0dhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLnJvd0dhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLnJvd0dhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdyb3dHYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIHJvd0dhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLnJvd0dhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5yb3dHYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgcm93R2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbnJvd0dhcC5maWx0ZXJQcm9wcyA9IFsncm93R2FwJ107XG5leHBvcnQgY29uc3QgZ3JpZENvbHVtbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRDb2x1bW4nXG59KTtcbmV4cG9ydCBjb25zdCBncmlkUm93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFJvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvRmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvRmxvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBdXRvUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBdXRvUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVDb2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlUm93cyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZVJvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVBcmVhcyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUFyZWFzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEFyZWEgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXJlYSdcbn0pO1xuY29uc3QgZ3JpZCA9IGNvbXBvc2UoZ2FwLCBjb2x1bW5HYXAsIHJvd0dhcCwgZ3JpZENvbHVtbiwgZ3JpZFJvdywgZ3JpZEF1dG9GbG93LCBncmlkQXV0b0NvbHVtbnMsIGdyaWRBdXRvUm93cywgZ3JpZFRlbXBsYXRlQ29sdW1ucywgZ3JpZFRlbXBsYXRlUm93cywgZ3JpZFRlbXBsYXRlQXJlYXMsIGdyaWRBcmVhKTtcbmV4cG9ydCBkZWZhdWx0IGdyaWQ7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBmdW5jdGlvbiBwYWxldHRlVHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUpIHtcbiAgaWYgKHVzZXJWYWx1ZSA9PT0gJ2dyZXknKSB7XG4gICAgcmV0dXJuIHVzZXJWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5leHBvcnQgY29uc3QgY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdjb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmdjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JnY29sb3InLFxuICBjc3NQcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYmFja2dyb3VuZENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmNvbnN0IHBhbGV0dGUgPSBjb21wb3NlKGNvbG9yLCBiZ2NvbG9yLCBiYWNrZ3JvdW5kQ29sb3IpO1xuZXhwb3J0IGRlZmF1bHQgcGFsZXR0ZTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIHZhbHVlcyBhcyBicmVha3BvaW50c1ZhbHVlcyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHNpemluZ1RyYW5zZm9ybSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPD0gMSAmJiB2YWx1ZSAhPT0gMCA/IGAke3ZhbHVlICogMTAwfSVgIDogdmFsdWU7XG59XG5leHBvcnQgY29uc3Qgd2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhXaWR0aCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLm1heFdpZHRoICE9PSB1bmRlZmluZWQgJiYgcHJvcHMubWF4V2lkdGggIT09IG51bGwpIHtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4ge1xuICAgICAgdmFyIF9wcm9wcyR0aGVtZSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaTIgPSBfcHJvcHMkdGhlbWUkYnJlYWtwb2kudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lJGJyZWFrcG9pMltwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF4V2lkdGg6IGJyZWFrcG9pbnQgfHwgc2l6aW5nVHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbm1heFdpZHRoLmZpbHRlclByb3BzID0gWydtYXhXaWR0aCddO1xuZXhwb3J0IGNvbnN0IG1pbldpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWluV2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgaGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heEhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21heEhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtaW5IZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZVdpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnd2lkdGgnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3Qgc2l6ZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3hTaXppbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaXppbmcnXG59KTtcbmNvbnN0IHNpemluZyA9IGNvbXBvc2Uod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgeyBwYWRkaW5nLCBtYXJnaW4gfSBmcm9tICcuLi9zcGFjaW5nJztcbmltcG9ydCB7IGJvcmRlclJhZGl1cywgYm9yZGVyVHJhbnNmb3JtIH0gZnJvbSAnLi4vYm9yZGVycyc7XG5pbXBvcnQgeyBnYXAsIHJvd0dhcCwgY29sdW1uR2FwIH0gZnJvbSAnLi4vY3NzR3JpZCc7XG5pbXBvcnQgeyBwYWxldHRlVHJhbnNmb3JtIH0gZnJvbSAnLi4vcGFsZXR0ZSc7XG5pbXBvcnQgeyBtYXhXaWR0aCwgc2l6aW5nVHJhbnNmb3JtIH0gZnJvbSAnLi4vc2l6aW5nJztcbmNvbnN0IGRlZmF1bHRTeENvbmZpZyA9IHtcbiAgLy8gYm9yZGVyc1xuICBib3JkZXI6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlclRvcDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICAgIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG4gIH0sXG4gIGJvcmRlckJvdHRvbToge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclRvcENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSaWdodENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJCb3R0b21Db2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyTGVmdENvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJSYWRpdXM6IHtcbiAgICB0aGVtZUtleTogJ3NoYXBlLmJvcmRlclJhZGl1cycsXG4gICAgc3R5bGU6IGJvcmRlclJhZGl1c1xuICB9LFxuICAvLyBwYWxldHRlXG4gIGNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbiAgfSxcbiAgYmdjb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICAvLyBzcGFjaW5nXG4gIHA6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHByOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGI6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwbDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB4OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHk6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1RvcDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdSaWdodDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCb3R0b206IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nTGVmdDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdYOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1k6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZVN0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0lubGluZUVuZDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9jazoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdCbG9ja1N0YXJ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrRW5kOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgbToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1yOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYjoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWw6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG14OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBteToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Ub3A6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblJpZ2h0OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5Cb3R0b206IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkxlZnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblg6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblk6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbklubGluZUVuZDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2s6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrU3RhcnQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJsb2NrRW5kOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICAvLyBkaXNwbGF5XG4gIGRpc3BsYXlQcmludDoge1xuICAgIGNzc1Byb3BlcnR5OiBmYWxzZSxcbiAgICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgICBkaXNwbGF5OiB2YWx1ZVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGRpc3BsYXk6IHt9LFxuICBvdmVyZmxvdzoge30sXG4gIHRleHRPdmVyZmxvdzoge30sXG4gIHZpc2liaWxpdHk6IHt9LFxuICB3aGl0ZVNwYWNlOiB7fSxcbiAgLy8gZmxleGJveFxuICBmbGV4QmFzaXM6IHt9LFxuICBmbGV4RGlyZWN0aW9uOiB7fSxcbiAgZmxleFdyYXA6IHt9LFxuICBqdXN0aWZ5Q29udGVudDoge30sXG4gIGFsaWduSXRlbXM6IHt9LFxuICBhbGlnbkNvbnRlbnQ6IHt9LFxuICBvcmRlcjoge30sXG4gIGZsZXg6IHt9LFxuICBmbGV4R3Jvdzoge30sXG4gIGZsZXhTaHJpbms6IHt9LFxuICBhbGlnblNlbGY6IHt9LFxuICBqdXN0aWZ5SXRlbXM6IHt9LFxuICBqdXN0aWZ5U2VsZjoge30sXG4gIC8vIGdyaWRcbiAgZ2FwOiB7XG4gICAgc3R5bGU6IGdhcFxuICB9LFxuICByb3dHYXA6IHtcbiAgICBzdHlsZTogcm93R2FwXG4gIH0sXG4gIGNvbHVtbkdhcDoge1xuICAgIHN0eWxlOiBjb2x1bW5HYXBcbiAgfSxcbiAgZ3JpZENvbHVtbjoge30sXG4gIGdyaWRSb3c6IHt9LFxuICBncmlkQXV0b0Zsb3c6IHt9LFxuICBncmlkQXV0b0NvbHVtbnM6IHt9LFxuICBncmlkQXV0b1Jvd3M6IHt9LFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiB7fSxcbiAgZ3JpZFRlbXBsYXRlUm93czoge30sXG4gIGdyaWRUZW1wbGF0ZUFyZWFzOiB7fSxcbiAgZ3JpZEFyZWE6IHt9LFxuICAvLyBwb3NpdGlvbnNcbiAgcG9zaXRpb246IHt9LFxuICB6SW5kZXg6IHtcbiAgICB0aGVtZUtleTogJ3pJbmRleCdcbiAgfSxcbiAgdG9wOiB7fSxcbiAgcmlnaHQ6IHt9LFxuICBib3R0b206IHt9LFxuICBsZWZ0OiB7fSxcbiAgLy8gc2hhZG93c1xuICBib3hTaGFkb3c6IHtcbiAgICB0aGVtZUtleTogJ3NoYWRvd3MnXG4gIH0sXG4gIC8vIHNpemluZ1xuICB3aWR0aDoge1xuICAgIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG4gIH0sXG4gIG1heFdpZHRoOiB7XG4gICAgc3R5bGU6IG1heFdpZHRoXG4gIH0sXG4gIG1pbldpZHRoOiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgaGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWF4SGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWluSGVpZ2h0OiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgYm94U2l6aW5nOiB7fSxcbiAgLy8gdHlwb2dyYXBoeVxuICBmb250RmFtaWx5OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250U2l6ZToge1xuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfSxcbiAgZm9udFN0eWxlOiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250V2VpZ2h0OiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBsZXR0ZXJTcGFjaW5nOiB7fSxcbiAgdGV4dFRyYW5zZm9ybToge30sXG4gIGxpbmVIZWlnaHQ6IHt9LFxuICB0ZXh0QWxpZ246IHt9LFxuICB0eXBvZ3JhcGh5OiB7XG4gICAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICAgIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRTeENvbmZpZzsiLCJpbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuLi9tZXJnZSc7XG5pbXBvcnQgeyBnZXRQYXRoLCBnZXRTdHlsZVZhbHVlIGFzIGdldFZhbHVlIH0gZnJvbSAnLi4vc3R5bGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMgfSBmcm9tICcuLi9icmVha3BvaW50cyc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vZGVmYXVsdFN4Q29uZmlnJztcbmZ1bmN0aW9uIG9iamVjdHNIYXZlU2FtZUtleXMoLi4ub2JqZWN0cykge1xuICBjb25zdCBhbGxLZXlzID0gb2JqZWN0cy5yZWR1Y2UoKGtleXMsIG9iamVjdCkgPT4ga2V5cy5jb25jYXQoT2JqZWN0LmtleXMob2JqZWN0KSksIFtdKTtcbiAgY29uc3QgdW5pb24gPSBuZXcgU2V0KGFsbEtleXMpO1xuICByZXR1cm4gb2JqZWN0cy5ldmVyeShvYmplY3QgPT4gdW5pb24uc2l6ZSA9PT0gT2JqZWN0LmtleXMob2JqZWN0KS5sZW5ndGgpO1xufVxuZnVuY3Rpb24gY2FsbElmRm4obWF5YmVGbiwgYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgbWF5YmVGbiA9PT0gJ2Z1bmN0aW9uJyA/IG1heWJlRm4oYXJnKSA6IG1heWJlRm47XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKSB7XG4gIGZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsLCB0aGVtZSwgY29uZmlnKSB7XG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBbcHJvcF06IHZhbCxcbiAgICAgIHRoZW1lXG4gICAgfTtcbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnW3Byb3BdO1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW3Byb3BdOiB2YWxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGNzc1Byb3BlcnR5ID0gcHJvcCxcbiAgICAgIHRoZW1lS2V5LFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgc3R5bGVcbiAgICB9ID0gb3B0aW9ucztcbiAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICByZXR1cm4gc3R5bGUocHJvcHMpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCA9PiB7XG4gICAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgYCR7cHJvcH0ke3Byb3BWYWx1ZUZpbmFsID09PSAnZGVmYXVsdCcgPyAnJyA6IGNhcGl0YWxpemUocHJvcFZhbHVlRmluYWwpfWAsIHByb3BWYWx1ZUZpbmFsKTtcbiAgICAgIH1cbiAgICAgIGlmIChjc3NQcm9wZXJ0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgW2Nzc1Byb3BlcnR5XTogdmFsdWVcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHZhbCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uU3gocHJvcHMpIHtcbiAgICB2YXIgX3RoZW1lJHVuc3RhYmxlX3N4Q29uO1xuICAgIGNvbnN0IHtcbiAgICAgIHN4LFxuICAgICAgdGhlbWUgPSB7fVxuICAgIH0gPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoIXN4KSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzIHdpbGwgbmVnbGVjdCBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0gKF90aGVtZSR1bnN0YWJsZV9zeENvbiA9IHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnKSAhPSBudWxsID8gX3RoZW1lJHVuc3RhYmxlX3N4Q29uIDogZGVmYXVsdFN4Q29uZmlnO1xuXG4gICAgLypcbiAgICAgKiBSZWNlaXZlIGBzeElucHV0YCBhcyBvYmplY3Qgb3IgY2FsbGJhY2tcbiAgICAgKiBhbmQgdGhlbiByZWN1cnNpdmVseSBjaGVjayBrZXlzICYgdmFsdWVzIHRvIGNyZWF0ZSBtZWRpYSBxdWVyeSBvYmplY3Qgc3R5bGVzLlxuICAgICAqICh0aGUgcmVzdWx0IHdpbGwgYmUgdXNlZCBpbiBgc3R5bGVkYClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZShzeElucHV0KSB7XG4gICAgICBsZXQgc3hPYmplY3QgPSBzeElucHV0O1xuICAgICAgaWYgKHR5cGVvZiBzeElucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHN4T2JqZWN0ID0gc3hJbnB1dCh0aGVtZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzeElucHV0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyB2YWx1ZVxuICAgICAgICByZXR1cm4gc3hJbnB1dDtcbiAgICAgIH1cbiAgICAgIGlmICghc3hPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KHRoZW1lLmJyZWFrcG9pbnRzKTtcbiAgICAgIGNvbnN0IGJyZWFrcG9pbnRzS2V5cyA9IE9iamVjdC5rZXlzKGVtcHR5QnJlYWtwb2ludHMpO1xuICAgICAgbGV0IGNzcyA9IGVtcHR5QnJlYWtwb2ludHM7XG4gICAgICBPYmplY3Qua2V5cyhzeE9iamVjdCkuZm9yRWFjaChzdHlsZUtleSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2FsbElmRm4oc3hPYmplY3Rbc3R5bGVLZXldLCB0aGVtZSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdbc3R5bGVLZXldKSB7XG4gICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lLCBjb25maWcpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzVmFsdWVzID0gaGFuZGxlQnJlYWtwb2ludHMoe1xuICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgIH0sIHZhbHVlLCB4ID0+ICh7XG4gICAgICAgICAgICAgICAgW3N0eWxlS2V5XTogeFxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIGlmIChvYmplY3RzSGF2ZVNhbWVLZXlzKGJyZWFrcG9pbnRzVmFsdWVzLCB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjc3Nbc3R5bGVLZXldID0gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgICAgICAgICAgICAgIHN4OiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHRoZW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBicmVha3BvaW50c1ZhbHVlcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUsIGNvbmZpZykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoYnJlYWtwb2ludHNLZXlzLCBjc3MpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShzeCkgPyBzeC5tYXAodHJhdmVyc2UpIDogdHJhdmVyc2Uoc3gpO1xuICB9XG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uU3g7XG59XG5jb25zdCBzdHlsZUZ1bmN0aW9uU3ggPSB1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3goKTtcbnN0eWxlRnVuY3Rpb25TeC5maWx0ZXJQcm9wcyA9IFsnc3gnXTtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlRnVuY3Rpb25TeDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi4vc3R5bGVGdW5jdGlvblN4L2RlZmF1bHRTeENvbmZpZyc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgICAgc2hhcGU6IHNoYXBlSW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeENvbmZpZyA9IF9leHRlbmRzKHt9LCBkZWZhdWx0U3hDb25maWcsIG90aGVyID09IG51bGwgPyB2b2lkIDAgOiBvdGhlci51bnN0YWJsZV9zeENvbmZpZyk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4ID0gZnVuY3Rpb24gc3gocHJvcHMpIHtcbiAgICByZXR1cm4gc3R5bGVGdW5jdGlvblN4KHtcbiAgICAgIHN4OiBwcm9wcyxcbiAgICAgIHRoZW1lOiB0aGlzXG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJy4uL3NwYWNpbmcnO1xuLyogdHNsaW50OmVuYWJsZTp1bmlmaWVkLXNpZ25hdHVyZXMgKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQgPSA4KSB7XG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfVxuXG4gIC8vIE1hdGVyaWFsIERlc2lnbiBsYXlvdXRzIGFyZSB2aXN1YWxseSBiYWxhbmNlZC4gTW9zdCBtZWFzdXJlbWVudHMgYWxpZ24gdG8gYW4gOGRwIGdyaWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWxcbiAgY29uc3QgdHJhbnNmb3JtID0gY3JlYXRlVW5hcnlTcGFjaW5nKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG4gIGNvbnN0IHNwYWNpbmcgPSAoLi4uYXJnc0lucHV0KSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKGFyZ3NJbnB1dC5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290ICR7YXJnc0lucHV0Lmxlbmd0aH1gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXJncyA9IGFyZ3NJbnB1dC5sZW5ndGggPT09IDAgPyBbMV0gOiBhcmdzSW5wdXQ7XG4gICAgcmV0dXJuIGFyZ3MubWFwKGFyZ3VtZW50ID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IHRyYW5zZm9ybShhcmd1bWVudCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG91dHB1dCA9PT0gJ251bWJlcicgPyBgJHtvdXRwdXR9cHhgIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCBUaGVtZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuZXhwb3J0IGRlZmF1bHQgVGhlbWVDb250ZXh0OyIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IGZyb20gJy4vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSkge1xuICByZXR1cm4gdXNlVGhlbWVXaXRob3V0RGVmYXVsdChkZWZhdWx0VGhlbWUpO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWUgYXMgbXVpVXNlVGhlbWUgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB1c2VUaGVtZShkZWZhdWx0VGhlbWUgPSBudWxsKSB7XG4gIGNvbnN0IGNvbnRleHRUaGVtZSA9IG11aVVzZVRoZW1lKCk7XG4gIHJldHVybiAhY29udGV4dFRoZW1lIHx8IGlzT2JqZWN0RW1wdHkoY29udGV4dFRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IGNvbnRleHRUaGVtZTtcbn1cbmV4cG9ydCBkZWZhdWx0IHVzZVRoZW1lOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4gPSAwLCBtYXggPSAxKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAke3ZhbHVlfSBpcyBvdXQgb2YgcmFuZ2UgWyR7bWlufSwgJHttYXh9XS5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc2xpY2UoMSk7XG4gIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgLnsxLCR7Y29sb3IubGVuZ3RoID49IDYgPyAyIDogMX19YCwgJ2cnKTtcbiAgbGV0IGNvbG9ycyA9IGNvbG9yLm1hdGNoKHJlKTtcbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChuID0+IG4gKyBuKTtcbiAgfVxuICByZXR1cm4gY29sb3JzID8gYHJnYiR7Y29sb3JzLmxlbmd0aCA9PT0gNCA/ICdhJyA6ICcnfSgke2NvbG9ycy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIGluZGV4IDwgMyA/IHBhcnNlSW50KG4sIDE2KSA6IE1hdGgucm91bmQocGFyc2VJbnQobiwgMTYpIC8gMjU1ICogMTAwMCkgLyAxMDAwO1xuICB9KS5qb2luKCcsICcpfSlgIDogJyc7XG59XG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgY29uc3QgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBgMCR7aGV4fWAgOiBoZXg7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEEgTVVJIGNvbG9yIG9iamVjdDoge3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cbiAgY29uc3QgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICBjb25zdCB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVW5zdXBwb3J0ZWQgXFxgJHtjb2xvcn1cXGAgY29sb3IuXG5UaGUgZm9sbG93aW5nIGZvcm1hdHMgYXJlIHN1cHBvcnRlZDogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg5LCBjb2xvcikpO1xuICB9XG4gIGxldCB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSk7XG4gIGxldCBjb2xvclNwYWNlO1xuICBpZiAodHlwZSA9PT0gJ2NvbG9yJykge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnICcpO1xuICAgIGNvbG9yU3BhY2UgPSB2YWx1ZXMuc2hpZnQoKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gNCAmJiB2YWx1ZXNbM10uY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgIHZhbHVlc1szXSA9IHZhbHVlc1szXS5zbGljZSgxKTtcbiAgICB9XG4gICAgaWYgKFsnc3JnYicsICdkaXNwbGF5LXAzJywgJ2E5OC1yZ2InLCAncHJvcGhvdG8tcmdiJywgJ3JlYy0yMDIwJ10uaW5kZXhPZihjb2xvclNwYWNlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiB1bnN1cHBvcnRlZCBcXGAke2NvbG9yU3BhY2V9XFxgIGNvbG9yIHNwYWNlLlxuVGhlIGZvbGxvd2luZyBjb2xvciBzcGFjZXMgYXJlIHN1cHBvcnRlZDogc3JnYiwgZGlzcGxheS1wMywgYTk4LXJnYiwgcHJvcGhvdG8tcmdiLCByZWMtMjAyMC5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMCwgY29sb3JTcGFjZSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuc3BsaXQoJywnKTtcbiAgfVxuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKHZhbHVlID0+IHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIHZhbHVlcyxcbiAgICBjb2xvclNwYWNlXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGNoYW5uZWwgY3JlYXRlZCBmcm9tIHRoZSBpbnB1dCBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIFRoZSBjaGFubmVsIGZvciB0aGUgY29sb3IsIHRoYXQgY2FuIGJlIHVzZWQgaW4gcmdiYSBvciBoc2xhIGNvbG9yc1xuICovXG5leHBvcnQgY29uc3QgY29sb3JDaGFubmVsID0gY29sb3IgPT4ge1xuICBjb25zdCBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLnNsaWNlKDAsIDMpLm1hcCgodmFsLCBpZHgpID0+IGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSAmJiBpZHggIT09IDAgPyBgJHt2YWx9JWAgOiB2YWwpLmpvaW4oJyAnKTtcbn07XG5leHBvcnQgY29uc3QgcHJpdmF0ZV9zYWZlQ29sb3JDaGFubmVsID0gKGNvbG9yLCB3YXJuaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNvbG9yQ2hhbm5lbChjb2xvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKiBAcGFyYW0ge29iamVjdH0gY29sb3IgLSBEZWNvbXBvc2VkIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IudHlwZSAtIE9uZSBvZjogJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJywgJ2NvbG9yJ1xuICogQHBhcmFtIHthcnJheX0gY29sb3IudmFsdWVzIC0gW24sbixuXSBvciBbbixuLG4sbl1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgY29uc3Qge1xuICAgIHR5cGUsXG4gICAgY29sb3JTcGFjZVxuICB9ID0gY29sb3I7XG4gIGxldCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoKG4sIGkpID0+IGkgPCAzID8gcGFyc2VJbnQobiwgMTApIDogbik7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBgJHt2YWx1ZXNbMV19JWA7XG4gICAgdmFsdWVzWzJdID0gYCR7dmFsdWVzWzJdfSVgO1xuICB9XG4gIGlmICh0eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgdmFsdWVzID0gYCR7Y29sb3JTcGFjZX0gJHt2YWx1ZXMuam9pbignICcpfWA7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWVzID0gYCR7dmFsdWVzLmpvaW4oJywgJyl9YDtcbiAgfVxuICByZXR1cm4gYCR7dHlwZX0oJHt2YWx1ZXN9KWA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gUkdCIGNvbG9yLCBpLmUuIHJnYihuLCBuLCBuKVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZywgaS5lLiAjbm5ubm5uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbiAgY29uc3Qge1xuICAgIHZhbHVlc1xuICB9ID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICByZXR1cm4gYCMke3ZhbHVlcy5tYXAoKG4sIGkpID0+IGludFRvSGV4KGkgPT09IDMgPyBNYXRoLnJvdW5kKDI1NSAqIG4pIDogbikpLmpvaW4oJycpfWA7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBjb2xvcjtcbiAgY29uc3QgaCA9IHZhbHVlc1swXTtcbiAgY29uc3QgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgY29uc3QgbCA9IHZhbHVlc1syXSAvIDEwMDtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgbGV0IHR5cGUgPSAncmdiJztcbiAgY29uc3QgcmdiID0gW01hdGgucm91bmQoZigwKSAqIDI1NSksIE1hdGgucm91bmQoZig4KSAqIDI1NSksIE1hdGgucm91bmQoZig0KSAqIDI1NSldO1xuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBsZXQgcmdiID0gY29sb3IudHlwZSA9PT0gJ2hzbCcgfHwgY29sb3IudHlwZSA9PT0gJ2hzbGEnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAodmFsID0+IHtcbiAgICBpZiAoY29sb3IudHlwZSAhPT0gJ2NvbG9yJykge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgIH1cblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogKCh2YWwgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40O1xuICB9KTtcblxuICAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICBjb25zdCBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICBjb25zdCBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFscGhhKGNvbG9yLCB2YWx1ZSkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFsdWUgPSBjbGFtcCh2YWx1ZSk7XG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG4gIGlmIChjb2xvci50eXBlID09PSAnY29sb3InKSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gYC8ke3ZhbHVlfWA7XG4gIH0gZWxzZSB7XG4gICAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVBbHBoYShjb2xvciwgdmFsdWUsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYWxwaGEoY29sb3IsIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEgfHwgY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZURhcmtlbihjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVMaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCA9IDAuMTUpIHtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcml2YXRlX3NhZmVFbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByaXZhdGVfc2FmZUVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59IiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiY29uc3QgcHVycGxlID0ge1xuICA1MDogJyNmM2U1ZjUnLFxuICAxMDA6ICcjZTFiZWU3JyxcbiAgMjAwOiAnI2NlOTNkOCcsXG4gIDMwMDogJyNiYTY4YzgnLFxuICA0MDA6ICcjYWI0N2JjJyxcbiAgNTAwOiAnIzljMjdiMCcsXG4gIDYwMDogJyM4ZTI0YWEnLFxuICA3MDA6ICcjN2IxZmEyJyxcbiAgODAwOiAnIzZhMWI5YScsXG4gIDkwMDogJyM0YTE0OGMnLFxuICBBMTAwOiAnI2VhODBmYycsXG4gIEEyMDA6ICcjZTA0MGZiJyxcbiAgQTQwMDogJyNkNTAwZjknLFxuICBBNzAwOiAnI2FhMDBmZidcbn07XG5leHBvcnQgZGVmYXVsdCBwdXJwbGU7IiwiY29uc3QgcmVkID0ge1xuICA1MDogJyNmZmViZWUnLFxuICAxMDA6ICcjZmZjZGQyJyxcbiAgMjAwOiAnI2VmOWE5YScsXG4gIDMwMDogJyNlNTczNzMnLFxuICA0MDA6ICcjZWY1MzUwJyxcbiAgNTAwOiAnI2Y0NDMzNicsXG4gIDYwMDogJyNlNTM5MzUnLFxuICA3MDA6ICcjZDMyZjJmJyxcbiAgODAwOiAnI2M2MjgyOCcsXG4gIDkwMDogJyNiNzFjMWMnLFxuICBBMTAwOiAnI2ZmOGE4MCcsXG4gIEEyMDA6ICcjZmY1MjUyJyxcbiAgQTQwMDogJyNmZjE3NDQnLFxuICBBNzAwOiAnI2Q1MDAwMCdcbn07XG5leHBvcnQgZGVmYXVsdCByZWQ7IiwiY29uc3Qgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG5leHBvcnQgZGVmYXVsdCBvcmFuZ2U7IiwiY29uc3QgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJjb25zdCBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGxpZ2h0Qmx1ZTsiLCJjb25zdCBncmVlbiA9IHtcbiAgNTA6ICcjZThmNWU5JyxcbiAgMTAwOiAnI2M4ZTZjOScsXG4gIDIwMDogJyNhNWQ2YTcnLFxuICAzMDA6ICcjODFjNzg0JyxcbiAgNDAwOiAnIzY2YmI2YScsXG4gIDUwMDogJyM0Y2FmNTAnLFxuICA2MDA6ICcjNDNhMDQ3JyxcbiAgNzAwOiAnIzM4OGUzYycsXG4gIDgwMDogJyMyZTdkMzInLFxuICA5MDA6ICcjMWI1ZTIwJyxcbiAgQTEwMDogJyNiOWY2Y2EnLFxuICBBMjAwOiAnIzY5ZjBhZScsXG4gIEE0MDA6ICcjMDBlNjc2JyxcbiAgQTcwMDogJyMwMGM4NTMnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JlZW47IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBkYXJrZW4sIGdldENvbnRyYXN0UmF0aW8sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY29tbW9uIGZyb20gJy4uL2NvbG9ycy9jb21tb24nO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHB1cnBsZSBmcm9tICcuLi9jb2xvcnMvcHVycGxlJztcbmltcG9ydCByZWQgZnJvbSAnLi4vY29sb3JzL3JlZCc7XG5pbXBvcnQgb3JhbmdlIGZyb20gJy4uL2NvbG9ycy9vcmFuZ2UnO1xuaW1wb3J0IGJsdWUgZnJvbSAnLi4vY29sb3JzL2JsdWUnO1xuaW1wb3J0IGxpZ2h0Qmx1ZSBmcm9tICcuLi9jb2xvcnMvbGlnaHRCbHVlJztcbmltcG9ydCBncmVlbiBmcm9tICcuLi9jb2xvcnMvZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjYpJyxcbiAgICAvLyBEaXNhYmxlZCB0ZXh0IGhhdmUgZXZlbiBsb3dlciB2aXN1YWwgcHJvbWluZW5jZS5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4zOCknXG4gIH0sXG4gIC8vIFRoZSBjb2xvciB1c2VkIHRvIGRpdmlkZSBkaWZmZXJlbnQgZWxlbWVudHMuXG4gIGRpdmlkZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgLy8gVGhlIGJhY2tncm91bmQgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHN1cmZhY2VzLlxuICAvLyBDb25zaXN0ZW5jeSBiZXR3ZWVuIHRoZXNlIHZhbHVlcyBpcyBpbXBvcnRhbnQuXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogY29tbW9uLndoaXRlLFxuICAgIGRlZmF1bHQ6IGNvbW1vbi53aGl0ZVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgY29uc3QgZGFyayA9IHtcbiAgdGV4dDoge1xuICAgIHByaW1hcnk6IGNvbW1vbi53aGl0ZSxcbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknLFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyxcbiAgICBpY29uOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJ1xuICB9LFxuICBkaXZpZGVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gIGJhY2tncm91bmQ6IHtcbiAgICBwYXBlcjogJyMxMjEyMTInLFxuICAgIGRlZmF1bHQ6ICcjMTIxMjEyJ1xuICB9LFxuICBhY3Rpb246IHtcbiAgICBhY3RpdmU6IGNvbW1vbi53aGl0ZSxcbiAgICBob3ZlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wOCxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNiknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4xNixcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMjRcbiAgfVxufTtcbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgY29uc3QgdG9uYWxPZmZzZXRMaWdodCA9IHRvbmFsT2Zmc2V0LmxpZ2h0IHx8IHRvbmFsT2Zmc2V0O1xuICBjb25zdCB0b25hbE9mZnNldERhcmsgPSB0b25hbE9mZnNldC5kYXJrIHx8IHRvbmFsT2Zmc2V0ICogMS41O1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSBkYXJrZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0RGFyayk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0UHJpbWFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGJsdWVbMjAwXSxcbiAgICAgIGxpZ2h0OiBibHVlWzUwXSxcbiAgICAgIGRhcms6IGJsdWVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBibHVlWzcwMF0sXG4gICAgbGlnaHQ6IGJsdWVbNDAwXSxcbiAgICBkYXJrOiBibHVlWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBwdXJwbGVbMjAwXSxcbiAgICAgIGxpZ2h0OiBwdXJwbGVbNTBdLFxuICAgICAgZGFyazogcHVycGxlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcHVycGxlWzUwMF0sXG4gICAgbGlnaHQ6IHB1cnBsZVszMDBdLFxuICAgIGRhcms6IHB1cnBsZVs3MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0RXJyb3IobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiByZWRbNTAwXSxcbiAgICAgIGxpZ2h0OiByZWRbMzAwXSxcbiAgICAgIGRhcms6IHJlZFs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHJlZFs3MDBdLFxuICAgIGxpZ2h0OiByZWRbNDAwXSxcbiAgICBkYXJrOiByZWRbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEluZm8obW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBsaWdodEJsdWVbNDAwXSxcbiAgICAgIGxpZ2h0OiBsaWdodEJsdWVbMzAwXSxcbiAgICAgIGRhcms6IGxpZ2h0Qmx1ZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGxpZ2h0Qmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBsaWdodEJsdWVbNTAwXSxcbiAgICBkYXJrOiBsaWdodEJsdWVbOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBncmVlbls0MDBdLFxuICAgICAgbGlnaHQ6IGdyZWVuWzMwMF0sXG4gICAgICBkYXJrOiBncmVlbls3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGdyZWVuWzgwMF0sXG4gICAgbGlnaHQ6IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBvcmFuZ2VbNDAwXSxcbiAgICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICAgIGRhcms6IG9yYW5nZVs3MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46ICcjZWQ2YzAyJyxcbiAgICAvLyBjbG9zZXN0IHRvIG9yYW5nZVs4MDBdIHRoYXQgcGFzcyAzOjEuXG4gICAgbGlnaHQ6IG9yYW5nZVs1MDBdLFxuICAgIGRhcms6IG9yYW5nZVs5MDBdXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgY29uc3Qge1xuICAgICAgbW9kZSA9ICdsaWdodCcsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IDMsXG4gICAgICB0b25hbE9mZnNldCA9IDAuMlxuICAgIH0gPSBwYWxldHRlLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocGFsZXR0ZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTtcblxuICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBpZiAoY29udHJhc3QgPCAzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBjb250cmFzdCByYXRpbyBvZiAke2NvbnRyYXN0fToxIGZvciAke2NvbnRyYXN0VGV4dH0gb24gJHtiYWNrZ3JvdW5kfWAsICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG4gIGNvbnN0IGF1Z21lbnRDb2xvciA9ICh7XG4gICAgY29sb3IsXG4gICAgbmFtZSxcbiAgICBtYWluU2hhZGUgPSA1MDAsXG4gICAgbGlnaHRTaGFkZSA9IDMwMCxcbiAgICBkYXJrU2hhZGUgPSA3MDBcbiAgfSkgPT4ge1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcbiAgICBpZiAoIWNvbG9yLm1haW4gJiYgY29sb3JbbWFpblNoYWRlXSkge1xuICAgICAgY29sb3IubWFpbiA9IGNvbG9yW21haW5TaGFkZV07XG4gICAgfVxuICAgIGlmICghY29sb3IuaGFzT3duUHJvcGVydHkoJ21haW4nKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5UaGUgY29sb3Igb2JqZWN0IG5lZWRzIHRvIGhhdmUgYSBcXGBtYWluXFxgIHByb3BlcnR5IG9yIGEgXFxgJHttYWluU2hhZGV9XFxgIHByb3BlcnR5LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEyLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnbGlnaHQnLCBsaWdodFNoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdkYXJrJywgZGFya1NoYWRlLCB0b25hbE9mZnNldCk7XG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuICBjb25zdCBtb2RlcyA9IHtcbiAgICBkYXJrLFxuICAgIGxpZ2h0XG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCFtb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBUaGUgcGFsZXR0ZSBtb2RlIFxcYCR7bW9kZX1cXGAgaXMgbm90IHN1cHBvcnRlZC5gKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfZXh0ZW5kcyh7fSwgY29tbW9uKSxcbiAgICAvLyBwcmV2ZW50IG11dGFibGUgb2JqZWN0LlxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleSxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZm9udEZhbWlseVwiLCBcImZvbnRTaXplXCIsIFwiZm9udFdlaWdodExpZ2h0XCIsIFwiZm9udFdlaWdodFJlZ3VsYXJcIiwgXCJmb250V2VpZ2h0TWVkaXVtXCIsIFwiZm9udFdlaWdodEJvbGRcIiwgXCJodG1sRm9udFNpemVcIiwgXCJhbGxWYXJpYW50c1wiLCBcInB4VG9SZW1cIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIHJvdW5kKHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMWU1KSAvIDFlNTtcbn1cbmNvbnN0IGNhc2VBbGxDYXBzID0ge1xuICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJ1xufTtcbmNvbnN0IGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG5cbi8qKlxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3RoZS10eXBlLXN5c3RlbS5odG1sfVxuICogQHNlZSBAbGlua3todHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi90eXBvZ3JhcGh5L3VuZGVyc3RhbmRpbmctdHlwb2dyYXBoeS5odG1sfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgY29uc3QgX3JlZiA9IHR5cGVvZiB0eXBvZ3JhcGh5ID09PSAnZnVuY3Rpb24nID8gdHlwb2dyYXBoeShwYWxldHRlKSA6IHR5cG9ncmFwaHksXG4gICAge1xuICAgICAgZm9udEZhbWlseSA9IGRlZmF1bHRGb250RmFtaWx5LFxuICAgICAgLy8gVGhlIGRlZmF1bHQgZm9udCBzaXplIG9mIHRoZSBNYXRlcmlhbCBTcGVjaWZpY2F0aW9uLlxuICAgICAgZm9udFNpemUgPSAxNCxcbiAgICAgIC8vIHB4XG4gICAgICBmb250V2VpZ2h0TGlnaHQgPSAzMDAsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IDQwMCxcbiAgICAgIGZvbnRXZWlnaHRNZWRpdW0gPSA1MDAsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IDcwMCxcbiAgICAgIC8vIFRlbGwgTVVJIHdoYXQncyB0aGUgZm9udC1zaXplIG9uIHRoZSBodG1sIGVsZW1lbnQuXG4gICAgICAvLyAxNnB4IGlzIHRoZSBkZWZhdWx0IGZvbnQtc2l6ZSB1c2VkIGJ5IGJyb3dzZXJzLlxuICAgICAgaHRtbEZvbnRTaXplID0gMTYsXG4gICAgICAvLyBBcHBseSB0aGUgQ1NTIHByb3BlcnRpZXMgdG8gYWxsIHRoZSB2YXJpYW50cy5cbiAgICAgIGFsbFZhcmlhbnRzLFxuICAgICAgcHhUb1JlbTogcHhUb1JlbTJcbiAgICB9ID0gX3JlZixcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBmb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBodG1sRm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBodG1sRm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgfVxuICBjb25zdCBjb2VmID0gZm9udFNpemUgLyAxNDtcbiAgY29uc3QgcHhUb1JlbSA9IHB4VG9SZW0yIHx8IChzaXplID0+IGAke3NpemUgLyBodG1sRm9udFNpemUgKiBjb2VmfXJlbWApO1xuICBjb25zdCBidWlsZFZhcmlhbnQgPSAoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSA9PiBfZXh0ZW5kcyh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtLFxuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0LFxuICAgIGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcbiAgfSk7XG59IiwiY29uc3Qgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xuY29uc3Qgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbmNvbnN0IHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyguLi5weCkge1xuICByZXR1cm4gW2Ake3B4WzBdfXB4ICR7cHhbMV19cHggJHtweFsyXX1weCAke3B4WzNdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlVbWJyYU9wYWNpdHl9KWAsIGAke3B4WzRdfXB4ICR7cHhbNV19cHggJHtweFs2XX1weCAke3B4WzddfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHl9KWAsIGAke3B4WzhdfXB4ICR7cHhbOV19cHggJHtweFsxMF19cHggJHtweFsxMV19cHggcmdiYSgwLDAsMCwke3NoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5fSlgXS5qb2luKCcsJyk7XG59XG5cbi8vIFZhbHVlcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYmU4NzQ3Zjk0NTc0NjY5Y2I1ZTdhZGQxYTdjNTRmYTQxYTg5Y2VjNy9wYWNrYWdlcy9tZGMtZWxldmF0aW9uL192YXJpYWJsZXMuc2Nzc1xuY29uc3Qgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXTtcbi8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmdvb2dsZS5jb20vbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1uYXR1cmFsLWVhc2luZy1jdXJ2ZXNcbi8vIHRvIGxlYXJuIHRoZSBjb250ZXh0IGluIHdoaWNoIGVhY2ggZWFzaW5nIHNob3VsZCBiZSB1c2VkLlxuZXhwb3J0IGNvbnN0IGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07XG5cbi8vIEZvbGxvdyBodHRwczovL20yLm1hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuZXhwb3J0IGNvbnN0IGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyl9bXNgO1xufVxuZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICBpZiAoIWhlaWdodCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7XG5cbiAgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG4gIHJldHVybiBNYXRoLnJvdW5kKCg0ICsgMTUgKiBjb25zdGFudCAqKiAwLjI1ICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25zKGlucHV0VHJhbnNpdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkRWFzaW5nID0gX2V4dGVuZHMoe30sIGVhc2luZywgaW5wdXRUcmFuc2l0aW9ucy5lYXNpbmcpO1xuICBjb25zdCBtZXJnZWREdXJhdGlvbiA9IF9leHRlbmRzKHt9LCBkdXJhdGlvbiwgaW5wdXRUcmFuc2l0aW9ucy5kdXJhdGlvbik7XG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uT3B0aW9uID0gbWVyZ2VkRHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICAgIGVhc2luZzogZWFzaW5nT3B0aW9uID0gbWVyZ2VkRWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZGVsYXkgPSAwXG4gICAgICB9ID0gb3B0aW9ucyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc3QgaXNTdHJpbmcgPSB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgLy8gSUUxMSBzdXBwb3J0LCByZXBsYWNlIHdpdGggTnVtYmVyLmlzTmFOXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICBjb25zdCBpc051bWJlciA9IHZhbHVlID0+ICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBBcmd1bWVudCBcImR1cmF0aW9uXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgJHtkdXJhdGlvbk9wdGlvbn0uYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbJHtPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpfV0uYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChhbmltYXRlZFByb3AgPT4gYCR7YW5pbWF0ZWRQcm9wfSAke3R5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKX0gJHtlYXNpbmdPcHRpb259ICR7dHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpfWApLmpvaW4oJywnKTtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBnZXRBdXRvSGVpZ2h0RHVyYXRpb24sXG4gICAgY3JlYXRlXG4gIH0sIGlucHV0VHJhbnNpdGlvbnMsIHtcbiAgICBlYXNpbmc6IG1lcmdlZEVhc2luZyxcbiAgICBkdXJhdGlvbjogbWVyZ2VkRHVyYXRpb25cbiAgfSk7XG59IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG5jb25zdCB6SW5kZXggPSB7XG4gIG1vYmlsZVN0ZXBwZXI6IDEwMDAsXG4gIGZhYjogMTA1MCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInNwYWNpbmdcIiwgXCJwYWxldHRlXCIsIFwidHJhbnNpdGlvbnNcIiwgXCJ0eXBvZ3JhcGh5XCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIGFzIHN5c3RlbUNyZWF0ZVRoZW1lLCB1bnN0YWJsZV9kZWZhdWx0U3hDb25maWcgYXMgZGVmYXVsdFN4Q29uZmlnLCB1bnN0YWJsZV9zdHlsZUZ1bmN0aW9uU3ggYXMgc3R5bGVGdW5jdGlvblN4IH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25zIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIGlmIChvcHRpb25zLnZhcnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgdmFyc1xcYCBpcyBhIHByaXZhdGUgZmllbGQgdXNlZCBmb3IgQ1NTIHZhcmlhYmxlcyBzdXBwb3J0LlxuUGxlYXNlIHVzZSBhbm90aGVyIG5hbWUuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTgpKTtcbiAgfVxuICBjb25zdCBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9IHN5c3RlbUNyZWF0ZVRoZW1lKG9wdGlvbnMpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoc3lzdGVtVGhlbWUsIHtcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IHNoYWRvd3Muc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgdHJhbnNpdGlvbnM6IGNyZWF0ZVRyYW5zaXRpb25zKHRyYW5zaXRpb25zSW5wdXQpLFxuICAgIHpJbmRleDogX2V4dGVuZHMoe30sIHpJbmRleClcbiAgfSk7XG4gIG11aVRoZW1lID0gZGVlcG1lcmdlKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG4gICAgY29uc3QgdHJhdmVyc2UgPSAobm9kZSwgY29tcG9uZW50KSA9PiB7XG4gICAgICBsZXQga2V5O1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnJywga2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGAke2NvbXBvbmVudH1cXGAgY29tcG9uZW50IGluY3JlYXNlcyBgICsgYHRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIFxcYCR7a2V5fVxcYCBpbnRlcm5hbCBzdGF0ZS5gLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsIGBJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICcmLiR7c3RhdGVDbGFzc30nIHN5bnRheDpgLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICAgICAgICBbYCYuJHtzdGF0ZUNsYXNzfWBdOiBjaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL211aS5jb20vci9zdGF0ZS1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmtleXMobXVpVGhlbWUuY29tcG9uZW50cykuZm9yRWFjaChjb21wb25lbnQgPT4ge1xuICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBtdWlUaGVtZS5jb21wb25lbnRzW2NvbXBvbmVudF0uc3R5bGVPdmVycmlkZXM7XG4gICAgICBpZiAoc3R5bGVPdmVycmlkZXMgJiYgY29tcG9uZW50LmluZGV4T2YoJ011aScpID09PSAwKSB7XG4gICAgICAgIHRyYXZlcnNlKHN0eWxlT3ZlcnJpZGVzLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgb3RoZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG90aGVyLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxubGV0IHdhcm5lZE9uY2UgPSBmYWxzZTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSguLi5hcmdzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF3YXJuZWRPbmNlKSB7XG4gICAgICB3YXJuZWRPbmNlID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IHRoZSBjcmVhdGVNdWlUaGVtZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCB0byBjcmVhdGVUaGVtZS4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAbXVpL21hdGVyaWFsL3N0eWxlcydgXCJdLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lKC4uLmFyZ3MpO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIG1peGlucykge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHRvb2xiYXI6IHtcbiAgICAgIG1pbkhlaWdodDogNTYsXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3hzJyldOiB7XG4gICAgICAgICdAbWVkaWEgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJzoge1xuICAgICAgICAgIG1pbkhlaWdodDogNDhcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFticmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgICAgbWluSGVpZ2h0OiA2NFxuICAgICAgfVxuICAgIH1cbiAgfSwgbWl4aW5zKTtcbn0iLCJpbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsImltcG9ydCB7IHVzZVRoZW1lUHJvcHMgYXMgc3lzdGVtVXNlVGhlbWVQcm9wcyB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lXG59KSB7XG4gIHJldHVybiBzeXN0ZW1Vc2VUaGVtZVByb3BzKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn0iLCJpbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuL2dldFRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lUHJvcHMoe1xuICBwcm9wcyxcbiAgbmFtZSxcbiAgZGVmYXVsdFRoZW1lXG59KSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoZGVmYXVsdFRoZW1lKTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBnZXRUaGVtZVByb3BzKHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0pO1xuICByZXR1cm4gbWVyZ2VkUHJvcHM7XG59IiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvcFZhbGlkO1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgZm9yd2FyZFJlZiwgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlQ2FjaGUgZnJvbSAnQGVtb3Rpb24vY2FjaGUnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdlYWtNZW1vaXplIGZyb20gJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnLi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbnZhciBFbW90aW9uQ2FjaGVDb250ZXh0ID0gLyogI19fUFVSRV9fICovY3JlYXRlQ29udGV4dCggLy8gd2UncmUgZG9pbmcgdGhpcyB0byBhdm9pZCBwcmVjb25zdHJ1Y3QncyBkZWFkIGNvZGUgZWxpbWluYXRpb24gaW4gdGhpcyBvbmUgY2FzZVxuLy8gYmVjYXVzZSB0aGlzIG1vZHVsZSBpcyBwcmltYXJpbHkgaW50ZW5kZWQgZm9yIHRoZSBicm93c2VyIGFuZCBub2RlXG4vLyBidXQgaXQncyBhbHNvIHJlcXVpcmVkIGluIHJlYWN0IG5hdGl2ZSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMgc29tZXRpbWVzXG4vLyBhbmQgd2UgY291bGQgaGF2ZSBhIHNwZWNpYWwgYnVpbGQganVzdCBmb3IgdGhhdFxuLy8gYnV0IHRoaXMgaXMgbXVjaCBlYXNpZXIgYW5kIHRoZSBuYXRpdmUgcGFja2FnZXNcbi8vIG1pZ2h0IHVzZSBhIGRpZmZlcmVudCB0aGVtZSBjb250ZXh0IGluIHRoZSBmdXR1cmUgYW55d2F5XG50eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gLyogI19fUFVSRV9fICovY3JlYXRlQ2FjaGUoe1xuICBrZXk6ICdjc3MnXG59KSA6IG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uQ2FjaGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DYWNoZUNvbnRleHQnO1xufVxuXG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG52YXIgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gdXNlRW1vdGlvbkNhY2hlKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbn07XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgLy8gdGhlIGNhY2hlIHdpbGwgbmV2ZXIgYmUgbnVsbCBpbiB0aGUgYnJvd3NlclxuICAgIHZhciBjYWNoZSA9IHVzZUNvbnRleHQoRW1vdGlvbkNhY2hlQ29udGV4dCk7XG4gICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICB9KTtcbn07XG5cbnZhciBUaGVtZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KHt9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25UaGVtZUNvbnRleHQnO1xufVxuXG52YXIgdXNlVGhlbWUgPSBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbn07XG5cbnZhciBnZXRUaGVtZSA9IGZ1bmN0aW9uIGdldFRoZW1lKG91dGVyVGhlbWUsIHRoZW1lKSB7XG4gIGlmICh0eXBlb2YgdGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZShvdXRlclRoZW1lKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIChtZXJnZWRUaGVtZSA9PSBudWxsIHx8IHR5cGVvZiBtZXJnZWRUaGVtZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShtZXJnZWRUaGVtZSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4gdGhlbWU9eygpID0+ICh7fSl9IScpO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICh0aGVtZSA9PSBudWxsIHx8IHR5cGVvZiB0aGVtZSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh0aGVtZSkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdbVGhlbWVQcm92aWRlcl0gUGxlYXNlIG1ha2UgeW91ciB0aGVtZSBwcm9wIGEgcGxhaW4gb2JqZWN0Jyk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIG91dGVyVGhlbWUsIHRoZW1lKTtcbn07XG5cbnZhciBjcmVhdGVDYWNoZVdpdGhUaGVtZSA9IC8qICNfX1BVUkVfXyAqL3dlYWtNZW1vaXplKGZ1bmN0aW9uIChvdXRlclRoZW1lKSB7XG4gIHJldHVybiB3ZWFrTWVtb2l6ZShmdW5jdGlvbiAodGhlbWUpIHtcbiAgICByZXR1cm4gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9KTtcbn0pO1xudmFyIFRoZW1lUHJvdmlkZXIgPSBmdW5jdGlvbiBUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvcHMudGhlbWUgIT09IHRoZW1lKSB7XG4gICAgdGhlbWUgPSBjcmVhdGVDYWNoZVdpdGhUaGVtZSh0aGVtZSkocHJvcHMudGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZVxuICB9LCBwcm9wcy5jaGlsZHJlbik7XG59O1xuZnVuY3Rpb24gd2l0aFRoZW1lKENvbXBvbmVudCkge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcblxuICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKHByb3BzLCByZWYpIHtcbiAgICB2YXIgdGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcykpO1xuICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICB2YXIgV2l0aFRoZW1lID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYocmVuZGVyKTtcbiAgV2l0aFRoZW1lLmRpc3BsYXlOYW1lID0gXCJXaXRoVGhlbWUoXCIgKyBjb21wb25lbnROYW1lICsgXCIpXCI7XG4gIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoVGhlbWUsIENvbXBvbmVudCk7XG59XG5cbnZhciBnZXRMYXN0UGFydCA9IGZ1bmN0aW9uIGdldExhc3RQYXJ0KGZ1bmN0aW9uTmFtZSkge1xuICAvLyBUaGUgbWF0Y2ggbWF5IGJlIHNvbWV0aGluZyBsaWtlICdPYmplY3QuY3JlYXRlRW1vdGlvblByb3BzJyBvclxuICAvLyAnTG9hZGVyLnByb3RvdHlwZS5yZW5kZXInXG4gIHZhciBwYXJ0cyA9IGZ1bmN0aW9uTmFtZS5zcGxpdCgnLicpO1xuICByZXR1cm4gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG59O1xuXG52YXIgZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lID0gZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmUpIHtcbiAgLy8gVjhcbiAgdmFyIG1hdGNoID0gL15cXHMrYXRcXHMrKFtBLVphLXowLTkkLl0rKVxccy8uZXhlYyhsaW5lKTtcbiAgaWYgKG1hdGNoKSByZXR1cm4gZ2V0TGFzdFBhcnQobWF0Y2hbMV0pOyAvLyBTYWZhcmkgLyBGaXJlZm94XG5cbiAgbWF0Y2ggPSAvXihbQS1aYS16MC05JC5dKylALy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG52YXIgaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMgPSAvKiAjX19QVVJFX18gKi9uZXcgU2V0KFsncmVuZGVyV2l0aEhvb2tzJywgJ3Byb2Nlc3NDaGlsZCcsICdmaW5pc2hDbGFzc0NvbXBvbmVudCcsICdyZW5kZXJUb1N0cmluZyddKTsgLy8gVGhlc2UgaWRlbnRpZmllcnMgY29tZSBmcm9tIGVycm9yIHN0YWNrcywgc28gdGhleSBoYXZlIHRvIGJlIHZhbGlkIEpTXG4vLyBpZGVudGlmaWVycywgdGh1cyB3ZSBvbmx5IG5lZWQgdG8gcmVwbGFjZSB3aGF0IGlzIGEgdmFsaWQgY2hhcmFjdGVyIGZvciBKUyxcbi8vIGJ1dCBub3QgZm9yIENTUy5cblxudmFyIHNhbml0aXplSWRlbnRpZmllciA9IGZ1bmN0aW9uIHNhbml0aXplSWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHJldHVybiBpZGVudGlmaWVyLnJlcGxhY2UoL1xcJC9nLCAnLScpO1xufTtcblxudmFyIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgPSBmdW5jdGlvbiBnZXRMYWJlbEZyb21TdGFja1RyYWNlKHN0YWNrVHJhY2UpIHtcbiAgaWYgKCFzdGFja1RyYWNlKSByZXR1cm4gdW5kZWZpbmVkO1xuICB2YXIgbGluZXMgPSBzdGFja1RyYWNlLnNwbGl0KCdcXG4nKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZ1bmN0aW9uTmFtZSA9IGdldEZ1bmN0aW9uTmFtZUZyb21TdGFja1RyYWNlTGluZShsaW5lc1tpXSk7IC8vIFRoZSBmaXJzdCBsaW5lIG9mIFY4IHN0YWNrIHRyYWNlcyBpcyBqdXN0IFwiRXJyb3JcIlxuXG4gICAgaWYgKCFmdW5jdGlvbk5hbWUpIGNvbnRpbnVlOyAvLyBJZiB3ZSByZWFjaCBvbmUgb2YgdGhlc2UsIHdlIGhhdmUgZ29uZSB0b28gZmFyIGFuZCBzaG91bGQgcXVpdFxuXG4gICAgaWYgKGludGVybmFsUmVhY3RGdW5jdGlvbk5hbWVzLmhhcyhmdW5jdGlvbk5hbWUpKSBicmVhazsgLy8gVGhlIGNvbXBvbmVudCBuYW1lIGlzIHRoZSBmaXJzdCBmdW5jdGlvbiBpbiB0aGUgc3RhY2sgdGhhdCBzdGFydHMgd2l0aCBhblxuICAgIC8vIHVwcGVyY2FzZSBsZXR0ZXJcblxuICAgIGlmICgvXltBLVpdLy50ZXN0KGZ1bmN0aW9uTmFtZSkpIHJldHVybiBzYW5pdGl6ZUlkZW50aWZpZXIoZnVuY3Rpb25OYW1lKTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG52YXIgdHlwZVByb3BOYW1lID0gJ19fRU1PVElPTl9UWVBFX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGxhYmVsUHJvcE5hbWUgPSAnX19FTU9USU9OX0xBQkVMX1BMRUFTRV9ET19OT1RfVVNFX18nO1xudmFyIGNyZWF0ZUVtb3Rpb25Qcm9wcyA9IGZ1bmN0aW9uIGNyZWF0ZUVtb3Rpb25Qcm9wcyh0eXBlLCBwcm9wcykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcHJvcHMuY3NzID09PSAnc3RyaW5nJyAmJiAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIGNzcyBkZWNsYXJhdGlvblxuICBwcm9wcy5jc3MuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGFzIGNzcyBwcm9wIHZhbHVlcywgcGxlYXNlIHdyYXAgaXQgaW4gYSBjc3MgdGVtcGxhdGUgbGl0ZXJhbCBmcm9tICdAZW1vdGlvbi9yZWFjdCcgbGlrZSB0aGlzOiBjc3NgXCIgKyBwcm9wcy5jc3MgKyBcImBcIik7XG4gIH1cblxuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHNbdHlwZVByb3BOYW1lXSA9IHR5cGU7IC8vIEZvciBwZXJmb3JtYW5jZSwgb25seSBjYWxsIGdldExhYmVsRnJvbVN0YWNrVHJhY2UgaW4gZGV2ZWxvcG1lbnQgYW5kIHdoZW5cbiAgLy8gdGhlIGxhYmVsIGhhc24ndCBhbHJlYWR5IGJlZW4gY29tcHV0ZWRcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhIXByb3BzLmNzcyAmJiAodHlwZW9mIHByb3BzLmNzcyAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIHByb3BzLmNzcy5uYW1lICE9PSAnc3RyaW5nJyB8fCBwcm9wcy5jc3MubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSkge1xuICAgIHZhciBsYWJlbCA9IGdldExhYmVsRnJvbVN0YWNrVHJhY2UobmV3IEVycm9yKCkuc3RhY2spO1xuICAgIGlmIChsYWJlbCkgbmV3UHJvcHNbbGFiZWxQcm9wTmFtZV0gPSBsYWJlbDtcbiAgfVxuXG4gIHJldHVybiBuZXdQcm9wcztcbn07XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZCA9IF9yZWYuc2VyaWFsaXplZCxcbiAgICAgIGlzU3RyaW5nVGFnID0gX3JlZi5pc1N0cmluZ1RhZztcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIHJ1bGVzID0gdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBFbW90aW9uID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgdmFyIGNzc1Byb3AgPSBwcm9wcy5jc3M7IC8vIHNvIHRoYXQgdXNpbmcgYGNzc2AgZnJvbSBgZW1vdGlvbmAgYW5kIHBhc3NpbmcgdGhlIHJlc3VsdCB0byB0aGUgY3NzIHByb3Agd29ya3NcbiAgLy8gbm90IHBhc3NpbmcgdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8gc2VyaWFsaXplU3R5bGVzIGJlY2F1c2UgaXQgd291bGRcbiAgLy8gbWFrZSBjZXJ0YWluIGJhYmVsIG9wdGltaXNhdGlvbnMgbm90IHBvc3NpYmxlXG5cbiAgaWYgKHR5cGVvZiBjc3NQcm9wID09PSAnc3RyaW5nJyAmJiBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdICE9PSB1bmRlZmluZWQpIHtcbiAgICBjc3NQcm9wID0gY2FjaGUucmVnaXN0ZXJlZFtjc3NQcm9wXTtcbiAgfVxuXG4gIHZhciBXcmFwcGVkQ29tcG9uZW50ID0gcHJvcHNbdHlwZVByb3BOYW1lXTtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbY3NzUHJvcF07XG4gIHZhciBjbGFzc05hbWUgPSAnJztcblxuICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIHByb3BzLmNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAocHJvcHMuY2xhc3NOYW1lICE9IG51bGwpIHtcbiAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm5hbWUuaW5kZXhPZignLScpID09PSAtMSkge1xuICAgIHZhciBsYWJlbEZyb21TdGFjayA9IHByb3BzW2xhYmVsUHJvcE5hbWVdO1xuXG4gICAgaWYgKGxhYmVsRnJvbVN0YWNrKSB7XG4gICAgICBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzZXJpYWxpemVkLCAnbGFiZWw6JyArIGxhYmVsRnJvbVN0YWNrICsgJzsnXSk7XG4gICAgfVxuICB9XG5cbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSAmJiBrZXkgIT09ICdjc3MnICYmIGtleSAhPT0gdHlwZVByb3BOYW1lICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IGtleSAhPT0gbGFiZWxQcm9wTmFtZSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgV3JhcHBlZENvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIG5ld1Byb3BzKSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbi5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ3NzUHJvcEludGVybmFsJztcbn1cblxuZXhwb3J0IHsgQ2FjaGVQcm92aWRlciBhcyBDLCBFbW90aW9uIGFzIEUsIFRoZW1lQ29udGV4dCBhcyBULCBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgYXMgXywgVGhlbWVQcm92aWRlciBhcyBhLCB3aXRoVGhlbWUgYXMgYiwgY3JlYXRlRW1vdGlvblByb3BzIGFzIGMsIGhhc093blByb3BlcnR5IGFzIGgsIHVzZVRoZW1lIGFzIHUsIHdpdGhFbW90aW9uQ2FjaGUgYXMgdyB9O1xuIiwidmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWVzKSB7XG4gIHZhciByYXdDbGFzc05hbWUgPSAnJztcbiAgY2xhc3NOYW1lcy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGlmIChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVnaXN0ZXJlZFN0eWxlcy5wdXNoKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSArIFwiO1wiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgcmVnaXN0ZXJTdHlsZXMgPSBmdW5jdGlvbiByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmICggLy8gd2Ugb25seSBuZWVkIHRvIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSByZWdpc3RlcmVkIGNhY2hlIGlmIHRoZVxuICAvLyBjbGFzcyBuYW1lIGNvdWxkIGJlIHVzZWQgZnVydGhlciBkb3duXG4gIC8vIHRoZSB0cmVlIGJ1dCBpZiBpdCdzIGEgc3RyaW5nIHRhZywgd2Uga25vdyBpdCB3b24ndFxuICAvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGFkZCBpdCB0byByZWdpc3RlcmVkIGNhY2hlLlxuICAvLyB0aGlzIGltcHJvdmVzIG1lbW9yeSB1c2FnZSBzaW5jZSB3ZSBjYW4gYXZvaWQgc3RvcmluZyB0aGUgd2hvbGUgc3R5bGUgc3RyaW5nXG4gIChpc1N0cmluZ1RhZyA9PT0gZmFsc2UgfHwgLy8gd2UgbmVlZCB0byBhbHdheXMgc3RvcmUgaXQgaWYgd2UncmUgaW4gY29tcGF0IG1vZGUgYW5kXG4gIC8vIGluIG5vZGUgc2luY2UgZW1vdGlvbi1zZXJ2ZXIgcmVsaWVzIG9uIHdoZXRoZXIgYSBzdHlsZSBpcyBpblxuICAvLyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBrbm93IHdoZXRoZXIgYSBzdHlsZSBpcyBnbG9iYWwgb3Igbm90XG4gIC8vIGFsc28sIG5vdGUgdGhhdCB0aGlzIGNoZWNrIHdpbGwgYmUgZGVhZCBjb2RlIGVsaW1pbmF0ZWQgaW4gdGhlIGJyb3dzZXJcbiAgaXNCcm93c2VyID09PSBmYWxzZSApICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cbn07XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChzZXJpYWxpemVkID09PSBjdXJyZW50ID8gXCIuXCIgKyBjbGFzc05hbWUgOiAnJywgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMgfTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IHVzZUNvbnRleHQsIGNyZWF0ZUVsZW1lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzUHJvcFZhbGlkIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuaW1wb3J0IHsgd2l0aEVtb3Rpb25DYWNoZSwgVGhlbWVDb250ZXh0IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnID0gaXNQcm9wVmFsaWQ7XG5cbnZhciB0ZXN0T21pdFByb3BzT25Db21wb25lbnQgPSBmdW5jdGlvbiB0ZXN0T21pdFByb3BzT25Db21wb25lbnQoa2V5KSB7XG4gIHJldHVybiBrZXkgIT09ICd0aGVtZSc7XG59O1xuXG52YXIgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5NiA/IHRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyA6IHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudDtcbn07XG52YXIgY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpIHtcbiAgdmFyIHNob3VsZEZvcndhcmRQcm9wO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA9IG9wdGlvbnMuc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCA/IGZ1bmN0aW9uIChwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AocHJvcE5hbWUpICYmIG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcChwcm9wTmFtZSk7XG4gICAgfSA6IG9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2hvdWxkRm9yd2FyZFByb3AgIT09ICdmdW5jdGlvbicgJiYgaXNSZWFsKSB7XG4gICAgc2hvdWxkRm9yd2FyZFByb3AgPSB0YWcuX19lbW90aW9uX2ZvcndhcmRQcm9wO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZEZvcndhcmRQcm9wO1xufTtcblxudmFyIElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SID0gXCJZb3UgaGF2ZSBpbGxlZ2FsIGVzY2FwZSBzZXF1ZW5jZSBpbiB5b3VyIHRlbXBsYXRlIGxpdGVyYWwsIG1vc3QgbGlrZWx5IGluc2lkZSBjb250ZW50J3MgcHJvcGVydHkgdmFsdWUuXFxuQmVjYXVzZSB5b3Ugd3JpdGUgeW91ciBDU1MgaW5zaWRlIGEgSmF2YVNjcmlwdCBzdHJpbmcgeW91IGFjdHVhbGx5IGhhdmUgdG8gZG8gZG91YmxlIGVzY2FwaW5nLCBzbyBmb3IgZXhhbXBsZSBcXFwiY29udGVudDogJ1xcXFwwMGQ3JztcXFwiIHNob3VsZCBiZWNvbWUgXFxcImNvbnRlbnQ6ICdcXFxcXFxcXDAwZDcnO1xcXCIuXFxuWW91IGNhbiByZWFkIG1vcmUgYWJvdXQgdGhpcyBoZXJlOlxcbmh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL1RlbXBsYXRlX2xpdGVyYWxzI0VTMjAxOF9yZXZpc2lvbl9vZl9pbGxlZ2FsX2VzY2FwZV9zZXF1ZW5jZXNcIjtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlZCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGEgc3R5bGVkIGVsZW1lbnQgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LlxcbllvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LicpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc1JlYWwgPSB0YWcuX19lbW90aW9uX3JlYWwgPT09IHRhZztcbiAgdmFyIGJhc2VUYWcgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9iYXNlIHx8IHRhZztcbiAgdmFyIGlkZW50aWZpZXJOYW1lO1xuICB2YXIgdGFyZ2V0Q2xhc3NOYW1lO1xuXG4gIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZGVudGlmaWVyTmFtZSA9IG9wdGlvbnMubGFiZWw7XG4gICAgdGFyZ2V0Q2xhc3NOYW1lID0gb3B0aW9ucy50YXJnZXQ7XG4gIH1cblxuICB2YXIgc2hvdWxkRm9yd2FyZFByb3AgPSBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzKHRhZywgb3B0aW9ucywgaXNSZWFsKTtcbiAgdmFyIGRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wIHx8IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChiYXNlVGFnKTtcbiAgdmFyIHNob3VsZFVzZUFzID0gIWRlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCgnYXMnKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgc3R5bGVzID0gaXNSZWFsICYmIHRhZy5fX2Vtb3Rpb25fc3R5bGVzICE9PSB1bmRlZmluZWQgPyB0YWcuX19lbW90aW9uX3N0eWxlcy5zbGljZSgwKSA6IFtdO1xuXG4gICAgaWYgKGlkZW50aWZpZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoKFwibGFiZWw6XCIgKyBpZGVudGlmaWVyTmFtZSArIFwiO1wiKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc1swXSA9PSBudWxsIHx8IGFyZ3NbMF0ucmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlcy5wdXNoLmFwcGx5KHN0eWxlcywgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZ3NbMF1bMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzLnB1c2goYXJnc1swXVswXSk7XG4gICAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgICB2YXIgaSA9IDE7XG5cbiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZXMucHVzaChhcmdzW2ldLCBhcmdzWzBdW2ldKTtcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWU6IHdlIG5lZWQgdG8gY2FzdCBTdGF0ZWxlc3NGdW5jdGlvbmFsQ29tcG9uZW50IHRvIG91ciBQcml2YXRlU3R5bGVkQ29tcG9uZW50IGNsYXNzXG5cblxuICAgIHZhciBTdHlsZWQgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAgICAgdmFyIEZpbmFsVGFnID0gc2hvdWxkVXNlQXMgJiYgcHJvcHMuYXMgfHwgYmFzZVRhZztcbiAgICAgIHZhciBjbGFzc05hbWUgPSAnJztcbiAgICAgIHZhciBjbGFzc0ludGVycG9sYXRpb25zID0gW107XG4gICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBwcm9wcztcblxuICAgICAgaWYgKHByb3BzLnRoZW1lID09IG51bGwpIHtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBtZXJnZWRQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lcmdlZFByb3BzLnRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhjYWNoZS5yZWdpc3RlcmVkLCBjbGFzc0ludGVycG9sYXRpb25zLCBwcm9wcy5jbGFzc05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoc3R5bGVzLmNvbmNhdChjbGFzc0ludGVycG9sYXRpb25zKSwgY2FjaGUucmVnaXN0ZXJlZCwgbWVyZ2VkUHJvcHMpO1xuICAgICAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gICAgICBpZiAodGFyZ2V0Q2xhc3NOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2xhc3NOYW1lICs9IFwiIFwiICsgdGFyZ2V0Q2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmluYWxTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZFVzZUFzICYmIHNob3VsZEZvcndhcmRQcm9wID09PSB1bmRlZmluZWQgPyBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AoRmluYWxUYWcpIDogZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wO1xuICAgICAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgICAgIGZvciAodmFyIF9rZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKHNob3VsZFVzZUFzICYmIF9rZXkgPT09ICdhcycpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmICggLy8gJEZsb3dGaXhNZVxuICAgICAgICBmaW5hbFNob3VsZEZvcndhcmRQcm9wKF9rZXkpKSB7XG4gICAgICAgICAgbmV3UHJvcHNbX2tleV0gPSBwcm9wc1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICBuZXdQcm9wcy5yZWYgPSByZWY7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgICAgICBjYWNoZTogY2FjaGUsXG4gICAgICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgICAgIGlzU3RyaW5nVGFnOiB0eXBlb2YgRmluYWxUYWcgPT09ICdzdHJpbmcnXG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRmluYWxUYWcsIG5ld1Byb3BzKSk7XG4gICAgfSk7XG4gICAgU3R5bGVkLmRpc3BsYXlOYW1lID0gaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCA/IGlkZW50aWZpZXJOYW1lIDogXCJTdHlsZWQoXCIgKyAodHlwZW9mIGJhc2VUYWcgPT09ICdzdHJpbmcnID8gYmFzZVRhZyA6IGJhc2VUYWcuZGlzcGxheU5hbWUgfHwgYmFzZVRhZy5uYW1lIHx8ICdDb21wb25lbnQnKSArIFwiKVwiO1xuICAgIFN0eWxlZC5kZWZhdWx0UHJvcHMgPSB0YWcuZGVmYXVsdFByb3BzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fcmVhbCA9IFN0eWxlZDtcbiAgICBTdHlsZWQuX19lbW90aW9uX2Jhc2UgPSBiYXNlVGFnO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fc3R5bGVzID0gc3R5bGVzO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgPSBzaG91bGRGb3J3YXJkUHJvcDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3R5bGVkLCAndG9TdHJpbmcnLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUoKSB7XG4gICAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgPT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuICdOT19DT01QT05FTlRfU0VMRUNUT1InO1xuICAgICAgICB9IC8vICRGbG93Rml4TWU6IGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG5cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBTdHlsZWQud2l0aENvbXBvbmVudCA9IGZ1bmN0aW9uIChuZXh0VGFnLCBuZXh0T3B0aW9ucykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlZChuZXh0VGFnLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgbmV4dE9wdGlvbnMsIHtcbiAgICAgICAgc2hvdWxkRm9yd2FyZFByb3A6IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMoU3R5bGVkLCBuZXh0T3B0aW9ucywgdHJ1ZSlcbiAgICAgIH0pKS5hcHBseSh2b2lkIDAsIHN0eWxlcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBTdHlsZWQ7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdHlsZWQ7XG4iLCJpbXBvcnQgJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgJ3JlYWN0JztcbmltcG9ydCAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4uL2Jhc2UvZGlzdC9lbW90aW9uLXN0eWxlZC1iYXNlLmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHRhZ3MgPSBbJ2EnLCAnYWJicicsICdhZGRyZXNzJywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdhdWRpbycsICdiJywgJ2Jhc2UnLCAnYmRpJywgJ2JkbycsICdiaWcnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYW52YXMnLCAnY2FwdGlvbicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RhdGEnLCAnZGF0YWxpc3QnLCAnZGQnLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW0nLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaScsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lucycsICdrYmQnLCAna2V5Z2VuJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdsaW5rJywgJ21haW4nLCAnbWFwJywgJ21hcmsnLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbWV0ZXInLCAnbmF2JywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGFyYW0nLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N0eWxlJywgJ3N1YicsICdzdW1tYXJ5JywgJ3N1cCcsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aW1lJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3UnLCAndWwnLCAndmFyJywgJ3ZpZGVvJywgJ3dicicsIC8vIFNWR1xuJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZm9yZWlnbk9iamVjdCcsICdnJywgJ2ltYWdlJywgJ2xpbmUnLCAnbGluZWFyR3JhZGllbnQnLCAnbWFzaycsICdwYXRoJywgJ3BhdHRlcm4nLCAncG9seWdvbicsICdwb2x5bGluZScsICdyYWRpYWxHcmFkaWVudCcsICdyZWN0JywgJ3N0b3AnLCAnc3ZnJywgJ3RleHQnLCAndHNwYW4nXTtcblxudmFyIG5ld1N0eWxlZCA9IGNyZWF0ZVN0eWxlZC5iaW5kKCk7XG50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZ05hbWUpIHtcbiAgLy8gJEZsb3dGaXhNZTogd2UgY2FuIGlnbm9yZSB0aGlzIGJlY2F1c2UgaXRzIGV4cG9zZWQgdHlwZSBpcyBkZWZpbmVkIGJ5IHRoZSBDcmVhdGVTdHlsZWQgdHlwZVxuICBuZXdTdHlsZWRbdGFnTmFtZV0gPSBuZXdTdHlsZWQodGFnTmFtZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3U3R5bGVkO1xuIiwiLyoqIEBsaWNlbnNlIE1VSSB2NS4xMS4wXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICguLi5zdHlsZXMpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnID8gYFwiJHt0YWd9XCJgIDogJ2NvbXBvbmVudCc7XG4gICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBTZWVtcyBsaWtlIHlvdSBjYWxsZWQgXFxgc3R5bGVkKCR7Y29tcG9uZW50fSkoKVxcYCB3aXRob3V0IGEgXFxgc3R5bGVcXGAgYXJndW1lbnQuYCwgJ1lvdSBtdXN0IHByb3ZpZGUgYSBgc3R5bGVzYCBhcmd1bWVudDogYHN0eWxlZChcImRpdlwiKShzdHlsZVlvdUZvcmdvdFRvUGFzcylgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLnNvbWUoc3R5bGUgPT4gc3R5bGUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiB0aGUgc3R5bGVkKCR7Y29tcG9uZW50fSkoLi4uYXJncykgQVBJIHJlcXVpcmVzIGFsbCBpdHMgYXJncyB0byBiZSBkZWZpbmVkLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzdHlsZXNGYWN0b3J5O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9ICh0YWcsIHByb2Nlc3NvcikgPT4ge1xuICAvLyBFbW90aW9uIGF0dGFjaGVzIGFsbCB0aGUgc3R5bGVzIGFzIGBfX2Vtb3Rpb25fc3R5bGVzYC5cbiAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMTZkOTcxZDBkYTIyOTU5NmQ2YmNjMzlkMjgyYmE5NzUzYzllZTdjZi9wYWNrYWdlcy9zdHlsZWQvc3JjL2Jhc2UuanMjTDE4NlxuICBpZiAoQXJyYXkuaXNBcnJheSh0YWcuX19lbW90aW9uX3N0eWxlcykpIHtcbiAgICB0YWcuX19lbW90aW9uX3N0eWxlcyA9IHByb2Nlc3Nvcih0YWcuX19lbW90aW9uX3N0eWxlcyk7XG4gIH1cbn07XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YXJpYW50XCJdO1xuaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiBpc0VtcHR5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PT0gMDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgc3RyaW5nIGNsYXNzS2V5IGJhc2VkIG9uIHRoZSBwcm9wZXJ0aWVzIHByb3ZpZGVkLiBJdCBzdGFydHMgd2l0aCB0aGVcbiAqIHZhcmlhbnQgaWYgZGVmaW5lZCwgYW5kIHRoZW4gaXQgYXBwZW5kcyBhbGwgb3RoZXIgcHJvcGVydGllcyBpbiBhbHBoYWJldGljYWwgb3JkZXIuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgLSB0aGUgcHJvcGVydGllcyBmb3Igd2hpY2ggdGhlIGNsYXNzS2V5IHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9wc1RvQ2xhc3NLZXkocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgdmFyaWFudFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBsZXQgY2xhc3NLZXkgPSB2YXJpYW50IHx8ICcnO1xuICBPYmplY3Qua2V5cyhvdGhlcikuc29ydCgpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoa2V5ID09PSAnY29sb3InKSB7XG4gICAgICBjbGFzc0tleSArPSBpc0VtcHR5KGNsYXNzS2V5KSA/IHByb3BzW2tleV0gOiBjYXBpdGFsaXplKHByb3BzW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGFzc0tleSArPSBgJHtpc0VtcHR5KGNsYXNzS2V5KSA/IGtleSA6IGNhcGl0YWxpemUoa2V5KX0ke2NhcGl0YWxpemUocHJvcHNba2V5XS50b1N0cmluZygpKX1gO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGFzc0tleTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibmFtZVwiLCBcInNsb3RcIiwgXCJza2lwVmFyaWFudHNSZXNvbHZlclwiLCBcInNraXBTeFwiLCBcIm92ZXJyaWRlc1Jlc29sdmVyXCJdLFxuICBfZXhjbHVkZWQyID0gW1widGhlbWVcIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJ0aGVtZVwiXTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgc3R5bGVkRW5naW5lU3R5bGVkLCB7IGludGVybmFsX3Byb2Nlc3NTdHlsZXMgYXMgcHJvY2Vzc1N0eWxlcyB9IGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHByb3BzVG9DbGFzc0tleSBmcm9tICcuL3Byb3BzVG9DbGFzc0tleSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cbmNvbnN0IGdldFN0eWxlT3ZlcnJpZGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGlmICh0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbnN0IGdldFZhcmlhbnRTdHlsZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgbGV0IHZhcmlhbnRzID0gW107XG4gIGlmICh0aGVtZSAmJiB0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cykge1xuICAgIHZhcmlhbnRzID0gdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cztcbiAgfVxuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHt9O1xuICB2YXJpYW50cy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgIGNvbnN0IGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICB2YXJpYW50c1N0eWxlc1trZXldID0gZGVmaW5pdGlvbi5zdHlsZTtcbiAgfSk7XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHRoZW1lLCBuYW1lKSA9PiB7XG4gIHZhciBfdGhlbWUkY29tcG9uZW50cywgX3RoZW1lJGNvbXBvbmVudHMkbmFtO1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSBbXTtcbiAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMgPSB0aGVtZS5jb21wb25lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzJG5hbSA9IF90aGVtZSRjb21wb25lbnRzW25hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJGNvbXBvbmVudHMkbmFtLnZhcmlhbnRzO1xuICBpZiAodGhlbWVWYXJpYW50cykge1xuICAgIHRoZW1lVmFyaWFudHMuZm9yRWFjaCh0aGVtZVZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXModGhlbWVWYXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChvd25lclN0YXRlW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldKSB7XG4gICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh0aGVtZVZhcmlhbnQucHJvcHMpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wXG4gIH0gPSBpbnB1dDtcbiAgY29uc3Qgc3lzdGVtU3ggPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICB0aGVtZVxuICAgIH0pKTtcbiAgfTtcbiAgc3lzdGVtU3guX19tdWlfc3lzdGVtU3ggPSB0cnVlO1xuICByZXR1cm4gKHRhZywgaW5wdXRPcHRpb25zID0ge30pID0+IHtcbiAgICAvLyBGaWx0ZXIgb3V0IHRoZSBgc3hgIHN0eWxlIGZ1bmN0aW9uIGZyb20gdGhlIHByZXZpb3VzIHN0eWxlZCBjb21wb25lbnQgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBzdHlsZXMgZ2VuZXJhdGVkIGJ5IHRoZSBjb21wb3NpdGUgY29tcG9uZW50cy5cbiAgICBwcm9jZXNzU3R5bGVzKHRhZywgc3R5bGVzID0+IHN0eWxlcy5maWx0ZXIoc3R5bGUgPT4gIShzdHlsZSAhPSBudWxsICYmIHN0eWxlLl9fbXVpX3N5c3RlbVN4KSkpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZTogY29tcG9uZW50TmFtZSxcbiAgICAgICAgc2xvdDogY29tcG9uZW50U2xvdCxcbiAgICAgICAgc2tpcFZhcmlhbnRzUmVzb2x2ZXI6IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIsXG4gICAgICAgIHNraXBTeDogaW5wdXRTa2lwU3gsXG4gICAgICAgIG92ZXJyaWRlc1Jlc29sdmVyXG4gICAgICB9ID0gaW5wdXRPcHRpb25zLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKGlucHV0T3B0aW9ucywgX2V4Y2x1ZGVkKTtcblxuICAgIC8vIGlmIHNraXBWYXJpYW50c1Jlc29sdmVyIG9wdGlvbiBpcyBkZWZpbmVkLCB0YWtlIHRoZSB2YWx1ZSwgb3RoZXJ3aXNlLCB0cnVlIGZvciByb290IGFuZCBmYWxzZSBmb3Igb3RoZXIgc2xvdHMuXG4gICAgY29uc3Qgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgPSBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyICE9PSB1bmRlZmluZWQgPyBpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIDogY29tcG9uZW50U2xvdCAmJiBjb21wb25lbnRTbG90ICE9PSAnUm9vdCcgfHwgZmFsc2U7XG4gICAgY29uc3Qgc2tpcFN4ID0gaW5wdXRTa2lwU3ggfHwgZmFsc2U7XG4gICAgbGV0IGxhYmVsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICBsYWJlbCA9IGAke2NvbXBvbmVudE5hbWV9LSR7bG93ZXJjYXNlRmlyc3RMZXR0ZXIoY29tcG9uZW50U2xvdCB8fCAnUm9vdCcpfWA7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIGlmIChjb21wb25lbnRTbG90ID09PSAnUm9vdCcpIHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gcm9vdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoY29tcG9uZW50U2xvdCkge1xuICAgICAgLy8gYW55IG90aGVyIHNsb3Qgc3BlY2lmaWVkXG4gICAgICBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiA9IHNsb3RTaG91bGRGb3J3YXJkUHJvcDtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nVGFnKHRhZykpIHtcbiAgICAgIC8vIGZvciBzdHJpbmcgKGh0bWwpIHRhZywgcHJlc2VydmUgdGhlIGJlaGF2aW9yIGluIGVtb3Rpb24gJiBzdHlsZWQtY29tcG9uZW50cy5cbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIgPSBzdHlsZWRFbmdpbmVTdHlsZWQodGFnLCBfZXh0ZW5kcyh7XG4gICAgICBzaG91bGRGb3J3YXJkUHJvcDogc2hvdWxkRm9yd2FyZFByb3BPcHRpb24sXG4gICAgICBsYWJlbFxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBjb25zdCBtdWlTdHlsZWRSZXNvbHZlciA9IChzdHlsZUFyZywgLi4uZXhwcmVzc2lvbnMpID0+IHtcbiAgICAgIGNvbnN0IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSA9IGV4cHJlc3Npb25zID8gZXhwcmVzc2lvbnMubWFwKHN0eWxlc0FyZyA9PiB7XG4gICAgICAgIC8vIE9uIHRoZSBzZXJ2ZXIgRW1vdGlvbiBkb2Vzbid0IHVzZSBSZWFjdC5mb3J3YXJkUmVmIGZvciBjcmVhdGluZyBjb21wb25lbnRzLCBzbyB0aGUgY3JlYXRlZFxuICAgICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICAgIHJldHVybiB0eXBlb2Ygc3R5bGVzQXJnID09PSAnZnVuY3Rpb24nICYmIHN0eWxlc0FyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVzQXJnID8gX3JlZiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lSW5wdXRcbiAgICAgICAgICAgIH0gPSBfcmVmLFxuICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQyKTtcbiAgICAgICAgICByZXR1cm4gc3R5bGVzQXJnKF9leHRlbmRzKHtcbiAgICAgICAgICAgIHRoZW1lOiBpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dFxuICAgICAgICAgIH0sIG90aGVyKSk7XG4gICAgICAgIH0gOiBzdHlsZXNBcmc7XG4gICAgICB9KSA6IFtdO1xuICAgICAgbGV0IHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBzdHlsZUFyZztcbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmIG92ZXJyaWRlc1Jlc29sdmVyKSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHByb3BzID0+IHtcbiAgICAgICAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgICAgICAgY29uc3Qgc3R5bGVPdmVycmlkZXMgPSBnZXRTdHlsZU92ZXJyaWRlcyhjb21wb25lbnROYW1lLCB0aGVtZSk7XG4gICAgICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhzdHlsZU92ZXJyaWRlcykuZm9yRWFjaCgoW3Nsb3RLZXksIHNsb3RTdHlsZV0pID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlc1tzbG90S2V5XSA9IHR5cGVvZiBzbG90U3R5bGUgPT09ICdmdW5jdGlvbicgPyBzbG90U3R5bGUoX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSkpIDogc2xvdFN0eWxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVzUmVzb2x2ZXIocHJvcHMsIHJlc29sdmVkU3R5bGVPdmVycmlkZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9uZW50TmFtZSAmJiAhc2tpcFZhcmlhbnRzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICByZXR1cm4gdmFyaWFudHNSZXNvbHZlcihwcm9wcywgZ2V0VmFyaWFudFN0eWxlcyhjb21wb25lbnROYW1lLCB0aGVtZSksIHRoZW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXNraXBTeCkge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChzeXN0ZW1TeCk7XG4gICAgICB9XG4gICAgICBjb25zdCBudW1PZkN1c3RvbUZuc0FwcGxpZWQgPSBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUubGVuZ3RoIC0gZXhwcmVzc2lvbnMubGVuZ3RoO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVBcmcpICYmIG51bU9mQ3VzdG9tRm5zQXBwbGllZCA+IDApIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXJzID0gbmV3IEFycmF5KG51bU9mQ3VzdG9tRm5zQXBwbGllZCkuZmlsbCgnJyk7XG4gICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIGFycmF5LCB0aGFuIHdlIG5lZWQgdG8gYWRkIHBsYWNlaG9sZGVycyBpbiB0aGUgdGVtcGxhdGUgZm9yIHRoZSBvdmVycmlkZXMsIHZhcmlhbnRzIGFuZCB0aGUgc3ggc3R5bGVzLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gWy4uLnN0eWxlQXJnLCAuLi5wbGFjZWhvbGRlcnNdO1xuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnLnJhdyA9IFsuLi5zdHlsZUFyZy5yYXcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHlsZUFyZyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAvLyBjb21wb25lbnQgc3RheXMgYXMgYSBmdW5jdGlvbi4gVGhpcyBjb25kaXRpb24gbWFrZXMgc3VyZSB0aGF0IHdlIGRvIG5vdCBpbnRlcnBvbGF0ZSBmdW5jdGlvbnNcbiAgICAgIC8vIHdoaWNoIGFyZSBiYXNpY2FsbHkgY29tcG9uZW50cyB1c2VkIGFzIGEgc2VsZWN0b3JzLlxuICAgICAgc3R5bGVBcmcuX19lbW90aW9uX3JlYWwgIT09IHN0eWxlQXJnKSB7XG4gICAgICAgIC8vIElmIHRoZSB0eXBlIGlzIGZ1bmN0aW9uLCB3ZSBuZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCB0aGVtZS5cbiAgICAgICAgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IF9yZWYyID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgICAgfSA9IF9yZWYyLFxuICAgICAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkMyk7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlQXJnKF9leHRlbmRzKHtcbiAgICAgICAgICAgIHRoZW1lOiBpc0VtcHR5KHRoZW1lSW5wdXQpID8gZGVmYXVsdFRoZW1lIDogdGhlbWVJbnB1dFxuICAgICAgICAgIH0sIG90aGVyKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCBDb21wb25lbnQgPSBkZWZhdWx0U3R5bGVkUmVzb2x2ZXIodHJhbnNmb3JtZWRTdHlsZUFyZywgLi4uZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGxldCBkaXNwbGF5TmFtZTtcbiAgICAgICAgaWYgKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGAke2NvbXBvbmVudE5hbWV9JHtjb21wb25lbnRTbG90IHx8ICcnfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkaXNwbGF5TmFtZSA9IGBTdHlsZWQoJHtnZXREaXNwbGF5TmFtZSh0YWcpfSlgO1xuICAgICAgICB9XG4gICAgICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9O1xuICAgIGlmIChkZWZhdWx0U3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZykge1xuICAgICAgbXVpU3R5bGVkUmVzb2x2ZXIud2l0aENvbmZpZyA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnO1xuICAgIH1cbiAgICByZXR1cm4gbXVpU3R5bGVkUmVzb2x2ZXI7XG4gIH07XG59IiwiaW1wb3J0IHsgY3JlYXRlU3R5bGVkLCBzaG91bGRGb3J3YXJkUHJvcCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuZXhwb3J0IGNvbnN0IHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHByb3AgPT4gc2hvdWxkRm9yd2FyZFByb3AocHJvcCkgJiYgcHJvcCAhPT0gJ2NsYXNzZXMnO1xuZXhwb3J0IGNvbnN0IHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuY29uc3Qgc3R5bGVkID0gY3JlYXRlU3R5bGVkKHtcbiAgZGVmYXVsdFRoZW1lLFxuICByb290U2hvdWxkRm9yd2FyZFByb3Bcbn0pO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImNvbnN0IGRlZmF1bHRHZW5lcmF0b3IgPSBjb21wb25lbnROYW1lID0+IGNvbXBvbmVudE5hbWU7XG5jb25zdCBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IgPSAoKSA9PiB7XG4gIGxldCBnZW5lcmF0ZSA9IGRlZmF1bHRHZW5lcmF0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJlKGdlbmVyYXRvcikge1xuICAgICAgZ2VuZXJhdGUgPSBnZW5lcmF0b3I7XG4gICAgfSxcbiAgICBnZW5lcmF0ZShjb21wb25lbnROYW1lKSB7XG4gICAgICByZXR1cm4gZ2VuZXJhdGUoY29tcG9uZW50TmFtZSk7XG4gICAgfSxcbiAgICByZXNldCgpIHtcbiAgICAgIGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgICB9XG4gIH07XG59O1xuY29uc3QgQ2xhc3NOYW1lR2VuZXJhdG9yID0gY3JlYXRlQ2xhc3NOYW1lR2VuZXJhdG9yKCk7XG5leHBvcnQgZGVmYXVsdCBDbGFzc05hbWVHZW5lcmF0b3I7IiwiaW1wb3J0IENsYXNzTmFtZUdlbmVyYXRvciBmcm9tICcuLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuY29uc3QgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyA9IHtcbiAgYWN0aXZlOiAnYWN0aXZlJyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmdbc2xvdF07XG4gIHJldHVybiBnbG9iYWxTdGF0ZUNsYXNzID8gYCR7Z2xvYmFsU3RhdGVQcmVmaXh9LSR7Z2xvYmFsU3RhdGVDbGFzc31gIDogYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cywgZ2xvYmFsU3RhdGVQcmVmaXggPSAnTXVpJykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlDaXJjdWxhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnc3ZnJywgJ2NpcmNsZScsICdjaXJjbGVEZXRlcm1pbmF0ZScsICdjaXJjbGVJbmRldGVybWluYXRlJywgJ2NpcmNsZURpc2FibGVTaHJpbmsnXSk7XG5leHBvcnQgZGVmYXVsdCBjaXJjdWxhclByb2dyZXNzQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidGhpY2tuZXNzXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdO1xubGV0IF8gPSB0ID0+IHQsXG4gIF90LFxuICBfdDIsXG4gIF90MyxcbiAgX3Q0O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHsgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcyB9IGZyb20gJy4vY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFNJWkUgPSA0NDtcbmNvbnN0IGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QgfHwgKF90ID0gX2BcbiAgMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgfVxuYCkpO1xuY29uc3QgY2lyY3VsYXJEYXNoS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QyIHx8IChfdDIgPSBfYFxuICAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMXB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogMDtcbiAgfVxuXG4gIDUwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTVweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIHN0cm9rZS1kYXNoYXJyYXk6IDEwMHB4LCAyMDBweDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogLTEyNXB4O1xuICB9XG5gKSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yLFxuICAgIGRpc2FibGVTaHJpbmtcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgc3ZnOiBbJ3N2ZyddLFxuICAgIGNpcmNsZTogWydjaXJjbGUnLCBgY2lyY2xlJHtjYXBpdGFsaXplKHZhcmlhbnQpfWAsIGRpc2FibGVTaHJpbmsgJiYgJ2NpcmNsZURpc2FibGVTaHJpbmsnXVxuICB9O1xuICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScpXG59LCBvd25lclN0YXRlLmNvbG9yICE9PSAnaW5oZXJpdCcgJiYge1xuICBjb2xvcjogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIGNzcyhfdDMgfHwgKF90MyA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBsaW5lYXIgaW5maW5pdGU7XG4gICAgYCksIGNpcmN1bGFyUm90YXRlS2V5ZnJhbWUpKTtcbmNvbnN0IENpcmN1bGFyUHJvZ3Jlc3NTVkcgPSBzdHlsZWQoJ3N2ZycsIHtcbiAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnU3ZnJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMuc3ZnXG59KSh7XG4gIGRpc3BsYXk6ICdibG9jaycgLy8gS2VlcHMgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG59KTtcblxuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSA9IHN0eWxlZCgnY2lyY2xlJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdDaXJjbGUnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmNpcmNsZSwgc3R5bGVzW2BjaXJjbGUke2NhcGl0YWxpemUob3duZXJTdGF0ZS52YXJpYW50KX1gXSwgb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIHN0eWxlcy5jaXJjbGVEaXNhYmxlU2hyaW5rXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgc3Ryb2tlOiAnY3VycmVudENvbG9yJ1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdzdHJva2UtZGFzaG9mZnNldCcpXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiB7XG4gIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgc3Ryb2tlRGFzaGFycmF5OiAnODBweCwgMjAwcHgnLFxuICBzdHJva2VEYXNob2Zmc2V0OiAwIC8vIEFkZCB0aGUgdW5pdCB0byBmaXggYSBFZGdlIDE2IGFuZCBiZWxvdyBidWcuXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYgIW93bmVyU3RhdGUuZGlzYWJsZVNocmluayAmJiBjc3MoX3Q0IHx8IChfdDQgPSBfYFxuICAgICAgYW5pbWF0aW9uOiAkezB9IDEuNHMgZWFzZS1pbi1vdXQgaW5maW5pdGU7XG4gICAgYCksIGNpcmN1bGFyRGFzaEtleWZyYW1lKSk7XG5cbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzcyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENpcmN1bGFyUHJvZ3Jlc3MoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUNpcmN1bGFyUHJvZ3Jlc3MnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIGRpc2FibGVTaHJpbmsgPSBmYWxzZSxcbiAgICAgIHNpemUgPSA0MCxcbiAgICAgIHN0eWxlLFxuICAgICAgdGhpY2tuZXNzID0gMy42LFxuICAgICAgdmFsdWUgPSAwLFxuICAgICAgdmFyaWFudCA9ICdpbmRldGVybWluYXRlJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgZGlzYWJsZVNocmluayxcbiAgICBzaXplLFxuICAgIHRoaWNrbmVzcyxcbiAgICB2YWx1ZSxcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IGNpcmNsZVN0eWxlID0ge307XG4gIGNvbnN0IHJvb3RTdHlsZSA9IHt9O1xuICBjb25zdCByb290UHJvcHMgPSB7fTtcbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScpIHtcbiAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gMiAqIE1hdGguUEkgKiAoKFNJWkUgLSB0aGlja25lc3MpIC8gMik7XG4gICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gY2lyY3VtZmVyZW5jZS50b0ZpeGVkKDMpO1xuICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW5vdyddID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IGAkeygoMTAwIC0gdmFsdWUpIC8gMTAwICogY2lyY3VtZmVyZW5jZSkudG9GaXhlZCgzKX1weGA7XG4gICAgcm9vdFN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoLTkwZGVnKSc7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NSb290LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgd2lkdGg6IHNpemUsXG4gICAgICBoZWlnaHQ6IHNpemVcbiAgICB9LCByb290U3R5bGUsIHN0eWxlKSxcbiAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgIHJlZjogcmVmLFxuICAgIHJvbGU6IFwicHJvZ3Jlc3NiYXJcIlxuICB9LCByb290UHJvcHMsIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9fanN4KENpcmN1bGFyUHJvZ3Jlc3NTVkcsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdmcsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgdmlld0JveDogYCR7U0laRSAvIDJ9ICR7U0laRSAvIDJ9ICR7U0laRX0gJHtTSVpFfWAsXG4gICAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2lyY3VsYXJQcm9ncmVzc0NpcmNsZSwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuY2lyY2xlLFxuICAgICAgICBzdHlsZTogY2lyY2xlU3R5bGUsXG4gICAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICAgIGN4OiBTSVpFLFxuICAgICAgICBjeTogU0laRSxcbiAgICAgICAgcjogKFNJWkUgLSB0aGlja25lc3MpIC8gMixcbiAgICAgICAgZmlsbDogXCJub25lXCIsXG4gICAgICAgIHN0cm9rZVdpZHRoOiB0aGlja25lc3NcbiAgICAgIH0pXG4gICAgfSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDaXJjdWxhclByb2dyZXNzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2FkZGluZy1uZXctY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2Vycm9yJywgJ2luZm8nLCAnc3VjY2VzcycsICd3YXJuaW5nJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuYm9vbCwgcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlU2hyaW5rICYmIHByb3BzLnZhcmlhbnQgJiYgcHJvcHMudmFyaWFudCAhPT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNVUk6IFlvdSBoYXZlIHByb3ZpZGVkIHRoZSBgZGlzYWJsZVNocmlua2AgcHJvcCAnICsgJ3dpdGggYSB2YXJpYW50IG90aGVyIHRoYW4gYGluZGV0ZXJtaW5hdGVgLiBUaGlzIHdpbGwgaGF2ZSBubyBlZmZlY3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KSxcbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIElmIHVzaW5nIGEgbnVtYmVyLCB0aGUgcGl4ZWwgdW5pdCBpcyBhc3N1bWVkLlxuICAgKiBJZiB1c2luZyBhIHN0cmluZywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgQ1NTIHVuaXQsIGUuZyAnM3JlbScuXG4gICAqIEBkZWZhdWx0IDQwXG4gICAqL1xuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB0aGlja25lc3Mgb2YgdGhlIGNpcmNsZS5cbiAgICogQGRlZmF1bHQgMy42XG4gICAqL1xuICB0aGlja25lc3M6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIHZhcmlhbnQuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgJ2luZGV0ZXJtaW5hdGUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ2lyY3VsYXJQcm9ncmVzczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wic3hcIl07XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZGVmYXVsdFN4Q29uZmlnIGZyb20gJy4vZGVmYXVsdFN4Q29uZmlnJztcbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIHZhciBfcHJvcHMkdGhlbWUkdW5zdGFibGUsIF9wcm9wcyR0aGVtZTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHN5c3RlbVByb3BzOiB7fSxcbiAgICBvdGhlclByb3BzOiB7fVxuICB9O1xuICBjb25zdCBjb25maWcgPSAoX3Byb3BzJHRoZW1lJHVuc3RhYmxlID0gcHJvcHMgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wcm9wcyR0aGVtZS51bnN0YWJsZV9zeENvbmZpZykgIT0gbnVsbCA/IF9wcm9wcyR0aGVtZSR1bnN0YWJsZSA6IGRlZmF1bHRTeENvbmZpZztcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKGNvbmZpZ1twcm9wXSkge1xuICAgICAgcmVzdWx0LnN5c3RlbVByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5vdGhlclByb3BzW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRTeFByb3AocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgICAgc3g6IGluU3hcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qge1xuICAgIHN5c3RlbVByb3BzLFxuICAgIG90aGVyUHJvcHNcbiAgfSA9IHNwbGl0UHJvcHMob3RoZXIpO1xuICBsZXQgZmluYWxTeDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5TeCkpIHtcbiAgICBmaW5hbFN4ID0gW3N5c3RlbVByb3BzLCAuLi5pblN4XTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5TeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZpbmFsU3ggPSAoLi4uYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW5TeCguLi5hcmdzKTtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICAgIHJldHVybiBzeXN0ZW1Qcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbFN4ID0gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCBpblN4KTtcbiAgfVxuICByZXR1cm4gX2V4dGVuZHMoe30sIG90aGVyUHJvcHMsIHtcbiAgICBzeDogZmluYWxTeFxuICB9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4LCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCb3gob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VGhlbWUsXG4gICAgZGVmYXVsdENsYXNzTmFtZSA9ICdNdWlCb3gtcm9vdCcsXG4gICAgZ2VuZXJhdGVDbGFzc05hbWVcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IEJveFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJ1xuICB9KShzdHlsZUZ1bmN0aW9uU3gpO1xuICBjb25zdCBCb3ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCb3goaW5Qcm9wcywgcmVmKSB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICAgIGNvbnN0IF9leHRlbmRTeFByb3AgPSBleHRlbmRTeFByb3AoaW5Qcm9wcyksXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICAgIH0gPSBfZXh0ZW5kU3hQcm9wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfZXh0ZW5kU3hQcm9wLCBfZXhjbHVkZWQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChCb3hSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCBnZW5lcmF0ZUNsYXNzTmFtZSA/IGdlbmVyYXRlQ2xhc3NOYW1lKGRlZmF1bHRDbGFzc05hbWUpIDogZGVmYXVsdENsYXNzTmFtZSksXG4gICAgICB0aGVtZTogdGhlbWVcbiAgICB9LCBvdGhlcikpO1xuICB9KTtcbiAgcmV0dXJuIEJveDtcbn0iLCJpbXBvcnQgeyBjcmVhdGVCb3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgdW5zdGFibGVfQ2xhc3NOYW1lR2VuZXJhdG9yIGFzIENsYXNzTmFtZUdlbmVyYXRvciB9IGZyb20gJy4uL2NsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJy4uL3N0eWxlcyc7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgQm94ID0gY3JlYXRlQm94KHtcbiAgZGVmYXVsdFRoZW1lLFxuICBkZWZhdWx0Q2xhc3NOYW1lOiAnTXVpQm94LXJvb3QnLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogQ2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlXG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgZGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IHV0YyBmcm9tICdkYXlqcy9wbHVnaW4vdXRjJztcbmltcG9ydCB0aW1lem9uZSBmcm9tICdkYXlqcy9wbHVnaW4vdGltZXpvbmUnO1xuaW1wb3J0IGlzU2FtZU9yQWZ0ZXIgZnJvbSAnZGF5anMvcGx1Z2luL2lzU2FtZU9yQWZ0ZXInO1xuXG5kYXlqcy5leHRlbmQodXRjKTtcbmRheWpzLmV4dGVuZCh0aW1lem9uZSk7XG5kYXlqcy5leHRlbmQoaXNTYW1lT3JBZnRlcik7XG5cbmV4cG9ydCBkZWZhdWx0IGRheWpzO1xuIiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlMaW5lYXJQcm9ncmVzcycsIHNsb3QpO1xufVxuY29uc3QgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpTGluZWFyUHJvZ3Jlc3MnLCBbJ3Jvb3QnLCAnY29sb3JQcmltYXJ5JywgJ2NvbG9yU2Vjb25kYXJ5JywgJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnLCAnYnVmZmVyJywgJ3F1ZXJ5JywgJ2Rhc2hlZCcsICdkYXNoZWRDb2xvclByaW1hcnknLCAnZGFzaGVkQ29sb3JTZWNvbmRhcnknLCAnYmFyJywgJ2JhckNvbG9yUHJpbWFyeScsICdiYXJDb2xvclNlY29uZGFyeScsICdiYXIxSW5kZXRlcm1pbmF0ZScsICdiYXIxRGV0ZXJtaW5hdGUnLCAnYmFyMUJ1ZmZlcicsICdiYXIySW5kZXRlcm1pbmF0ZScsICdiYXIyQnVmZmVyJ10pO1xuZXhwb3J0IGRlZmF1bHQgbGluZWFyUHJvZ3Jlc3NDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInZhbHVlXCIsIFwidmFsdWVCdWZmZXJcIiwgXCJ2YXJpYW50XCJdO1xubGV0IF8gPSB0ID0+IHQsXG4gIF90LFxuICBfdDIsXG4gIF90MyxcbiAgX3Q0LFxuICBfdDUsXG4gIF90NjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzIH0gZnJvbSAnQG11aS9iYXNlJztcbmltcG9ydCB7IGtleWZyYW1lcywgY3NzLCBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9saW5lYXJQcm9ncmVzc0NsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IFRSQU5TSVRJT05fRFVSQVRJT04gPSA0OyAvLyBzZWNvbmRzXG5jb25zdCBpbmRldGVybWluYXRlMUtleWZyYW1lID0ga2V5ZnJhbWVzKF90IHx8IChfdCA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMzUlO1xuICAgIHJpZ2h0OiAxMDAlO1xuICB9XG5cbiAgNjAlIHtcbiAgICBsZWZ0OiAxMDAlO1xuICAgIHJpZ2h0OiAtOTAlO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTAwJTtcbiAgICByaWdodDogLTkwJTtcbiAgfVxuYCkpO1xuY29uc3QgaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBsZWZ0OiAtMjAwJTtcbiAgICByaWdodDogMTAwJTtcbiAgfVxuXG4gIDYwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5cbiAgMTAwJSB7XG4gICAgbGVmdDogMTA3JTtcbiAgICByaWdodDogLTglO1xuICB9XG5gKSk7XG5jb25zdCBidWZmZXJLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDMgfHwgKF90MyA9IF9gXG4gIDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAgLTIzcHg7XG4gIH1cblxuICA2MCUge1xuICAgIG9wYWNpdHk6IDA7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAtMjNweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTIwMHB4IC0yM3B4O1xuICB9XG5gKSk7XG5jb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9IG93bmVyU3RhdGUgPT4ge1xuICBjb25zdCB7XG4gICAgY2xhc3NlcyxcbiAgICB2YXJpYW50LFxuICAgIGNvbG9yXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBgY29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHZhcmlhbnRdLFxuICAgIGRhc2hlZDogWydkYXNoZWQnLCBgZGFzaGVkQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWBdLFxuICAgIGJhcjE6IFsnYmFyJywgYGJhckNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCAodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpICYmICdiYXIxSW5kZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgJ2JhcjFEZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdidWZmZXInICYmICdiYXIxQnVmZmVyJ10sXG4gICAgYmFyMjogWydiYXInLCB2YXJpYW50ICE9PSAnYnVmZmVyJyAmJiBgYmFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsIHZhcmlhbnQgPT09ICdidWZmZXInICYmIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgKHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAncXVlcnknKSAmJiAnYmFyMkluZGV0ZXJtaW5hdGUnLCB2YXJpYW50ID09PSAnYnVmZmVyJyAmJiAnYmFyMkJ1ZmZlciddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmNvbnN0IGdldENvbG9yU2hhZGUgPSAodGhlbWUsIGNvbG9yKSA9PiB7XG4gIGlmIChjb2xvciA9PT0gJ2luaGVyaXQnKSB7XG4gICAgcmV0dXJuICdjdXJyZW50Q29sb3InO1xuICB9XG4gIGlmICh0aGVtZS52YXJzKSB7XG4gICAgcmV0dXJuIHRoZW1lLnZhcnMucGFsZXR0ZS5MaW5lYXJQcm9ncmVzc1tgJHtjb2xvcn1CZ2BdO1xuICB9XG4gIHJldHVybiB0aGVtZS5wYWxldHRlLm1vZGUgPT09ICdsaWdodCcgPyBsaWdodGVuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNjIpIDogZGFya2VuKHRoZW1lLnBhbGV0dGVbY29sb3JdLm1haW4sIDAuNSk7XG59O1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2Bjb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICBkaXNwbGF5OiAnYmxvY2snLFxuICBoZWlnaHQ6IDQsXG4gIHpJbmRleDogMCxcbiAgLy8gRml4IFNhZmFyaSdzIGJ1ZyBkdXJpbmcgY29tcG9zaXRpb24gb2YgZGlmZmVyZW50IHBhaW50LlxuICAnQG1lZGlhIHByaW50Jzoge1xuICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gIH0sXG4gIGJhY2tncm91bmRDb2xvcjogZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvcilcbn0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiBvd25lclN0YXRlLnZhcmlhbnQgIT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAnbm9uZScsXG4gICcmOjpiZWZvcmUnOiB7XG4gICAgY29udGVudDogJ1wiXCInLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IDAuM1xuICB9XG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScgJiYge1xuICB0cmFuc2Zvcm06ICdyb3RhdGUoMTgwZGVnKSdcbn0pKTtcbmNvbnN0IExpbmVhclByb2dyZXNzRGFzaGVkID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnRGFzaGVkJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5kYXNoZWQsIHN0eWxlc1tgZGFzaGVkQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF1dO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4ge1xuICBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKTtcbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBtYXJnaW5Ub3A6IDAsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICAgIG9wYWNpdHk6IDAuM1xuICB9LCB7XG4gICAgYmFja2dyb3VuZEltYWdlOiBgcmFkaWFsLWdyYWRpZW50KCR7YmFja2dyb3VuZENvbG9yfSAwJSwgJHtiYWNrZ3JvdW5kQ29sb3J9IDE2JSwgdHJhbnNwYXJlbnQgNDIlKWAsXG4gICAgYmFja2dyb3VuZFNpemU6ICcxMHB4IDEwcHgnLFxuICAgIGJhY2tncm91bmRQb3NpdGlvbjogJzAgLTIzcHgnXG4gIH0pO1xufSwgY3NzKF90NCB8fCAoX3Q0ID0gX2BcbiAgICBhbmltYXRpb246ICR7MH0gM3MgaW5maW5pdGUgbGluZWFyO1xuICBgKSwgYnVmZmVyS2V5ZnJhbWUpKTtcbmNvbnN0IExpbmVhclByb2dyZXNzQmFyMSA9IHN0eWxlZCgnc3BhbicsIHtcbiAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJyxcbiAgc2xvdDogJ0JhcjEnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmJhciwgc3R5bGVzW2BiYXJDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXSwgKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgc3R5bGVzLmJhcjFJbmRldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYgc3R5bGVzLmJhcjFEZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiBzdHlsZXMuYmFyMUJ1ZmZlcl07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzIGxpbmVhcicsXG4gIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnLFxuICBiYWNrZ3JvdW5kQ29sb3I6IG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyA/ICdjdXJyZW50Q29sb3InIDogKHRoZW1lLnZhcnMgfHwgdGhlbWUpLnBhbGV0dGVbb3duZXJTdGF0ZS5jb2xvcl0ubWFpblxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnICYmIHtcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIHpJbmRleDogMSxcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAuJHtUUkFOU0lUSU9OX0RVUkFUSU9OfXMgbGluZWFyYFxufSksICh7XG4gIG93bmVyU3RhdGVcbn0pID0+IChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIGNzcyhfdDUgfHwgKF90NSA9IF9gXG4gICAgICB3aWR0aDogYXV0bztcbiAgICAgIGFuaW1hdGlvbjogJHswfSAyLjFzIGN1YmljLWJlemllcigwLjY1LCAwLjgxNSwgMC43MzUsIDAuMzk1KSBpbmZpbml0ZTtcbiAgICBgKSwgaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSkpO1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NCYXIyID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnQmFyMicsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuYmFyLCBzdHlsZXNbYGJhckNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBzdHlsZXMuYmFyMkluZGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgc3R5bGVzLmJhcjJCdWZmZXJdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICB3aWR0aDogJzEwMCUnLFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgbGVmdDogMCxcbiAgYm90dG9tOiAwLFxuICB0b3A6IDAsXG4gIHRyYW5zaXRpb246ICd0cmFuc2Zvcm0gMC4ycyBsaW5lYXInLFxuICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0J1xufSwgb3duZXJTdGF0ZS52YXJpYW50ICE9PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnID8gJ2N1cnJlbnRDb2xvcicgOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59LCBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgJiYge1xuICBvcGFjaXR5OiAwLjNcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpLFxuICB0cmFuc2l0aW9uOiBgdHJhbnNmb3JtIC4ke1RSQU5TSVRJT05fRFVSQVRJT059cyBsaW5lYXJgXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgY3NzKF90NiB8fCAoX3Q2ID0gX2BcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgYW5pbWF0aW9uOiAkezB9IDIuMXMgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSAxLjE1cyBpbmZpbml0ZTtcbiAgICBgKSwgaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSkpO1xuXG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cbmNvbnN0IExpbmVhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluZWFyUHJvZ3Jlc3MoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aUxpbmVhclByb2dyZXNzJ1xuICB9KTtcbiAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSAncHJpbWFyeScsXG4gICAgICB2YWx1ZSxcbiAgICAgIHZhbHVlQnVmZmVyLFxuICAgICAgdmFyaWFudCA9ICdpbmRldGVybWluYXRlJ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgY29sb3IsXG4gICAgdmFyaWFudFxuICB9KTtcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHt9O1xuICBjb25zdCBpbmxpbmVTdHlsZXMgPSB7XG4gICAgYmFyMToge30sXG4gICAgYmFyMjoge31cbiAgfTtcbiAgaWYgKHZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ2J1ZmZlcicpIHtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW1pbiddID0gMDtcbiAgICAgIHJvb3RQcm9wc1snYXJpYS12YWx1ZW1heCddID0gMTAwO1xuICAgICAgbGV0IHRyYW5zZm9ybSA9IHZhbHVlIC0gMTAwO1xuICAgICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gLXRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlubGluZVN0eWxlcy5iYXIxLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dHJhbnNmb3JtfSUpYDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogWW91IG5lZWQgdG8gcHJvdmlkZSBhIHZhbHVlIHByb3AgJyArICd3aGVuIHVzaW5nIHRoZSBkZXRlcm1pbmF0ZSBvciBidWZmZXIgdmFyaWFudCBvZiBMaW5lYXJQcm9ncmVzcyAuJyk7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID09PSAnYnVmZmVyJykge1xuICAgIGlmICh2YWx1ZUJ1ZmZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdHJhbnNmb3JtID0gKHZhbHVlQnVmZmVyIHx8IDApIC0gMTAwO1xuICAgICAgaWYgKHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgdHJhbnNmb3JtID0gLXRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlubGluZVN0eWxlcy5iYXIyLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7dHJhbnNmb3JtfSUpYDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogWW91IG5lZWQgdG8gcHJvdmlkZSBhIHZhbHVlQnVmZmVyIHByb3AgJyArICd3aGVuIHVzaW5nIHRoZSBidWZmZXIgdmFyaWFudCBvZiBMaW5lYXJQcm9ncmVzcy4nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4cyhMaW5lYXJQcm9ncmVzc1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiXG4gIH0sIHJvb3RQcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgY2hpbGRyZW46IFt2YXJpYW50ID09PSAnYnVmZmVyJyA/IC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzRGFzaGVkLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuZGFzaGVkLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZVxuICAgIH0pIDogbnVsbCwgLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NCYXIxLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzZXMuYmFyMSxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICBzdHlsZTogaW5saW5lU3R5bGVzLmJhcjFcbiAgICB9KSwgdmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyA/IG51bGwgOiAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0JhcjIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5iYXIyLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHN0eWxlOiBpbmxpbmVTdHlsZXMuYmFyMlxuICAgIH0pXVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpbmVhclByb2dyZXNzLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSXQgc3VwcG9ydHMgYm90aCBkZWZhdWx0IGFuZCBjdXN0b20gdGhlbWUgY29sb3JzLCB3aGljaCBjYW4gYmUgYWRkZWQgYXMgc2hvd24gaW4gdGhlXG4gICAqIFtwYWxldHRlIGN1c3RvbWl6YXRpb24gZ3VpZGVdKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9jdXN0b21pemF0aW9uL3BhbGV0dGUvI2FkZGluZy1uZXctY29sb3JzKS5cbiAgICogQGRlZmF1bHQgJ3ByaW1hcnknXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgc3lzdGVtIHByb3AgdGhhdCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHByb2dyZXNzIGluZGljYXRvciBmb3IgdGhlIGRldGVybWluYXRlIGFuZCBidWZmZXIgdmFyaWFudHMuXG4gICAqIFZhbHVlIGJldHdlZW4gMCBhbmQgMTAwLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgZm9yIHRoZSBidWZmZXIgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZUJ1ZmZlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogVXNlIGluZGV0ZXJtaW5hdGUgb3IgcXVlcnkgd2hlbiB0aGVyZSBpcyBubyBwcm9ncmVzcyB2YWx1ZS5cbiAgICogQGRlZmF1bHQgJ2luZGV0ZXJtaW5hdGUnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydidWZmZXInLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdxdWVyeSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IExpbmVhclByb2dyZXNzOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lU3lzdGVtIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZVN5c3RlbShkZWZhdWx0VGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyhzbG90KSB7XG4gIHJldHVybiBnZW5lcmF0ZVV0aWxpdHlDbGFzcygnTXVpVHlwb2dyYXBoeScsIHNsb3QpO1xufVxuY29uc3QgdHlwb2dyYXBoeUNsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlUeXBvZ3JhcGh5JywgWydyb290JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnaW5oZXJpdCcsICdidXR0b24nLCAnY2FwdGlvbicsICdvdmVybGluZScsICdhbGlnbkxlZnQnLCAnYWxpZ25SaWdodCcsICdhbGlnbkNlbnRlcicsICdhbGlnbkp1c3RpZnknLCAnbm9XcmFwJywgJ2d1dHRlckJvdHRvbScsICdwYXJhZ3JhcGgnXSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5Q2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYWxpZ25cIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9leHRlbmRTeFByb3AgYXMgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICcuLi9zdHlsZXMvc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcyB9IGZyb20gJy4vdHlwb2dyYXBoeUNsYXNzZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhbGlnbixcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIGNsYXNzZXNcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIHZhcmlhbnQsIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBgYWxpZ24ke2NhcGl0YWxpemUoYWxpZ24pfWAsIGd1dHRlckJvdHRvbSAmJiAnZ3V0dGVyQm90dG9tJywgbm9XcmFwICYmICdub1dyYXAnLCBwYXJhZ3JhcGggJiYgJ3BhcmFncmFwaCddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0VHlwb2dyYXBoeVV0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuZXhwb3J0IGNvbnN0IFR5cG9ncmFwaHlSb290ID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBvd25lclN0YXRlLnZhcmlhbnQgJiYgc3R5bGVzW293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiBzdHlsZXNbYGFsaWduJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuYWxpZ24pfWBdLCBvd25lclN0YXRlLm5vV3JhcCAmJiBzdHlsZXMubm9XcmFwLCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiBzdHlsZXMuZ3V0dGVyQm90dG9tLCBvd25lclN0YXRlLnBhcmFncmFwaCAmJiBzdHlsZXMucGFyYWdyYXBoXTtcbiAgfVxufSkoKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IF9leHRlbmRzKHtcbiAgbWFyZ2luOiAwXG59LCBvd25lclN0YXRlLnZhcmlhbnQgJiYgdGhlbWUudHlwb2dyYXBoeVtvd25lclN0YXRlLnZhcmlhbnRdLCBvd25lclN0YXRlLmFsaWduICE9PSAnaW5oZXJpdCcgJiYge1xuICB0ZXh0QWxpZ246IG93bmVyU3RhdGUuYWxpZ25cbn0sIG93bmVyU3RhdGUubm9XcmFwICYmIHtcbiAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gIHdoaXRlU3BhY2U6ICdub3dyYXAnXG59LCBvd25lclN0YXRlLmd1dHRlckJvdHRvbSAmJiB7XG4gIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbn0sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHtcbiAgbWFyZ2luQm90dG9tOiAxNlxufSkpO1xuY29uc3QgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJyxcbiAgaW5oZXJpdDogJ3AnXG59O1xuXG4vLyBUT0RPIHY2OiBkZXByZWNhdGUgdGhlc2UgY29sb3IgdmFsdWVzIGluIHY1LnggYW5kIHJlbW92ZSB0aGUgdHJhbnNmb3JtYXRpb24gaW4gdjZcbmNvbnN0IGNvbG9yVHJhbnNmb3JtYXRpb25zID0ge1xuICBwcmltYXJ5OiAncHJpbWFyeS5tYWluJyxcbiAgdGV4dFByaW1hcnk6ICd0ZXh0LnByaW1hcnknLFxuICBzZWNvbmRhcnk6ICdzZWNvbmRhcnkubWFpbicsXG4gIHRleHRTZWNvbmRhcnk6ICd0ZXh0LnNlY29uZGFyeScsXG4gIGVycm9yOiAnZXJyb3IubWFpbidcbn07XG5jb25zdCB0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzID0gY29sb3IgPT4ge1xuICByZXR1cm4gY29sb3JUcmFuc2Zvcm1hdGlvbnNbY29sb3JdIHx8IGNvbG9yO1xufTtcbmNvbnN0IFR5cG9ncmFwaHkgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUeXBvZ3JhcGh5KGluUHJvcHMsIHJlZikge1xuICBjb25zdCB0aGVtZVByb3BzID0gdXNlVGhlbWVQcm9wcyh7XG4gICAgcHJvcHM6IGluUHJvcHMsXG4gICAgbmFtZTogJ011aVR5cG9ncmFwaHknXG4gIH0pO1xuICBjb25zdCBjb2xvciA9IHRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnModGhlbWVQcm9wcy5jb2xvcik7XG4gIGNvbnN0IHByb3BzID0gZXh0ZW5kU3hQcm9wKF9leHRlbmRzKHt9LCB0aGVtZVByb3BzLCB7XG4gICAgY29sb3JcbiAgfSkpO1xuICBjb25zdCB7XG4gICAgICBhbGlnbiA9ICdpbmhlcml0JyxcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGd1dHRlckJvdHRvbSA9IGZhbHNlLFxuICAgICAgbm9XcmFwID0gZmFsc2UsXG4gICAgICBwYXJhZ3JhcGggPSBmYWxzZSxcbiAgICAgIHZhcmlhbnQgPSAnYm9keTEnLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBkZWZhdWx0VmFyaWFudE1hcHBpbmdcbiAgICB9ID0gcHJvcHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgb3duZXJTdGF0ZSA9IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGFsaWduLFxuICAgIGNvbG9yLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjb21wb25lbnQsXG4gICAgZ3V0dGVyQm90dG9tLFxuICAgIG5vV3JhcCxcbiAgICBwYXJhZ3JhcGgsXG4gICAgdmFyaWFudCxcbiAgICB2YXJpYW50TWFwcGluZ1xuICB9KTtcbiAgY29uc3QgQ29tcG9uZW50ID0gY29tcG9uZW50IHx8IChwYXJhZ3JhcGggPyAncCcgOiB2YXJpYW50TWFwcGluZ1t2YXJpYW50XSB8fCBkZWZhdWx0VmFyaWFudE1hcHBpbmdbdmFyaWFudF0pIHx8ICdzcGFuJztcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVV0aWxpdHlDbGFzc2VzKG93bmVyU3RhdGUpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goVHlwb2dyYXBoeVJvb3QsIF9leHRlbmRzKHtcbiAgICBhczogQ29tcG9uZW50LFxuICAgIHJlZjogcmVmLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAnaW5oZXJpdCdcbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnaW5oZXJpdCcsICdqdXN0aWZ5JywgJ2xlZnQnLCAncmlnaHQnXSksXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ3V0dGVyQm90dG9tOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGVsZW1lbnQgd2lsbCBiZSBhIHBhcmFncmFwaCBlbGVtZW50LlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIHRoZW1lIHR5cG9ncmFwaHkgc3R5bGVzLlxuICAgKiBAZGVmYXVsdCAnYm9keTEnXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvZHkxJywgJ2JvZHkyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2luaGVyaXQnLCAnb3ZlcmxpbmUnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMiddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBtYXBzIHRoZSB2YXJpYW50IHByb3AgdG8gYSByYW5nZSBvZiBkaWZmZXJlbnQgSFRNTCBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqIEBkZWZhdWx0IHtcbiAgICogICBoMTogJ2gxJyxcbiAgICogICBoMjogJ2gyJyxcbiAgICogICBoMzogJ2gzJyxcbiAgICogICBoNDogJ2g0JyxcbiAgICogICBoNTogJ2g1JyxcbiAgICogICBoNjogJ2g2JyxcbiAgICogICBzdWJ0aXRsZTE6ICdoNicsXG4gICAqICAgc3VidGl0bGUyOiAnaDYnLFxuICAgKiAgIGJvZHkxOiAncCcsXG4gICAqICAgYm9keTI6ICdwJyxcbiAgICogICBpbmhlcml0OiAncCcsXG4gICAqIH1cbiAgICovXG4gIHZhcmlhbnRNYXBwaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBUeXBvZ3JhcGh5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTGluZWFyUHJvZ3Jlc3MgZnJvbSAnQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcyc7XG5pbXBvcnQgVHlwb2dyYXBoeSBmcm9tICdAbXVpL21hdGVyaWFsL1R5cG9ncmFwaHknO1xuaW1wb3J0IEJveCBmcm9tICdAbXVpL21hdGVyaWFsL0JveCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExpbmVhclByb2dyZXNzV2l0aExhYmVsIChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxCb3ggc3g9e3sgZGlzcGxheTogJ2ZsZXgnLCBhbGlnbkl0ZW1zOiAnY2VudGVyJyB9fT5cbiAgICAgIDxCb3ggc3g9e3sgd2lkdGg6ICcxMDAlJywgbXI6IDEgfX0+XG4gICAgICAgIDxMaW5lYXJQcm9ncmVzcyB2YXJpYW50PVwiZGV0ZXJtaW5hdGVcIiB7Li4ucHJvcHN9IC8+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3ggc3g9e3sgbWluV2lkdGg6IDM1IH19PlxuICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PVwiYm9keTJcIiBjb2xvcj1cInRleHQuc2Vjb25kYXJ5XCI+XG4gICAgICAgICAge2Ake01hdGgucm91bmQoXG4gICAgICAgICAgcHJvcHMudmFsdWVcbiAgICAgICAgKX0lYH1cbiAgICAgICAgPC9UeXBvZ3JhcGh5PlxuICAgICAgPC9Cb3g+XG4gICAgPC9Cb3g+XG4gICk7XG59XG5cbkxpbmVhclByb2dyZXNzV2l0aExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIGJ1ZmZlciB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9OYXYuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL05hdi5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWQ1IGZyb20gJ2NyeXB0by1qcy9tZDUnO1xuaW1wb3J0ICcuL05hdi5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2ICh7IGRhdGEsIHNldERhdGFTZWxlY3Rpb24sIGRhdGFTZWxlY3Rpb24gfSkge1xuICBmdW5jdGlvbiBkaXNwbGF5X2ZpbGVfbmFtZSAoZmlsZSkge1xuICAgIHJldHVybiBmaWxlLnNwbGl0KCcvJykucG9wKCk7XG4gIH1cblxuICBmdW5jdGlvbiBmaWxlbmFtZV9oYXNoIChmaWxlKSB7XG4gICAgcmV0dXJuIG1kNShmaWxlKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPG5hdj5cbiAgICAgIDx1bD5cbiAgICAgICAge2RhdGEubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e2ZpbGVuYW1lX2hhc2goaXRlbS5maWxlKX0+XG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzc05hbWU9e2RhdGFTZWxlY3Rpb24gPT09IGluZGV4ICYmICdhY3RpdmUnfSBvbkNsaWNrPXsoKSA9PiBzZXREYXRhU2VsZWN0aW9uKGluZGV4KX0+XG4gICAgICAgICAgICAgIHtkaXNwbGF5X2ZpbGVfbmFtZShpdGVtLmZpbGUpfVxuICAgICAgICAgICAgICB7JyAnfVxuICAgICAgICAgICAgICA8c3Ryb25nPlxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICB7TWF0aC5yb3VuZChpdGVtLm91dHB1dC5wZXJjZW50KX1cbiAgICAgICAgICAgICAgICAlKVxuICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICB7aXRlbS5vdXRwdXQudGltZV9yZW1haW5pbmd9XG4gICAgICAgICAgICAgICAgeycgJ31cbiAgICAgICAgICAgICAgICB7aXRlbS5uYW1lICYmIGAtICR7aXRlbS5uYW1lfWB9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PjxlbT57aXRlbS5vdXRwdXQuYWN0aW9ufTwvZW0+PC9kaXY+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICApKX1cbiAgICAgIDwvdWw+XG4gICAgPC9uYXY+XG4gICk7XG59XG5cbk5hdi5wcm9wVHlwZXMgPSB7XG4gIGRhdGE6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgc2V0RGF0YVNlbGVjdGlvbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGF0YVNlbGVjdGlvbjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICcuL0hvbWUuc2Nzcyc7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tICdAbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MnO1xuaW1wb3J0IEJveCBmcm9tICdAbXVpL21hdGVyaWFsL0JveCc7XG5pbXBvcnQgZGF5anMgZnJvbSAnLi4vLi4vZGF5anMnO1xuaW1wb3J0IExpbmVhclByb2dyZXNzV2l0aExhYmVsIGZyb20gJy4uL0xpbmVhclByb2dyZXNzV2l0aExhYmVsL0xpbmVhclByb2dyZXNzV2l0aExhYmVsJztcbi8vIGltcG9ydCBDaXJjdWxhclByb2dyZXNzV2l0aExhYmVsIGZyb20gJy4uL0NpcmN1bGFyUHJvZ3Jlc3NXaXRoTGFiZWwvQ2lyY3VsYXJQcm9ncmVzc1dpdGhMYWJlbCc7XG5pbXBvcnQgTmF2IGZyb20gJy4uL05hdmlnYXRpb24vTmF2JztcblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YSAoc2V0RGF0YSwgc2V0RmlsZUxpc3QsIHNldERpc2tzLCBzZXRVdGlsaXphdGlvbiwgc2V0U3RhdHVzKSB7XG4gIHRyeSB7XG4gICAgY2xlYXJUaW1lb3V0KHdpbmRvdy5kYXRhVGltZW91dCk7XG4gICAgY29uc3QgZCA9IGF3YWl0IGZldGNoKCdhY3RpdmUuanNvbicpLnRoZW4oKHIpID0+IHIuanNvbigpKTtcblxuICAgIHNldERhdGEoZCk7XG5cbiAgICBjb25zdCBmID0gYXdhaXQgZmV0Y2goJ2ZpbGVsaXN0Lmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXRGaWxlTGlzdChmKTtcblxuICAgIGNvbnN0IGRpc2tzID0gYXdhaXQgZmV0Y2goJ2Rpc2suanNvbicpLnRoZW4oKHIpID0+IHIuanNvbigpKTtcblxuICAgIHNldERpc2tzKGRpc2tzKTtcblxuICAgIGNvbnN0IHV0aWxpemF0aW9uID0gYXdhaXQgZmV0Y2goJ3V0aWxpemF0aW9uLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXRVdGlsaXphdGlvbih1dGlsaXphdGlvbik7XG5cbiAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBmZXRjaCgnc3RhdHVzLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXRTdGF0dXMoc3RhdHVzKTtcblxuICAgIHdpbmRvdy5kYXRhVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZ2V0RGF0YSguLi5hcmd1bWVudHMpO1xuICAgIH0sIDEgKiAxMDAwKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdpbmRvdy5kYXRhVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZ2V0RGF0YSguLi5hcmd1bWVudHMpO1xuICAgIH0sIDEgKiAxMDAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlc3RpbWF0ZWRfbG9jYWxfdGltZSAoc2Vjb25kcykge1xuICBjb25zdCBmaW5hbF90aW1lID0gZGF5anMoKS5hZGQoc2Vjb25kcywgJ3NlY29uZHMnKTtcbiAgbGV0IGZtdF9zdHJpbmcgPSAnTU0vREQvWVlZWSBISDptbTpzcyc7XG5cbiAgaWYgKGZpbmFsX3RpbWUuaXNTYW1lKGRheWpzKCksICdkYXknKSkge1xuICAgIGZtdF9zdHJpbmcgPSAnSEg6bW06c3MnO1xuICB9XG4gIHJldHVybiBmaW5hbF90aW1lLmZvcm1hdChmbXRfc3RyaW5nKTtcbn1cblxuZnVuY3Rpb24gaHVtYW5fc2l6ZSAoc2l6ZSkge1xuICBjb25zdCBvcmRlciA9IFsnZ2InLCAnbWInLCAna2InXTtcbiAgY29uc3Qgb3V0cHV0X3NpemUgPSBvcmRlci5maW5kKChvKSA9PiBzaXplW29dID49IDEpO1xuICBjb25zdCByb3VuZGVkX3NpemUgPSBNYXRoLnJvdW5kKHNpemVbb3V0cHV0X3NpemVdICogMTAwKSAvIDEwMDtcblxuICByZXR1cm4gcm91bmRlZF9zaXplICsgb3V0cHV0X3NpemU7XG59XG5cbmZ1bmN0aW9uIG1ha2VfaHVtYW5fcmVhZGFibGUgKHNpemUpIHtcbiAgbGV0IGNhbGNfc2l6ZSA9ICtzaXplO1xuICBjb25zdCB1bml0cyA9IFsna2InLCAnbWInLCAnZ2InXTtcbiAgbGV0IHVuaXQgPSAwO1xuXG4gIHdoaWxlIChjYWxjX3NpemUgPiAxMDI0KSB7XG4gICAgY2FsY19zaXplIC89IDEwMjQ7XG4gICAgdW5pdCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIGAke01hdGgucm91bmQoY2FsY19zaXplICogMTAwKSAvIDEwMH0ke3VuaXRzW3VuaXRdfWA7XG59XG5cbmZ1bmN0aW9uIEhvbWUgKCkge1xuICBjb25zdCBbZGF0YVNvdXJjZSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtmaWxlbGlzdCwgc2V0RmlsZUxpc3RdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbZGlza3MsIHNldERpc2tzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3V0aWxpemF0aW9uLCBzZXRVdGlsaXphdGlvbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzdGF0dXMsIHNldFN0YXR1c10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkYXRhU2VsZWN0aW9uLCBzZXREYXRhU2VsZWN0aW9uXSA9IHVzZVN0YXRlKDApO1xuXG4gIGNvbnN0IG12cCA9IFtkYXRhU291cmNlLCBmaWxlbGlzdCwgZGlza3MsIHV0aWxpemF0aW9uLCBzdGF0dXNdLmZpbHRlcigoZCkgPT4gIWQpO1xuXG4gIC8vIGludGVyZmFjZSB3YWl0cyBmb3IgYWxsIGRhdGEgdG8gYmUgbG9hZGVkXG4gIGlmIChtdnAubGVuZ3RoID4gMCkge1xuICAgIGdldERhdGEoc2V0RGF0YSwgc2V0RmlsZUxpc3QsIHNldERpc2tzLCBzZXRVdGlsaXphdGlvbiwgc2V0U3RhdHVzKTtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveCBzeD17eyBkaXNwbGF5OiAnZmxleCcgfX0+XG4gICAgICAgIDxDaXJjdWxhclByb2dyZXNzIC8+XG4gICAgICA8L0JveD5cbiAgICApO1xuICB9XG5cbiAgLy8gaWYgKGRhdGFTb3VyY2UubGVuZ3RoID09PSAwKSB7XG4gIC8vICAgcmV0dXJuIChcbiAgLy8gICAgIDxCb3ggc3g9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAvLyAgICAgICA8Q2lyY3VsYXJQcm9ncmVzcyAvPlxuICAvLyAgICAgPC9Cb3g+XG4gIC8vICAgKTtcbiAgLy8gfVxuXG4gIGNvbnN0IGRhdGEgPSBkYXRhU291cmNlW2RhdGFTZWxlY3Rpb25dO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgaW1hZ2VcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3ZlcmxpbmVcIiAvPlxuICAgICAgPGgxPk9wdGltaXplZCB2aWRlbyBlbmNvZGluZzwvaDE+XG4gICAgICB7ZGF0YVNvdXJjZSAmJiBkYXRhU291cmNlLmxlbmd0aCA+IDAgJiYgPE5hdiBkYXRhPXtkYXRhU291cmNlfSBkYXRhU2VsZWN0aW9uPXtkYXRhU2VsZWN0aW9ufSBzZXREYXRhU2VsZWN0aW9uPXtzZXREYXRhU2VsZWN0aW9ufSAvPn1cbiAgICAgIHtkYXRhICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgY2VudGVyXCI+XG4gICAgICAgICAgPHN0cm9uZz57ZGF0YS5maWxlfTwvc3Ryb25nPlxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAgKFxuICAgICAgICAgIHtkYXRhLnZpZGVvX3N0cmVhbS5jb2RlY19uYW1lfVxuICAgICAgICAgIC9cbiAgICAgICAgICB7ZGF0YS5hdWRpb19zdHJlYW1zWzBdLmNvZGVjX25hbWV9XG4gICAgICAgICAgKVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPkNQVTwvc3Ryb25nPlxuICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17dXRpbGl6YXRpb24uY3B1fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPk1lbW9yeTwvc3Ryb25nPlxuICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17dXRpbGl6YXRpb24ubWVtb3J5fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAge2RhdGEgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5FbGFwc2VkPC9zdHJvbmc+XG4gICAgICAgICAgICB7ZGF0YS5vdXRwdXQucnVuX3RpbWV9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+VGltZWNvZGU8L3N0cm9uZz5cbiAgICAgICAgICAgIHtkYXRhLm91dHB1dC50aW1lbWFya31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5Qcm9maWxlPC9zdHJvbmc+XG4gICAgICAgICAgICB7ZGF0YS5uYW1lfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkF1ZGlvIExhbmd1YWdlczwvc3Ryb25nPlxuICAgICAgICAgICAge2RhdGEuYXVkaW9fc3RyZWFtcy5tYXAoKHN0cmVhbSkgPT4gc3RyZWFtLnRhZ3M/Lmxhbmd1YWdlKS5yZWR1Y2UoKGEsIGMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFhLmluY2x1ZGVzKGMpKSB7XG4gICAgICAgICAgICAgICAgYS5wdXNoKGMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSwgW10pLmpvaW4oJywgJyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIHtkYXRhICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+RXhwZWN0ZWQgY29tcGxldGVkIHRpbWU8L3N0cm9uZz5cbiAgICAgICAgICAgIHtlc3RpbWF0ZWRfbG9jYWxfdGltZShkYXRhLm91dHB1dC5lc3RfY29tcGxldGVkX3NlY29uZHMpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkVUQTwvc3Ryb25nPlxuICAgICAgICAgICAge2RhdGEub3V0cHV0LnRpbWVfcmVtYWluaW5nfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPkZpbGVzIFJlbWFpbmluZzwvc3Ryb25nPlxuICAgICAgICAgIHtzdGF0dXMudW5wcm9jZXNzZWRfZmlsZXMudG9Mb2NhbGVTdHJpbmcoKX1cbiAgICAgICAgICB7LyogPENpcmN1bGFyUHJvZ3Jlc3NXaXRoTGFiZWwgbnVtZXJhdG9yPXtudW1lcmF0b3J9IGRlbm9taW5hdG9yPXtkZW5vbWluYXRvcn0gLz4gKi99XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7ZGF0YSAmJiAoXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+RmlsZSBQcm9ncmVzczwvc3Ryb25nPlxuICAgICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtkYXRhLm91dHB1dC5wZXJjZW50fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPkxpYnJhcnkgQ292ZXJhZ2U8L3N0cm9uZz5cbiAgICAgICAgICA8TGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwgdmFsdWU9e01hdGgucm91bmQoc3RhdHVzLmxpYnJhcnlfY292ZXJhZ2UpfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7ZGF0YSAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPk9yaWdpbmFsIFNpemU8L3N0cm9uZz5cbiAgICAgICAgICAgIHtodW1hbl9zaXplKGRhdGEub3V0cHV0LnNpemUub3JpZ2luYWwpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgICA8c3Ryb25nPkN1cnJlbnQgU2l6ZTwvc3Ryb25nPlxuICAgICAgICAgICAge2h1bWFuX3NpemUoZGF0YS5vdXRwdXQuc2l6ZS5wcm9ncmVzcyl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICAgIDxzdHJvbmc+RXN0LiBGaW5hbCBTaXplPC9zdHJvbmc+XG4gICAgICAgICAgICA8ZW0+XG4gICAgICAgICAgICAgIHtgJHtcbiAgICAgICAgICAgICAgTWF0aC5yb3VuZCgrZGF0YS5vdXRwdXQuc2l6ZS5lc3RpbWF0ZWRfZmluYWwuY2hhbmdlLnJlcGxhY2UoJyUnLCAnJykgKiAxMDApIC8gMTAwXG4gICAgICAgICAgICB9JWB9XG4gICAgICAgICAgICA8L2VtPlxuICAgICAgICAgICAge2h1bWFuX3NpemUoZGF0YS5vdXRwdXQuc2l6ZS5lc3RpbWF0ZWRfZmluYWwpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG5cbiAgICAgIHtkYXRhICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgY2VudGVyXCI+XG4gICAgICAgICAgPHN0cm9uZz5Db21tYW5kPC9zdHJvbmc+XG4gICAgICAgICAge2RhdGEuZmZtcGVnX2NtZH1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggcXVhcnRlciBkaXNrc1wiPlxuICAgICAgICB7IWRpc2tzPy5tYXAgJiYgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgY2VudGVyXCI+TG9hZGluZy4uLjwvZGl2Pn1cbiAgICAgICAge2Rpc2tzPy5tYXAgJiZcbiAgICAgICAgICBkaXNrcz8ubWFwKChkaXNrKSA9PiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Wyd3aWRnZXQnLCBkaXNrLmFib3ZlX3RocmVzaG9sZCAmJiAnZGFuZ2VyJ10uZmlsdGVyKChjKSA9PiBjKS5qb2luKCcgJyl9PlxuICAgICAgICAgICAgICA8c3Ryb25nPntkaXNrLm1vdW50ZWR9PC9zdHJvbmc+XG4gICAgICAgICAgICAgIDxlbT57W2Rpc2sudXNlZCwgJ29mJywgZGlzay5zaXplXS5qb2luKCcgJyl9PC9lbT5cbiAgICAgICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtkaXNrLnBlcmNlbnRfdXNlZH0gY2xhc3NOYW1lPXtbZGlzay5hYm92ZV90aHJlc2hvbGQgJiYgJ2RhbmdlciddLmZpbHRlcigoYykgPT4gYykuam9pbignICcpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSl9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgbGlzdFwiPlxuICAgICAgICB7IWZpbGVsaXN0Py5tYXAgJiYgPGVtPkxvYWRpbmcuLi48L2VtPn1cbiAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICBOZXh0XG4gICAgICAgICAgeycgJ31cbiAgICAgICAgICB7ZmlsZWxpc3QubGVuZ3RoLnRvTG9jYWxlU3RyaW5nKCl9XG4gICAgICAgICAgeycgJ31cbiAgICAgICAgICBxdWV1ZWQgZmlsZXNcbiAgICAgICAgPC9zdHJvbmc+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3ZlcmZsb3dcIj5cbiAgICAgICAgICB7ZmlsZWxpc3Q/Lm1hcCAmJiAoXG4gICAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+IzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlByaW9yaXR5PC90aD5cbiAgICAgICAgICAgICAgICA8dGg+UGF0aDwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlNpemU8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5SZXNvbHV0aW9uPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+Q29kZWM8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5FbmNvZGUgdmVyc2lvbjwvdGg+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIHtmaWxlbGlzdC5tYXAoKGYsIGlkeCkgPT4gKFxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgIDx0ZD57aWR4ICsgMX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPntmLnByaW9yaXR5fTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e2YucGF0aH08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPnttYWtlX2h1bWFuX3JlYWRhYmxlKGYuc2l6ZSl9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5yZXNvbHV0aW9ufTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e2YuY29kZWN9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5lbmNvZGVfdmVyc2lvbn08L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1uYW1lZC1hcy1kZWZhdWx0XG5pbXBvcnQgSG9tZSBmcm9tICcuL2NvbXBvbmVudHMvSG9tZS9Ib21lJztcblxuY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtZmlsZW5hbWUtZXh0ZW5zaW9uXG5yb290LnJlbmRlcig8SG9tZSAvPik7XG4iXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsIkNyeXB0b0pTIiwibW9kdWxlIiwiZXhwb3J0cyIsIk1hdGgiLCJ1bmRlZmluZWQiLCJjcnlwdG8iLCJ3aW5kb3ciLCJzZWxmIiwiZ2xvYmFsVGhpcyIsIm1zQ3J5cHRvIiwiZyIsImVyciIsImNyeXB0b1NlY3VyZVJhbmRvbUludCIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQzMkFycmF5IiwicmFuZG9tQnl0ZXMiLCJyZWFkSW50MzJMRSIsIkVycm9yIiwiY3JlYXRlIiwiT2JqZWN0IiwiRiIsIm9iaiIsInN1YnR5cGUiLCJwcm90b3R5cGUiLCJDIiwiQ19saWIiLCJsaWIiLCJCYXNlIiwiZXh0ZW5kIiwib3ZlcnJpZGVzIiwidGhpcyIsIm1peEluIiwiaGFzT3duUHJvcGVydHkiLCJpbml0IiwiJHN1cGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpbnN0YW5jZSIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eU5hbWUiLCJ0b1N0cmluZyIsImNsb25lIiwiV29yZEFycmF5Iiwid29yZHMiLCJzaWdCeXRlcyIsImxlbmd0aCIsImVuY29kZXIiLCJIZXgiLCJzdHJpbmdpZnkiLCJjb25jYXQiLCJ3b3JkQXJyYXkiLCJ0aGlzV29yZHMiLCJ0aGF0V29yZHMiLCJ0aGlzU2lnQnl0ZXMiLCJ0aGF0U2lnQnl0ZXMiLCJjbGFtcCIsImkiLCJ0aGF0Qnl0ZSIsImoiLCJjZWlsIiwiY2FsbCIsInNsaWNlIiwicmFuZG9tIiwibkJ5dGVzIiwicHVzaCIsIkNfZW5jIiwiZW5jIiwiaGV4Q2hhcnMiLCJiaXRlIiwiam9pbiIsInBhcnNlIiwiaGV4U3RyIiwiaGV4U3RyTGVuZ3RoIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJMYXRpbjEiLCJsYXRpbjFDaGFycyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImxhdGluMVN0ciIsImxhdGluMVN0ckxlbmd0aCIsImNoYXJDb2RlQXQiLCJVdGY4IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwiZSIsInV0ZjhTdHIiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0iLCJyZXNldCIsIl9kYXRhIiwiX25EYXRhQnl0ZXMiLCJfYXBwZW5kIiwiZGF0YSIsIl9wcm9jZXNzIiwiZG9GbHVzaCIsInByb2Nlc3NlZFdvcmRzIiwiZGF0YVdvcmRzIiwiZGF0YVNpZ0J5dGVzIiwiYmxvY2tTaXplIiwibkJsb2Nrc1JlYWR5IiwibldvcmRzUmVhZHkiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm5CeXRlc1JlYWR5IiwibWluIiwib2Zmc2V0IiwiX2RvUHJvY2Vzc0Jsb2NrIiwic3BsaWNlIiwiQ19hbGdvIiwiSGFzaGVyIiwiY2ZnIiwiX2RvUmVzZXQiLCJ1cGRhdGUiLCJtZXNzYWdlVXBkYXRlIiwiZmluYWxpemUiLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJoYXNoZXIiLCJtZXNzYWdlIiwiX2NyZWF0ZUhtYWNIZWxwZXIiLCJrZXkiLCJITUFDIiwiYWxnbyIsIlQiLCJhYnMiLCJzaW4iLCJNRDUiLCJfaGFzaCIsIk0iLCJvZmZzZXRfaSIsIk1fb2Zmc2V0X2kiLCJIIiwiTV9vZmZzZXRfMCIsIk1fb2Zmc2V0XzEiLCJNX29mZnNldF8yIiwiTV9vZmZzZXRfMyIsIk1fb2Zmc2V0XzQiLCJNX29mZnNldF81IiwiTV9vZmZzZXRfNiIsIk1fb2Zmc2V0XzciLCJNX29mZnNldF84IiwiTV9vZmZzZXRfOSIsIk1fb2Zmc2V0XzEwIiwiTV9vZmZzZXRfMTEiLCJNX29mZnNldF8xMiIsIk1fb2Zmc2V0XzEzIiwiTV9vZmZzZXRfMTQiLCJNX29mZnNldF8xNSIsImEiLCJiIiwiYyIsImQiLCJGRiIsIkdHIiwiSEgiLCJJSSIsIm5CaXRzVG90YWwiLCJuQml0c0xlZnQiLCJuQml0c1RvdGFsSCIsImZsb29yIiwibkJpdHNUb3RhbEwiLCJoYXNoIiwiSF9pIiwieCIsInMiLCJ0IiwibiIsIkhtYWNNRDUiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImlkIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJKU09OIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInIiLCJ1IiwibyIsImYiLCJoIiwibCIsIiQiLCJ5IiwibmFtZSIsIndlZWtkYXlzIiwic3BsaXQiLCJtb250aHMiLCJvcmRpbmFsIiwibSIsIkFycmF5IiwidiIsInoiLCJ1dGNPZmZzZXQiLCJkYXRlIiwieWVhciIsIm1vbnRoIiwiYWRkIiwicCIsInciLCJEIiwibXMiLCJRIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiUyIsIl8iLCJPIiwiYXJncyIsImxvY2FsZSIsIiRMIiwidXRjIiwiJHUiLCIkeCIsIiRvZmZzZXQiLCIkZCIsIkRhdGUiLCJOYU4iLCJ0ZXN0IiwibWF0Y2giLCJzdWJzdHJpbmciLCJVVEMiLCIkeSIsImdldEZ1bGxZZWFyIiwiJE0iLCJnZXRNb250aCIsIiREIiwiZ2V0RGF0ZSIsIiRXIiwiZ2V0RGF5IiwiJEgiLCJnZXRIb3VycyIsIiRtIiwiZ2V0TWludXRlcyIsIiRzIiwiZ2V0U2Vjb25kcyIsIiRtcyIsImdldE1pbGxpc2Vjb25kcyIsIiR1dGlscyIsImlzVmFsaWQiLCJpc1NhbWUiLCJzdGFydE9mIiwiZW5kT2YiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCIkZyIsInNldCIsInVuaXgiLCJ2YWx1ZU9mIiwiZ2V0VGltZSIsInRvRGF0ZSIsIiRsb2NhbGUiLCJ3ZWVrU3RhcnQiLCIkc2V0IiwiZGF5c0luTW9udGgiLCJnZXQiLCJOdW1iZXIiLCJyb3VuZCIsInN1YnRyYWN0IiwiZm9ybWF0IiwiaW52YWxpZERhdGUiLCJtZXJpZGllbSIsIm1vbnRoc1Nob3J0Iiwid2Vla2RheXNNaW4iLCJ3ZWVrZGF5c1Nob3J0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkaWZmIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJ0b1VUQ1N0cmluZyIsImZvckVhY2giLCIkaSIsImlzRGF5anMiLCJlbiIsIkxzIiwiaXNTYW1lT3JBZnRlciIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJ0aW1lWm9uZU5hbWUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJob3VyMTIiLCJ0aW1lWm9uZSIsImZvcm1hdFRvUGFydHMiLCJ0eXBlIiwidmFsdWUiLCJ0eiIsInRvTG9jYWxlU3RyaW5nIiwiJHRpbWV6b25lIiwib2Zmc2V0TmFtZSIsImd1ZXNzIiwiZmluZCIsInJlc29sdmVkT3B0aW9ucyIsInNldERlZmF1bHQiLCJsb2NhbCIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDRGF5IiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsIiRsb2NhbE9mZnNldCIsImlzVVRDIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImtleXMiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJTeW1ib2wiLCJmb3IiLCJxIiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJpZ2ludCIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiYmEiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImlhIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5Iiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInFhIiwicmEiLCJ0b1VwcGVyQ2FzZSIsInNhIiwib2EiLCJpc05hTiIsInBhIiwibmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInRhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiaXRlcmF0b3IiLCJKYSIsIkthIiwiYXNzaWduIiwiTGEiLCJzdGFjayIsInRyaW0iLCJNYSIsIk5hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiaW5jbHVkZXMiLCJPYSIsInRhZyIsIlBhIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUWEiLCJSYSIsIlNhIiwibm9kZU5hbWUiLCJVYSIsIl92YWx1ZVRyYWNrZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVGEiLCJWYSIsImNoZWNrZWQiLCJXYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWGEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIllhIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlphIiwiJGEiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImRiIiwiaXNBcnJheSIsImViIiwib3B0aW9ucyIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJmYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJnYiIsImhiIiwiaWIiLCJ0ZXh0Q29udGVudCIsImpiIiwia2IiLCJsYiIsIm1iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsIm9iIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJhc3BlY3RSYXRpbyIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInBiIiwicWIiLCJyYiIsInN0eWxlIiwiaW5kZXhPZiIsInNldFByb3BlcnR5IiwiY2hhckF0Iiwic2IiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ0YiIsInViIiwiaXMiLCJ2YiIsIndiIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJzdGF0ZU5vZGUiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTWIiLCJvbkVycm9yIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVWIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIlZiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJXYiIsIlliIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsIlhiIiwiWmIiLCIkYiIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJhYyIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsImNjIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiQiIsInVuc3RhYmxlX25vdyIsImRjIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJlYyIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiZmMiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImdjIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJqYyIsImtjIiwibmMiLCJjbHozMiIsIm9jIiwicGMiLCJsb2ciLCJMTjIiLCJxYyIsInJjIiwic2MiLCJ0YyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJ1YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiZXZlbnRUaW1lcyIsIkJjIiwiQ2MiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiTWFwIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJTYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJVYyIsIlZjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiV2MiLCJYYyIsImRpc3BhdGNoRXZlbnQiLCJzaGlmdCIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImNkIiwiZGQiLCJ0cmFuc2l0aW9uIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJUYyIsInN0b3BQcm9wYWdhdGlvbiIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJvZCIsInBkIiwicWQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ2ZCIsIndkIiwieGQiLCJyZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIm5vdyIsImlzVHJ1c3RlZCIsInNkIiwidGQiLCJ2aWV3IiwiZGV0YWlsIiwidWQiLCJ6ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ5ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJBZCIsIkNkIiwiZGF0YVRyYW5zZmVyIiwiRWQiLCJHZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJIZCIsImNsaXBib2FyZERhdGEiLCJJZCIsIktkIiwiTGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTWQiLCJOZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJPZCIsIlBkIiwiY29kZSIsInJlcGVhdCIsIndoaWNoIiwiUWQiLCJTZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlVkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIldkIiwiWGQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIllkIiwiWmQiLCJhZSIsImRvY3VtZW50TW9kZSIsImJlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwia2UiLCJjb2xvciIsImRhdGV0aW1lIiwiZW1haWwiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwibGUiLCJtZSIsIm5lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJvZSIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwib25pbnB1dCIsInplIiwiZGV0YWNoRXZlbnQiLCJBZSIsIkJlIiwiYXR0YWNoRXZlbnQiLCJDZSIsIkRlIiwiRWUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIm5leHRTaWJsaW5nIiwiS2UiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTGUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTWUiLCJjb250ZW50RWRpdGFibGUiLCJOZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJXZSIsIlhlIiwiWWUiLCJhbmltYXRpb24iLCJaZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJrZiIsImxmIiwibWYiLCJUYiIsImxpc3RlbmVyIiwibmYiLCJoYXMiLCJvZiIsInBmIiwicWYiLCJyZiIsImJpbmQiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIkoiLCJzZiIsInRmIiwicGFyZW50V2luZG93IiwidWYiLCJ2ZiIsIloiLCJ5YSIsImFiIiwiY2EiLCJpZSIsImNoYXIiLCJqZSIsInVuc2hpZnQiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiX19odG1sIiwiRWYiLCJzZXRUaW1lb3V0IiwiRmYiLCJjbGVhclRpbWVvdXQiLCJHZiIsIlByb21pc2UiLCJJZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIkhmIiwiSmYiLCJLZiIsIkxmIiwicHJldmlvdXNTaWJsaW5nIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIkUiLCJHIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImdldENoaWxkQ29udGV4dCIsImJnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwiX2N1cnJlbnRWYWx1ZSIsInJnIiwiY2hpbGRMYW5lcyIsInNnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ0ZyIsInVnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwidmciLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJpbnRlcmxlYXZlZCIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkdnIiwiSGciLCJDb21wb25lbnQiLCJyZWZzIiwiSWciLCJNZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkpnIiwiS2ciLCJMZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJOZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiT2ciLCJzdGF0ZSIsInVwZGF0ZXIiLCJQZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlFnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwiSSIsImZoIiwiZ2giLCJoaCIsImRlbGV0aW9ucyIsImloIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsImpoIiwibW9kZSIsImtoIiwibGgiLCJtaCIsIm1lbW9pemVkUHJvcHMiLCJuaCIsIm9oIiwicGgiLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicWgiLCJyaCIsInNoIiwiaW5kZXgiLCJ0aCIsInVoIiwidmgiLCJpbXBsZW1lbnRhdGlvbiIsIndoIiwieGgiLCJkb25lIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsInRhZ05hbWUiLCJHaCIsIkhoIiwiSWgiLCJLIiwiSmgiLCJyZXZlYWxPcmRlciIsIktoIiwiTGgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIk1oIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIk5oIiwiT2giLCJMIiwiTiIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiYWkiLCJiaSIsImNpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJnZXRTbmFwc2hvdCIsImlpIiwiamkiLCJQIiwia2kiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwibGkiLCJtaSIsIm5pIiwiZGVzdHJveSIsImRlcHMiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJIaSIsIklpIiwiY29uc29sZSIsImVycm9yIiwiVGkiLCJWaSIsIldpIiwiSmkiLCJXZWFrTWFwIiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJjb21wb25lbnREaWRDYXRjaCIsIk9pIiwiY29tcG9uZW50U3RhY2siLCJQaSIsInBpbmdDYWNoZSIsIlFpIiwiUmkiLCJTaSIsIlhpIiwidGFpbE1vZGUiLCJ0YWlsIiwic3VidHJlZUZsYWdzIiwiWWkiLCJwZW5kaW5nQ29udGV4dCIsIlppIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiUiIsInJlbmRlcmluZyIsImFqIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwiaXNCYWNrd2FyZHMiLCJsYXN0IiwiYmoiLCJjaiIsImRqIiwiUmVhY3RDdXJyZW50T3duZXIiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJtaiIsIm5qIiwib2oiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsImZhbGxiYWNrIiwid2oiLCJ4aiIsInlqIiwiemoiLCJfcmVhY3RSZXRyeSIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJHaiIsIkhqIiwiSWoiLCJXZWFrU2V0IiwiSmoiLCJVIiwiS2oiLCJMaiIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlVqIiwiViIsIlZqIiwiV2oiLCJYaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJZaiIsIlpqIiwiYWsiLCJiayIsImNrIiwiZGsiLCJkaXNwbGF5IiwiZWsiLCJmayIsImdrIiwiaGsiLCJpayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiVWsiLCJqayIsImtrIiwibGsiLCJtayIsIlciLCJYIiwiWSIsIm5rIiwib2siLCJwayIsInFrIiwicmsiLCJJbmZpbml0eSIsInNrIiwidGsiLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ2YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJoZyIsIkRrIiwiRWsiLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiT2siLCJ0aW1lb3V0SGFuZGxlIiwiUGsiLCJRayIsIlJrIiwiU2siLCJUayIsIm11dGFibGVSZWFkTGFuZXMiLCJBYyIsIk1qIiwib25Db21taXRGaWJlclJvb3QiLCJsYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlZrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiV2siLCJYayIsIlprIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsIiRrIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImFsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiYmwiLCJjbCIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJGaiIsIllrIiwiamwiLCJyZXBvcnRFcnJvciIsImtsIiwiX2ludGVybmFsUm9vdCIsImxsIiwibWwiLCJubCIsIm9sIiwicWwiLCJwbCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwicmwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJzbCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidGwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwidWwiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiX19zZWxmIiwiX19zb3VyY2UiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJucyIsImRlZiIsImRlZmluaXRpb24iLCJGdW5jdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiY29tcG9zZUNsYXNzZXMiLCJzbG90cyIsImdldFV0aWxpdHlDbGFzcyIsImNsYXNzZXMiLCJvdXRwdXQiLCJzbG90IiwicmVkdWNlIiwiYWNjIiwiU3R5bGVTaGVldCIsIl90aGlzIiwiX2luc2VydFRhZyIsImJlZm9yZSIsInRhZ3MiLCJpbnNlcnRpb25Qb2ludCIsInByZXBlbmQiLCJjb250YWluZXIiLCJpc1NwZWVkeSIsInNwZWVkeSIsImN0ciIsIl9wcm90byIsIm5vZGVzIiwicnVsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsImZsdXNoIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwiaW5kZXhvZiIsImJlZ2luIiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsInJvb3QiLCJwYXJlbnQiLCJwcmV2IiwicGVlayIsImNhcmV0IiwidG9rZW4iLCJhbGxvYyIsImRlYWxsb2MiLCJkZWxpbWl0IiwiZGVsaW1pdGVyIiwid2hpdGVzcGFjZSIsImVzY2FwaW5nIiwiY29tbWVudGVyIiwiQ09NTUVOVCIsImNvbXBpbGUiLCJydWxlcyIsInJ1bGVzZXRzIiwicHNldWRvIiwicG9pbnRzIiwiZGVjbGFyYXRpb25zIiwiYXRydWxlIiwicHJvcGVydHkiLCJwcmV2aW91cyIsInZhcmlhYmxlIiwic2Nhbm5pbmciLCJhbXBlcnNhbmQiLCJyZWZlcmVuY2UiLCJjb21tZW50IiwiZGVjbGFyYXRpb24iLCJydWxlc2V0IiwicG9zdCIsImlkZW50aWZpZXJXaXRoUG9pbnRUcmFja2luZyIsImZpeGVkRWxlbWVudHMiLCJjb21wYXQiLCJpc0ltcGxpY2l0UnVsZSIsInBhcnNlZCIsInRvUnVsZXMiLCJnZXRSdWxlcyIsInBhcmVudFJ1bGVzIiwicmVtb3ZlTGFiZWwiLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsImV4ZWMiLCJzc3JTdHlsZXMiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0Iiwic3R5bGlzUGx1Z2lucyIsImluc2VydGVkIiwibm9kZXNUb0h5ZHJhdGUiLCJhdHRyaWIiLCJjdXJyZW50U2hlZXQiLCJjb2xsZWN0aW9uIiwiZmluYWxpemluZ1BsdWdpbnMiLCJzZXJpYWxpemVyIiwic2VsZWN0b3IiLCJzZXJpYWxpemVkIiwic2hvdWxkQ2FjaGUiLCJzdHlsZXMiLCJyZWdpc3RlcmVkIiwic3RyIiwibGVuIiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJXZWJraXRMaW5lQ2xhbXAiLCJmbiIsImFyZyIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsInByb2Nlc3NTdHlsZVZhbHVlIiwicDEiLCJwMiIsImN1cnNvciIsImhhbmRsZUludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwiYW5pbSIsIl9rZXkiLCJpbnRlcnBvbGF0ZWQiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImxhc3RJbmRleCIsImlkZW50aWZpZXJOYW1lIiwiX2xlbiIsImtleWZyYW1lcyIsImluc2VydGFibGUiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJjYXBpdGFsaXplIiwicmVzb2x2ZVByb3BzIiwiZGVmYXVsdFNsb3RQcm9wcyIsInNsb3RQcm9wcyIsInNsb3RQcm9wTmFtZSIsImdldFRoZW1lUHJvcHMiLCJwYXJhbXMiLCJ0aGVtZSIsImNvbXBvbmVudHMiLCJpc1BsYWluT2JqZWN0IiwiZGVlcENsb25lIiwiX2V4Y2x1ZGVkIiwiYm9yZGVyUmFkaXVzIiwidmFsdWVzIiwieHMiLCJzbSIsInhsIiwiZGVmYXVsdEJyZWFrcG9pbnRzIiwidXAiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BWYWx1ZSIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJjc3NLZXkiLCJnZXRQYXRoIiwicGF0aCIsImNoZWNrVmFycyIsInZhcnMiLCJ2YWwiLCJnZXRTdHlsZVZhbHVlIiwidGhlbWVNYXBwaW5nIiwidHJhbnNmb3JtIiwicHJvcFZhbHVlRmluYWwiLCJ1c2VyVmFsdWUiLCJjc3NQcm9wZXJ0eSIsInRoZW1lS2V5IiwiZmlsdGVyUHJvcHMiLCJkaXJlY3Rpb25zIiwiYWxpYXNlcyIsIm1hcmdpblgiLCJtYXJnaW5ZIiwicGFkZGluZ1giLCJwYWRkaW5nWSIsImdldENzc1Byb3BlcnRpZXMiLCJkaXJlY3Rpb24iLCJkaXIiLCJtYXJnaW5LZXlzIiwicGFkZGluZ0tleXMiLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5VW5pdCIsIl9nZXRQYXRoIiwidGhlbWVTcGFjaW5nIiwiY3JlYXRlVW5hcnlTcGFjaW5nIiwidHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lZCIsImNzc1Byb3BlcnRpZXMiLCJnZXRTdHlsZUZyb21Qcm9wVmFsdWUiLCJyZXNvbHZlQ3NzUHJvcGVydHkiLCJtYXJnaW4iLCJwYWRkaW5nIiwic3BhY2luZyIsImhhbmRsZXJzIiwiYm9yZGVyVHJhbnNmb3JtIiwiYm9yZGVyIiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJUb3BDb2xvciIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckxlZnRDb2xvciIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsInBhbGV0dGVUcmFuc2Zvcm0iLCJzaXppbmdUcmFuc2Zvcm0iLCJtYXhXaWR0aCIsIl9wcm9wcyR0aGVtZSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaTIiLCJtaW5XaWR0aCIsIm1heEhlaWdodCIsIm1pbkhlaWdodCIsImJnY29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwdCIsInByIiwicHgiLCJweSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nSW5saW5lIiwicGFkZGluZ0lubGluZVN0YXJ0IiwicGFkZGluZ0lubGluZUVuZCIsInBhZGRpbmdCbG9jayIsInBhZGRpbmdCbG9ja1N0YXJ0IiwicGFkZGluZ0Jsb2NrRW5kIiwibXQiLCJtciIsIm14IiwibXkiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbkxlZnQiLCJtYXJnaW5JbmxpbmUiLCJtYXJnaW5JbmxpbmVTdGFydCIsIm1hcmdpbklubGluZUVuZCIsIm1hcmdpbkJsb2NrIiwibWFyZ2luQmxvY2tTdGFydCIsIm1hcmdpbkJsb2NrRW5kIiwiZGlzcGxheVByaW50IiwidGV4dE92ZXJmbG93IiwidmlzaWJpbGl0eSIsIndoaXRlU3BhY2UiLCJmbGV4QmFzaXMiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnbkNvbnRlbnQiLCJhbGlnblNlbGYiLCJqdXN0aWZ5SXRlbXMiLCJqdXN0aWZ5U2VsZiIsImdyaWRBdXRvRmxvdyIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJyaWdodCIsImJvdHRvbSIsImJveFNoYWRvdyIsImJveFNpemluZyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRTdHlsZSIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwidGV4dEFsaWduIiwidHlwb2dyYXBoeSIsInN0eWxlRnVuY3Rpb25TeCIsImdldFRoZW1lVmFsdWUiLCJjb25maWciLCJfdGhlbWUkdW5zdGFibGVfc3hDb24iLCJzeCIsInVuc3RhYmxlX3N4Q29uZmlnIiwidHJhdmVyc2UiLCJzeElucHV0Iiwic3hPYmplY3QiLCJlbXB0eUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludHNJbnB1dCIsIl9icmVha3BvaW50c0lucHV0JGtleSIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzS2V5cyIsInN0eWxlS2V5IiwibWF5YmVGbiIsImJyZWFrcG9pbnRzVmFsdWVzIiwib2JqZWN0cyIsImFsbEtleXMiLCJ1bmlvbiIsImV2ZXJ5Iiwib2JqZWN0c0hhdmVTYW1lS2V5cyIsImJyZWFrcG9pbnRPdXRwdXQiLCJ1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3giLCJwYWxldHRlIiwicGFsZXR0ZUlucHV0Iiwic3BhY2luZ0lucHV0Iiwic2hhcGVJbnB1dCIsIm90aGVyIiwidW5pdCIsInN0ZXAiLCJzb3J0ZWRWYWx1ZXMiLCJicmVha3BvaW50c0FzQXJyYXkiLCJzb3J0IiwiYnJlYWtwb2ludDEiLCJicmVha3BvaW50MiIsInNvcnRCcmVha3BvaW50c1ZhbHVlcyIsImRvd24iLCJiZXR3ZWVuIiwiZW5kSW5kZXgiLCJub3QiLCJrZXlJbmRleCIsImNyZWF0ZUJyZWFrcG9pbnRzIiwibXVpIiwiYXJnc0lucHV0IiwiYXJndW1lbnQiLCJjcmVhdGVTcGFjaW5nIiwibXVpVGhlbWUiLCJ1bnN0YWJsZV9zeCIsInN5c3RlbURlZmF1bHRUaGVtZSIsImRlZmF1bHRUaGVtZSIsImNvbnRleHRUaGVtZSIsInVzZVRoZW1lV2l0aG91dERlZmF1bHQiLCJkZWNvbXBvc2VDb2xvciIsIlJlZ0V4cCIsImNvbG9ycyIsImhleFRvUmdiIiwibWFya2VyIiwiY29sb3JTcGFjZSIsInBhcnNlRmxvYXQiLCJyZWNvbXBvc2VDb2xvciIsImdldEx1bWluYW5jZSIsInJnYiIsImhzbFRvUmdiIiwidG9GaXhlZCIsImRhcmtlbiIsImNvZWZmaWNpZW50IiwibGlnaHRlbiIsImJsYWNrIiwid2hpdGUiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwibGlnaHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGl2aWRlciIsImJhY2tncm91bmQiLCJwYXBlciIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWRPcGFjaXR5IiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGlzYWJsZWRPcGFjaXR5IiwiZm9jdXNPcGFjaXR5IiwiYWN0aXZhdGVkT3BhY2l0eSIsImRhcmsiLCJpY29uIiwiYWRkTGlnaHRPckRhcmsiLCJpbnRlbnQiLCJzaGFkZSIsInRvbmFsT2Zmc2V0IiwidG9uYWxPZmZzZXRMaWdodCIsInRvbmFsT2Zmc2V0RGFyayIsIm1haW4iLCJjYXNlQWxsQ2FwcyIsImRlZmF1bHRGb250RmFtaWx5IiwiY3JlYXRlVHlwb2dyYXBoeSIsIl9yZWYiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImNhc2luZyIsInZhcmlhbnRzIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwic3VidGl0bGUxIiwic3VidGl0bGUyIiwiYm9keTEiLCJib2R5MiIsImNhcHRpb24iLCJvdmVybGluZSIsImNyZWF0ZVNoYWRvdyIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImFuaW1hdGVkUHJvcCIsIm1vYmlsZVN0ZXBwZXIiLCJmYWIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsIm1peGluc0lucHV0IiwidHJhbnNpdGlvbnNJbnB1dCIsInR5cG9ncmFwaHlJbnB1dCIsImNvbnRyYXN0VGhyZXNob2xkIiwiZ2V0RGVmYXVsdFByaW1hcnkiLCJnZXREZWZhdWx0U2Vjb25kYXJ5IiwiZ2V0RGVmYXVsdEVycm9yIiwiaW5mbyIsImdldERlZmF1bHRJbmZvIiwic3VjY2VzcyIsImdldERlZmF1bHRTdWNjZXNzIiwid2FybmluZyIsImdldERlZmF1bHRXYXJuaW5nIiwiZ2V0Q29udHJhc3RUZXh0IiwiY29udHJhc3RUZXh0IiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZ2V0Q29udHJhc3RSYXRpbyIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJtb2RlcyIsImNvbW1vbiIsImdyZXkiLCJjcmVhdGVQYWxldHRlIiwic3lzdGVtVGhlbWUiLCJ0b29sYmFyIiwic2hhZG93cyIsInJlYWN0UHJvcHNSZWdleCIsIkVtb3Rpb25DYWNoZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaXNTdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwic2hvdWxkRm9yd2FyZFByb3AiLCJvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AiLCJfX2Vtb3Rpb25fZm9yd2FyZFByb3AiLCJuZXdTdHlsZWQiLCJjcmVhdGVTdHlsZWQiLCJ0YXJnZXRDbGFzc05hbWUiLCJfX2Vtb3Rpb25fcmVhbCIsImJhc2VUYWciLCJfX2Vtb3Rpb25fYmFzZSIsImxhYmVsIiwiZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wIiwic2hvdWxkVXNlQXMiLCJTdHlsZWQiLCJGaW5hbFRhZyIsImFzIiwiY2xhc3NJbnRlcnBvbGF0aW9ucyIsImZpbmFsU2hvdWxkRm9yd2FyZFByb3AiLCJuZXdQcm9wcyIsIndpdGhDb21wb25lbnQiLCJuZXh0VGFnIiwibmV4dE9wdGlvbnMiLCJzdHlsZWQiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5IiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJyb290U2hvdWxkRm9yd2FyZFByb3AiLCJzbG90U2hvdWxkRm9yd2FyZFByb3AiLCJzeXN0ZW1TeCIsIl9fbXVpX3N5c3RlbVN4IiwiaW5wdXRPcHRpb25zIiwicHJvY2Vzc29yIiwiZmlsdGVyIiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInRoZW1lSW5wdXQiLCJ0cmFuc2Zvcm1lZFN0eWxlQXJnIiwic3R5bGVPdmVycmlkZXMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwiX3RoZW1lJGNvbXBvbmVudHMkbmFtIiwib3duZXJTdGF0ZSIsInZhcmlhbnRzU3R5bGVzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudCIsImlzTWF0Y2giLCJ2YXJpYW50c1Jlc29sdmVyIiwiZ2V0VmFyaWFudFN0eWxlcyIsIm51bU9mQ3VzdG9tRm5zQXBwbGllZCIsInBsYWNlaG9sZGVycyIsImZpbGwiLCJfcmVmMiIsIndpdGhDb25maWciLCJkZWZhdWx0R2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IiLCJnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nIiwiY29tcGxldGVkIiwiZXhwYW5kZWQiLCJmb2N1c2VkIiwiZm9jdXNWaXNpYmxlIiwicmVxdWlyZWQiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzcyIsImdsb2JhbFN0YXRlUHJlZml4IiwiZ2xvYmFsU3RhdGVDbGFzcyIsImdlbmVyYXRlVXRpbGl0eUNsYXNzZXMiLCJnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIiwiX3QiLCJfdDIiLCJfdDMiLCJfdDQiLCJjaXJjdWxhclJvdGF0ZUtleWZyYW1lIiwiY2lyY3VsYXJEYXNoS2V5ZnJhbWUiLCJDaXJjdWxhclByb2dyZXNzUm9vdCIsIkNpcmN1bGFyUHJvZ3Jlc3NTVkciLCJzdmciLCJDaXJjdWxhclByb2dyZXNzQ2lyY2xlIiwiY2lyY2xlIiwiZGlzYWJsZVNocmluayIsImNpcmNsZURpc2FibGVTaHJpbmsiLCJzdHJva2UiLCJpblByb3BzIiwidGhpY2tuZXNzIiwidXNlVXRpbGl0eUNsYXNzZXMiLCJjaXJjbGVTdHlsZSIsInJvb3RTdHlsZSIsInJvb3RQcm9wcyIsImNpcmN1bWZlcmVuY2UiLCJQSSIsInJvbGUiLCJ2aWV3Qm94IiwiY3giLCJjeSIsImV4dGVuZFN4UHJvcCIsImluU3giLCJzeXN0ZW1Qcm9wcyIsIm90aGVyUHJvcHMiLCJfcHJvcHMkdGhlbWUkdW5zdGFibGUiLCJzcGxpdFByb3BzIiwiZmluYWxTeCIsIkJveCIsImRlZmF1bHRDbGFzc05hbWUiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsIkJveFJvb3QiLCJfZXh0ZW5kU3hQcm9wIiwiY3JlYXRlQm94IiwiZGF5anMiLCJ0aW1lem9uZSIsImdldExpbmVhclByb2dyZXNzVXRpbGl0eUNsYXNzIiwiX3Q1IiwiX3Q2IiwiaW5kZXRlcm1pbmF0ZTFLZXlmcmFtZSIsImluZGV0ZXJtaW5hdGUyS2V5ZnJhbWUiLCJidWZmZXJLZXlmcmFtZSIsImdldENvbG9yU2hhZGUiLCJMaW5lYXJQcm9ncmVzcyIsIkxpbmVhclByb2dyZXNzUm9vdCIsImNvbG9yQWRqdXN0IiwiTGluZWFyUHJvZ3Jlc3NEYXNoZWQiLCJkYXNoZWQiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRQb3NpdGlvbiIsIkxpbmVhclByb2dyZXNzQmFyMSIsImJhciIsImJhcjFJbmRldGVybWluYXRlIiwiYmFyMURldGVybWluYXRlIiwiYmFyMUJ1ZmZlciIsInRyYW5zZm9ybU9yaWdpbiIsIkxpbmVhclByb2dyZXNzQmFyMiIsImJhcjJJbmRldGVybWluYXRlIiwiYmFyMkJ1ZmZlciIsInZhbHVlQnVmZmVyIiwiYmFyMSIsImJhcjIiLCJpbmxpbmVTdHlsZXMiLCJnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIiwiVHlwb2dyYXBoeVJvb3QiLCJhbGlnbiIsIm5vV3JhcCIsImd1dHRlckJvdHRvbSIsInBhcmFncmFwaCIsImRlZmF1bHRWYXJpYW50TWFwcGluZyIsImluaGVyaXQiLCJjb2xvclRyYW5zZm9ybWF0aW9ucyIsInRleHRQcmltYXJ5IiwidGV4dFNlY29uZGFyeSIsInRoZW1lUHJvcHMiLCJ0cmFuc2Zvcm1EZXByZWNhdGVkQ29sb3JzIiwidmFyaWFudE1hcHBpbmciLCJMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCIsIk5hdiIsInNldERhdGFTZWxlY3Rpb24iLCJkYXRhU2VsZWN0aW9uIiwiZmlsZSIsIm1kNSIsImRpc3BsYXlfZmlsZV9uYW1lIiwicGVyY2VudCIsInRpbWVfcmVtYWluaW5nIiwiZ2V0RGF0YSIsInNldERhdGEiLCJzZXRGaWxlTGlzdCIsInNldERpc2tzIiwic2V0VXRpbGl6YXRpb24iLCJzZXRTdGF0dXMiLCJkYXRhVGltZW91dCIsImZldGNoIiwianNvbiIsImRpc2tzIiwidXRpbGl6YXRpb24iLCJzdGF0dXMiLCJodW1hbl9zaXplIiwib3V0cHV0X3NpemUiLCJkYXRhU291cmNlIiwiZmlsZWxpc3QiLCJzZWNvbmRzIiwiZmluYWxfdGltZSIsImZtdF9zdHJpbmciLCJ2aWRlb19zdHJlYW0iLCJjb2RlY19uYW1lIiwiYXVkaW9fc3RyZWFtcyIsImNwdSIsIm1lbW9yeSIsInJ1bl90aW1lIiwidGltZW1hcmsiLCJzdHJlYW0iLCJsYW5ndWFnZSIsImVzdF9jb21wbGV0ZWRfc2Vjb25kcyIsInVucHJvY2Vzc2VkX2ZpbGVzIiwibGlicmFyeV9jb3ZlcmFnZSIsIm9yaWdpbmFsIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWRfZmluYWwiLCJjaGFuZ2UiLCJmZm1wZWdfY21kIiwiZGlzayIsImFib3ZlX3RocmVzaG9sZCIsIm1vdW50ZWQiLCJ1c2VkIiwicGVyY2VudF91c2VkIiwiaWR4IiwiY2FsY19zaXplIiwibWFrZV9odW1hbl9yZWFkYWJsZSIsInJlc29sdXRpb24iLCJjb2RlYyIsImVuY29kZV92ZXJzaW9uIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9