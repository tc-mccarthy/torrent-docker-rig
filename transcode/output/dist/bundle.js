/*! For license information please see bundle.js.LICENSE.txt */
(() => {
  let e; let t; const n = {
    249 (e, t, n) { let r; e.exports = (r = r || (function (e, t) { let r; if (typeof window !== 'undefined' && window.crypto && (r = window.crypto), typeof self !== 'undefined' && self.crypto && (r = self.crypto), typeof globalThis !== 'undefined' && globalThis.crypto && (r = globalThis.crypto), !r && typeof window !== 'undefined' && window.msCrypto && (r = window.msCrypto), !r && void 0 !== n.g && n.g.crypto && (r = n.g.crypto), !r) try { r = n(480); } catch (e) {} const a = function () { if (r) { if (typeof r.getRandomValues === 'function') try { return r.getRandomValues(new Uint32Array(1))[0]; } catch (e) {} if (typeof r.randomBytes === 'function') try { return r.randomBytes(4).readInt32LE(); } catch (e) {} } throw new Error('Native crypto module could not be used to get secure random number.'); }; const o = Object.create || (function () { function e () {} return function (t) { let n; return e.prototype = t, n = new e(), e.prototype = null, n; }; }()); const i = {}; const l = i.lib = {}; const u = l.Base = { extend (e) { const t = o(this); return e && t.mixIn(e), t.hasOwnProperty('init') && this.init !== t.init || (t.init = function () { t.$super.init.apply(this, arguments); }), t.init.prototype = t, t.$super = this, t; }, create () { const e = this.extend(); return e.init.apply(e, arguments), e; }, init () {}, mixIn (e) { for (const t in e)e.hasOwnProperty(t) && (this[t] = e[t]); e.hasOwnProperty('toString') && (this.toString = e.toString); }, clone () { return this.init.prototype.extend(this); } }; var s = l.WordArray = u.extend({ init (e, t) { e = this.words = e || [], this.sigBytes = t != null ? t : 4 * e.length; }, toString (e) { return (e || f).stringify(this); }, concat (e) { const t = this.words; const n = e.words; const r = this.sigBytes; const a = e.sigBytes; if (this.clamp(), r % 4) for (let o = 0; o < a; o++) { const i = n[o >>> 2] >>> 24 - o % 4 * 8 & 255; t[r + o >>> 2] |= i << 24 - (r + o) % 4 * 8; } else for (let l = 0; l < a; l += 4)t[r + l >>> 2] = n[l >>> 2]; return this.sigBytes += a, this; }, clamp () { const t = this.words; const n = this.sigBytes; t[n >>> 2] &= 4294967295 << 32 - n % 4 * 8, t.length = e.ceil(n / 4); }, clone () { const e = u.clone.call(this); return e.words = this.words.slice(0), e; }, random (e) { for (var t = [], n = 0; n < e; n += 4)t.push(a()); return new s.init(t, e); } }); const c = i.enc = {}; var f = c.Hex = { stringify (e) { for (var t = e.words, n = e.sigBytes, r = [], a = 0; a < n; a++) { const o = t[a >>> 2] >>> 24 - a % 4 * 8 & 255; r.push((o >>> 4).toString(16)), r.push((15 & o).toString(16)); } return r.join(''); }, parse (e) { for (var t = e.length, n = [], r = 0; r < t; r += 2)n[r >>> 3] |= parseInt(e.substr(r, 2), 16) << 24 - r % 8 * 4; return new s.init(n, t / 2); } }; const d = c.Latin1 = { stringify (e) { for (var t = e.words, n = e.sigBytes, r = [], a = 0; a < n; a++) { const o = t[a >>> 2] >>> 24 - a % 4 * 8 & 255; r.push(String.fromCharCode(o)); } return r.join(''); }, parse (e) { for (var t = e.length, n = [], r = 0; r < t; r++)n[r >>> 2] |= (255 & e.charCodeAt(r)) << 24 - r % 4 * 8; return new s.init(n, t); } }; const p = c.Utf8 = { stringify (e) { try { return decodeURIComponent(escape(d.stringify(e))); } catch (e) { throw new Error('Malformed UTF-8 data'); } }, parse (e) { return d.parse(unescape(encodeURIComponent(e))); } }; const m = l.BufferedBlockAlgorithm = u.extend({ reset () { this._data = new s.init(), this._nDataBytes = 0; }, _append (e) { typeof e==='string' && (e = p.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes; }, _process (t) { let n; const r = this._data; const a = r.words; const o = r.sigBytes; const i = this.blockSize; let l = o / (4 * i); const u = (l = t ? e.ceil(l) : e.max((0 | l) - this._minBufferSize, 0)) * i; const c = e.min(4 * u, o); if (u) { for (let f = 0; f < u; f += i) this._doProcessBlock(a, f); n = a.splice(0, u), r.sigBytes -= c; } return new s.init(n, c); }, clone () { const e = u.clone.call(this); return e._data = this._data.clone(), e; }, _minBufferSize: 0 }); var h = (l.Hasher = m.extend({ cfg: u.extend(), init (e) { this.cfg = this.cfg.extend(e), this.reset(); }, reset () { m.reset.call(this), this._doReset(); }, update (e) { return this._append(e), this._process(), this; }, finalize (e) { return e && this._append(e), this._doFinalize(); }, blockSize: 16, _createHelper (e) { return function (t, n) { return new e.init(n).finalize(t); }; }, _createHmacHelper (e) { return function (t, n) { return new h.HMAC.init(e, n).finalize(t); }; } }), i.algo = {}); return i; }(Math)), r); },
    214 (e, t, n) { let r; e.exports = (r = n(249), (function (e) { const t = r; const n = t.lib; const a = n.WordArray; const o = n.Hasher; const i = t.algo; const l = []; !(function () { for (let t = 0; t < 64; t++)l[t] = 4294967296 * e.abs(e.sin(t + 1)) | 0; }()); const u = i.MD5 = o.extend({ _doReset () { this._hash = new a.init([1732584193, 4023233417, 2562383102, 271733878]); }, _doProcessBlock (e, t) { for (let n = 0; n < 16; n++) { const r = t + n; const a = e[r]; e[r] = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8); } const o = this._hash.words; const i = e[t + 0]; const u = e[t + 1]; const p = e[t + 2]; const m = e[t + 3]; const h = e[t + 4]; const g = e[t + 5]; const y = e[t + 6]; const v = e[t + 7]; const b = e[t + 8]; const w = e[t + 9]; const k = e[t + 10]; const x = e[t + 11]; const S = e[t + 12]; const A = e[t + 13]; const C = e[t + 14]; const E = e[t + 15]; let _ = o[0]; let P = o[1]; let O = o[2]; let T = o[3]; _ = s(_, P, O, T, i, 7, l[0]), T = s(T, _, P, O, u, 12, l[1]), O = s(O, T, _, P, p, 17, l[2]), P = s(P, O, T, _, m, 22, l[3]), _ = s(_, P, O, T, h, 7, l[4]), T = s(T, _, P, O, g, 12, l[5]), O = s(O, T, _, P, y, 17, l[6]), P = s(P, O, T, _, v, 22, l[7]), _ = s(_, P, O, T, b, 7, l[8]), T = s(T, _, P, O, w, 12, l[9]), O = s(O, T, _, P, k, 17, l[10]), P = s(P, O, T, _, x, 22, l[11]), _ = s(_, P, O, T, S, 7, l[12]), T = s(T, _, P, O, A, 12, l[13]), O = s(O, T, _, P, C, 17, l[14]), _ = c(_, P = s(P, O, T, _, E, 22, l[15]), O, T, u, 5, l[16]), T = c(T, _, P, O, y, 9, l[17]), O = c(O, T, _, P, x, 14, l[18]), P = c(P, O, T, _, i, 20, l[19]), _ = c(_, P, O, T, g, 5, l[20]), T = c(T, _, P, O, k, 9, l[21]), O = c(O, T, _, P, E, 14, l[22]), P = c(P, O, T, _, h, 20, l[23]), _ = c(_, P, O, T, w, 5, l[24]), T = c(T, _, P, O, C, 9, l[25]), O = c(O, T, _, P, m, 14, l[26]), P = c(P, O, T, _, b, 20, l[27]), _ = c(_, P, O, T, A, 5, l[28]), T = c(T, _, P, O, p, 9, l[29]), O = c(O, T, _, P, v, 14, l[30]), _ = f(_, P = c(P, O, T, _, S, 20, l[31]), O, T, g, 4, l[32]), T = f(T, _, P, O, b, 11, l[33]), O = f(O, T, _, P, x, 16, l[34]), P = f(P, O, T, _, C, 23, l[35]), _ = f(_, P, O, T, u, 4, l[36]), T = f(T, _, P, O, h, 11, l[37]), O = f(O, T, _, P, v, 16, l[38]), P = f(P, O, T, _, k, 23, l[39]), _ = f(_, P, O, T, A, 4, l[40]), T = f(T, _, P, O, i, 11, l[41]), O = f(O, T, _, P, m, 16, l[42]), P = f(P, O, T, _, y, 23, l[43]), _ = f(_, P, O, T, w, 4, l[44]), T = f(T, _, P, O, S, 11, l[45]), O = f(O, T, _, P, E, 16, l[46]), _ = d(_, P = f(P, O, T, _, p, 23, l[47]), O, T, i, 6, l[48]), T = d(T, _, P, O, v, 10, l[49]), O = d(O, T, _, P, C, 15, l[50]), P = d(P, O, T, _, g, 21, l[51]), _ = d(_, P, O, T, S, 6, l[52]), T = d(T, _, P, O, m, 10, l[53]), O = d(O, T, _, P, k, 15, l[54]), P = d(P, O, T, _, u, 21, l[55]), _ = d(_, P, O, T, b, 6, l[56]), T = d(T, _, P, O, E, 10, l[57]), O = d(O, T, _, P, y, 15, l[58]), P = d(P, O, T, _, A, 21, l[59]), _ = d(_, P, O, T, h, 6, l[60]), T = d(T, _, P, O, x, 10, l[61]), O = d(O, T, _, P, p, 15, l[62]), P = d(P, O, T, _, w, 21, l[63]), o[0] = o[0] + _ | 0, o[1] = o[1] + P | 0, o[2] = o[2] + O | 0, o[3] = o[3] + T | 0; }, _doFinalize () { const t = this._data; const n = t.words; const r = 8 * this._nDataBytes; const a = 8 * t.sigBytes; n[a >>> 5] |= 128 << 24 - a % 32; const o = e.floor(r / 4294967296); const i = r; n[15 + (a + 64 >>> 9 << 4)] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), n[14 + (a + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), t.sigBytes = 4 * (n.length + 1), this._process(); for (var l = this._hash, u = l.words, s = 0; s < 4; s++) { const c = u[s]; u[s] = 16711935 & (c << 8 | c >>> 24) | 4278255360 & (c << 24 | c >>> 8); } return l; }, clone () { const e = o.clone.call(this); return e._hash = this._hash.clone(), e; } }); function s (e, t, n, r, a, o, i) { const l = e + (t & n | ~t & r) + a + i; return (l << o | l >>> 32 - o) + t; } function c (e, t, n, r, a, o, i) { const l = e + (t & r | n & ~r) + a + i; return (l << o | l >>> 32 - o) + t; } function f (e, t, n, r, a, o, i) { const l = e + (t ^ n ^ r) + a + i; return (l << o | l >>> 32 - o) + t; } function d (e, t, n, r, a, o, i) { const l = e + (n ^ (t | ~r)) + a + i; return (l << o | l >>> 32 - o) + t; }t.MD5 = o._createHelper(u), t.HmacMD5 = o._createHmacHelper(u); }(Math)), r.MD5); },
    312: (e, t, n) => {
      n.d(t, { Z: () => l }); const r = n(537); const a = n.n(r); const o = n(645); const i = n.n(o)()(a()); i.push([e.id, '@import url(https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css);']), i.push([e.id, '*{box-sizing:border-box}body,html{font-size:16px;font-family:"Lato",sans-serif;background-color:#eee}figure,img{width:100%;display:block;margin:0 auto}p{line-height:1.2em}.caption,figcaption{font-size:.9rem;color:#8e8a8a;padding:5px 0}.container{width:100%;max-width:800px;padding:10px;margin:0 auto}.container.image{max-width:800px;padding:0}.container.image .caption,.container.image figcaption{padding:5px 10px}.desktop{display:none}.mobile{display:block}#app{padding:10px}@media(min-width: 681px){#app{padding:0}}.overall>div{margin-bottom:-8px}.overall>div:first-child{margin-top:-25%}.overline{max-width:20%;height:1px;border-bottom:5px solid #3792cb;margin:10px 0 -10px 0}.screen{width:100%;min-height:100vh}.screen.padd{padding-top:25%}.video{position:relative;width:100%;height:0;padding-bottom:56.25%}.video.vertical{padding-bottom:177.7777777778%}.video iframe,.video video{position:absolute;width:100%;height:100%;top:0;left:0;border:0}.widget{background-color:#fff;border-radius:5px;padding:10px;max-width:800px;margin-bottom:10px;text-align:center}.widget .overflow{overflow-x:auto}.widget.center{margin:0 auto 10px}.widget.list ol,.widget.list ul{text-align:left}.widget.list ol li,.widget.list ul li{padding-left:10px}.widget strong,.widget em{display:block}.widget em{font-size:.9rem}.widget table{border-collapse:collapse}.widget table tr td{padding:5px}.widget table tr:nth-child(even){background-color:#f9f9f9}.disks .widget .danger>*{background-color:red}@media(min-width: 681px){.desktop{display:block}.mobile{display:none}.flex{display:flex;text-align:center;flex-wrap:wrap;gap:10px;max-width:800px;margin:0 auto}.flex>div{flex:1}.flex.quarter>div{flex-basis:25%}.circle{max-width:40px;margin:0 auto}}@media(min-width: 805px){.container{padding:0}}@media(min-width: 1205px){.container.image .caption,.container.image figcaption{padding:5px 0}}', '', { version: 3, sources: ['webpack://./src/components/Home/Home.scss'], names: [], mappings: 'AAgBA,EACE,qBAAA,CAGF,UAGE,cAAA,CACA,6BAAA,CACA,qBAAA,CAGF,WAGE,UAAA,CACA,aAAA,CACA,aAAA,CAGF,EACE,iBAAA,CAGF,oBAEE,eAAA,CACA,aAAA,CACA,aAAA,CAKF,WACE,UAAA,CACA,eAAA,CACA,YAAA,CACA,aAAA,CAGF,iBACE,eAAA,CACA,SAAA,CAGF,sDAEE,gBAAA,CAGF,SACE,YAAA,CAGF,QACE,aAAA,CAGF,KACE,YAAA,CAEA,yBAHF,KAII,SAAA,CAAA,CAKF,aACE,kBAAA,CAEA,yBACE,eAAA,CAKN,UACE,aAAA,CACA,UAAA,CACA,+BAAA,CACA,qBAAA,CAIF,QACE,UAAA,CACA,gBAAA,CAGF,aACE,eAAA,CAGF,OACE,iBAAA,CACA,UAAA,CACA,QAAA,CACA,qBAAA,CAGF,gBACE,8BAAA,CAGF,2BAEE,iBAAA,CACA,UAAA,CACA,WAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CAGF,QACE,qBAAA,CACA,iBAAA,CACA,YAAA,CACA,eAAA,CACA,kBAAA,CACA,iBAAA,CAEA,kBACE,eAAA,CAGF,eACE,kBAAA,CAIA,gCAEE,eAAA,CACA,sCACE,iBAAA,CAKN,0BAEE,aAAA,CAGF,WACE,eAAA,CAGF,cACE,wBAAA,CAEE,oBACE,WAAA,CAEF,iCACE,wBAAA,CASF,yBACE,oBAAA,CAQR,yBAGE,SACE,aAAA,CAGF,QACE,YAAA,CAGF,MACE,YAAA,CACA,iBAAA,CACA,cAAA,CACA,QAAA,CACA,eAAA,CACA,aAAA,CAEA,UACE,MAAA,CAIA,kBACE,cAAA,CAKN,QACE,cAAA,CACA,aAAA,CAAA,CAaJ,yBAGE,WACE,SAAA,CAAA,CAMJ,0BAGE,sDAEE,aAAA,CAAA', sourcesContent: ["/*\nThis is a good layout for a mobile-first CSS template.\nFollowing this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.\nMost of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.\n\nSometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.\nYou will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.\n*/\n/*********************************************************************\n LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES\n*********************************************************************/\n@import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css');\n/*********************************************************************\n  YOUR MOBILE/BASE STYLES GO HERE\n*********************************************************************/\n/** SET BORDER BOX EVERYWHERE */\n* {\n  box-sizing: border-box;\n}\n/** APPLY BASE TAG STYLES */\nbody,\nhtml {\n  /* Sets default font-size to 16px, ensuring 1em = 16px; */\n  font-size: 16px;\n  font-family: 'Lato', sans-serif;\n  background-color: #eee;\n}\n/** RESPONSIVE IMAGES */\nfigure,\nimg {\n  /* Sets image width to match parent */\n  width: 100%;\n  display: block;\n  margin: 0 auto;\n}\n\np {\n  line-height: 1.2em;\n}\n/** Caption styles */\n.caption,\nfigcaption {\n  font-size: 0.9rem;\n  color: #8e8a8a;\n  padding: 5px 0;\n}\n/** BASE CLASSES */\n/** Container styles to keep content from becoming too wide or coming too close to\n* mobile edge */\n.container {\n  width: 100%;\n  max-width: 800px;\n  padding: 10px;\n  margin: 0 auto;\n}\n/** Images are allowed to be a little wider when broken out into their own container */\n.container.image {\n  max-width: 800px;\n  padding: 0;\n}\n\n.container.image .caption,\n.container.image figcaption {\n  padding: 5px 10px;\n}\n\n.desktop {\n  display: none;\n}\n\n.mobile {\n  display: block;\n}\n\n#app {\n  padding: 10px;\n\n  @media (min-width: 681px) {\n    padding: 0;\n  }\n}\n\n.overall {\n  > div {\n    margin-bottom: -8px;\n\n    &:first-child {\n      margin-top: -25%;\n    }\n  }\n}\n\n.overline {\n  max-width: 20%;\n  height: 1px;\n  border-bottom: 5px solid #3792cb;\n  margin: 10px 0 -10px 0;\n}\n\n/** Screens are the size of at least one device screen */\n.screen {\n  width: 100%;\n  min-height: 100vh;\n}\n/** for vertical centering */\n.screen.padd {\n  padding-top: 25%;\n}\n/** video setup */\n.video {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: calc(9 / 16 * 100%);\n}\n\n.video.vertical {\n  padding-bottom: calc(16 / 9 * 100%);\n}\n\n.video iframe,\n.video video {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  border: 0;\n}\n\n.widget {\n  background-color: #fff;\n  border-radius: 5px;\n  padding: 10px;\n  max-width: 800px;\n  margin-bottom: 10px;\n  text-align: center;\n\n  .overflow {\n    overflow-x: auto;\n  }\n\n  &.center {\n    margin: 0 auto 10px;\n  }\n\n  &.list {\n    ol,\n    ul {\n      text-align: left;\n      li {\n        padding-left: 10px;\n      }\n    }\n  }\n\n  strong,\n  em {\n    display: block;\n  }\n\n  em {\n    font-size: 0.9rem;\n  }\n\n  table {\n    border-collapse: collapse;\n    tr {\n      td {\n        padding: 5px;\n      }\n      &:nth-child(even) {\n        background-color: #f9f9f9;\n      }\n    }\n  }\n}\n\n.disks {\n  .widget {\n    .danger {\n      > * {\n        background-color: #f00;\n      }\n    }\n  }\n}\n/*********************************************************************\n  YOUR TABLET/DESKTOP STYLES GO HERE\n*********************************************************************/\n@media (min-width: 681px) {\n  /* Any adjustments for tablets and larger go here.\n    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */\n  .desktop {\n    display: block;\n  }\n\n  .mobile {\n    display: none;\n  }\n\n  .flex {\n    display: flex;\n    text-align: center;\n    flex-wrap: wrap;\n    gap: 10px;\n    max-width: 800px;\n    margin: 0 auto;\n\n    > div {\n      flex: 1;\n    }\n\n    &.quarter {\n      > div {\n        flex-basis: 25%;\n      }\n    }\n  }\n\n  .circle {\n    max-width: 40px;\n    margin: 0 auto;\n  }\n}\n/*********************************************************************\n  YOUR DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 769px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n}\n/*********************************************************************\n  YOUR MEDIUM-DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 805px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container {\n    padding: 0;\n  }\n}\n/*********************************************************************\n  YOUR LARGE DESKTOP-ONLY STYLES GO HERE\n*********************************************************************/\n@media (min-width: 1205px) {\n  /* Any adjustments for desktop and larger go here.\n    Note these styles will be applied to anything 769px or larger -- so desktop */\n  .container.image .caption,\n  .container.image figcaption {\n    padding: 5px 0;\n  }\n}\n"], sourceRoot: '' }]); const l = i;
    },
    867: (e, t, n) => {
      n.d(t, { Z: () => l }); const r = n(537); const a = n.n(r); const o = n(645); const i = n.n(o)()(a()); i.push([e.id, 'nav{overflow-y:auto;-webkit-overflow-scrolling:touch;max-height:20vh;margin:0 auto 22px}nav ul{margin:0;padding:0}nav ul li{list-style:none;display:block;padding:10px;margin:10px}nav ul li button{background:rgba(0,0,0,0);border:0;background:#fff;margin-right:10px;cursor:pointer;width:100%;padding:22px;color:#000}nav ul li button.active{border-bottom:3px solid #000}', '', { version: 3, sources: ['webpack://./src/components/Navigation/Nav.scss'], names: [], mappings: 'AAAA,IACE,eAAA,CAEA,gCAAA,CACA,eAAA,CACA,kBAAA,CAEA,OACE,QAAA,CACA,SAAA,CAEA,UACE,eAAA,CACA,aAAA,CACA,YAAA,CACA,WAAA,CAEA,iBACE,wBAAA,CACA,QAAA,CACA,eAAA,CACA,iBAAA,CACA,cAAA,CACA,UAAA,CACA,YAAA,CACA,UAAA,CAEA,wBACE,4BAAA', sourcesContent: ['nav {\n  overflow-y: auto;\n  /* momentum scrolling */\n  -webkit-overflow-scrolling: touch;\n  max-height: 20vh;\n  margin: 0 auto 22px;\n\n  ul {\n    margin: 0;\n    padding: 0;\n\n    li {\n      list-style: none;\n      display: block;\n      padding: 10px;\n      margin: 10px;\n\n      button {\n        background: transparent;\n        border: 0;\n        background: #fff;\n        margin-right: 10px;\n        cursor: pointer;\n        width: 100%;\n        padding: 22px;\n        color: #000;\n\n        &.active {\n          border-bottom: 3px solid #000;\n        }\n      }\n    }\n  }\n}\n'], sourceRoot: '' }]); const l = i;
    },
    645: (e) => {
      e.exports = function (e) { const t = []; return t.toString = function () { return this.map((t) => { let n = ''; const r = void 0 !== t[5]; return t[4] && (n += '@supports ('.concat(t[4], ') {')), t[2] && (n += '@media '.concat(t[2], ' {')), r && (n += '@layer'.concat(t[5].length > 0 ? ' '.concat(t[5]) : '', ' {')), n += e(t), r && (n += '}'), t[2] && (n += '}'), t[4] && (n += '}'), n; }).join(''); }, t.i = function (e, n, r, a, o) { typeof e === 'string' && (e = [[null, e, void 0]]); const i = {}; if (r) for (let l = 0; l < this.length; l++) { const u = this[l][0]; u != null && (i[u] = !0); } for (let s = 0; s < e.length; s++) { const c = [].concat(e[s]); r && i[c[0]] || (void 0 !== o && (void 0 === c[5] || (c[1] = '@layer'.concat(c[5].length > 0 ? ' '.concat(c[5]) : '', ' {').concat(c[1], '}')), c[5] = o), n && (c[2] ? (c[1] = '@media '.concat(c[2], ' {').concat(c[1], '}'), c[2] = n) : c[2] = n), a && (c[4] ? (c[1] = '@supports ('.concat(c[4], ') {').concat(c[1], '}'), c[4] = a) : c[4] = ''.concat(a)), t.push(c)); } }, t; };
    },
    537: (e) => {
      e.exports = function (e) { const t = e[1]; const n = e[3]; if (!n) return t; if (typeof btoa === 'function') { const r = btoa(unescape(encodeURIComponent(JSON.stringify(n)))); const a = 'sourceMappingURL=data:application/json;charset=utf-8;base64,'.concat(r); const o = '/*# '.concat(a, ' */'); const i = n.sources.map((e) => '/*# sourceURL='.concat(n.sourceRoot || '').concat(e, ' */')); return [t].concat(i).concat([o]).join('\n'); } return [t].join('\n'); };
    },
    484 (e) {
      e.exports = (function () {
        const e = 6e4; const t = 36e5; const n = 'millisecond'; const r = 'second'; const a = 'minute'; const o = 'hour'; const i = 'day'; const l = 'week'; const u = 'month'; const s = 'quarter'; const c = 'year'; const f = 'date'; const d = 'Invalid Date'; const p = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/; const m = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g; const h = { name: 'en', weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'), months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'), ordinal (e) { const t = ['th', 'st', 'nd', 'rd']; const n = e % 100; return `[${  e  }${t[(n - 20) % 10] || t[n] || t[0]  }]` } }; const g = function (e, t, n) { const r = String(e); return !r || r.length >= t ? e : `${ Array(t + 1 - r.length).join(n) }${e}`; }; const y = { s: g, z (e) { const t = -e.utcOffset(); const n = Math.abs(t); const r = Math.floor(n / 60); const a = n % 60; return `${(t <= 0 ? '+' : '-') + g(r, 2, '0') }:${ g(a, 2, '0')}`; }, m: function e (t, n) { if (t.date() < n.date()) return -e(n, t); const r = 12 * (n.year() - t.year()) + (n.month() - t.month()); const a = t.clone().add(r, u); const o = n - a < 0; const i = t.clone().add(r + (o ? -1 : 1), u); return +(-(r + (n - a) / (o ? a - i : i - a)) || 0); }, a (e) { return e < 0 ? Math.ceil(e) || 0 : Math.floor(e); }, p (e) { return { M: u, y: c, w: l, d: i, D: f, h: o, m: a, s: r, ms: n, Q: s }[e] || String(e || '').toLowerCase().replace(/s$/, ''); }, u (e) { return void 0 === e; } }; let v = 'en'; const b = {}; b[v] = h; const w = '$isDayjsObject'; const k = function (e) { return e instanceof C || !(!e || !e[w]); }; const x = function e (t, n, r) { let a; if (!t) return v; if (typeof t === 'string') { const o = t.toLowerCase(); b[o] && (a = o), n && (b[o] = n, a = o); const i = t.split('-'); if (!a && i.length > 1) return e(i[0]); } else { const l = t.name; b[l] = t, a = l; } return !r && a && (v = a), a || !r && v; }; const S = function (e, t) { if (k(e)) return e.clone(); const n = typeof t==='object' ? t : {}; return n.date = e, n.args = arguments, new C(n); }; const A = y; A.l = x, A.i = k, A.w = function (e, t) { return S(e, { locale: t.$L, utc: t.$u, x: t.$x, $offset: t.$offset }); }; var C = (function () { function h (e) { this.$L = x(e.locale, null, !0), this.parse(e), this.$x = this.$x || e.x || {}, this[w] = !0; } const g = h.prototype; return g.parse = function (e) { this.$d = (function (e) { const t = e.date; const n = e.utc; if (t === null) return new Date(NaN); if (A.u(t)) return new Date(); if (t instanceof Date) return new Date(t); if (typeof t === 'string' && !/Z$/i.test(t)) { const r = t.match(p); if (r) { const a = r[2] - 1 || 0; const o = (r[7] || '0').substring(0, 3); return n ? new Date(Date.UTC(r[1], a, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, o)) : new Date(r[1], a, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, o); } } return new Date(t); }(e)), this.init(); }, g.init = function () { const e = this.$d; this.$y = e.getFullYear(), this.$M = e.getMonth(), this.$D = e.getDate(), this.$W = e.getDay(), this.$H = e.getHours(), this.$m = e.getMinutes(), this.$s = e.getSeconds(), this.$ms = e.getMilliseconds(); }, g.$utils = function () { return A; }, g.isValid = function () { return !(this.$d.toString() === d); }, g.isSame = function (e, t) { const n = S(e); return this.startOf(t) <= n && n <= this.endOf(t); }, g.isAfter = function (e, t) { return S(e) < this.startOf(t); }, g.isBefore = function (e, t) { return this.endOf(t) < S(e); }, g.$g = function (e, t, n) { return A.u(e) ? this[t] : this.set(n, e); }, g.unix = function () { return Math.floor(this.valueOf() / 1e3); }, g.valueOf = function () { return this.$d.getTime(); }, g.startOf = function (e, t) { const n = this; const s = !!A.u(t) || t; const d = A.p(e); const p = function (e, t) { const r = A.w(n.$u ? Date.UTC(n.$y, t, e) : new Date(n.$y, t, e), n); return s ? r : r.endOf(i); }; const m = function (e, t) { return A.w(n.toDate()[e].apply(n.toDate('s'), (s ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(t)), n); }; const h = this.$W; const g = this.$M; const y = this.$D; const v = `set${ this.$u ? 'UTC' : ''}`; switch (d) { case c: return s ? p(1, 0) : p(31, 11); case u: return s ? p(1, g) : p(0, g + 1); case l: var b = this.$locale().weekStart || 0; var w = (h < b ? h + 7 : h) - b; return p(s ? y - w : y + (6 - w), g); case i: case f: return m(`${v}Hours`, 0); case o: return m(`${v}Minutes`, 1); case a: return m(`${v}Seconds`, 2); case r: return m(`${v}Milliseconds`, 3); default: return this.clone(); } }, g.endOf = function (e) { return this.startOf(e, !1); }, g.$set = function (e, t) { let l; const s = A.p(e); const d = `set${  this.$u ? 'UTC' : ''}`; const p = (l = {}, l[i] = `${d }Date`, l[f] = `${d }Date`, l[u] = `${d }Month`, l[c] = `${d }FullYear`, l[o] = `${d }Hours`, l[a] = `${d }Minutes`, l[r] = `${d }Seconds`, l[n] = `${d }Milliseconds`, l)[s]; const m = s === i ? this.$D + (t - this.$W) : t; if (s === u || s === c) { const h = this.clone().set(f, 1); h.$d[p](m), h.init(), this.$d = h.set(f, Math.min(this.$D, h.daysInMonth())).$d; } else p && this.$d[p](m); return this.init(), this; }, g.set = function (e, t) { return this.clone().$set(e, t); }, g.get = function (e) { return this[A.p(e)](); }, g.add = function (n, s) { let f; const d = this; n = Number(n); const p = A.p(s); const m = function (e) { const t = S(d); return A.w(t.date(t.date() + Math.round(e * n)), d); }; if (p === u) return this.set(u, this.$M + n); if (p === c) return this.set(c, this.$y + n); if (p === i) return m(1); if (p === l) return m(7); const h = (f = {}, f[a] = e, f[o] = t, f[r] = 1e3, f)[p] || 1; const g = this.$d.getTime() + n * h; return A.w(g, this); }, g.subtract = function (e, t) { return this.add(-1 * e, t); }, g.format = function (e) { const t = this; const n = this.$locale(); if (!this.isValid()) return n.invalidDate || d; const r = e || 'YYYY-MM-DDTHH:mm:ssZ'; const a = A.z(this); const o = this.$H; const i = this.$m; const l = this.$M; const u = n.weekdays; const s = n.months; const c = n.meridiem; const f = function (e, n, a, o) { return e && (e[n] || e(t, r)) || a[n].slice(0, o); }; const p = function (e) { return A.s(o % 12 || 12, e, '0'); }; const h = c || function (e, t, n) { const r = e < 12 ? 'AM' : 'PM'; return n ? r.toLowerCase() : r; }; return r.replace(m, (e, r) => r || (function (e) { switch (e) { case 'YY': return String(t.$y).slice(-2); case 'YYYY': return A.s(t.$y, 4, '0'); case 'M': return l + 1; case 'MM': return A.s(l + 1, 2, '0'); case 'MMM': return f(n.monthsShort, l, s, 3); case 'MMMM': return f(s, l); case 'D': return t.$D; case 'DD': return A.s(t.$D, 2, '0'); case 'd': return String(t.$W); case 'dd': return f(n.weekdaysMin, t.$W, u, 2); case 'ddd': return f(n.weekdaysShort, t.$W, u, 3); case 'dddd': return u[t.$W]; case 'H': return String(o); case 'HH': return A.s(o, 2, '0'); case 'h': return p(1); case 'hh': return p(2); case 'a': return h(o, i, !0); case 'A': return h(o, i, !1); case 'm': return String(i); case 'mm': return A.s(i, 2, '0'); case 's': return String(t.$s); case 'ss': return A.s(t.$s, 2, '0'); case 'SSS': return A.s(t.$ms, 3, '0'); case 'Z': return a; } return null; }(e)) || a.replace(':', '')); }, g.utcOffset = function () { return 15 * -Math.round(this.$d.getTimezoneOffset() / 15); }, g.diff = function (n, f, d) { let p; const m = this; const h = A.p(f); const g = S(n); const y = (g.utcOffset() - this.utcOffset()) * e; const v = this - g; const b = function () { return A.m(m, g); }; switch (h) { case c: p = b() / 12; break; case u: p = b(); break; case s: p = b() / 3; break; case l: p = (v - y) / 6048e5; break; case i: p = (v - y) / 864e5; break; case o: p = v / t; break; case a: p = v / e; break; case r: p = v / 1e3; break; default: p = v; } return d ? p : A.a(p); }, g.daysInMonth = function () { return this.endOf(u).$D; }, g.$locale = function () { return b[this.$L]; }, g.locale = function (e, t) { if (!e) return this.$L; const n = this.clone(); const r = x(e, t, !0); return r && (n.$L = r), n; }, g.clone = function () { return A.w(this.$d, this); }, g.toDate = function () { return new Date(this.valueOf()); }, g.toJSON = function () { return this.isValid() ? this.toISOString() : null; }, g.toISOString = function () { return this.$d.toISOString(); }, g.toString = function () { return this.$d.toUTCString(); }, h; }()); const E = C.prototype; return S.prototype = E, [['$ms', n], ['$s', r], ['$m', a], ['$H', o], ['$W', i], ['$M', u], ['$y', c], ['$D', f]].forEach((e) => { E[e[1]] = function (t) { return this.$g(t, e[0], e[1]); }; }), S.extend = function (e, t) { return e.$i || (e(t, C, S), e.$i = !0), S; }, S.locale = x, S.isDayjs = k, S.unix = function (e) { return S(1e3 * e); }, S.en = b[v], S.Ls = b, S.p = {}, S;
      }());
    },
    212 (e) {
      e.exports = (function () {
        return function (e, t) { t.prototype.isSameOrAfter = function (e, t) { return this.isSame(e, t) || this.isAfter(e, t); }; };
      }());
    },
    387 (e) {
      e.exports = (function () {
        const e = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 }; const t = {}; return function (n, r, a) { let o; const i = function (e, n, r) { void 0 === r && (r = {}); const a = new Date(e); const o = (function (e, n) { void 0 === n && (n = {}); let r = n.timeZoneName || 'short'; let a = e + "|" + r; let o = t[a]; return o || (o = new Intl.DateTimeFormat('en-US', { hour12: !1, timeZone: e, year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZoneName: r }), t[a] = o), o; }(n, r)); return o.formatToParts(a); }; const l = function (t, n) { for (var r = i(t, n), o = [], l = 0; l < r.length; l += 1) { const u = r[l]; const s = u.type; const c = u.value; const f = e[s]; f >= 0 && (o[f] = parseInt(c, 10)); } const d = o[3]; const p = d === 24 ? 0 : d; const m = `${o[0]  }-${  o[1]  }-${  o[2]  } ${  p  }:${  o[4]  }:${  o[5]  }:000`; let h = +t; return (a.utc(m).valueOf() - (h -= h % 1e3)) / 6e4; }; const u = r.prototype; u.tz = function (e, t) { void 0 === e && (e = o); let n; const r = this.utcOffset(); const i = this.toDate(); const l = i.toLocaleString('en-US', { timeZone: e }); const u = Math.round((i - new Date(l)) / 1e3 / 60); const s = 15 * -Math.round(i.getTimezoneOffset() / 15) - u; if (Number(s)) { if (n = a(l, { locale: this.$L }).$set('millisecond', this.$ms).utcOffset(s, !0), t) { const c = n.utcOffset(); n = n.add(r - c, 'minute'); } } else n = this.utcOffset(0, t); return n.$x.$timezone = e, n; }, u.offsetName = function (e) { const t = this.$x.$timezone || a.tz.guess(); const n = i(this.valueOf(), t, { timeZoneName: e }).find((e) => e.type.toLowerCase() === 'timezonename'); return n && n.value; }; const s = u.startOf; u.startOf = function (e, t) { if (!this.$x || !this.$x.$timezone) return s.call(this, e, t); const n = a(this.format('YYYY-MM-DD HH:mm:ss:SSS'), { locale: this.$L }); return s.call(n, e, t).tz(this.$x.$timezone, !0); }, a.tz = function (e, t, n) { const r = n && t; const i = n || t || o; const u = l(+a(), i); if (typeof e !== 'string') return a(e).tz(i); const s = (function (e, t, n) { let r = e - 60 * t * 1e3; const a = l(r, n); if (t === a) return [r, t]; const o = l(r -= 60 * (a - t) * 1e3, n); return a === o ? [r, a] : [e - 60 * Math.min(a, o) * 1e3, Math.max(a, o)]; }(a.utc(e, r).valueOf(), u, i)); const c = s[0]; const f = s[1]; const d = a(c).utcOffset(f); return d.$x.$timezone = i, d; }, a.tz.guess = function () { return Intl.DateTimeFormat().resolvedOptions().timeZone; }, a.tz.setDefault = function (e) { o = e; }; };
      }());
    },
    178 (e) {
      e.exports = (function () {
        const e = 'minute'; const t = /[+-]\d\d(?::?\d\d)?/g; const n = /([+-]|\d\d)/g; return function (r, a, o) { const i = a.prototype; o.utc = function (e) { return new a({ date: e, utc: !0, args: arguments }); }, i.utc = function (t) { const n = o(this.toDate(), { locale: this.$L, utc: !0 }); return t ? n.add(this.utcOffset(), e) : n; }, i.local = function () { return o(this.toDate(), { locale: this.$L, utc: !1 }); }; const l = i.parse; i.parse = function (e) { e.utc && (this.$u = !0), this.$utils().u(e.$offset) || (this.$offset = e.$offset), l.call(this, e); }; const u = i.init; i.init = function () { if (this.$u) { const e = this.$d; this.$y = e.getUTCFullYear(), this.$M = e.getUTCMonth(), this.$D = e.getUTCDate(), this.$W = e.getUTCDay(), this.$H = e.getUTCHours(), this.$m = e.getUTCMinutes(), this.$s = e.getUTCSeconds(), this.$ms = e.getUTCMilliseconds(); } else u.call(this); }; const s = i.utcOffset; i.utcOffset = function (r, a) { const o = this.$utils().u; if (o(r)) return this.$u ? 0 : o(this.$offset) ? s.call(this) : this.$offset; if (typeof r === 'string' && (r = (function (e) { void 0 === e && (e = ''); const r = e.match(t); if (!r) return null; const a = (`${r[0]}`).match(n) || ['-', 0, 0]; const o = a[0]; const i = 60 * +a[1] + +a[2]; return i === 0 ? 0 : o === '+' ? i : -i; }(r)), r === null)) return this; const i = Math.abs(r) <= 16 ? 60 * r : r; let l = this; if (a) return l.$offset = i, l.$u = r === 0, l; if (r !== 0) { const u = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset(); (l = this.local().add(i + u, e)).$offset = i, l.$x.$localOffset = u; } else l = this.utc(); return l; }; const c = i.format; i.format = function (e) { const t = e || (this.$u ? 'YYYY-MM-DDTHH:mm:ss[Z]' : ''); return c.call(this, t); }, i.valueOf = function () { const e = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset()); return this.$d.valueOf() - 6e4 * e; }, i.isUTC = function () { return !!this.$u; }, i.toISOString = function () { return this.toDate().toISOString(); }, i.toString = function () { return this.toDate().toUTCString(); }; const f = i.toDate; i.toDate = function (e) { return e === 's' && this.$offset ? o(this.format('YYYY-MM-DD HH:mm:ss:SSS')).toDate() : f.call(this); }; const d = i.diff; i.diff = function (e, t, n) { if (e && this.$u === e.$u) return d.call(this, e, t, n); const r = this.local(); const a = o(e).local(); return d.call(r, a, t, n); }; };
      }());
    },
    679: (e, t, n) => {
      const r = n(296); const a = { childContextTypes: !0, contextType: !0, contextTypes: !0, defaultProps: !0, displayName: !0, getDefaultProps: !0, getDerivedStateFromError: !0, getDerivedStateFromProps: !0, mixins: !0, propTypes: !0, type: !0 }; const o = { name: !0, length: !0, prototype: !0, caller: !0, callee: !0, arguments: !0, arity: !0 }; const i = { $$typeof: !0, compare: !0, defaultProps: !0, displayName: !0, propTypes: !0, type: !0 }; const l = {}; function u (e) { return r.isMemo(e) ? i : l[e.$$typeof] || a; }l[r.ForwardRef] = { $$typeof: !0, render: !0, defaultProps: !0, displayName: !0, propTypes: !0 }, l[r.Memo] = i; const s = Object.defineProperty; const c = Object.getOwnPropertyNames; const f = Object.getOwnPropertySymbols; const d = Object.getOwnPropertyDescriptor; const p = Object.getPrototypeOf; const m = Object.prototype; e.exports = function e (t, n, r) { if (typeof n !== 'string') { if (m) { const a = p(n); a && a !== m && e(t, a, r); } let i = c(n); f && (i = i.concat(f(n))); for (let l = u(t), h = u(n), g = 0; g < i.length; ++g) { const y = i[g]; if (!(o[y] || r && r[y] || h && h[y] || l && l[y])) { const v = d(n, y); try { s(t, y, v); } catch (e) {} } } } return t; };
    },
    103: (e, t) => {
      const n = typeof Symbol === 'function' && Symbol.for; const r = n ? Symbol.for('react.element') : 60103; const a = n ? Symbol.for('react.portal') : 60106; const o = n ? Symbol.for('react.fragment') : 60107; const i = n ? Symbol.for('react.strict_mode') : 60108; const l = n ? Symbol.for('react.profiler') : 60114; const u = n ? Symbol.for('react.provider') : 60109; const s = n ? Symbol.for('react.context') : 60110; const c = n ? Symbol.for('react.async_mode') : 60111; const f = n ? Symbol.for('react.concurrent_mode') : 60111; const d = n ? Symbol.for('react.forward_ref') : 60112; const p = n ? Symbol.for('react.suspense') : 60113; const m = n ? Symbol.for('react.suspense_list') : 60120; const h = n ? Symbol.for('react.memo') : 60115; const g = n ? Symbol.for('react.lazy') : 60116; const y = n ? Symbol.for('react.block') : 60121; const v = n ? Symbol.for('react.fundamental') : 60117; const b = n ? Symbol.for('react.responder') : 60118; const w = n ? Symbol.for('react.scope') : 60119; function k (e) { if (typeof e === 'object' && e !== null) { const t = e.$$typeof; switch (t) { case r: switch (e = e.type) { case c: case f: case o: case l: case i: case p: return e; default: switch (e = e && e.$$typeof) { case s: case d: case g: case h: case u: return e; default: return t; } } case a: return t; } } } function x (e) { return k(e) === f; }t.AsyncMode = c, t.ConcurrentMode = f, t.ContextConsumer = s, t.ContextProvider = u, t.Element = r, t.ForwardRef = d, t.Fragment = o, t.Lazy = g, t.Memo = h, t.Portal = a, t.Profiler = l, t.StrictMode = i, t.Suspense = p, t.isAsyncMode = function (e) { return x(e) || k(e) === c; }, t.isConcurrentMode = x, t.isContextConsumer = function (e) { return k(e) === s; }, t.isContextProvider = function (e) { return k(e) === u; }, t.isElement = function (e) { return typeof e === 'object' && e !== null && e.$$typeof === r; }, t.isForwardRef = function (e) { return k(e) === d; }, t.isFragment = function (e) { return k(e) === o; }, t.isLazy = function (e) { return k(e) === g; }, t.isMemo = function (e) { return k(e) === h; }, t.isPortal = function (e) { return k(e) === a; }, t.isProfiler = function (e) { return k(e) === l; }, t.isStrictMode = function (e) { return k(e) === i; }, t.isSuspense = function (e) { return k(e) === p; }, t.isValidElementType = function (e) { return typeof e === 'string' || typeof e === 'function' || e === o || e === f || e === l || e === i || e === p || e === m || typeof e === 'object' && e !== null && (e.$$typeof === g || e.$$typeof === h || e.$$typeof === u || e.$$typeof === s || e.$$typeof === d || e.$$typeof === v || e.$$typeof === b || e.$$typeof === w || e.$$typeof === y); }, t.typeOf = k;
    },
    296: (e, t, n) => {
      e.exports = n(103);
    },
    703: (e, t, n) => {
      const r = n(414); function a () {} function o () {}o.resetWarningCache = a, e.exports = function () { function e (e, t, n, a, o, i) { if (i !== r) { const l = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types'); throw l.name = 'Invariant Violation', l; } } function t () { return e; }e.isRequired = e; const n = { array: e, bigint: e, bool: e, func: e, number: e, object: e, string: e, symbol: e, any: e, arrayOf: t, element: e, elementType: e, instanceOf: t, node: e, objectOf: t, oneOf: t, oneOfType: t, shape: t, exact: t, checkPropTypes: o, resetWarningCache: a }; return n.PropTypes = n, n; };
    },
    697: (e, t, n) => { e.exports = n(703)(); },
    414: (e) => {
      e.exports = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
    },
    448: (e, t, n) => {
      const r = n(294); const a = n(840); function o (e) { for (var t = `https://reactjs.org/docs/error-decoder.html?invariant=${e}`, n = 1; n < arguments.length; n++)t += `&args[]=${encodeURIComponent(arguments[n])}`; return `Minified React error #${e}; visit ${t} for the full message or use the non-minified dev environment for full errors and additional helpful warnings.`; } const i = new Set(); const
        l = {}; function u (e, t) { s(e, t), s(`${e}Capture`, t); } function s (e, t) { for (l[e] = t, e = 0; e < t.length; e++)i.add(t[e]); } const c = !(typeof window === 'undefined' || void 0 === window.document || void 0 === window.document.createElement); const f = Object.prototype.hasOwnProperty; const d = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/; const p = {}; const m = {}; function h (e, t, n, r, a, o, i) { this.acceptsBooleans = t === 2 || t === 3 || t === 4, this.attributeName = r, this.attributeNamespace = a, this.mustUseProperty = n, this.propertyName = e, this.type = t, this.sanitizeURL = o, this.removeEmptyString = i; } const g = {}; 'children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style'.split(' ').forEach((e) => { g[e] = new h(e, 0, !1, e, null, !1, !1); }), [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach((e) => { const t = e[0]; g[t] = new h(t, 1, !1, e[1], null, !1, !1); }), ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach((e) => { g[e] = new h(e, 2, !1, e.toLowerCase(), null, !1, !1); }), ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach((e) => { g[e] = new h(e, 2, !1, e, null, !1, !1); }), 'allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope'.split(' ').forEach((e) => { g[e] = new h(e, 3, !1, e.toLowerCase(), null, !1, !1); }), ['checked', 'multiple', 'muted', 'selected'].forEach((e) => { g[e] = new h(e, 3, !0, e, null, !1, !1); }), ['capture', 'download'].forEach((e) => { g[e] = new h(e, 4, !1, e, null, !1, !1); }), ['cols', 'rows', 'size', 'span'].forEach((e) => { g[e] = new h(e, 6, !1, e, null, !1, !1); }), ['rowSpan', 'start'].forEach((e) => { g[e] = new h(e, 5, !1, e.toLowerCase(), null, !1, !1); }); const y = /[\-:]([a-z])/g; function v (e) { return e[1].toUpperCase(); } function b (e, t, n, r) { let a = g.hasOwnProperty(t) ? g[t] : null; (a !== null ? a.type !== 0 : r || !(t.length > 2) || t[0] !== 'o' && t[0] !== 'O' || t[1] !== 'n' && t[1] !== 'N') && ((function (e, t, n, r) { if (t == null || (function (e, t, n, r) { if (n !== null && n.type === 0) return !1; switch (typeof t) { case 'function': case 'symbol': return !0; case 'boolean': return !r && (n !== null ? !n.acceptsBooleans : (e = e.toLowerCase().slice(0, 5)) !== 'data-' && e !== 'aria-'); default: return !1; } }(e, t, n, r))) return !0; if (r) return !1; if (n !== null) switch (n.type) { case 3: return !t; case 4: return !1 === t; case 5: return isNaN(t); case 6: return isNaN(t) || t < 1; } return !1; }(t, n, a, r)) && (n = null), r || a === null ? (function (e) { return !!f.call(m, e) || !f.call(p, e) && (d.test(e) ? m[e] = !0 : (p[e] = !0, !1)); }(t)) && (n === null ? e.removeAttribute(t) : e.setAttribute(t, `${n}`)) : a.mustUseProperty ? e[a.propertyName] = n === null ? a.type !== 3 && '' : n : (t = a.attributeName, r = a.attributeNamespace, n === null ? e.removeAttribute(t) : (n = (a = a.type) === 3 || a === 4 && !0 === n ? '' : `${n}`, r ? e.setAttributeNS(r, t, n) : e.setAttribute(t, n)))); }'accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height'.split(' ').forEach((e) => { const t = e.replace(y, v); g[t] = new h(t, 1, !1, e, null, !1, !1); }), 'xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type'.split(' ').forEach((e) => { const t = e.replace(y, v); g[t] = new h(t, 1, !1, e, 'http://www.w3.org/1999/xlink', !1, !1); }), ['xml:base', 'xml:lang', 'xml:space'].forEach((e) => { const t = e.replace(y, v); g[t] = new h(t, 1, !1, e, 'http://www.w3.org/XML/1998/namespace', !1, !1); }), ['tabIndex', 'crossOrigin'].forEach((e) => { g[e] = new h(e, 1, !1, e.toLowerCase(), null, !1, !1); }), g.xlinkHref = new h('xlinkHref', 1, !1, 'xlink:href', 'http://www.w3.org/1999/xlink', !0, !1), ['src', 'href', 'action', 'formAction'].forEach((e) => { g[e] = new h(e, 1, !1, e.toLowerCase(), null, !0, !0); }); const w = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; const k = Symbol.for('react.element'); const x = Symbol.for('react.portal'); const S = Symbol.for('react.fragment'); const A = Symbol.for('react.strict_mode'); const C = Symbol.for('react.profiler'); const E = Symbol.for('react.provider'); const _ = Symbol.for('react.context'); const P = Symbol.for('react.forward_ref'); const O = Symbol.for('react.suspense'); const T = Symbol.for('react.suspense_list'); const $ = Symbol.for('react.memo'); const N = Symbol.for('react.lazy'); Symbol.for('react.scope'), Symbol.for('react.debug_trace_mode'); const z = Symbol.for('react.offscreen'); Symbol.for('react.legacy_hidden'), Symbol.for('react.cache'), Symbol.for('react.tracing_marker'); const M = Symbol.iterator; function L (e) { return e === null || typeof e !== 'object' ? null : typeof (e = M && e[M] || e['@@iterator']) === 'function' ? e : null; } let R; const D = Object.assign; function I (e) { if (void 0 === R) try { throw Error(); } catch (e) { const t = e.stack.trim().match(/\n( *(at )?)/); R = t && t[1] || ''; } return `\n${R}${e}`; } let F = !1; function j (e, t) { if (!e || F) return ''; F = !0; const n = Error.prepareStackTrace; Error.prepareStackTrace = void 0; try { if (t) if (t = function () { throw Error(); }, Object.defineProperty(t.prototype, 'props', { set () { throw Error(); } }), typeof Reflect === 'object' && Reflect.construct) { try { Reflect.construct(t, []); } catch (e) { var r = e; }Reflect.construct(e, [], t); } else { try { t.call(); } catch (e) { r = e; }e.call(t.prototype); } else { try { throw Error(); } catch (e) { r = e; }e(); } } catch (t) { if (t && r && typeof t.stack === 'string') { for (var a = t.stack.split('\n'), o = r.stack.split('\n'), i = a.length - 1, l = o.length - 1; i >= 1 && l >= 0 && a[i] !== o[l];)l--; for (;i >= 1 && l >= 0; i--, l--) if (a[i] !== o[l]) { if (i !== 1 || l !== 1) do { if (i--, --l < 0 || a[i] !== o[l]) { let u = `\n${a[i].replace(' at new ', ' at ')}`; return e.displayName && u.includes('<anonymous>') && (u = u.replace('<anonymous>', e.displayName)), u; } } while (i >= 1 && l >= 0); break; } } } finally { F = !1, Error.prepareStackTrace = n; } return (e = e ? e.displayName || e.name : '') ? I(e) : ''; } function B (e) { switch (e.tag) { case 5: return I(e.type); case 16: return I('Lazy'); case 13: return I('Suspense'); case 19: return I('SuspenseList'); case 0: case 2: case 15: return j(e.type, !1); case 11: return j(e.type.render, !1); case 1: return j(e.type, !0); default: return ''; } } function U (e) { if (e == null) return null; if (typeof e === 'function') return e.displayName || e.name || null; if (typeof e === 'string') return e; switch (e) { case S: return 'Fragment'; case x: return 'Portal'; case C: return 'Profiler'; case A: return 'StrictMode'; case O: return 'Suspense'; case T: return 'SuspenseList'; } if (typeof e === 'object') switch (e.$$typeof) { case _: return `${e.displayName || 'Context'}.Consumer`; case E: return `${e._context.displayName || 'Context'}.Provider`; case P: var t = e.render; return (e = e.displayName) || (e = (e = t.displayName || t.name || '') !== '' ? `ForwardRef(${e})` : 'ForwardRef'), e; case $: return (t = e.displayName || null) !== null ? t : U(e.type) || 'Memo'; case N: t = e._payload, e = e._init; try { return U(e(t)); } catch (e) {} } return null; } function H (e) { const t = e.type; switch (e.tag) { case 24: return 'Cache'; case 9: return `${t.displayName || 'Context'}.Consumer`; case 10: return `${t._context.displayName || 'Context'}.Provider`; case 18: return 'DehydratedFragment'; case 11: return e = (e = t.render).displayName || e.name || '', t.displayName || (e !== '' ? `ForwardRef(${e})` : 'ForwardRef'); case 7: return 'Fragment'; case 5: return t; case 4: return 'Portal'; case 3: return 'Root'; case 6: return 'Text'; case 16: return U(t); case 8: return t === A ? 'StrictMode' : 'Mode'; case 22: return 'Offscreen'; case 12: return 'Profiler'; case 21: return 'Scope'; case 13: return 'Suspense'; case 19: return 'SuspenseList'; case 25: return 'TracingMarker'; case 1: case 0: case 17: case 2: case 14: case 15: if (typeof t === 'function') return t.displayName || t.name || null; if (typeof t === 'string') return t; } return null; } function W (e) { switch (typeof e) { case 'boolean': case 'number': case 'string': case 'undefined': case 'object': return e; default: return ''; } } function V (e) { const t = e.type; return (e = e.nodeName) && e.toLowerCase() === 'input' && (t === 'checkbox' || t === 'radio'); } function Y (e) { e._valueTracker || (e._valueTracker = (function (e) { const t = V(e) ? 'checked' : 'value'; const n = Object.getOwnPropertyDescriptor(e.constructor.prototype, t); let r = `${e[t]}`; if (!e.hasOwnProperty(t) && void 0 !== n && typeof n.get === 'function' && typeof n.set === 'function') { const a = n.get; const o = n.set; return Object.defineProperty(e, t, { configurable: !0, get () { return a.call(this); }, set (e) { r = `${e}`, o.call(this, e); } }), Object.defineProperty(e, t, { enumerable: n.enumerable }), { getValue () { return r; }, setValue (e) { r = `${e}`; }, stopTracking () { e._valueTracker = null, delete e[t]; } }; } }(e))); } function K (e) { if (!e) return !1; const t = e._valueTracker; if (!t) return !0; const n = t.getValue(); let r = ''; return e && (r = V(e) ? e.checked ? 'true' : 'false' : e.value), (e = r) !== n && (t.setValue(e), !0); } function Q (e) { if (void 0 === (e = e || (typeof document !== 'undefined' ? document : void 0))) return null; try { return e.activeElement || e.body; } catch (t) { return e.body; } } function G (e, t) { const n = t.checked; return { ...t, defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: n != null ? n : e._wrapperState.initialChecked }; } function q (e, t) { let n = t.defaultValue == null ? '' : t.defaultValue; const r = t.checked != null ? t.checked : t.defaultChecked; n = W(t.value != null ? t.value : n), e._wrapperState = { initialChecked: r, initialValue: n, controlled: t.type === 'checkbox' || t.type === 'radio' ? t.checked != null : t.value != null }; } function X (e, t) { (t = t.checked) != null && b(e, 'checked', t, !1); } function Z (e, t) { X(e, t); const n = W(t.value); const r = t.type; if (n != null)r === 'number' ? (n === 0 && e.value === '' || e.value != n) && (e.value = `${n}`) : e.value !== `${n}` && (e.value = `${n}`); else if (r === 'submit' || r === 'reset') return void e.removeAttribute('value'); t.hasOwnProperty('value') ? ee(e, t.type, n) : t.hasOwnProperty('defaultValue') && ee(e, t.type, W(t.defaultValue)), t.checked == null && t.defaultChecked != null && (e.defaultChecked = !!t.defaultChecked); } function J (e, t, n) { if (t.hasOwnProperty('value') || t.hasOwnProperty('defaultValue')) { const r = t.type; if (!(r !== 'submit' && r !== 'reset' || void 0 !== t.value && t.value !== null)) return; t = `${e._wrapperState.initialValue}`, n || t === e.value || (e.value = t), e.defaultValue = t; }(n = e.name) !== '' && (e.name = ''), e.defaultChecked = !!e._wrapperState.initialChecked, n !== '' && (e.name = n); } function ee (e, t, n) { t === 'number' && Q(e.ownerDocument) === e || (n == null ? e.defaultValue = `${e._wrapperState.initialValue}` : e.defaultValue !== `${n}` && (e.defaultValue = `${n}`)); } const te = Array.isArray; function ne (e, t, n, r) { if (e = e.options, t) { t = {}; for (var a = 0; a < n.length; a++)t[`$${n[a]}`] = !0; for (n = 0; n < e.length; n++)a = t.hasOwnProperty(`$${e[n].value}`), e[n].selected !== a && (e[n].selected = a), a && r && (e[n].defaultSelected = !0); } else { for (n = `${W(n)}`, t = null, a = 0; a < e.length; a++) { if (e[a].value === n) return e[a].selected = !0, void (r && (e[a].defaultSelected = !0)); t !== null || e[a].disabled || (t = e[a]); }t !== null && (t.selected = !0); } } function re (e, t) { if (t.dangerouslySetInnerHTML != null) throw Error(o(91)); return { ...t, value: void 0, defaultValue: void 0, children: `${e._wrapperState.initialValue}` }; } function ae (e, t) { let n = t.value; if (n == null) { if (n = t.children, t = t.defaultValue, n != null) { if (t != null) throw Error(o(92)); if (te(n)) { if (n.length > 1) throw Error(o(93)); n = n[0]; }t = n; }t == null && (t = ''), n = t; }e._wrapperState = { initialValue: W(n) }; } function oe (e, t) { let n = W(t.value); const r = W(t.defaultValue); n != null && ((n = `${n}`) !== e.value && (e.value = n), t.defaultValue == null && e.defaultValue !== n && (e.defaultValue = n)), r != null && (e.defaultValue = `${r}`); } function ie (e) { const t = e.textContent; t === e._wrapperState.initialValue && t !== '' && t !== null && (e.value = t); } function le (e) { switch (e) { case 'svg': return 'http://www.w3.org/2000/svg'; case 'math': return 'http://www.w3.org/1998/Math/MathML'; default: return 'http://www.w3.org/1999/xhtml'; } } function ue (e, t) { return e == null || e === 'http://www.w3.org/1999/xhtml' ? le(t) : e === 'http://www.w3.org/2000/svg' && t === 'foreignObject' ? 'http://www.w3.org/1999/xhtml' : e; } let se; let ce; const fe = (ce = function (e, t) { if (e.namespaceURI !== 'http://www.w3.org/2000/svg' || 'innerHTML' in e)e.innerHTML = t; else { for ((se = se || document.createElement('div')).innerHTML = `<svg>${t.valueOf().toString()}</svg>`, t = se.firstChild; e.firstChild;)e.removeChild(e.firstChild); for (;t.firstChild;)e.appendChild(t.firstChild); } }, typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction ? function (e, t, n, r) { MSApp.execUnsafeLocalFunction(() => ce(e, t)); } : ce); function de (e, t) { if (t) { const n = e.firstChild; if (n && n === e.lastChild && n.nodeType === 3) return void (n.nodeValue = t); }e.textContent = t; } const pe = { animationIterationCount: !0, aspectRatio: !0, borderImageOutset: !0, borderImageSlice: !0, borderImageWidth: !0, boxFlex: !0, boxFlexGroup: !0, boxOrdinalGroup: !0, columnCount: !0, columns: !0, flex: !0, flexGrow: !0, flexPositive: !0, flexShrink: !0, flexNegative: !0, flexOrder: !0, gridArea: !0, gridRow: !0, gridRowEnd: !0, gridRowSpan: !0, gridRowStart: !0, gridColumn: !0, gridColumnEnd: !0, gridColumnSpan: !0, gridColumnStart: !0, fontWeight: !0, lineClamp: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, tabSize: !0, widows: !0, zIndex: !0, zoom: !0, fillOpacity: !0, floodOpacity: !0, stopOpacity: !0, strokeDasharray: !0, strokeDashoffset: !0, strokeMiterlimit: !0, strokeOpacity: !0, strokeWidth: !0 }; const me = ['Webkit', 'ms', 'Moz', 'O']; function he (e, t, n) { return t == null || typeof t === 'boolean' || t === '' ? '' : n || typeof t !== 'number' || t === 0 || pe.hasOwnProperty(e) && pe[e] ? (`${t}`).trim() : `${t}px`; } function ge (e, t) { for (let n in e = e.style, t) if (t.hasOwnProperty(n)) { const r = n.indexOf('--') === 0; const a = he(n, t[n], r); n === 'float' && (n = 'cssFloat'), r ? e.setProperty(n, a) : e[n] = a; } }Object.keys(pe).forEach((e) => { me.forEach((t) => { t = t + e.charAt(0).toUpperCase() + e.substring(1), pe[t] = pe[e]; }); }); const ye = { menuitem: !0, area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 }; function ve (e, t) { if (t) { if (ye[e] && (t.children != null || t.dangerouslySetInnerHTML != null)) throw Error(o(137, e)); if (t.dangerouslySetInnerHTML != null) { if (t.children != null) throw Error(o(60)); if (typeof t.dangerouslySetInnerHTML !== 'object' || !('__html' in t.dangerouslySetInnerHTML)) throw Error(o(61)); } if (t.style != null && typeof t.style !== 'object') throw Error(o(62)); } } function be (e, t) { if (e.indexOf('-') === -1) return typeof t.is === 'string'; switch (e) { case 'annotation-xml': case 'color-profile': case 'font-face': case 'font-face-src': case 'font-face-uri': case 'font-face-format': case 'font-face-name': case 'missing-glyph': return !1; default: return !0; } } let we = null; function ke (e) { return (e = e.target || e.srcElement || window).correspondingUseElement && (e = e.correspondingUseElement), e.nodeType === 3 ? e.parentNode : e; } let xe = null; let Se = null; let Ae = null; function Ce (e) { if (e = ba(e)) { if (typeof xe !== 'function') throw Error(o(280)); let t = e.stateNode; t && (t = ka(t), xe(e.stateNode, e.type, t)); } } function Ee (e) { Se ? Ae ? Ae.push(e) : Ae = [e] : Se = e; } function _e () { if (Se) { let e = Se; const t = Ae; if (Ae = Se = null, Ce(e), t) for (e = 0; e < t.length; e++)Ce(t[e]); } } function Pe (e, t) { return e(t); } function Oe () {} let Te = !1; function $e (e, t, n) { if (Te) return e(t, n); Te = !0; try { return Pe(e, t, n); } finally { Te = !1, (Se !== null || Ae !== null) && (Oe(), _e()); } } function Ne (e, t) { let n = e.stateNode; if (n === null) return null; let r = ka(n); if (r === null) return null; n = r[t]; switch (t) { case 'onClick': case 'onClickCapture': case 'onDoubleClick': case 'onDoubleClickCapture': case 'onMouseDown': case 'onMouseDownCapture': case 'onMouseMove': case 'onMouseMoveCapture': case 'onMouseUp': case 'onMouseUpCapture': case 'onMouseEnter': (r = !r.disabled) || (r = !((e = e.type) === 'button' || e === 'input' || e === 'select' || e === 'textarea')), e = !r; break; default: e = !1; } if (e) return null; if (n && typeof n !== 'function') throw Error(o(231, t, typeof n)); return n; } let ze = !1; if (c) try { const Me = {}; Object.defineProperty(Me, 'passive', { get () { ze = !0; } }), window.addEventListener('test', Me, Me), window.removeEventListener('test', Me, Me); } catch (ce) { ze = !1; } function Le (e, t, n, r, a, o, i, l, u) { const s = Array.prototype.slice.call(arguments, 3); try { t.apply(n, s); } catch (e) { this.onError(e); } } let Re = !1; let De = null; let Ie = !1; let Fe = null; const je = { onError (e) { Re = !0, De = e; } }; function Be (e, t, n, r, a, o, i, l, u) { Re = !1, De = null, Le.apply(je, arguments); } function Ue (e) { let t = e; let n = e; if (e.alternate) for (;t.return;)t = t.return; else { e = t; do { (4098 & (t = e).flags) != 0 && (n = t.return), e = t.return; } while (e); } return t.tag === 3 ? n : null; } function He (e) { if (e.tag === 13) { let t = e.memoizedState; if (t === null && (e = e.alternate) !== null && (t = e.memoizedState), t !== null) return t.dehydrated; } return null; } function We (e) { if (Ue(e) !== e) throw Error(o(188)); } function Ve (e) { return (e = (function (e) { let t = e.alternate; if (!t) { if ((t = Ue(e)) === null) throw Error(o(188)); return t !== e ? null : e; } for (var n = e, r = t; ;) { const a = n.return; if (a === null) break; let i = a.alternate; if (i === null) { if ((r = a.return) !== null) { n = r; continue; } break; } if (a.child === i.child) { for (i = a.child; i;) { if (i === n) return We(a), e; if (i === r) return We(a), t; i = i.sibling; } throw Error(o(188)); } if (n.return !== r.return)n = a, r = i; else { for (var l = !1, u = a.child; u;) { if (u === n) { l = !0, n = a, r = i; break; } if (u === r) { l = !0, r = a, n = i; break; }u = u.sibling; } if (!l) { for (u = i.child; u;) { if (u === n) { l = !0, n = i, r = a; break; } if (u === r) { l = !0, r = i, n = a; break; }u = u.sibling; } if (!l) throw Error(o(189)); } } if (n.alternate !== r) throw Error(o(190)); } if (n.tag !== 3) throw Error(o(188)); return n.stateNode.current === n ? e : t; }(e))) !== null ? Ye(e) : null; } function Ye (e) { if (e.tag === 5 || e.tag === 6) return e; for (e = e.child; e !== null;) { const t = Ye(e); if (t !== null) return t; e = e.sibling; } return null; } const Ke = a.unstable_scheduleCallback; const Qe = a.unstable_cancelCallback; const Ge = a.unstable_shouldYield; const qe = a.unstable_requestPaint; const Xe = a.unstable_now; const Ze = a.unstable_getCurrentPriorityLevel; const Je = a.unstable_ImmediatePriority; const et = a.unstable_UserBlockingPriority; const tt = a.unstable_NormalPriority; const nt = a.unstable_LowPriority; const rt = a.unstable_IdlePriority; let at = null; let ot = null; const it = Math.clz32 ? Math.clz32 : function (e) { return (e >>>= 0) == 0 ? 32 : 31 - (lt(e) / ut | 0) | 0; }; var lt = Math.log; var ut = Math.LN2; let st = 64; let ct = 4194304; function ft (e) { switch (e & -e) { case 1: return 1; case 2: return 2; case 4: return 4; case 8: return 8; case 16: return 16; case 32: return 32; case 64: case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return 4194240 & e; case 4194304: case 8388608: case 16777216: case 33554432: case 67108864: return 130023424 & e; case 134217728: return 134217728; case 268435456: return 268435456; case 536870912: return 536870912; case 1073741824: return 1073741824; default: return e; } } function dt (e, t) { let n = e.pendingLanes; if (n === 0) return 0; let r = 0; let a = e.suspendedLanes; let o = e.pingedLanes; let i = 268435455 & n; if (i !== 0) { const l = i & ~a; l !== 0 ? r = ft(l) : (o &= i) != 0 && (r = ft(o)); } else (i = n & ~a) != 0 ? r = ft(i) : o !== 0 && (r = ft(o)); if (r === 0) return 0; if (t !== 0 && t !== r && (t & a) == 0 && ((a = r & -r) >= (o = t & -t) || a === 16 && (4194240 & o) != 0)) return t; if ((4 & r) != 0 && (r |= 16 & n), (t = e.entangledLanes) !== 0) for (e = e.entanglements, t &= r; t > 0;)a = 1 << (n = 31 - it(t)), r |= e[n], t &= ~a; return r; } function pt (e, t) { switch (e) { case 1: case 2: case 4: return t + 250; case 8: case 16: case 32: case 64: case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: return t + 5e3; default: return -1; } } function mt (e) { return (e = -1073741825 & e.pendingLanes) != 0 ? e : 1073741824 & e ? 1073741824 : 0; } function ht () { const e = st; return (4194240 & (st <<= 1)) == 0 && (st = 64), e; } function gt (e) { for (var t = [], n = 0; n < 31; n++)t.push(e); return t; } function yt (e, t, n) { e.pendingLanes |= t, t !== 536870912 && (e.suspendedLanes = 0, e.pingedLanes = 0), (e = e.eventTimes)[t = 31 - it(t)] = n; } function vt (e, t) { let n = e.entangledLanes |= t; for (e = e.entanglements; n;) { const r = 31 - it(n); const a = 1 << r; a & t | e[r] & t && (e[r] |= t), n &= ~a; } } let bt = 0; function wt (e) { return (e &= -e) > 1 ? e > 4 ? (268435455 & e) != 0 ? 16 : 536870912 : 4 : 1; } let kt; let xt; let St; let At; let Ct; let Et = !1; const _t = []; let Pt = null; let Ot = null; let Tt = null; const $t = new Map(); const Nt = new Map(); const zt = []; const Mt = 'mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit'.split(' '); function Lt (e, t) { switch (e) { case 'focusin': case 'focusout': Pt = null; break; case 'dragenter': case 'dragleave': Ot = null; break; case 'mouseover': case 'mouseout': Tt = null; break; case 'pointerover': case 'pointerout': $t.delete(t.pointerId); break; case 'gotpointercapture': case 'lostpointercapture': Nt.delete(t.pointerId); } } function Rt (e, t, n, r, a, o) { return e === null || e.nativeEvent !== o ? (e = { blockedOn: t, domEventName: n, eventSystemFlags: r, nativeEvent: o, targetContainers: [a] }, t !== null && (t = ba(t)) !== null && xt(t), e) : (e.eventSystemFlags |= r, t = e.targetContainers, a !== null && t.indexOf(a) === -1 && t.push(a), e); } function Dt (e) { let t = va(e.target); if (t !== null) { const n = Ue(t); if (n !== null) if ((t = n.tag) === 13) { if ((t = He(n)) !== null) return e.blockedOn = t, void Ct(e.priority, () => { St(n); }); } else if (t === 3 && n.stateNode.current.memoizedState.isDehydrated) return void (e.blockedOn = n.tag === 3 ? n.stateNode.containerInfo : null); }e.blockedOn = null; } function It (e) { if (e.blockedOn !== null) return !1; for (let t = e.targetContainers; t.length > 0;) { let n = Gt(e.domEventName, e.eventSystemFlags, t[0], e.nativeEvent); if (n !== null) return (t = ba(n)) !== null && xt(t), e.blockedOn = n, !1; const r = new (n = e.nativeEvent).constructor(n.type, n); we = r, n.target.dispatchEvent(r), we = null, t.shift(); } return !0; } function Ft (e, t, n) { It(e) && n.delete(t); } function jt () { Et = !1, Pt !== null && It(Pt) && (Pt = null), Ot !== null && It(Ot) && (Ot = null), Tt !== null && It(Tt) && (Tt = null), $t.forEach(Ft), Nt.forEach(Ft); } function Bt (e, t) { e.blockedOn === t && (e.blockedOn = null, Et || (Et = !0, a.unstable_scheduleCallback(a.unstable_NormalPriority, jt))); } function Ut (e) { function t (t) { return Bt(t, e); } if (_t.length > 0) { Bt(_t[0], e); for (var n = 1; n < _t.length; n++) { var r = _t[n]; r.blockedOn === e && (r.blockedOn = null); } } for (Pt !== null && Bt(Pt, e), Ot !== null && Bt(Ot, e), Tt !== null && Bt(Tt, e), $t.forEach(t), Nt.forEach(t), n = 0; n < zt.length; n++)(r = zt[n]).blockedOn === e && (r.blockedOn = null); for (;zt.length > 0 && (n = zt[0]).blockedOn === null;)Dt(n), n.blockedOn === null && zt.shift(); } const Ht = w.ReactCurrentBatchConfig; let Wt = !0; function Vt (e, t, n, r) { const a = bt; const o = Ht.transition; Ht.transition = null; try { bt = 1, Kt(e, t, n, r); } finally { bt = a, Ht.transition = o; } } function Yt (e, t, n, r) { const a = bt; const o = Ht.transition; Ht.transition = null; try { bt = 4, Kt(e, t, n, r); } finally { bt = a, Ht.transition = o; } } function Kt (e, t, n, r) { if (Wt) { let a = Gt(e, t, n, r); if (a === null)Wr(e, t, r, Qt, n), Lt(e, r); else if (function (e, t, n, r, a) { switch (t) { case 'focusin': return Pt = Rt(Pt, e, t, n, r, a), !0; case 'dragenter': return Ot = Rt(Ot, e, t, n, r, a), !0; case 'mouseover': return Tt = Rt(Tt, e, t, n, r, a), !0; case 'pointerover': var o = a.pointerId; return $t.set(o, Rt($t.get(o) || null, e, t, n, r, a)), !0; case 'gotpointercapture': return o = a.pointerId, Nt.set(o, Rt(Nt.get(o) || null, e, t, n, r, a)), !0; } return !1; }(a, e, t, n, r))r.stopPropagation(); else if (Lt(e, r), 4 & t && Mt.indexOf(e) > -1) { for (;a !== null;) { let o = ba(a); if (o !== null && kt(o), (o = Gt(e, t, n, r)) === null && Wr(e, t, r, Qt, n), o === a) break; a = o; }a !== null && r.stopPropagation(); } else Wr(e, t, r, null, n); } } var Qt = null; function Gt (e, t, n, r) { if (Qt = null, (e = va(e = ke(r))) !== null) if ((t = Ue(e)) === null)e = null; else if ((n = t.tag) === 13) { if ((e = He(t)) !== null) return e; e = null; } else if (n === 3) { if (t.stateNode.current.memoizedState.isDehydrated) return t.tag === 3 ? t.stateNode.containerInfo : null; e = null; } else t !== e && (e = null); return Qt = e, null; } function qt (e) { switch (e) { case 'cancel': case 'click': case 'close': case 'contextmenu': case 'copy': case 'cut': case 'auxclick': case 'dblclick': case 'dragend': case 'dragstart': case 'drop': case 'focusin': case 'focusout': case 'input': case 'invalid': case 'keydown': case 'keypress': case 'keyup': case 'mousedown': case 'mouseup': case 'paste': case 'pause': case 'play': case 'pointercancel': case 'pointerdown': case 'pointerup': case 'ratechange': case 'reset': case 'resize': case 'seeked': case 'submit': case 'touchcancel': case 'touchend': case 'touchstart': case 'volumechange': case 'change': case 'selectionchange': case 'textInput': case 'compositionstart': case 'compositionend': case 'compositionupdate': case 'beforeblur': case 'afterblur': case 'beforeinput': case 'blur': case 'fullscreenchange': case 'focus': case 'hashchange': case 'popstate': case 'select': case 'selectstart': return 1; case 'drag': case 'dragenter': case 'dragexit': case 'dragleave': case 'dragover': case 'mousemove': case 'mouseout': case 'mouseover': case 'pointermove': case 'pointerout': case 'pointerover': case 'scroll': case 'toggle': case 'touchmove': case 'wheel': case 'mouseenter': case 'mouseleave': case 'pointerenter': case 'pointerleave': return 4; case 'message': switch (Ze()) { case Je: return 1; case et: return 4; case tt: case nt: return 16; case rt: return 536870912; default: return 16; } default: return 16; } } let Xt = null; let Zt = null; let Jt = null; function en () { if (Jt) return Jt; let e; let t; const n = Zt; const r = n.length; const a = 'value' in Xt ? Xt.value : Xt.textContent; const o = a.length; for (e = 0; e < r && n[e] === a[e]; e++);const i = r - e; for (t = 1; t <= i && n[r - t] === a[o - t]; t++);return Jt = a.slice(e, t > 1 ? 1 - t : void 0); } function tn (e) { const t = e.keyCode; return 'charCode' in e ? (e = e.charCode) === 0 && t === 13 && (e = 13) : e = t, e === 10 && (e = 13), e >= 32 || e === 13 ? e : 0; } function nn () { return !0; } function rn () { return !1; } function an (e) { function t (t, n, r, a, o) { for (const i in this._reactName = t, this._targetInst = r, this.type = n, this.nativeEvent = a, this.target = o, this.currentTarget = null, e)e.hasOwnProperty(i) && (t = e[i], this[i] = t ? t(a) : a[i]); return this.isDefaultPrevented = (a.defaultPrevented != null ? a.defaultPrevented : !1 === a.returnValue) ? nn : rn, this.isPropagationStopped = rn, this; } return D(t.prototype, { preventDefault () { this.defaultPrevented = !0; const e = this.nativeEvent; e && (e.preventDefault ? e.preventDefault() : typeof e.returnValue !== 'unknown' && (e.returnValue = !1), this.isDefaultPrevented = nn); }, stopPropagation () { const e = this.nativeEvent; e && (e.stopPropagation ? e.stopPropagation() : typeof e.cancelBubble !== 'unknown' && (e.cancelBubble = !0), this.isPropagationStopped = nn); }, persist () {}, isPersistent: nn }), t; } let on; let ln; let un; const sn = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp (e) { return e.timeStamp || Date.now(); }, defaultPrevented: 0, isTrusted: 0 }; const cn = an(sn); const fn = { ...sn, view: 0, detail: 0 }; const dn = an(fn); const pn = { ...fn, screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: Cn, button: 0, buttons: 0, relatedTarget (e) { return void 0 === e.relatedTarget ? e.fromElement === e.srcElement ? e.toElement : e.fromElement : e.relatedTarget; }, movementX (e) { return 'movementX' in e ? e.movementX : (e !== un && (un && e.type === 'mousemove' ? (on = e.screenX - un.screenX, ln = e.screenY - un.screenY) : ln = on = 0, un = e), on); }, movementY (e) { return 'movementY' in e ? e.movementY : ln; } }; const mn = an(pn); const hn = an({ ...pn, dataTransfer: 0 }); const gn = an({ ...fn, relatedTarget: 0 }); const yn = an({ ...sn, animationName: 0, elapsedTime: 0, pseudoElement: 0 }); const vn = { ...sn, clipboardData (e) { return 'clipboardData' in e ? e.clipboardData : window.clipboardData; } }; const bn = an(vn); const wn = an({ ...sn, data: 0 }); const kn = { Esc: 'Escape', Spacebar: ' ', Left: 'ArrowLeft', Up: 'ArrowUp', Right: 'ArrowRight', Down: 'ArrowDown', Del: 'Delete', Win: 'OS', Menu: 'ContextMenu', Apps: 'ContextMenu', Scroll: 'ScrollLock', MozPrintableKey: 'Unidentified' }; const xn = { 8: 'Backspace', 9: 'Tab', 12: 'Clear', 13: 'Enter', 16: 'Shift', 17: 'Control', 18: 'Alt', 19: 'Pause', 20: 'CapsLock', 27: 'Escape', 32: ' ', 33: 'PageUp', 34: 'PageDown', 35: 'End', 36: 'Home', 37: 'ArrowLeft', 38: 'ArrowUp', 39: 'ArrowRight', 40: 'ArrowDown', 45: 'Insert', 46: 'Delete', 112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6', 118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12', 144: 'NumLock', 145: 'ScrollLock', 224: 'Meta' }; const Sn = { Alt: 'altKey', Control: 'ctrlKey', Meta: 'metaKey', Shift: 'shiftKey' }; function An (e) { const t = this.nativeEvent; return t.getModifierState ? t.getModifierState(e) : !!(e = Sn[e]) && !!t[e]; } function Cn () { return An; } const En = { ...fn, key (e) { if (e.key) { const t = kn[e.key] || e.key; if (t !== 'Unidentified') return t; } return e.type === 'keypress' ? (e = tn(e)) === 13 ? 'Enter' : String.fromCharCode(e) : e.type === 'keydown' || e.type === 'keyup' ? xn[e.keyCode] || 'Unidentified' : ''; }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: Cn, charCode (e) { return e.type === 'keypress' ? tn(e) : 0; }, keyCode (e) { return e.type === 'keydown' || e.type === 'keyup' ? e.keyCode : 0; }, which (e) { return e.type === 'keypress' ? tn(e) : e.type === 'keydown' || e.type === 'keyup' ? e.keyCode : 0; } }; const _n = an(En); const Pn = an({ ...pn, pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }); const On = an({ ...fn, touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: Cn }); const Tn = an({ ...sn, propertyName: 0, elapsedTime: 0, pseudoElement: 0 }); const $n = { ...pn, deltaX (e) { return 'deltaX' in e ? e.deltaX : 'wheelDeltaX' in e ? -e.wheelDeltaX : 0; }, deltaY (e) { return 'deltaY' in e ? e.deltaY : 'wheelDeltaY' in e ? -e.wheelDeltaY : 'wheelDelta' in e ? -e.wheelDelta : 0; }, deltaZ: 0, deltaMode: 0 }; const Nn = an($n); const zn = [9, 13, 27, 32]; const Mn = c && 'CompositionEvent' in window; let Ln = null; c && 'documentMode' in document && (Ln = document.documentMode); const Rn = c && 'TextEvent' in window && !Ln; const Dn = c && (!Mn || Ln && Ln > 8 && Ln <= 11); const In = String.fromCharCode(32); let Fn = !1; function jn (e, t) { switch (e) { case 'keyup': return zn.indexOf(t.keyCode) !== -1; case 'keydown': return t.keyCode !== 229; case 'keypress': case 'mousedown': case 'focusout': return !0; default: return !1; } } function Bn (e) { return typeof (e = e.detail) === 'object' && 'data' in e ? e.data : null; } let Un = !1; const Hn = { color: !0, date: !0, datetime: !0, 'datetime-local': !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0 }; function Wn (e) { const t = e && e.nodeName && e.nodeName.toLowerCase(); return t === 'input' ? !!Hn[e.type] : t === 'textarea'; } function Vn (e, t, n, r) { Ee(r), (t = Yr(t, 'onChange')).length > 0 && (n = new cn('onChange', 'change', null, n, r), e.push({ event: n, listeners: t })); } let Yn = null; let Kn = null; function Qn (e) { Ir(e, 0); } function Gn (e) { if (K(wa(e))) return e; } function qn (e, t) { if (e === 'change') return t; } let Xn = !1; if (c) { let Zn; if (c) { let Jn = 'oninput' in document; if (!Jn) { const er = document.createElement('div'); er.setAttribute('oninput', 'return;'), Jn = typeof er.oninput === 'function'; }Zn = Jn; } else Zn = !1; Xn = Zn && (!document.documentMode || document.documentMode > 9); } function tr () { Yn && (Yn.detachEvent('onpropertychange', nr), Kn = Yn = null); } function nr (e) { if (e.propertyName === 'value' && Gn(Kn)) { const t = []; Vn(t, Kn, e, ke(e)), $e(Qn, t); } } function rr (e, t, n) { e === 'focusin' ? (tr(), Kn = n, (Yn = t).attachEvent('onpropertychange', nr)) : e === 'focusout' && tr(); } function ar (e) { if (e === 'selectionchange' || e === 'keyup' || e === 'keydown') return Gn(Kn); } function or (e, t) { if (e === 'click') return Gn(t); } function ir (e, t) { if (e === 'input' || e === 'change') return Gn(t); } const lr = typeof Object.is === 'function' ? Object.is : function (e, t) { return e === t && (e !== 0 || 1 / e == 1 / t) || e != e && t != t; }; function ur (e, t) { if (lr(e, t)) return !0; if (typeof e !== 'object' || e === null || typeof t !== 'object' || t === null) return !1; const n = Object.keys(e); let r = Object.keys(t); if (n.length !== r.length) return !1; for (r = 0; r < n.length; r++) { const a = n[r]; if (!f.call(t, a) || !lr(e[a], t[a])) return !1; } return !0; } function sr (e) { for (;e && e.firstChild;)e = e.firstChild; return e; } function cr (e, t) { let n; let r = sr(e); for (e = 0; r;) { if (r.nodeType === 3) { if (n = e + r.textContent.length, e <= t && n >= t) return { node: r, offset: t - e }; e = n; }e: { for (;r;) { if (r.nextSibling) { r = r.nextSibling; break e; }r = r.parentNode; }r = void 0; }r = sr(r); } } function fr (e, t) { return !(!e || !t) && (e === t || (!e || e.nodeType !== 3) && (t && t.nodeType === 3 ? fr(e, t.parentNode) : 'contains' in e ? e.contains(t) : !!e.compareDocumentPosition && !!(16 & e.compareDocumentPosition(t)))); } function dr () { for (var e = window, t = Q(); t instanceof e.HTMLIFrameElement;) { try { var n = typeof t.contentWindow.location.href === 'string'; } catch (e) { n = !1; } if (!n) break; t = Q((e = t.contentWindow).document); } return t; } function pr (e) { const t = e && e.nodeName && e.nodeName.toLowerCase(); return t && (t === 'input' && (e.type === 'text' || e.type === 'search' || e.type === 'tel' || e.type === 'url' || e.type === 'password') || t === 'textarea' || e.contentEditable === 'true'); } function mr (e) { let t = dr(); let n = e.focusedElem; let r = e.selectionRange; if (t !== n && n && n.ownerDocument && fr(n.ownerDocument.documentElement, n)) { if (r !== null && pr(n)) if (t = r.start, void 0 === (e = r.end) && (e = t), 'selectionStart' in n)n.selectionStart = t, n.selectionEnd = Math.min(e, n.value.length); else if ((e = (t = n.ownerDocument || document) && t.defaultView || window).getSelection) { e = e.getSelection(); let a = n.textContent.length; let o = Math.min(r.start, a); r = void 0 === r.end ? o : Math.min(r.end, a), !e.extend && o > r && (a = r, r = o, o = a), a = cr(n, o); const i = cr(n, r); a && i && (e.rangeCount !== 1 || e.anchorNode !== a.node || e.anchorOffset !== a.offset || e.focusNode !== i.node || e.focusOffset !== i.offset) && ((t = t.createRange()).setStart(a.node, a.offset), e.removeAllRanges(), o > r ? (e.addRange(t), e.extend(i.node, i.offset)) : (t.setEnd(i.node, i.offset), e.addRange(t))); } for (t = [], e = n; e = e.parentNode;)e.nodeType === 1 && t.push({ element: e, left: e.scrollLeft, top: e.scrollTop }); for (typeof n.focus === 'function' && n.focus(), n = 0; n < t.length; n++)(e = t[n]).element.scrollLeft = e.left, e.element.scrollTop = e.top; } } const hr = c && 'documentMode' in document && document.documentMode <= 11; let gr = null; let yr = null; let vr = null; let br = !1; function wr (e, t, n) { let r = n.window === n ? n.document : n.nodeType === 9 ? n : n.ownerDocument; br || gr == null || gr !== Q(r) || (r = 'selectionStart' in (r = gr) && pr(r) ? { start: r.selectionStart, end: r.selectionEnd } : { anchorNode: (r = (r.ownerDocument && r.ownerDocument.defaultView || window).getSelection()).anchorNode, anchorOffset: r.anchorOffset, focusNode: r.focusNode, focusOffset: r.focusOffset }, vr && ur(vr, r) || (vr = r, (r = Yr(yr, 'onSelect')).length > 0 && (t = new cn('onSelect', 'select', null, t, n), e.push({ event: t, listeners: r }), t.target = gr))); } function kr (e, t) { const n = {}; return n[e.toLowerCase()] = t.toLowerCase(), n[`Webkit${e}`] = `webkit${t}`, n[`Moz${e}`] = `moz${t}`, n; } const xr = { animationend: kr('Animation', 'AnimationEnd'), animationiteration: kr('Animation', 'AnimationIteration'), animationstart: kr('Animation', 'AnimationStart'), transitionend: kr('Transition', 'TransitionEnd') }; const Sr = {}; let Ar = {}; function Cr (e) { if (Sr[e]) return Sr[e]; if (!xr[e]) return e; let t; const n = xr[e]; for (t in n) if (n.hasOwnProperty(t) && t in Ar) return Sr[e] = n[t]; return e; }c && (Ar = document.createElement('div').style, 'AnimationEvent' in window || (delete xr.animationend.animation, delete xr.animationiteration.animation, delete xr.animationstart.animation), 'TransitionEvent' in window || delete xr.transitionend.transition); const Er = Cr('animationend'); const _r = Cr('animationiteration'); const Pr = Cr('animationstart'); const Or = Cr('transitionend'); const Tr = new Map(); const $r = 'abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel'.split(' '); function Nr (e, t) { Tr.set(e, t), u(t, [e]); } for (let zr = 0; zr < $r.length; zr++) { const Mr = $r[zr]; Nr(Mr.toLowerCase(), `on${Mr[0].toUpperCase() + Mr.slice(1)}`); }Nr(Er, 'onAnimationEnd'), Nr(_r, 'onAnimationIteration'), Nr(Pr, 'onAnimationStart'), Nr('dblclick', 'onDoubleClick'), Nr('focusin', 'onFocus'), Nr('focusout', 'onBlur'), Nr(Or, 'onTransitionEnd'), s('onMouseEnter', ['mouseout', 'mouseover']), s('onMouseLeave', ['mouseout', 'mouseover']), s('onPointerEnter', ['pointerout', 'pointerover']), s('onPointerLeave', ['pointerout', 'pointerover']), u('onChange', 'change click focusin focusout input keydown keyup selectionchange'.split(' ')), u('onSelect', 'focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange'.split(' ')), u('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']), u('onCompositionEnd', 'compositionend focusout keydown keypress keyup mousedown'.split(' ')), u('onCompositionStart', 'compositionstart focusout keydown keypress keyup mousedown'.split(' ')), u('onCompositionUpdate', 'compositionupdate focusout keydown keypress keyup mousedown'.split(' ')); const Lr = 'abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting'.split(' '); const Rr = new Set('cancel close invalid load scroll toggle'.split(' ').concat(Lr)); function Dr (e, t, n) { const r = e.type || 'unknown-event'; e.currentTarget = n, (function (e, t, n, r, a, i, l, u, s) { if (Be.apply(this, arguments), Re) { if (!Re) throw Error(o(198)); const c = De; Re = !1, De = null, Ie || (Ie = !0, Fe = c); } }(r, t, void 0, e)), e.currentTarget = null; } function Ir (e, t) { t = (4 & t) != 0; for (let n = 0; n < e.length; n++) { let r = e[n]; const a = r.event; r = r.listeners; e: { let o = void 0; if (t) for (var i = r.length - 1; i >= 0; i--) { var l = r[i]; var u = l.instance; var s = l.currentTarget; if (l = l.listener, u !== o && a.isPropagationStopped()) break e; Dr(a, l, s), o = u; } else for (i = 0; i < r.length; i++) { if (u = (l = r[i]).instance, s = l.currentTarget, l = l.listener, u !== o && a.isPropagationStopped()) break e; Dr(a, l, s), o = u; } } } if (Ie) throw e = Fe, Ie = !1, Fe = null, e; } function Fr (e, t) { let n = t[ha]; void 0 === n && (n = t[ha] = new Set()); const r = `${e}__bubble`; n.has(r) || (Hr(t, e, 2, !1), n.add(r)); } function jr (e, t, n) { let r = 0; t && (r |= 4), Hr(n, e, r, t); } const Br = `_reactListening${Math.random().toString(36).slice(2)}`; function Ur (e) { if (!e[Br]) { e[Br] = !0, i.forEach((t) => { t !== 'selectionchange' && (Rr.has(t) || jr(t, !1, e), jr(t, !0, e)); }); const t = e.nodeType === 9 ? e : e.ownerDocument; t === null || t[Br] || (t[Br] = !0, jr('selectionchange', !1, t)); } } function Hr (e, t, n, r) { switch (qt(t)) { case 1: var a = Vt; break; case 4: a = Yt; break; default: a = Kt; }n = a.bind(null, t, n, e), a = void 0, !ze || t !== 'touchstart' && t !== 'touchmove' && t !== 'wheel' || (a = !0), r ? void 0 !== a ? e.addEventListener(t, n, { capture: !0, passive: a }) : e.addEventListener(t, n, !0) : void 0 !== a ? e.addEventListener(t, n, { passive: a }) : e.addEventListener(t, n, !1); } function Wr (e, t, n, r, a) { let o = r; if ((1 & t) == 0 && (2 & t) == 0 && r !== null)e:for (;;) { if (r === null) return; let i = r.tag; if (i === 3 || i === 4) { let l = r.stateNode.containerInfo; if (l === a || l.nodeType === 8 && l.parentNode === a) break; if (i === 4) for (i = r.return; i !== null;) { var u = i.tag; if ((u === 3 || u === 4) && ((u = i.stateNode.containerInfo) === a || u.nodeType === 8 && u.parentNode === a)) return; i = i.return; } for (;l !== null;) { if ((i = va(l)) === null) return; if ((u = i.tag) === 5 || u === 6) { r = o = i; continue e; }l = l.parentNode; } }r = r.return; }$e(() => { let r = o; let a = ke(n); const i = []; e: { var l = Tr.get(e); if (void 0 !== l) { var u = cn; var s = e; switch (e) { case 'keypress': if (tn(n) === 0) break e; case 'keydown': case 'keyup': u = _n; break; case 'focusin': s = 'focus', u = gn; break; case 'focusout': s = 'blur', u = gn; break; case 'beforeblur': case 'afterblur': u = gn; break; case 'click': if (n.button === 2) break e; case 'auxclick': case 'dblclick': case 'mousedown': case 'mousemove': case 'mouseup': case 'mouseout': case 'mouseover': case 'contextmenu': u = mn; break; case 'drag': case 'dragend': case 'dragenter': case 'dragexit': case 'dragleave': case 'dragover': case 'dragstart': case 'drop': u = hn; break; case 'touchcancel': case 'touchend': case 'touchmove': case 'touchstart': u = On; break; case Er: case _r: case Pr: u = yn; break; case Or: u = Tn; break; case 'scroll': u = dn; break; case 'wheel': u = Nn; break; case 'copy': case 'cut': case 'paste': u = bn; break; case 'gotpointercapture': case 'lostpointercapture': case 'pointercancel': case 'pointerdown': case 'pointermove': case 'pointerout': case 'pointerover': case 'pointerup': u = Pn; } var c = (4 & t) != 0; var f = !c && e === 'scroll'; var d = c ? l !== null ? `${l}Capture` : null : l; c = []; for (var p, m = r; m !== null;) { var h = (p = m).stateNode; if (p.tag === 5 && h !== null && (p = h, d !== null && (h = Ne(m, d)) != null && c.push(Vr(m, h, p))), f) break; m = m.return; }c.length > 0 && (l = new u(l, s, null, n, a), i.push({ event: l, listeners: c })); } } if ((7 & t) == 0) { if (u = e === 'mouseout' || e === 'pointerout', (!(l = e === 'mouseover' || e === 'pointerover') || n === we || !(s = n.relatedTarget || n.fromElement) || !va(s) && !s[ma]) && (u || l) && (l = a.window === a ? a : (l = a.ownerDocument) ? l.defaultView || l.parentWindow : window, u ? (u = r, (s = (s = n.relatedTarget || n.toElement) ? va(s) : null) !== null && (s !== (f = Ue(s)) || s.tag !== 5 && s.tag !== 6) && (s = null)) : (u = null, s = r), u !== s)) { if (c = mn, h = 'onMouseLeave', d = 'onMouseEnter', m = 'mouse', e !== 'pointerout' && e !== 'pointerover' || (c = Pn, h = 'onPointerLeave', d = 'onPointerEnter', m = 'pointer'), f = u == null ? l : wa(u), p = s == null ? l : wa(s), (l = new c(h, `${m}leave`, u, n, a)).target = f, l.relatedTarget = p, h = null, va(a) === r && ((c = new c(d, `${m}enter`, s, n, a)).target = p, c.relatedTarget = f, h = c), f = h, u && s)e: { for (d = s, m = 0, p = c = u; p; p = Kr(p))m++; for (p = 0, h = d; h; h = Kr(h))p++; for (;m - p > 0;)c = Kr(c), m--; for (;p - m > 0;)d = Kr(d), p--; for (;m--;) { if (c === d || d !== null && c === d.alternate) break e; c = Kr(c), d = Kr(d); }c = null; } else c = null; u !== null && Qr(i, l, u, c, !1), s !== null && f !== null && Qr(i, f, s, c, !0); } if ((u = (l = r ? wa(r) : window).nodeName && l.nodeName.toLowerCase()) === 'select' || u === 'input' && l.type === 'file') var g = qn; else if (Wn(l)) if (Xn)g = ir; else { g = ar; var y = rr; } else (u = l.nodeName) && u.toLowerCase() === 'input' && (l.type === 'checkbox' || l.type === 'radio') && (g = or); switch (g && (g = g(e, r)) ? Vn(i, g, n, a) : (y && y(e, l, r), e === 'focusout' && (y = l._wrapperState) && y.controlled && l.type === 'number' && ee(l, 'number', l.value)), y = r ? wa(r) : window, e) { case 'focusin': (Wn(y) || y.contentEditable === 'true') && (gr = y, yr = r, vr = null); break; case 'focusout': vr = yr = gr = null; break; case 'mousedown': br = !0; break; case 'contextmenu': case 'mouseup': case 'dragend': br = !1, wr(i, n, a); break; case 'selectionchange': if (hr) break; case 'keydown': case 'keyup': wr(i, n, a); } let v; if (Mn)e: { switch (e) { case 'compositionstart': var b = 'onCompositionStart'; break e; case 'compositionend': b = 'onCompositionEnd'; break e; case 'compositionupdate': b = 'onCompositionUpdate'; break e; }b = void 0; } else Un ? jn(e, n) && (b = 'onCompositionEnd') : e === 'keydown' && n.keyCode === 229 && (b = 'onCompositionStart'); b && (Dn && n.locale !== 'ko' && (Un || b !== 'onCompositionStart' ? b === 'onCompositionEnd' && Un && (v = en()) : (Zt = 'value' in (Xt = a) ? Xt.value : Xt.textContent, Un = !0)), (y = Yr(r, b)).length > 0 && (b = new wn(b, e, null, n, a), i.push({ event: b, listeners: y }), (v || (v = Bn(n)) !== null) && (b.data = v))), (v = Rn ? (function (e, t) { switch (e) { case 'compositionend': return Bn(t); case 'keypress': return t.which !== 32 ? null : (Fn = !0, In); case 'textInput': return (e = t.data) === In && Fn ? null : e; default: return null; } }(e, n)) : (function (e, t) { if (Un) return e === 'compositionend' || !Mn && jn(e, t) ? (e = en(), Jt = Zt = Xt = null, Un = !1, e) : null; switch (e) { case 'paste': default: return null; case 'keypress': if (!(t.ctrlKey || t.altKey || t.metaKey) || t.ctrlKey && t.altKey) { if (t.char && t.char.length > 1) return t.char; if (t.which) return String.fromCharCode(t.which); } return null; case 'compositionend': return Dn && t.locale !== 'ko' ? null : t.data; } }(e, n))) && (r = Yr(r, 'onBeforeInput')).length > 0 && (a = new wn('onBeforeInput', 'beforeinput', null, n, a), i.push({ event: a, listeners: r }), a.data = v); }Ir(i, t); }); } function Vr (e, t, n) { return { instance: e, listener: t, currentTarget: n }; } function Yr (e, t) { for (var n = `${t}Capture`, r = []; e !== null;) { let a = e; let o = a.stateNode; a.tag === 5 && o !== null && (a = o, (o = Ne(e, n)) != null && r.unshift(Vr(e, o, a)), (o = Ne(e, t)) != null && r.push(Vr(e, o, a))), e = e.return; } return r; } function Kr (e) { if (e === null) return null; do { e = e.return; } while (e && e.tag !== 5); return e || null; } function Qr (e, t, n, r, a) { for (var o = t._reactName, i = []; n !== null && n !== r;) { let l = n; let u = l.alternate; const s = l.stateNode; if (u !== null && u === r) break; l.tag === 5 && s !== null && (l = s, a ? (u = Ne(n, o)) != null && i.unshift(Vr(n, u, l)) : a || (u = Ne(n, o)) != null && i.push(Vr(n, u, l))), n = n.return; }i.length !== 0 && e.push({ event: t, listeners: i }); } const Gr = /\r\n?/g; const qr = /\u0000|\uFFFD/g; function Xr (e) { return (typeof e === 'string' ? e : `${e}`).replace(Gr, '\n').replace(qr, ''); } function Zr (e, t, n) { if (t = Xr(t), Xr(e) !== t && n) throw Error(o(425)); } function Jr () {} let ea = null; let ta = null; function na (e, t) { return e === 'textarea' || e === 'noscript' || typeof t.children === 'string' || typeof t.children === 'number' || typeof t.dangerouslySetInnerHTML === 'object' && t.dangerouslySetInnerHTML !== null && t.dangerouslySetInnerHTML.__html != null; } const ra = typeof setTimeout === 'function' ? setTimeout : void 0; const aa = typeof clearTimeout === 'function' ? clearTimeout : void 0; const oa = typeof Promise === 'function' ? Promise : void 0; const ia = typeof queueMicrotask === 'function' ? queueMicrotask : void 0 !== oa ? function (e) { return oa.resolve(null).then(e).catch(la); } : ra; function la (e) { setTimeout(() => { throw e; }); } function ua (e, t) { let n = t; let r = 0; do { const a = n.nextSibling; if (e.removeChild(n), a && a.nodeType === 8) if ((n = a.data) === '/$') { if (r === 0) return e.removeChild(a), void Ut(t); r--; } else n !== '$' && n !== '$?' && n !== '$!' || r++; n = a; } while (n); Ut(t); } function sa (e) { for (;e != null; e = e.nextSibling) { let t = e.nodeType; if (t === 1 || t === 3) break; if (t === 8) { if ((t = e.data) === '$' || t === '$!' || t === '$?') break; if (t === '/$') return null; } } return e; } function ca (e) { e = e.previousSibling; for (let t = 0; e;) { if (e.nodeType === 8) { const n = e.data; if (n === '$' || n === '$!' || n === '$?') { if (t === 0) return e; t--; } else n === '/$' && t++; }e = e.previousSibling; } return null; } const fa = Math.random().toString(36).slice(2); const da = `__reactFiber$${fa}`; const pa = `__reactProps$${fa}`; var ma = `__reactContainer$${fa}`; var ha = `__reactEvents$${fa}`; const ga = `__reactListeners$${fa}`; const ya = `__reactHandles$${fa}`; function va (e) { let t = e[da]; if (t) return t; for (let n = e.parentNode; n;) { if (t = n[ma] || n[da]) { if (n = t.alternate, t.child !== null || n !== null && n.child !== null) for (e = ca(e); e !== null;) { if (n = e[da]) return n; e = ca(e); } return t; }n = (e = n).parentNode; } return null; } function ba (e) { return !(e = e[da] || e[ma]) || e.tag !== 5 && e.tag !== 6 && e.tag !== 13 && e.tag !== 3 ? null : e; } function wa (e) { if (e.tag === 5 || e.tag === 6) return e.stateNode; throw Error(o(33)); } function ka (e) { return e[pa] || null; } const xa = []; let Sa = -1; function Aa (e) { return { current: e }; } function Ca (e) { Sa < 0 || (e.current = xa[Sa], xa[Sa] = null, Sa--); } function Ea (e, t) { Sa++, xa[Sa] = e.current, e.current = t; } const _a = {}; const Pa = Aa(_a); const Oa = Aa(!1); let Ta = _a; function $a (e, t) { const n = e.type.contextTypes; if (!n) return _a; const r = e.stateNode; if (r && r.__reactInternalMemoizedUnmaskedChildContext === t) return r.__reactInternalMemoizedMaskedChildContext; let a; const o = {}; for (a in n)o[a] = t[a]; return r && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = t, e.__reactInternalMemoizedMaskedChildContext = o), o; } function Na (e) { return e.childContextTypes != null; } function za () { Ca(Oa), Ca(Pa); } function Ma (e, t, n) { if (Pa.current !== _a) throw Error(o(168)); Ea(Pa, t), Ea(Oa, n); } function La (e, t, n) { let r = e.stateNode; if (t = t.childContextTypes, typeof r.getChildContext !== 'function') return n; for (const a in r = r.getChildContext()) if (!(a in t)) throw Error(o(108, H(e) || 'Unknown', a)); return { ...n, ...r }; } function Ra (e) { return e = (e = e.stateNode) && e.__reactInternalMemoizedMergedChildContext || _a, Ta = Pa.current, Ea(Pa, e), Ea(Oa, Oa.current), !0; } function Da (e, t, n) { const r = e.stateNode; if (!r) throw Error(o(169)); n ? (e = La(e, t, Ta), r.__reactInternalMemoizedMergedChildContext = e, Ca(Oa), Ca(Pa), Ea(Pa, e)) : Ca(Oa), Ea(Oa, n); } let Ia = null; let Fa = !1; let ja = !1; function Ba (e) { Ia === null ? Ia = [e] : Ia.push(e); } function Ua () { if (!ja && Ia !== null) { ja = !0; let e = 0; const t = bt; try { const n = Ia; for (bt = 1; e < n.length; e++) { let r = n[e]; do { r = r(!0); } while (r !== null); }Ia = null, Fa = !1; } catch (t) { throw Ia !== null && (Ia = Ia.slice(e + 1)), Ke(Je, Ua), t; } finally { bt = t, ja = !1; } } return null; } const Ha = w.ReactCurrentBatchConfig; function Wa (e, t) { if (e && e.defaultProps) { for (const n in t = { ...t }, e = e.defaultProps) void 0 === t[n] && (t[n] = e[n]); return t; } return t; } const Va = Aa(null); let Ya = null; let Ka = null; let Qa = null; function Ga () { Qa = Ka = Ya = null; } function qa (e) { const t = Va.current; Ca(Va), e._currentValue = t; } function Xa (e, t, n) { for (;e !== null;) { const r = e.alternate; if ((e.childLanes & t) !== t ? (e.childLanes |= t, r !== null && (r.childLanes |= t)) : r !== null && (r.childLanes & t) !== t && (r.childLanes |= t), e === n) break; e = e.return; } } function Za (e, t) { Ya = e, Qa = Ka = null, (e = e.dependencies) !== null && e.firstContext !== null && ((e.lanes & t) != 0 && (kl = !0), e.firstContext = null); } function Ja (e) { const t = e._currentValue; if (Qa !== e) if (e = { context: e, memoizedValue: t, next: null }, Ka === null) { if (Ya === null) throw Error(o(308)); Ka = e, Ya.dependencies = { lanes: 0, firstContext: e }; } else Ka = Ka.next = e; return t; } let eo = null; let to = !1; function no (e) { e.updateQueue = { baseState: e.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null }; } function ro (e, t) { e = e.updateQueue, t.updateQueue === e && (t.updateQueue = { baseState: e.baseState, firstBaseUpdate: e.firstBaseUpdate, lastBaseUpdate: e.lastBaseUpdate, shared: e.shared, effects: e.effects }); } function ao (e, t) { return { eventTime: e, lane: t, tag: 0, payload: null, callback: null, next: null }; } function oo (e, t) { let n = e.updateQueue; n !== null && (n = n.shared, ts(e) ? ((e = n.interleaved) === null ? (t.next = t, eo === null ? eo = [n] : eo.push(n)) : (t.next = e.next, e.next = t), n.interleaved = t) : ((e = n.pending) === null ? t.next = t : (t.next = e.next, e.next = t), n.pending = t)); } function io (e, t, n) { if ((t = t.updateQueue) !== null && (t = t.shared, (4194240 & n) != 0)) { let r = t.lanes; n |= r &= e.pendingLanes, t.lanes = n, vt(e, n); } } function lo (e, t) { let n = e.updateQueue; let r = e.alternate; if (r !== null && n === (r = r.updateQueue)) { let a = null; let o = null; if ((n = n.firstBaseUpdate) !== null) { do { const i = { eventTime: n.eventTime, lane: n.lane, tag: n.tag, payload: n.payload, callback: n.callback, next: null }; o === null ? a = o = i : o = o.next = i, n = n.next; } while (n !== null); o === null ? a = o = t : o = o.next = t; } else a = o = t; return n = { baseState: r.baseState, firstBaseUpdate: a, lastBaseUpdate: o, shared: r.shared, effects: r.effects }, void (e.updateQueue = n); }(e = n.lastBaseUpdate) === null ? n.firstBaseUpdate = t : e.next = t, n.lastBaseUpdate = t; } function uo (e, t, n, r) { let a = e.updateQueue; to = !1; let o = a.firstBaseUpdate; let i = a.lastBaseUpdate; let l = a.shared.pending; if (l !== null) { a.shared.pending = null; var u = l; var s = u.next; u.next = null, i === null ? o = s : i.next = s, i = u; var c = e.alternate; c !== null && (l = (c = c.updateQueue).lastBaseUpdate) !== i && (l === null ? c.firstBaseUpdate = s : l.next = s, c.lastBaseUpdate = u); } if (o !== null) { let f = a.baseState; for (i = 0, c = s = u = null, l = o; ;) { let d = l.lane; let p = l.eventTime; if ((r & d) === d) { c !== null && (c = c.next = { eventTime: p, lane: 0, tag: l.tag, payload: l.payload, callback: l.callback, next: null }); e: { let m = e; const h = l; switch (d = t, p = n, h.tag) { case 1: if (typeof (m = h.payload) === 'function') { f = m.call(p, f, d); break e; }f = m; break e; case 3: m.flags = -65537 & m.flags | 128; case 0: if ((d = typeof (m = h.payload) === 'function' ? m.call(p, f, d) : m) == null) break e; f = { ...f, ...d }; break e; case 2: to = !0; } }l.callback !== null && l.lane !== 0 && (e.flags |= 64, (d = a.effects) === null ? a.effects = [l] : d.push(l)); } else p = { eventTime: p, lane: d, tag: l.tag, payload: l.payload, callback: l.callback, next: null }, c === null ? (s = c = p, u = f) : c = c.next = p, i |= d; if ((l = l.next) === null) { if ((l = a.shared.pending) === null) break; l = (d = l).next, d.next = null, a.lastBaseUpdate = d, a.shared.pending = null; } } if (c === null && (u = f), a.baseState = u, a.firstBaseUpdate = s, a.lastBaseUpdate = c, (t = a.shared.interleaved) !== null) { a = t; do { i |= a.lane, a = a.next; } while (a !== t); } else o === null && (a.shared.lanes = 0); zu |= i, e.lanes = i, e.memoizedState = f; } } function so (e, t, n) { if (e = t.effects, t.effects = null, e !== null) for (t = 0; t < e.length; t++) { let r = e[t]; const a = r.callback; if (a !== null) { if (r.callback = null, r = n, typeof a !== 'function') throw Error(o(191, a)); a.call(r); } } } const co = (new r.Component()).refs; function fo (e, t, n, r) { n = (n = n(r, t = e.memoizedState)) == null ? t : ({ ...t, ...n }), e.memoizedState = n, e.lanes === 0 && (e.updateQueue.baseState = n); } const po = { isMounted (e) { return !!(e = e._reactInternals) && Ue(e) === e; }, enqueueSetState (e, t, n) { e = e._reactInternals; const r = Xu(); const a = Zu(e); const o = ao(r, a); o.payload = t, n != null && (o.callback = n), oo(e, o), (t = Ju(e, a, r)) !== null && io(t, e, a); }, enqueueReplaceState (e, t, n) { e = e._reactInternals; const r = Xu(); const a = Zu(e); const o = ao(r, a); o.tag = 1, o.payload = t, n != null && (o.callback = n), oo(e, o), (t = Ju(e, a, r)) !== null && io(t, e, a); }, enqueueForceUpdate (e, t) { e = e._reactInternals; const n = Xu(); const r = Zu(e); const a = ao(n, r); a.tag = 2, t != null && (a.callback = t), oo(e, a), (t = Ju(e, r, n)) !== null && io(t, e, r); } }; function mo (e, t, n, r, a, o, i) { return typeof (e = e.stateNode).shouldComponentUpdate === 'function' ? e.shouldComponentUpdate(r, o, i) : !(t.prototype && t.prototype.isPureReactComponent && ur(n, r) && ur(a, o)); } function ho (e, t, n) { let r = !1; let a = _a; let o = t.contextType; return typeof o === 'object' && o !== null ? o = Ja(o) : (a = Na(t) ? Ta : Pa.current, o = (r = (r = t.contextTypes) != null) ? $a(e, a) : _a), t = new t(n, o), e.memoizedState = t.state !== null && void 0 !== t.state ? t.state : null, t.updater = po, e.stateNode = t, t._reactInternals = e, r && ((e = e.stateNode).__reactInternalMemoizedUnmaskedChildContext = a, e.__reactInternalMemoizedMaskedChildContext = o), t; } function go (e, t, n, r) { e = t.state, typeof t.componentWillReceiveProps === 'function' && t.componentWillReceiveProps(n, r), typeof t.UNSAFE_componentWillReceiveProps === 'function' && t.UNSAFE_componentWillReceiveProps(n, r), t.state !== e && po.enqueueReplaceState(t, t.state, null); } function yo (e, t, n, r) { const a = e.stateNode; a.props = n, a.state = e.memoizedState, a.refs = co, no(e); let o = t.contextType; typeof o === 'object' && o !== null ? a.context = Ja(o) : (o = Na(t) ? Ta : Pa.current, a.context = $a(e, o)), a.state = e.memoizedState, typeof (o = t.getDerivedStateFromProps) === 'function' && (fo(e, t, o, n), a.state = e.memoizedState), typeof t.getDerivedStateFromProps === 'function' || typeof a.getSnapshotBeforeUpdate === 'function' || typeof a.UNSAFE_componentWillMount !== 'function' && typeof a.componentWillMount !== 'function' || (t = a.state, typeof a.componentWillMount === 'function' && a.componentWillMount(), typeof a.UNSAFE_componentWillMount === 'function' && a.UNSAFE_componentWillMount(), t !== a.state && po.enqueueReplaceState(a, a.state, null), uo(e, n, a, r), a.state = e.memoizedState), typeof a.componentDidMount === 'function' && (e.flags |= 4194308); } const vo = []; let bo = 0; let wo = null; let ko = 0; const xo = []; let So = 0; let Ao = null; let Co = 1; let Eo = ''; function _o (e, t) { vo[bo++] = ko, vo[bo++] = wo, wo = e, ko = t; } function Po (e, t, n) { xo[So++] = Co, xo[So++] = Eo, xo[So++] = Ao, Ao = e; let r = Co; e = Eo; let a = 32 - it(r) - 1; r &= ~(1 << a), n += 1; let o = 32 - it(t) + a; if (o > 30) { const i = a - a % 5; o = (r & (1 << i) - 1).toString(32), r >>= i, a -= i, Co = 1 << 32 - it(t) + a | n << a | r, Eo = o + e; } else Co = 1 << o | n << a | r, Eo = e; } function Oo (e) { e.return !== null && (_o(e, 1), Po(e, 1, 0)); } function To (e) { for (;e === wo;)wo = vo[--bo], vo[bo] = null, ko = vo[--bo], vo[bo] = null; for (;e === Ao;)Ao = xo[--So], xo[So] = null, Eo = xo[--So], xo[So] = null, Co = xo[--So], xo[So] = null; } let $o = null; let No = null; let zo = !1; let Mo = null; function Lo (e, t) { const n = Ts(5, null, null, 0); n.elementType = 'DELETED', n.stateNode = t, n.return = e, (t = e.deletions) === null ? (e.deletions = [n], e.flags |= 16) : t.push(n); } function Ro (e, t) { switch (e.tag) { case 5: var n = e.type; return (t = t.nodeType !== 1 || n.toLowerCase() !== t.nodeName.toLowerCase() ? null : t) !== null && (e.stateNode = t, $o = e, No = sa(t.firstChild), !0); case 6: return (t = e.pendingProps === '' || t.nodeType !== 3 ? null : t) !== null && (e.stateNode = t, $o = e, No = null, !0); case 13: return (t = t.nodeType !== 8 ? null : t) !== null && (n = Ao !== null ? { id: Co, overflow: Eo } : null, e.memoizedState = { dehydrated: t, treeContext: n, retryLane: 1073741824 }, (n = Ts(18, null, null, 0)).stateNode = t, n.return = e, e.child = n, $o = e, No = null, !0); default: return !1; } } function Do (e) { return (1 & e.mode) != 0 && (128 & e.flags) == 0; } function Io (e) { if (zo) { let t = No; if (t) { const n = t; if (!Ro(e, t)) { if (Do(e)) throw Error(o(418)); t = sa(n.nextSibling); const r = $o; t && Ro(e, t) ? Lo(r, n) : (e.flags = -4097 & e.flags | 2, zo = !1, $o = e); } } else { if (Do(e)) throw Error(o(418)); e.flags = -4097 & e.flags | 2, zo = !1, $o = e; } } } function Fo (e) { for (e = e.return; e !== null && e.tag !== 5 && e.tag !== 3 && e.tag !== 13;)e = e.return; $o = e; } function jo (e) { if (e !== $o) return !1; if (!zo) return Fo(e), zo = !0, !1; let t; if ((t = e.tag !== 3) && !(t = e.tag !== 5) && (t = (t = e.type) !== 'head' && t !== 'body' && !na(e.type, e.memoizedProps)), t && (t = No)) { if (Do(e)) { for (e = No; e;)e = sa(e.nextSibling); throw Error(o(418)); } for (;t;)Lo(e, t), t = sa(t.nextSibling); } if (Fo(e), e.tag === 13) { if (!(e = (e = e.memoizedState) !== null ? e.dehydrated : null)) throw Error(o(317)); e: { for (e = e.nextSibling, t = 0; e;) { if (e.nodeType === 8) { const n = e.data; if (n === '/$') { if (t === 0) { No = sa(e.nextSibling); break e; }t--; } else n !== '$' && n !== '$!' && n !== '$?' || t++; }e = e.nextSibling; }No = null; } } else No = $o ? sa(e.stateNode.nextSibling) : null; return !0; } function Bo () { No = $o = null, zo = !1; } function Uo (e) { Mo === null ? Mo = [e] : Mo.push(e); } function Ho (e, t, n) { if ((e = n.ref) !== null && typeof e !== 'function' && typeof e !== 'object') { if (n._owner) { if (n = n._owner) { if (n.tag !== 1) throw Error(o(309)); var r = n.stateNode; } if (!r) throw Error(o(147, e)); const a = r; const i = `${e}`; return t !== null && t.ref !== null && typeof t.ref === 'function' && t.ref._stringRef === i ? t.ref : (t = function (e) { let t = a.refs; t === co && (t = a.refs = {}), e === null ? delete t[i] : t[i] = e; }, t._stringRef = i, t); } if (typeof e !== 'string') throw Error(o(284)); if (!n._owner) throw Error(o(290, e)); } return e; } function Wo (e, t) { throw e = Object.prototype.toString.call(t), Error(o(31, e === '[object Object]' ? `object with keys {${Object.keys(t).join(', ')}}` : e)); } function Vo (e) { return (0, e._init)(e._payload); } function Yo (e) { function t (t, n) { if (e) { const r = t.deletions; r === null ? (t.deletions = [n], t.flags |= 16) : r.push(n); } } function n (n, r) { if (!e) return null; for (;r !== null;)t(n, r), r = r.sibling; return null; } function r (e, t) { for (e = new Map(); t !== null;)t.key !== null ? e.set(t.key, t) : e.set(t.index, t), t = t.sibling; return e; } function a (e, t) { return (e = Ns(e, t)).index = 0, e.sibling = null, e; } function i (t, n, r) { return t.index = r, e ? (r = t.alternate) !== null ? (r = r.index) < n ? (t.flags |= 2, n) : r : (t.flags |= 2, n) : (t.flags |= 1048576, n); } function l (t) { return e && t.alternate === null && (t.flags |= 2), t; } function u (e, t, n, r) { return t === null || t.tag !== 6 ? ((t = Rs(n, e.mode, r)).return = e, t) : ((t = a(t, n)).return = e, t); } function s (e, t, n, r) { const o = n.type; return o === S ? f(e, t, n.props.children, r, n.key) : t !== null && (t.elementType === o || typeof o === 'object' && o !== null && o.$$typeof === N && Vo(o) === t.type) ? ((r = a(t, n.props)).ref = Ho(e, t, n), r.return = e, r) : ((r = zs(n.type, n.key, n.props, null, e.mode, r)).ref = Ho(e, t, n), r.return = e, r); } function c (e, t, n, r) { return t === null || t.tag !== 4 || t.stateNode.containerInfo !== n.containerInfo || t.stateNode.implementation !== n.implementation ? ((t = Ds(n, e.mode, r)).return = e, t) : ((t = a(t, n.children || [])).return = e, t); } function f (e, t, n, r, o) { return t === null || t.tag !== 7 ? ((t = Ms(n, e.mode, r, o)).return = e, t) : ((t = a(t, n)).return = e, t); } function d (e, t, n) { if (typeof t === 'string' && t !== '' || typeof t === 'number') return (t = Rs(`${t}`, e.mode, n)).return = e, t; if (typeof t === 'object' && t !== null) { switch (t.$$typeof) { case k: return (n = zs(t.type, t.key, t.props, null, e.mode, n)).ref = Ho(e, null, t), n.return = e, n; case x: return (t = Ds(t, e.mode, n)).return = e, t; case N: return d(e, (0, t._init)(t._payload), n); } if (te(t) || L(t)) return (t = Ms(t, e.mode, n, null)).return = e, t; Wo(e, t); } return null; } function p (e, t, n, r) { let a = t !== null ? t.key : null; if (typeof n === 'string' && n !== '' || typeof n === 'number') return a !== null ? null : u(e, t, `${n}`, r); if (typeof n === 'object' && n !== null) { switch (n.$$typeof) { case k: return n.key === a ? s(e, t, n, r) : null; case x: return n.key === a ? c(e, t, n, r) : null; case N: return p(e, t, (a = n._init)(n._payload), r); } if (te(n) || L(n)) return a !== null ? null : f(e, t, n, r, null); Wo(e, n); } return null; } function m (e, t, n, r, a) { if (typeof r === 'string' && r !== '' || typeof r === 'number') return u(t, e = e.get(n) || null, `${r}`, a); if (typeof r === 'object' && r !== null) { switch (r.$$typeof) { case k: return s(t, e = e.get(r.key === null ? n : r.key) || null, r, a); case x: return c(t, e = e.get(r.key === null ? n : r.key) || null, r, a); case N: return m(e, t, n, (0, r._init)(r._payload), a); } if (te(r) || L(r)) return f(t, e = e.get(n) || null, r, a, null); Wo(t, r); } return null; } function h (a, o, l, u) { for (var s = null, c = null, f = o, h = o = 0, g = null; f !== null && h < l.length; h++) { f.index > h ? (g = f, f = null) : g = f.sibling; const y = p(a, f, l[h], u); if (y === null) { f === null && (f = g); break; }e && f && y.alternate === null && t(a, f), o = i(y, o, h), c === null ? s = y : c.sibling = y, c = y, f = g; } if (h === l.length) return n(a, f), zo && _o(a, h), s; if (f === null) { for (;h < l.length; h++)(f = d(a, l[h], u)) !== null && (o = i(f, o, h), c === null ? s = f : c.sibling = f, c = f); return zo && _o(a, h), s; } for (f = r(a, f); h < l.length; h++)(g = m(f, a, h, l[h], u)) !== null && (e && g.alternate !== null && f.delete(g.key === null ? h : g.key), o = i(g, o, h), c === null ? s = g : c.sibling = g, c = g); return e && f.forEach((e) => t(a, e)), zo && _o(a, h), s; } function g (a, l, u, s) { let c = L(u); if (typeof c !== 'function') throw Error(o(150)); if ((u = c.call(u)) == null) throw Error(o(151)); for (var f = c = null, h = l, g = l = 0, y = null, v = u.next(); h !== null && !v.done; g++, v = u.next()) { h.index > g ? (y = h, h = null) : y = h.sibling; const b = p(a, h, v.value, s); if (b === null) { h === null && (h = y); break; }e && h && b.alternate === null && t(a, h), l = i(b, l, g), f === null ? c = b : f.sibling = b, f = b, h = y; } if (v.done) return n(a, h), zo && _o(a, g), c; if (h === null) { for (;!v.done; g++, v = u.next())(v = d(a, v.value, s)) !== null && (l = i(v, l, g), f === null ? c = v : f.sibling = v, f = v); return zo && _o(a, g), c; } for (h = r(a, h); !v.done; g++, v = u.next())(v = m(h, a, g, v.value, s)) !== null && (e && v.alternate !== null && h.delete(v.key === null ? g : v.key), l = i(v, l, g), f === null ? c = v : f.sibling = v, f = v); return e && h.forEach((e) => t(a, e)), zo && _o(a, g), c; } return function e (r, o, i, u) { if (typeof i === 'object' && i !== null && i.type === S && i.key === null && (i = i.props.children), typeof i === 'object' && i !== null) { switch (i.$$typeof) { case k: e: { for (var s = i.key, c = o; c !== null;) { if (c.key === s) { if ((s = i.type) === S) { if (c.tag === 7) { n(r, c.sibling), (o = a(c, i.props.children)).return = r, r = o; break e; } } else if (c.elementType === s || typeof s === 'object' && s !== null && s.$$typeof === N && Vo(s) === c.type) { n(r, c.sibling), (o = a(c, i.props)).ref = Ho(r, c, i), o.return = r, r = o; break e; }n(r, c); break; }t(r, c), c = c.sibling; }i.type === S ? ((o = Ms(i.props.children, r.mode, u, i.key)).return = r, r = o) : ((u = zs(i.type, i.key, i.props, null, r.mode, u)).ref = Ho(r, o, i), u.return = r, r = u); } return l(r); case x: e: { for (c = i.key; o !== null;) { if (o.key === c) { if (o.tag === 4 && o.stateNode.containerInfo === i.containerInfo && o.stateNode.implementation === i.implementation) { n(r, o.sibling), (o = a(o, i.children || [])).return = r, r = o; break e; }n(r, o); break; }t(r, o), o = o.sibling; }(o = Ds(i, r.mode, u)).return = r, r = o; } return l(r); case N: return e(r, o, (c = i._init)(i._payload), u); } if (te(i)) return h(r, o, i, u); if (L(i)) return g(r, o, i, u); Wo(r, i); } return typeof i === 'string' && i !== '' || typeof i === 'number' ? (i = `${i}`, o !== null && o.tag === 6 ? (n(r, o.sibling), (o = a(o, i)).return = r, r = o) : (n(r, o), (o = Rs(i, r.mode, u)).return = r, r = o), l(r)) : n(r, o); }; } const Ko = Yo(!0); const Qo = Yo(!1); const Go = {}; const qo = Aa(Go); const Xo = Aa(Go); const Zo = Aa(Go); function Jo (e) { if (e === Go) throw Error(o(174)); return e; } function ei (e, t) { switch (Ea(Zo, t), Ea(Xo, e), Ea(qo, Go), e = t.nodeType) { case 9: case 11: t = (t = t.documentElement) ? t.namespaceURI : ue(null, ''); break; default: t = ue(t = (e = e === 8 ? t.parentNode : t).namespaceURI || null, e = e.tagName); }Ca(qo), Ea(qo, t); } function ti () { Ca(qo), Ca(Xo), Ca(Zo); } function ni (e) { Jo(Zo.current); const t = Jo(qo.current); const n = ue(t, e.type); t !== n && (Ea(Xo, e), Ea(qo, n)); } function ri (e) { Xo.current === e && (Ca(qo), Ca(Xo)); } const ai = Aa(0); function oi (e) { for (let t = e; t !== null;) { if (t.tag === 13) { let n = t.memoizedState; if (n !== null && ((n = n.dehydrated) === null || n.data === '$?' || n.data === '$!')) return t; } else if (t.tag === 19 && void 0 !== t.memoizedProps.revealOrder) { if ((128 & t.flags) != 0) return t; } else if (t.child !== null) { t.child.return = t, t = t.child; continue; } if (t === e) break; for (;t.sibling === null;) { if (t.return === null || t.return === e) return null; t = t.return; }t.sibling.return = t.return, t = t.sibling; } return null; } const ii = []; function li () { for (let e = 0; e < ii.length; e++)ii[e]._workInProgressVersionPrimary = null; ii.length = 0; } const ui = w.ReactCurrentDispatcher; const si = w.ReactCurrentBatchConfig; let ci = 0; let fi = null; let di = null; let pi = null; let mi = !1; let hi = !1; let gi = 0; let yi = 0; function vi () { throw Error(o(321)); } function bi (e, t) { if (t === null) return !1; for (let n = 0; n < t.length && n < e.length; n++) if (!lr(e[n], t[n])) return !1; return !0; } function wi (e, t, n, r, a, i) { if (ci = i, fi = t, t.memoizedState = null, t.updateQueue = null, t.lanes = 0, ui.current = e === null || e.memoizedState === null ? rl : al, e = n(r, a), hi) { i = 0; do { if (hi = !1, gi = 0, i >= 25) throw Error(o(301)); i += 1, pi = di = null, t.updateQueue = null, ui.current = ol, e = n(r, a); } while (hi); } if (ui.current = nl, t = di !== null && di.next !== null, ci = 0, pi = di = fi = null, mi = !1, t) throw Error(o(300)); return e; } function ki () { const e = gi !== 0; return gi = 0, e; } function xi () { const e = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null }; return pi === null ? fi.memoizedState = pi = e : pi = pi.next = e, pi; } function Si () { if (di === null) { var e = fi.alternate; e = e !== null ? e.memoizedState : null; } else e = di.next; const t = pi === null ? fi.memoizedState : pi.next; if (t !== null)pi = t, di = e; else { if (e === null) throw Error(o(310)); e = { memoizedState: (di = e).memoizedState, baseState: di.baseState, baseQueue: di.baseQueue, queue: di.queue, next: null }, pi === null ? fi.memoizedState = pi = e : pi = pi.next = e; } return pi; } function Ai (e, t) { return typeof t === 'function' ? t(e) : t; } function Ci (e) { const t = Si(); const n = t.queue; if (n === null) throw Error(o(311)); n.lastRenderedReducer = e; let r = di; let a = r.baseQueue; let i = n.pending; if (i !== null) { if (a !== null) { var l = a.next; a.next = i.next, i.next = l; }r.baseQueue = a = i, n.pending = null; } if (a !== null) { i = a.next, r = r.baseState; let u = l = null; let s = null; let c = i; do { const f = c.lane; if ((ci & f) === f)s !== null && (s = s.next = { lane: 0, action: c.action, hasEagerState: c.hasEagerState, eagerState: c.eagerState, next: null }), r = c.hasEagerState ? c.eagerState : e(r, c.action); else { const d = { lane: f, action: c.action, hasEagerState: c.hasEagerState, eagerState: c.eagerState, next: null }; s === null ? (u = s = d, l = r) : s = s.next = d, fi.lanes |= f, zu |= f; }c = c.next; } while (c !== null && c !== i); s === null ? l = r : s.next = u, lr(r, t.memoizedState) || (kl = !0), t.memoizedState = r, t.baseState = l, t.baseQueue = s, n.lastRenderedState = r; } if ((e = n.interleaved) !== null) { a = e; do { i = a.lane, fi.lanes |= i, zu |= i, a = a.next; } while (a !== e); } else a === null && (n.lanes = 0); return [t.memoizedState, n.dispatch]; } function Ei (e) { const t = Si(); const n = t.queue; if (n === null) throw Error(o(311)); n.lastRenderedReducer = e; const r = n.dispatch; let a = n.pending; let i = t.memoizedState; if (a !== null) { n.pending = null; let l = a = a.next; do { i = e(i, l.action), l = l.next; } while (l !== a); lr(i, t.memoizedState) || (kl = !0), t.memoizedState = i, t.baseQueue === null && (t.baseState = i), n.lastRenderedState = i; } return [i, r]; } function _i () {} function Pi (e, t) { const n = fi; let r = Si(); const a = t(); const i = !lr(r.memoizedState, a); if (i && (r.memoizedState = a, kl = !0), r = r.queue, Fi($i.bind(null, n, r, e), [e]), r.getSnapshot !== t || i || pi !== null && 1 & pi.memoizedState.tag) { if (n.flags |= 2048, Mi(9, Ti.bind(null, n, r, a, t), void 0, null), Eu === null) throw Error(o(349)); (30 & ci) != 0 || Oi(n, t, a); } return a; } function Oi (e, t, n) { e.flags |= 16384, e = { getSnapshot: t, value: n }, (t = fi.updateQueue) === null ? (t = { lastEffect: null, stores: null }, fi.updateQueue = t, t.stores = [e]) : (n = t.stores) === null ? t.stores = [e] : n.push(e); } function Ti (e, t, n, r) { t.value = n, t.getSnapshot = r, Ni(t) && Ju(e, 1, -1); } function $i (e, t, n) { return n(() => { Ni(t) && Ju(e, 1, -1); }); } function Ni (e) { const t = e.getSnapshot; e = e.value; try { const n = t(); return !lr(e, n); } catch (e) { return !0; } } function zi (e) { const t = xi(); return typeof e === 'function' && (e = e()), t.memoizedState = t.baseState = e, e = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Ai, lastRenderedState: e }, t.queue = e, e = e.dispatch = Xi.bind(null, fi, e), [t.memoizedState, e]; } function Mi (e, t, n, r) { return e = { tag: e, create: t, destroy: n, deps: r, next: null }, (t = fi.updateQueue) === null ? (t = { lastEffect: null, stores: null }, fi.updateQueue = t, t.lastEffect = e.next = e) : (n = t.lastEffect) === null ? t.lastEffect = e.next = e : (r = n.next, n.next = e, e.next = r, t.lastEffect = e), e; } function Li () { return Si().memoizedState; } function Ri (e, t, n, r) { const a = xi(); fi.flags |= e, a.memoizedState = Mi(1 | t, n, void 0, void 0 === r ? null : r); } function Di (e, t, n, r) { const a = Si(); r = void 0 === r ? null : r; let o = void 0; if (di !== null) { const i = di.memoizedState; if (o = i.destroy, r !== null && bi(r, i.deps)) return void (a.memoizedState = Mi(t, n, o, r)); }fi.flags |= e, a.memoizedState = Mi(1 | t, n, o, r); } function Ii (e, t) { return Ri(8390656, 8, e, t); } function Fi (e, t) { return Di(2048, 8, e, t); } function ji (e, t) { return Di(4, 2, e, t); } function Bi (e, t) { return Di(4, 4, e, t); } function Ui (e, t) { return typeof t === 'function' ? (e = e(), t(e), function () { t(null); }) : t != null ? (e = e(), t.current = e, function () { t.current = null; }) : void 0; } function Hi (e, t, n) { return n = n != null ? n.concat([e]) : null, Di(4, 4, Ui.bind(null, t, e), n); } function Wi () {} function Vi (e, t) { const n = Si(); t = void 0 === t ? null : t; const r = n.memoizedState; return r !== null && t !== null && bi(t, r[1]) ? r[0] : (n.memoizedState = [e, t], e); } function Yi (e, t) { const n = Si(); t = void 0 === t ? null : t; const r = n.memoizedState; return r !== null && t !== null && bi(t, r[1]) ? r[0] : (e = e(), n.memoizedState = [e, t], e); } function Ki (e, t, n) { return (21 & ci) == 0 ? (e.baseState && (e.baseState = !1, kl = !0), e.memoizedState = n) : (lr(n, t) || (n = ht(), fi.lanes |= n, zu |= n, e.baseState = !0), t); } function Qi (e, t) { const n = bt; bt = n !== 0 && n < 4 ? n : 4, e(!0); const r = si.transition; si.transition = {}; try { e(!1), t(); } finally { bt = n, si.transition = r; } } function Gi () { return Si().memoizedState; } function qi (e, t, n) { const r = Zu(e); n = { lane: r, action: n, hasEagerState: !1, eagerState: null, next: null }, Zi(e) ? Ji(t, n) : (el(e, t, n), (e = Ju(e, r, n = Xu())) !== null && tl(e, t, r)); } function Xi (e, t, n) { const r = Zu(e); const a = { lane: r, action: n, hasEagerState: !1, eagerState: null, next: null }; if (Zi(e))Ji(t, a); else { el(e, t, a); let o = e.alternate; if (e.lanes === 0 && (o === null || o.lanes === 0) && (o = t.lastRenderedReducer) !== null) try { const i = t.lastRenderedState; const l = o(i, n); if (a.hasEagerState = !0, a.eagerState = l, lr(l, i)) return; } catch (e) {}(e = Ju(e, r, n = Xu())) !== null && tl(e, t, r); } } function Zi (e) { const t = e.alternate; return e === fi || t !== null && t === fi; } function Ji (e, t) { hi = mi = !0; const n = e.pending; n === null ? t.next = t : (t.next = n.next, n.next = t), e.pending = t; } function el (e, t, n) { ts(e) ? ((e = t.interleaved) === null ? (n.next = n, eo === null ? eo = [t] : eo.push(t)) : (n.next = e.next, e.next = n), t.interleaved = n) : ((e = t.pending) === null ? n.next = n : (n.next = e.next, e.next = n), t.pending = n); } function tl (e, t, n) { if ((4194240 & n) != 0) { let r = t.lanes; n |= r &= e.pendingLanes, t.lanes = n, vt(e, n); } } var nl = { readContext: Ja, useCallback: vi, useContext: vi, useEffect: vi, useImperativeHandle: vi, useInsertionEffect: vi, useLayoutEffect: vi, useMemo: vi, useReducer: vi, useRef: vi, useState: vi, useDebugValue: vi, useDeferredValue: vi, useTransition: vi, useMutableSource: vi, useSyncExternalStore: vi, useId: vi, unstable_isNewReconciler: !1 }; var rl = { readContext: Ja, useCallback (e, t) { return xi().memoizedState = [e, void 0 === t ? null : t], e; }, useContext: Ja, useEffect: Ii, useImperativeHandle (e, t, n) { return n = n != null ? n.concat([e]) : null, Ri(4194308, 4, Ui.bind(null, t, e), n); }, useLayoutEffect (e, t) { return Ri(4194308, 4, e, t); }, useInsertionEffect (e, t) { return Ri(4, 2, e, t); }, useMemo (e, t) { const n = xi(); return t = void 0 === t ? null : t, e = e(), n.memoizedState = [e, t], e; }, useReducer (e, t, n) { const r = xi(); return t = void 0 !== n ? n(t) : t, r.memoizedState = r.baseState = t, e = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: e, lastRenderedState: t }, r.queue = e, e = e.dispatch = qi.bind(null, fi, e), [r.memoizedState, e]; }, useRef (e) { return e = { current: e }, xi().memoizedState = e; }, useState: zi, useDebugValue: Wi, useDeferredValue (e) { return xi().memoizedState = e; }, useTransition () { let e = zi(!1); const t = e[0]; return e = Qi.bind(null, e[1]), xi().memoizedState = e, [t, e]; }, useMutableSource () {}, useSyncExternalStore (e, t, n) { const r = fi; const a = xi(); if (zo) { if (void 0 === n) throw Error(o(407)); n = n(); } else { if (n = t(), Eu === null) throw Error(o(349)); (30 & ci) != 0 || Oi(r, t, n); }a.memoizedState = n; const i = { value: n, getSnapshot: t }; return a.queue = i, Ii($i.bind(null, r, i, e), [e]), r.flags |= 2048, Mi(9, Ti.bind(null, r, i, n, t), void 0, null), n; }, useId () { const e = xi(); let t = Eu.identifierPrefix; if (zo) { var n = Eo; t = `:${t}R${n = (Co & ~(1 << 32 - it(Co) - 1)).toString(32) + n}`, (n = gi++) > 0 && (t += `H${n.toString(32)}`), t += ':'; } else t = `:${t}r${(n = yi++).toString(32)}:`; return e.memoizedState = t; }, unstable_isNewReconciler: !1 }; var al = { readContext: Ja, useCallback: Vi, useContext: Ja, useEffect: Fi, useImperativeHandle: Hi, useInsertionEffect: ji, useLayoutEffect: Bi, useMemo: Yi, useReducer: Ci, useRef: Li, useState () { return Ci(Ai); }, useDebugValue: Wi, useDeferredValue (e) { return Ki(Si(), di.memoizedState, e); }, useTransition () { return [Ci(Ai)[0], Si().memoizedState]; }, useMutableSource: _i, useSyncExternalStore: Pi, useId: Gi, unstable_isNewReconciler: !1 }; var ol = { readContext: Ja, useCallback: Vi, useContext: Ja, useEffect: Fi, useImperativeHandle: Hi, useInsertionEffect: ji, useLayoutEffect: Bi, useMemo: Yi, useReducer: Ei, useRef: Li, useState () { return Ei(Ai); }, useDebugValue: Wi, useDeferredValue (e) { const t = Si(); return di === null ? t.memoizedState = e : Ki(t, di.memoizedState, e); }, useTransition () { return [Ei(Ai)[0], Si().memoizedState]; }, useMutableSource: _i, useSyncExternalStore: Pi, useId: Gi, unstable_isNewReconciler: !1 }; function il (e, t) { try { let n = ''; let r = t; do { n += B(r), r = r.return; } while (r); var a = n; } catch (e) { a = `\nError generating stack: ${e.message}\n${e.stack}`; } return { value: e, source: t, stack: a }; } function ll (e, t) { try { console.error(t.value); } catch (e) { setTimeout(() => { throw e; }); } } let ul; let sl; let cl; const fl = typeof WeakMap === 'function' ? WeakMap : Map; function dl (e, t, n) { (n = ao(-1, n)).tag = 3, n.payload = { element: null }; const r = t.value; return n.callback = function () { Bu || (Bu = !0, Uu = r), ll(0, t); }, n; } function pl (e, t, n) { (n = ao(-1, n)).tag = 3; const r = e.type.getDerivedStateFromError; if (typeof r === 'function') { const a = t.value; n.payload = function () { return r(a); }, n.callback = function () { ll(0, t); }; } const o = e.stateNode; return o !== null && typeof o.componentDidCatch === 'function' && (n.callback = function () { ll(0, t), typeof r !== 'function' && (Hu === null ? Hu = new Set([this]) : Hu.add(this)); const e = t.stack; this.componentDidCatch(t.value, { componentStack: e !== null ? e : '' }); }), n; } function ml (e, t, n) { let r = e.pingCache; if (r === null) { r = e.pingCache = new fl(); var a = new Set(); r.set(t, a); } else void 0 === (a = r.get(t)) && (a = new Set(), r.set(t, a)); a.has(n) || (a.add(n), e = As.bind(null, e, t, n), t.then(e, e)); } function hl (e) { do { var t; if ((t = e.tag === 13) && (t = (t = e.memoizedState) === null || t.dehydrated !== null), t) return e; e = e.return; } while (e !== null); return null; } function gl (e, t, n, r, a) { return (1 & e.mode) == 0 ? (e === t ? e.flags |= 65536 : (e.flags |= 128, n.flags |= 131072, n.flags &= -52805, n.tag === 1 && (n.alternate === null ? n.tag = 17 : ((t = ao(-1, 1)).tag = 2, oo(n, t))), n.lanes |= 1), e) : (e.flags |= 65536, e.lanes = a, e); } function yl (e, t) { if (!zo) switch (e.tailMode) { case 'hidden': t = e.tail; for (var n = null; t !== null;)t.alternate !== null && (n = t), t = t.sibling; n === null ? e.tail = null : n.sibling = null; break; case 'collapsed': n = e.tail; for (var r = null; n !== null;)n.alternate !== null && (r = n), n = n.sibling; r === null ? t || e.tail === null ? e.tail = null : e.tail.sibling = null : r.sibling = null; } } function vl (e) { const t = e.alternate !== null && e.alternate.child === e.child; let n = 0; let r = 0; if (t) for (var a = e.child; a !== null;)n |= a.lanes | a.childLanes, r |= 14680064 & a.subtreeFlags, r |= 14680064 & a.flags, a.return = e, a = a.sibling; else for (a = e.child; a !== null;)n |= a.lanes | a.childLanes, r |= a.subtreeFlags, r |= a.flags, a.return = e, a = a.sibling; return e.subtreeFlags |= r, e.childLanes = n, t; } function bl (e, t, n) { let r = t.pendingProps; switch (To(t), t.tag) { case 2: case 16: case 15: case 0: case 11: case 7: case 8: case 12: case 9: case 14: return vl(t), null; case 1: case 17: return Na(t.type) && za(), vl(t), null; case 3: return r = t.stateNode, ti(), Ca(Oa), Ca(Pa), li(), r.pendingContext && (r.context = r.pendingContext, r.pendingContext = null), e !== null && e.child !== null || (jo(t) ? t.flags |= 4 : e === null || e.memoizedState.isDehydrated && (256 & t.flags) == 0 || (t.flags |= 1024, Mo !== null && (os(Mo), Mo = null))), vl(t), null; case 5: ri(t); var a = Jo(Zo.current); if (n = t.type, e !== null && t.stateNode != null)sl(e, t, n, r), e.ref !== t.ref && (t.flags |= 512, t.flags |= 2097152); else { if (!r) { if (t.stateNode === null) throw Error(o(166)); return vl(t), null; } if (e = Jo(qo.current), jo(t)) { r = t.stateNode, n = t.type; var i = t.memoizedProps; switch (r[da] = t, r[pa] = i, e = (1 & t.mode) != 0, n) { case 'dialog': Fr('cancel', r), Fr('close', r); break; case 'iframe': case 'object': case 'embed': Fr('load', r); break; case 'video': case 'audio': for (a = 0; a < Lr.length; a++)Fr(Lr[a], r); break; case 'source': Fr('error', r); break; case 'img': case 'image': case 'link': Fr('error', r), Fr('load', r); break; case 'details': Fr('toggle', r); break; case 'input': q(r, i), Fr('invalid', r); break; case 'select': r._wrapperState = { wasMultiple: !!i.multiple }, Fr('invalid', r); break; case 'textarea': ae(r, i), Fr('invalid', r); } for (var u in ve(n, i), a = null, i) if (i.hasOwnProperty(u)) { var s = i[u]; u === 'children' ? typeof s === 'string' ? r.textContent !== s && (!0 !== i.suppressHydrationWarning && Zr(r.textContent, s, e), a = ['children', s]) : typeof s === 'number' && r.textContent !== `${s}` && (!0 !== i.suppressHydrationWarning && Zr(r.textContent, s, e), a = ['children', `${s}`]) : l.hasOwnProperty(u) && s != null && u === 'onScroll' && Fr('scroll', r); } switch (n) { case 'input': Y(r), J(r, i, !0); break; case 'textarea': Y(r), ie(r); break; case 'select': case 'option': break; default: typeof i.onClick === 'function' && (r.onclick = Jr); }r = a, t.updateQueue = r, r !== null && (t.flags |= 4); } else { u = a.nodeType === 9 ? a : a.ownerDocument, e === 'http://www.w3.org/1999/xhtml' && (e = le(n)), e === 'http://www.w3.org/1999/xhtml' ? n === 'script' ? ((e = u.createElement('div')).innerHTML = '<script><\/script>', e = e.removeChild(e.firstChild)) : typeof r.is === 'string' ? e = u.createElement(n, { is: r.is }) : (e = u.createElement(n), n === 'select' && (u = e, r.multiple ? u.multiple = !0 : r.size && (u.size = r.size))) : e = u.createElementNS(e, n), e[da] = t, e[pa] = r, ul(e, t), t.stateNode = e; e: { switch (u = be(n, r), n) { case 'dialog': Fr('cancel', e), Fr('close', e), a = r; break; case 'iframe': case 'object': case 'embed': Fr('load', e), a = r; break; case 'video': case 'audio': for (a = 0; a < Lr.length; a++)Fr(Lr[a], e); a = r; break; case 'source': Fr('error', e), a = r; break; case 'img': case 'image': case 'link': Fr('error', e), Fr('load', e), a = r; break; case 'details': Fr('toggle', e), a = r; break; case 'input': q(e, r), a = G(e, r), Fr('invalid', e); break; case 'option': default: a = r; break; case 'select': e._wrapperState = { wasMultiple: !!r.multiple }, a = { ...r, value: void 0 }, Fr('invalid', e); break; case 'textarea': ae(e, r), a = re(e, r), Fr('invalid', e); } for (i in ve(n, a), s = a) if (s.hasOwnProperty(i)) { let c = s[i]; i === 'style' ? ge(e, c) : i === 'dangerouslySetInnerHTML' ? (c = c ? c.__html : void 0) != null && fe(e, c) : i === 'children' ? typeof c === 'string' ? (n !== 'textarea' || c !== '') && de(e, c) : typeof c === 'number' && de(e, `${c}`) : i !== 'suppressContentEditableWarning' && i !== 'suppressHydrationWarning' && i !== 'autoFocus' && (l.hasOwnProperty(i) ? c != null && i === 'onScroll' && Fr('scroll', e) : c != null && b(e, i, c, u)); } switch (n) { case 'input': Y(e), J(e, r, !1); break; case 'textarea': Y(e), ie(e); break; case 'option': r.value != null && e.setAttribute('value', `${W(r.value)}`); break; case 'select': e.multiple = !!r.multiple, (i = r.value) != null ? ne(e, !!r.multiple, i, !1) : r.defaultValue != null && ne(e, !!r.multiple, r.defaultValue, !0); break; default: typeof a.onClick === 'function' && (e.onclick = Jr); } switch (n) { case 'button': case 'input': case 'select': case 'textarea': r = !!r.autoFocus; break e; case 'img': r = !0; break e; default: r = !1; } }r && (t.flags |= 4); }t.ref !== null && (t.flags |= 512, t.flags |= 2097152); } return vl(t), null; case 6: if (e && t.stateNode != null)cl(0, t, e.memoizedProps, r); else { if (typeof r !== 'string' && t.stateNode === null) throw Error(o(166)); if (n = Jo(Zo.current), Jo(qo.current), jo(t)) { if (r = t.stateNode, n = t.memoizedProps, r[da] = t, (i = r.nodeValue !== n) && (e = $o) !== null) switch (e.tag) { case 3: Zr(r.nodeValue, n, (1 & e.mode) != 0); break; case 5: !0 !== e.memoizedProps.suppressHydrationWarning && Zr(r.nodeValue, n, (1 & e.mode) != 0); }i && (t.flags |= 4); } else (r = (n.nodeType === 9 ? n : n.ownerDocument).createTextNode(r))[da] = t, t.stateNode = r; } return vl(t), null; case 13: if (Ca(ai), r = t.memoizedState, zo && No !== null && (1 & t.mode) != 0 && (128 & t.flags) == 0) { for (r = No; r;)r = sa(r.nextSibling); return Bo(), t.flags |= 98560, t; } if (r !== null && r.dehydrated !== null) { if (r = jo(t), e === null) { if (!r) throw Error(o(318)); if (!(r = (r = t.memoizedState) !== null ? r.dehydrated : null)) throw Error(o(317)); r[da] = t; } else Bo(), (128 & t.flags) == 0 && (t.memoizedState = null), t.flags |= 4; return vl(t), null; } return Mo !== null && (os(Mo), Mo = null), (128 & t.flags) != 0 ? (t.lanes = n, t) : (r = r !== null, n = !1, e === null ? jo(t) : n = e.memoizedState !== null, r !== n && r && (t.child.flags |= 8192, (1 & t.mode) != 0 && (e === null || (1 & ai.current) != 0 ? $u === 0 && ($u = 3) : ms())), t.updateQueue !== null && (t.flags |= 4), vl(t), null); case 4: return ti(), e === null && Ur(t.stateNode.containerInfo), vl(t), null; case 10: return qa(t.type._context), vl(t), null; case 19: if (Ca(ai), (i = t.memoizedState) === null) return vl(t), null; if (r = (128 & t.flags) != 0, (u = i.rendering) === null) if (r)yl(i, !1); else { if ($u !== 0 || e !== null && (128 & e.flags) != 0) for (e = t.child; e !== null;) { if ((u = oi(e)) !== null) { for (t.flags |= 128, yl(i, !1), (r = u.updateQueue) !== null && (t.updateQueue = r, t.flags |= 4), t.subtreeFlags = 0, r = n, n = t.child; n !== null;)e = r, (i = n).flags &= 14680066, (u = i.alternate) === null ? (i.childLanes = 0, i.lanes = e, i.child = null, i.subtreeFlags = 0, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null) : (i.childLanes = u.childLanes, i.lanes = u.lanes, i.child = u.child, i.subtreeFlags = 0, i.deletions = null, i.memoizedProps = u.memoizedProps, i.memoizedState = u.memoizedState, i.updateQueue = u.updateQueue, i.type = u.type, e = u.dependencies, i.dependencies = e === null ? null : { lanes: e.lanes, firstContext: e.firstContext }), n = n.sibling; return Ea(ai, 1 & ai.current | 2), t.child; }e = e.sibling; }i.tail !== null && Xe() > Fu && (t.flags |= 128, r = !0, yl(i, !1), t.lanes = 4194304); } else { if (!r) if ((e = oi(u)) !== null) { if (t.flags |= 128, r = !0, (n = e.updateQueue) !== null && (t.updateQueue = n, t.flags |= 4), yl(i, !0), i.tail === null && i.tailMode === 'hidden' && !u.alternate && !zo) return vl(t), null; } else 2 * Xe() - i.renderingStartTime > Fu && n !== 1073741824 && (t.flags |= 128, r = !0, yl(i, !1), t.lanes = 4194304); i.isBackwards ? (u.sibling = t.child, t.child = u) : ((n = i.last) !== null ? n.sibling = u : t.child = u, i.last = u); } return i.tail !== null ? (t = i.tail, i.rendering = t, i.tail = t.sibling, i.renderingStartTime = Xe(), t.sibling = null, n = ai.current, Ea(ai, r ? 1 & n | 2 : 1 & n), t) : (vl(t), null); case 22: case 23: return cs(), r = t.memoizedState !== null, e !== null && e.memoizedState !== null !== r && (t.flags |= 8192), r && (1 & t.mode) != 0 ? (1073741824 & Ou) != 0 && (vl(t), 6 & t.subtreeFlags && (t.flags |= 8192)) : vl(t), null; case 24: case 25: return null; } throw Error(o(156, t.tag)); }ul = function (e, t) { for (let n = t.child; n !== null;) { if (n.tag === 5 || n.tag === 6)e.appendChild(n.stateNode); else if (n.tag !== 4 && n.child !== null) { n.child.return = n, n = n.child; continue; } if (n === t) break; for (;n.sibling === null;) { if (n.return === null || n.return === t) return; n = n.return; }n.sibling.return = n.return, n = n.sibling; } }, sl = function (e, t, n, r) { let a = e.memoizedProps; if (a !== r) { e = t.stateNode, Jo(qo.current); let o; let i = null; switch (n) { case 'input': a = G(e, a), r = G(e, r), i = []; break; case 'select': a = { ...a, value: void 0 }, r = { ...r, value: void 0 }, i = []; break; case 'textarea': a = re(e, a), r = re(e, r), i = []; break; default: typeof a.onClick !== 'function' && typeof r.onClick === 'function' && (e.onclick = Jr); } for (c in ve(n, r), n = null, a) if (!r.hasOwnProperty(c) && a.hasOwnProperty(c) && a[c] != null) if (c === 'style') { var u = a[c]; for (o in u)u.hasOwnProperty(o) && (n || (n = {}), n[o] = ''); } else c !== 'dangerouslySetInnerHTML' && c !== 'children' && c !== 'suppressContentEditableWarning' && c !== 'suppressHydrationWarning' && c !== 'autoFocus' && (l.hasOwnProperty(c) ? i || (i = []) : (i = i || []).push(c, null)); for (c in r) { let s = r[c]; if (u = a != null ? a[c] : void 0, r.hasOwnProperty(c) && s !== u && (s != null || u != null)) if (c === 'style') if (u) { for (o in u)!u.hasOwnProperty(o) || s && s.hasOwnProperty(o) || (n || (n = {}), n[o] = ''); for (o in s)s.hasOwnProperty(o) && u[o] !== s[o] && (n || (n = {}), n[o] = s[o]); } else n || (i || (i = []), i.push(c, n)), n = s; else c === 'dangerouslySetInnerHTML' ? (s = s ? s.__html : void 0, u = u ? u.__html : void 0, s != null && u !== s && (i = i || []).push(c, s)) : c === 'children' ? typeof s !== 'string' && typeof s !== 'number' || (i = i || []).push(c, `${s}`) : c !== 'suppressContentEditableWarning' && c !== 'suppressHydrationWarning' && (l.hasOwnProperty(c) ? (s != null && c === 'onScroll' && Fr('scroll', e), i || u === s || (i = [])) : (i = i || []).push(c, s)); }n && (i = i || []).push('style', n); var c = i; (t.updateQueue = c) && (t.flags |= 4); } }, cl = function (e, t, n, r) { n !== r && (t.flags |= 4); }; const wl = w.ReactCurrentOwner; var kl = !1; function xl (e, t, n, r) { t.child = e === null ? Qo(t, null, n, r) : Ko(t, e.child, n, r); } function Sl (e, t, n, r, a) { n = n.render; const o = t.ref; return Za(t, a), r = wi(e, t, n, r, o, a), n = ki(), e === null || kl ? (zo && n && Oo(t), t.flags |= 1, xl(e, t, r, a), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -2053, e.lanes &= ~a, Wl(e, t, a)); } function Al (e, t, n, r, a) { if (e === null) { var o = n.type; return typeof o !== 'function' || $s(o) || void 0 !== o.defaultProps || n.compare !== null || void 0 !== n.defaultProps ? ((e = zs(n.type, null, r, t, t.mode, a)).ref = t.ref, e.return = t, t.child = e) : (t.tag = 15, t.type = o, Cl(e, t, o, r, a)); } if (o = e.child, (e.lanes & a) == 0) { const i = o.memoizedProps; if ((n = (n = n.compare) !== null ? n : ur)(i, r) && e.ref === t.ref) return Wl(e, t, a); } return t.flags |= 1, (e = Ns(o, r)).ref = t.ref, e.return = t, t.child = e; } function Cl (e, t, n, r, a) { if (e !== null) { const o = e.memoizedProps; if (ur(o, r) && e.ref === t.ref) { if (kl = !1, t.pendingProps = r = o, (e.lanes & a) == 0) return t.lanes = e.lanes, Wl(e, t, a); (131072 & e.flags) != 0 && (kl = !0); } } return Pl(e, t, n, r, a); } function El (e, t, n) { let r = t.pendingProps; const a = r.children; const o = e !== null ? e.memoizedState : null; if (r.mode === 'hidden') if ((1 & t.mode) == 0)t.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, Ea(Tu, Ou), Ou |= n; else { if ((1073741824 & n) == 0) return e = o !== null ? o.baseLanes | n : n, t.lanes = t.childLanes = 1073741824, t.memoizedState = { baseLanes: e, cachePool: null, transitions: null }, t.updateQueue = null, Ea(Tu, Ou), Ou |= e, null; t.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, r = o !== null ? o.baseLanes : n, Ea(Tu, Ou), Ou |= r; } else o !== null ? (r = o.baseLanes | n, t.memoizedState = null) : r = n, Ea(Tu, Ou), Ou |= r; return xl(e, t, a, n), t.child; } function _l (e, t) { const n = t.ref; (e === null && n !== null || e !== null && e.ref !== n) && (t.flags |= 512, t.flags |= 2097152); } function Pl (e, t, n, r, a) { let o = Na(n) ? Ta : Pa.current; return o = $a(t, o), Za(t, a), n = wi(e, t, n, r, o, a), r = ki(), e === null || kl ? (zo && r && Oo(t), t.flags |= 1, xl(e, t, n, a), t.child) : (t.updateQueue = e.updateQueue, t.flags &= -2053, e.lanes &= ~a, Wl(e, t, a)); } function Ol (e, t, n, r, a) { if (Na(n)) { var o = !0; Ra(t); } else o = !1; if (Za(t, a), t.stateNode === null)e !== null && (e.alternate = null, t.alternate = null, t.flags |= 2), ho(t, n, r), yo(t, n, r, a), r = !0; else if (e === null) { var i = t.stateNode; var l = t.memoizedProps; i.props = l; var u = i.context; var s = n.contextType; s = typeof s === 'object' && s !== null ? Ja(s) : $a(t, s = Na(n) ? Ta : Pa.current); var c = n.getDerivedStateFromProps; var f = typeof c === 'function' || typeof i.getSnapshotBeforeUpdate === 'function'; f || typeof i.UNSAFE_componentWillReceiveProps !== 'function' && typeof i.componentWillReceiveProps !== 'function' || (l !== r || u !== s) && go(t, i, r, s), to = !1; var d = t.memoizedState; i.state = d, uo(t, r, i, a), u = t.memoizedState, l !== r || d !== u || Oa.current || to ? (typeof c === 'function' && (fo(t, n, c, r), u = t.memoizedState), (l = to || mo(t, n, l, r, d, u, s)) ? (f || typeof i.UNSAFE_componentWillMount !== 'function' && typeof i.componentWillMount !== 'function' || (typeof i.componentWillMount === 'function' && i.componentWillMount(), typeof i.UNSAFE_componentWillMount === 'function' && i.UNSAFE_componentWillMount()), typeof i.componentDidMount === 'function' && (t.flags |= 4194308)) : (typeof i.componentDidMount === 'function' && (t.flags |= 4194308), t.memoizedProps = r, t.memoizedState = u), i.props = r, i.state = u, i.context = s, r = l) : (typeof i.componentDidMount === 'function' && (t.flags |= 4194308), r = !1); } else { i = t.stateNode, ro(e, t), l = t.memoizedProps, s = t.type === t.elementType ? l : Wa(t.type, l), i.props = s, f = t.pendingProps, d = i.context, u = typeof (u = n.contextType) === 'object' && u !== null ? Ja(u) : $a(t, u = Na(n) ? Ta : Pa.current); const p = n.getDerivedStateFromProps; (c = typeof p === 'function' || typeof i.getSnapshotBeforeUpdate === 'function') || typeof i.UNSAFE_componentWillReceiveProps !== 'function' && typeof i.componentWillReceiveProps !== 'function' || (l !== f || d !== u) && go(t, i, r, u), to = !1, d = t.memoizedState, i.state = d, uo(t, r, i, a); let m = t.memoizedState; l !== f || d !== m || Oa.current || to ? (typeof p === 'function' && (fo(t, n, p, r), m = t.memoizedState), (s = to || mo(t, n, s, r, d, m, u) || !1) ? (c || typeof i.UNSAFE_componentWillUpdate !== 'function' && typeof i.componentWillUpdate !== 'function' || (typeof i.componentWillUpdate === 'function' && i.componentWillUpdate(r, m, u), typeof i.UNSAFE_componentWillUpdate === 'function' && i.UNSAFE_componentWillUpdate(r, m, u)), typeof i.componentDidUpdate === 'function' && (t.flags |= 4), typeof i.getSnapshotBeforeUpdate === 'function' && (t.flags |= 1024)) : (typeof i.componentDidUpdate !== 'function' || l === e.memoizedProps && d === e.memoizedState || (t.flags |= 4), typeof i.getSnapshotBeforeUpdate !== 'function' || l === e.memoizedProps && d === e.memoizedState || (t.flags |= 1024), t.memoizedProps = r, t.memoizedState = m), i.props = r, i.state = m, i.context = u, r = s) : (typeof i.componentDidUpdate !== 'function' || l === e.memoizedProps && d === e.memoizedState || (t.flags |= 4), typeof i.getSnapshotBeforeUpdate !== 'function' || l === e.memoizedProps && d === e.memoizedState || (t.flags |= 1024), r = !1); } return Tl(e, t, n, r, o, a); } function Tl (e, t, n, r, a, o) { _l(e, t); const i = (128 & t.flags) != 0; if (!r && !i) return a && Da(t, n, !1), Wl(e, t, o); r = t.stateNode, wl.current = t; const l = i && typeof n.getDerivedStateFromError !== 'function' ? null : r.render(); return t.flags |= 1, e !== null && i ? (t.child = Ko(t, e.child, null, o), t.child = Ko(t, null, l, o)) : xl(e, t, l, o), t.memoizedState = r.state, a && Da(t, n, !0), t.child; } function $l (e) { const t = e.stateNode; t.pendingContext ? Ma(0, t.pendingContext, t.pendingContext !== t.context) : t.context && Ma(0, t.context, !1), ei(e, t.containerInfo); } function Nl (e, t, n, r, a) { return Bo(), Uo(a), t.flags |= 256, xl(e, t, n, r), t.child; } const zl = { dehydrated: null, treeContext: null, retryLane: 0 }; function Ml (e) { return { baseLanes: e, cachePool: null, transitions: null }; } function Ll (e, t) { return { baseLanes: e.baseLanes | t, cachePool: null, transitions: e.transitions }; } function Rl (e, t, n) { let r; let a = t.pendingProps; let i = ai.current; let l = !1; const u = (128 & t.flags) != 0; if ((r = u) || (r = (e === null || e.memoizedState !== null) && (2 & i) != 0), r ? (l = !0, t.flags &= -129) : e !== null && e.memoizedState === null || (i |= 1), Ea(ai, 1 & i), e === null) return Io(t), (e = t.memoizedState) !== null && (e = e.dehydrated) !== null ? ((1 & t.mode) == 0 ? t.lanes = 1 : e.data === '$!' ? t.lanes = 8 : t.lanes = 1073741824, null) : (i = a.children, e = a.fallback, l ? (a = t.mode, l = t.child, i = { mode: 'hidden', children: i }, (1 & a) == 0 && l !== null ? (l.childLanes = 0, l.pendingProps = i) : l = Ls(i, a, 0, null), e = Ms(e, a, n, null), l.return = t, e.return = t, l.sibling = e, t.child = l, t.child.memoizedState = Ml(n), t.memoizedState = zl, e) : Dl(t, i)); if ((i = e.memoizedState) !== null) { if ((r = i.dehydrated) !== null) { if (u) return 256 & t.flags ? (t.flags &= -257, jl(e, t, n, Error(o(422)))) : t.memoizedState !== null ? (t.child = e.child, t.flags |= 128, null) : (l = a.fallback, i = t.mode, a = Ls({ mode: 'visible', children: a.children }, i, 0, null), (l = Ms(l, i, n, null)).flags |= 2, a.return = t, l.return = t, a.sibling = l, t.child = a, (1 & t.mode) != 0 && Ko(t, e.child, null, n), t.child.memoizedState = Ml(n), t.memoizedState = zl, l); if ((1 & t.mode) == 0)t = jl(e, t, n, null); else if (r.data === '$!')t = jl(e, t, n, Error(o(419))); else if (a = (n & e.childLanes) != 0, kl || a) { if ((a = Eu) !== null) { switch (n & -n) { case 4: l = 2; break; case 16: l = 8; break; case 64: case 128: case 256: case 512: case 1024: case 2048: case 4096: case 8192: case 16384: case 32768: case 65536: case 131072: case 262144: case 524288: case 1048576: case 2097152: case 4194304: case 8388608: case 16777216: case 33554432: case 67108864: l = 32; break; case 536870912: l = 268435456; break; default: l = 0; }(a = (l & (a.suspendedLanes | n)) != 0 ? 0 : l) !== 0 && a !== i.retryLane && (i.retryLane = a, Ju(e, a, -1)); }ms(), t = jl(e, t, n, Error(o(421))); } else r.data === '$?' ? (t.flags |= 128, t.child = e.child, t = Es.bind(null, e), r._reactRetry = t, t = null) : (n = i.treeContext, No = sa(r.nextSibling), $o = t, zo = !0, Mo = null, n !== null && (xo[So++] = Co, xo[So++] = Eo, xo[So++] = Ao, Co = n.id, Eo = n.overflow, Ao = t), (t = Dl(t, t.pendingProps.children)).flags |= 4096); return t; } return l ? (a = Fl(e, t, a.children, a.fallback, n), l = t.child, i = e.child.memoizedState, l.memoizedState = i === null ? Ml(n) : Ll(i, n), l.childLanes = e.childLanes & ~n, t.memoizedState = zl, a) : (n = Il(e, t, a.children, n), t.memoizedState = null, n); } return l ? (a = Fl(e, t, a.children, a.fallback, n), l = t.child, i = e.child.memoizedState, l.memoizedState = i === null ? Ml(n) : Ll(i, n), l.childLanes = e.childLanes & ~n, t.memoizedState = zl, a) : (n = Il(e, t, a.children, n), t.memoizedState = null, n); } function Dl (e, t) { return (t = Ls({ mode: 'visible', children: t }, e.mode, 0, null)).return = e, e.child = t; } function Il (e, t, n, r) { const a = e.child; return e = a.sibling, n = Ns(a, { mode: 'visible', children: n }), (1 & t.mode) == 0 && (n.lanes = r), n.return = t, n.sibling = null, e !== null && ((r = t.deletions) === null ? (t.deletions = [e], t.flags |= 16) : r.push(e)), t.child = n; } function Fl (e, t, n, r, a) { const o = t.mode; const i = (e = e.child).sibling; const l = { mode: 'hidden', children: n }; return (1 & o) == 0 && t.child !== e ? ((n = t.child).childLanes = 0, n.pendingProps = l, t.deletions = null) : (n = Ns(e, l)).subtreeFlags = 14680064 & e.subtreeFlags, i !== null ? r = Ns(i, r) : (r = Ms(r, o, a, null)).flags |= 2, r.return = t, n.return = t, n.sibling = r, t.child = n, r; } function jl (e, t, n, r) { return r !== null && Uo(r), Ko(t, e.child, null, n), (e = Dl(t, t.pendingProps.children)).flags |= 2, t.memoizedState = null, e; } function Bl (e, t, n) { e.lanes |= t; const r = e.alternate; r !== null && (r.lanes |= t), Xa(e.return, t, n); } function Ul (e, t, n, r, a) { const o = e.memoizedState; o === null ? e.memoizedState = { isBackwards: t, rendering: null, renderingStartTime: 0, last: r, tail: n, tailMode: a } : (o.isBackwards = t, o.rendering = null, o.renderingStartTime = 0, o.last = r, o.tail = n, o.tailMode = a); } function Hl (e, t, n) { let r = t.pendingProps; let a = r.revealOrder; const o = r.tail; if (xl(e, t, r.children, n), (2 & (r = ai.current)) != 0)r = 1 & r | 2, t.flags |= 128; else { if (e !== null && (128 & e.flags) != 0)e:for (e = t.child; e !== null;) { if (e.tag === 13)e.memoizedState !== null && Bl(e, n, t); else if (e.tag === 19)Bl(e, n, t); else if (e.child !== null) { e.child.return = e, e = e.child; continue; } if (e === t) break; for (;e.sibling === null;) { if (e.return === null || e.return === t) break e; e = e.return; }e.sibling.return = e.return, e = e.sibling; }r &= 1; } if (Ea(ai, r), (1 & t.mode) == 0)t.memoizedState = null; else switch (a) { case 'forwards': for (n = t.child, a = null; n !== null;)(e = n.alternate) !== null && oi(e) === null && (a = n), n = n.sibling; (n = a) === null ? (a = t.child, t.child = null) : (a = n.sibling, n.sibling = null), Ul(t, !1, a, n, o); break; case 'backwards': for (n = null, a = t.child, t.child = null; a !== null;) { if ((e = a.alternate) !== null && oi(e) === null) { t.child = a; break; }e = a.sibling, a.sibling = n, n = a, a = e; }Ul(t, !0, n, null, o); break; case 'together': Ul(t, !1, null, null, void 0); break; default: t.memoizedState = null; } return t.child; } function Wl (e, t, n) { if (e !== null && (t.dependencies = e.dependencies), zu |= t.lanes, (n & t.childLanes) == 0) return null; if (e !== null && t.child !== e.child) throw Error(o(153)); if (t.child !== null) { for (n = Ns(e = t.child, e.pendingProps), t.child = n, n.return = t; e.sibling !== null;)e = e.sibling, (n = n.sibling = Ns(e, e.pendingProps)).return = t; n.sibling = null; } return t.child; } function Vl (e, t) { switch (To(t), t.tag) { case 1: return Na(t.type) && za(), 65536 & (e = t.flags) ? (t.flags = -65537 & e | 128, t) : null; case 3: return ti(), Ca(Oa), Ca(Pa), li(), (65536 & (e = t.flags)) != 0 && (128 & e) == 0 ? (t.flags = -65537 & e | 128, t) : null; case 5: return ri(t), null; case 13: if (Ca(ai), (e = t.memoizedState) !== null && e.dehydrated !== null) { if (t.alternate === null) throw Error(o(340)); Bo(); } return 65536 & (e = t.flags) ? (t.flags = -65537 & e | 128, t) : null; case 19: return Ca(ai), null; case 4: return ti(), null; case 10: return qa(t.type._context), null; case 22: case 23: return cs(), null; default: return null; } } let Yl = !1; let Kl = !1; const Ql = typeof WeakSet === 'function' ? WeakSet : Set; let Gl = null; function ql (e, t) { const n = e.ref; if (n !== null) if (typeof n === 'function') try { n(null); } catch (n) { Ss(e, t, n); } else n.current = null; } function Xl (e, t, n) { try { n(); } catch (n) { Ss(e, t, n); } } let Zl = !1; function Jl (e, t, n) { let r = t.updateQueue; if ((r = r !== null ? r.lastEffect : null) !== null) { let a = r = r.next; do { if ((a.tag & e) === e) { const o = a.destroy; a.destroy = void 0, void 0 !== o && Xl(t, n, o); }a = a.next; } while (a !== r); } } function eu (e, t) { if ((t = (t = t.updateQueue) !== null ? t.lastEffect : null) !== null) { let n = t = t.next; do { if ((n.tag & e) === e) { const r = n.create; n.destroy = r(); }n = n.next; } while (n !== t); } } function tu (e) { const t = e.ref; if (t !== null) { const n = e.stateNode; e.tag, e = n, typeof t === 'function' ? t(e) : t.current = e; } } function nu (e) { let t = e.alternate; t !== null && (e.alternate = null, nu(t)), e.child = null, e.deletions = null, e.sibling = null, e.tag === 5 && (t = e.stateNode) !== null && (delete t[da], delete t[pa], delete t[ha], delete t[ga], delete t[ya]), e.stateNode = null, e.return = null, e.dependencies = null, e.memoizedProps = null, e.memoizedState = null, e.pendingProps = null, e.stateNode = null, e.updateQueue = null; } function ru (e) { return e.tag === 5 || e.tag === 3 || e.tag === 4; } function au (e) { e:for (;;) { for (;e.sibling === null;) { if (e.return === null || ru(e.return)) return null; e = e.return; } for (e.sibling.return = e.return, e = e.sibling; e.tag !== 5 && e.tag !== 6 && e.tag !== 18;) { if (2 & e.flags) continue e; if (e.child === null || e.tag === 4) continue e; e.child.return = e, e = e.child; } if (!(2 & e.flags)) return e.stateNode; } } function ou (e, t, n) { const r = e.tag; if (r === 5 || r === 6)e = e.stateNode, t ? n.nodeType === 8 ? n.parentNode.insertBefore(e, t) : n.insertBefore(e, t) : (n.nodeType === 8 ? (t = n.parentNode).insertBefore(e, n) : (t = n).appendChild(e), (n = n._reactRootContainer) != null || t.onclick !== null || (t.onclick = Jr)); else if (r !== 4 && (e = e.child) !== null) for (ou(e, t, n), e = e.sibling; e !== null;)ou(e, t, n), e = e.sibling; } function iu (e, t, n) { const r = e.tag; if (r === 5 || r === 6)e = e.stateNode, t ? n.insertBefore(e, t) : n.appendChild(e); else if (r !== 4 && (e = e.child) !== null) for (iu(e, t, n), e = e.sibling; e !== null;)iu(e, t, n), e = e.sibling; } let lu = null; let uu = !1; function su (e, t, n) { for (n = n.child; n !== null;)cu(e, t, n), n = n.sibling; } function cu (e, t, n) { if (ot && typeof ot.onCommitFiberUnmount === 'function') try { ot.onCommitFiberUnmount(at, n); } catch (e) {} switch (n.tag) { case 5: Kl || ql(n, t); case 6: var r = lu; var a = uu; lu = null, su(e, t, n), uu = a, (lu = r) !== null && (uu ? (e = lu, n = n.stateNode, e.nodeType === 8 ? e.parentNode.removeChild(n) : e.removeChild(n)) : lu.removeChild(n.stateNode)); break; case 18: lu !== null && (uu ? (e = lu, n = n.stateNode, e.nodeType === 8 ? ua(e.parentNode, n) : e.nodeType === 1 && ua(e, n), Ut(e)) : ua(lu, n.stateNode)); break; case 4: r = lu, a = uu, lu = n.stateNode.containerInfo, uu = !0, su(e, t, n), lu = r, uu = a; break; case 0: case 11: case 14: case 15: if (!Kl && (r = n.updateQueue) !== null && (r = r.lastEffect) !== null) { a = r = r.next; do { let o = a; const i = o.destroy; o = o.tag, void 0 !== i && ((2 & o) != 0 || (4 & o) != 0) && Xl(n, t, i), a = a.next; } while (a !== r); }su(e, t, n); break; case 1: if (!Kl && (ql(n, t), typeof (r = n.stateNode).componentWillUnmount === 'function')) try { r.props = n.memoizedProps, r.state = n.memoizedState, r.componentWillUnmount(); } catch (e) { Ss(n, t, e); }su(e, t, n); break; case 21: su(e, t, n); break; case 22: 1 & n.mode ? (Kl = (r = Kl) || n.memoizedState !== null, su(e, t, n), Kl = r) : su(e, t, n); break; default: su(e, t, n); } } function fu (e) { const t = e.updateQueue; if (t !== null) { e.updateQueue = null; let n = e.stateNode; n === null && (n = e.stateNode = new Ql()), t.forEach((t) => { const r = _s.bind(null, e, t); n.has(t) || (n.add(t), t.then(r, r)); }); } } function du (e, t) { const n = t.deletions; if (n !== null) for (let r = 0; r < n.length; r++) { const a = n[r]; try { const i = e; const l = t; let u = l; e:for (;u !== null;) { switch (u.tag) { case 5: lu = u.stateNode, uu = !1; break e; case 3: case 4: lu = u.stateNode.containerInfo, uu = !0; break e; }u = u.return; } if (lu === null) throw Error(o(160)); cu(i, l, a), lu = null, uu = !1; const s = a.alternate; s !== null && (s.return = null), a.return = null; } catch (e) { Ss(a, t, e); } } if (12854 & t.subtreeFlags) for (t = t.child; t !== null;)pu(t, e), t = t.sibling; } function pu (e, t) { const n = e.alternate; const r = e.flags; switch (e.tag) { case 0: case 11: case 14: case 15: if (du(t, e), mu(e), 4 & r) { try { Jl(3, e, e.return), eu(3, e); } catch (t) { Ss(e, e.return, t); } try { Jl(5, e, e.return); } catch (t) { Ss(e, e.return, t); } } break; case 1: du(t, e), mu(e), 512 & r && n !== null && ql(n, n.return); break; case 5: if (du(t, e), mu(e), 512 & r && n !== null && ql(n, n.return), 32 & e.flags) { var a = e.stateNode; try { de(a, ''); } catch (t) { Ss(e, e.return, t); } } if (4 & r && (a = e.stateNode) != null) { var i = e.memoizedProps; var l = n !== null ? n.memoizedProps : i; var u = e.type; var s = e.updateQueue; if (e.updateQueue = null, s !== null) try { u === 'input' && i.type === 'radio' && i.name != null && X(a, i), be(u, l); var c = be(u, i); for (l = 0; l < s.length; l += 2) { var f = s[l]; var d = s[l + 1]; f === 'style' ? ge(a, d) : f === 'dangerouslySetInnerHTML' ? fe(a, d) : f === 'children' ? de(a, d) : b(a, f, d, c); } switch (u) { case 'input': Z(a, i); break; case 'textarea': oe(a, i); break; case 'select': var p = a._wrapperState.wasMultiple; a._wrapperState.wasMultiple = !!i.multiple; var m = i.value; m != null ? ne(a, !!i.multiple, m, !1) : p !== !!i.multiple && (i.defaultValue != null ? ne(a, !!i.multiple, i.defaultValue, !0) : ne(a, !!i.multiple, i.multiple ? [] : '', !1)); }a[pa] = i; } catch (t) { Ss(e, e.return, t); } } break; case 6: if (du(t, e), mu(e), 4 & r) { if (e.stateNode === null) throw Error(o(162)); c = e.stateNode, f = e.memoizedProps; try { c.nodeValue = f; } catch (t) { Ss(e, e.return, t); } } break; case 3: if (du(t, e), mu(e), 4 & r && n !== null && n.memoizedState.isDehydrated) try { Ut(t.containerInfo); } catch (t) { Ss(e, e.return, t); } break; case 4: default: du(t, e), mu(e); break; case 13: du(t, e), mu(e), 8192 & (c = e.child).flags && c.memoizedState !== null && (c.alternate === null || c.alternate.memoizedState === null) && (Iu = Xe()), 4 & r && fu(e); break; case 22: if (c = n !== null && n.memoizedState !== null, 1 & e.mode ? (Kl = (f = Kl) || c, du(t, e), Kl = f) : du(t, e), mu(e), 8192 & r) { f = e.memoizedState !== null; e:for (d = null, p = e; ;) { if (p.tag === 5) { if (d === null) { d = p; try { a = p.stateNode, f ? typeof (i = a.style).setProperty === 'function' ? i.setProperty('display', 'none', 'important') : i.display = 'none' : (u = p.stateNode, l = (s = p.memoizedProps.style) != null && s.hasOwnProperty('display') ? s.display : null, u.style.display = he('display', l)); } catch (t) { Ss(e, e.return, t); } } } else if (p.tag === 6) { if (d === null) try { p.stateNode.nodeValue = f ? '' : p.memoizedProps; } catch (t) { Ss(e, e.return, t); } } else if ((p.tag !== 22 && p.tag !== 23 || p.memoizedState === null || p === e) && p.child !== null) { p.child.return = p, p = p.child; continue; } if (p === e) break; for (;p.sibling === null;) { if (p.return === null || p.return === e) break e; d === p && (d = null), p = p.return; }d === p && (d = null), p.sibling.return = p.return, p = p.sibling; } if (f && !c && (1 & e.mode) != 0) for (Gl = e, e = e.child; e !== null;) { for (c = Gl = e; Gl !== null;) { switch (d = (f = Gl).child, f.tag) { case 0: case 11: case 14: case 15: Jl(4, f, f.return); break; case 1: if (ql(f, f.return), typeof (i = f.stateNode).componentWillUnmount === 'function') { p = f, m = f.return; try { a = p, i.props = a.memoizedProps, i.state = a.memoizedState, i.componentWillUnmount(); } catch (e) { Ss(p, m, e); } } break; case 5: ql(f, f.return); break; case 22: if (f.memoizedState !== null) { vu(c); continue; } }d !== null ? (d.return = f, Gl = d) : vu(c); }e = e.sibling; } } break; case 19: du(t, e), mu(e), 4 & r && fu(e); case 21: } } function mu (e) { const t = e.flags; if (2 & t) { try { e: { for (let n = e.return; n !== null;) { if (ru(n)) { var r = n; break e; }n = n.return; } throw Error(o(160)); } switch (r.tag) { case 5: var a = r.stateNode; 32 & r.flags && (de(a, ''), r.flags &= -33), iu(e, au(e), a); break; case 3: case 4: var i = r.stateNode.containerInfo; ou(e, au(e), i); break; default: throw Error(o(161)); } } catch (t) { Ss(e, e.return, t); }e.flags &= -3; }4096 & t && (e.flags &= -4097); } function hu (e, t, n) { Gl = e, gu(e, t, n); } function gu (e, t, n) { for (let r = (1 & e.mode) != 0; Gl !== null;) { const a = Gl; let o = a.child; if (a.tag === 22 && r) { let i = a.memoizedState !== null || Yl; if (!i) { let l = a.alternate; let u = l !== null && l.memoizedState !== null || Kl; l = Yl; const s = Kl; if (Yl = i, (Kl = u) && !s) for (Gl = a; Gl !== null;)u = (i = Gl).child, i.tag === 22 && i.memoizedState !== null ? bu(a) : u !== null ? (u.return = i, Gl = u) : bu(a); for (;o !== null;)Gl = o, gu(o, t, n), o = o.sibling; Gl = a, Yl = l, Kl = s; }yu(e); } else (8772 & a.subtreeFlags) != 0 && o !== null ? (o.return = a, Gl = o) : yu(e); } } function yu (e) { for (;Gl !== null;) { const t = Gl; if ((8772 & t.flags) != 0) { var n = t.alternate; try { if ((8772 & t.flags) != 0) switch (t.tag) { case 0: case 11: case 15: Kl || eu(5, t); break; case 1: var r = t.stateNode; if (4 & t.flags && !Kl) if (n === null)r.componentDidMount(); else { const a = t.elementType === t.type ? n.memoizedProps : Wa(t.type, n.memoizedProps); r.componentDidUpdate(a, n.memoizedState, r.__reactInternalSnapshotBeforeUpdate); } var i = t.updateQueue; i !== null && so(t, i, r); break; case 3: var l = t.updateQueue; if (l !== null) { if (n = null, t.child !== null) switch (t.child.tag) { case 5: case 1: n = t.child.stateNode; }so(t, l, n); } break; case 5: var u = t.stateNode; if (n === null && 4 & t.flags) { n = u; const s = t.memoizedProps; switch (t.type) { case 'button': case 'input': case 'select': case 'textarea': s.autoFocus && n.focus(); break; case 'img': s.src && (n.src = s.src); } } break; case 6: case 4: case 12: case 19: case 17: case 21: case 22: case 23: break; case 13: if (t.memoizedState === null) { const c = t.alternate; if (c !== null) { const f = c.memoizedState; if (f !== null) { const d = f.dehydrated; d !== null && Ut(d); } } } break; default: throw Error(o(163)); }Kl || 512 & t.flags && tu(t); } catch (e) { Ss(t, t.return, e); } } if (t === e) { Gl = null; break; } if ((n = t.sibling) !== null) { n.return = t.return, Gl = n; break; }Gl = t.return; } } function vu (e) { for (;Gl !== null;) { const t = Gl; if (t === e) { Gl = null; break; } const n = t.sibling; if (n !== null) { n.return = t.return, Gl = n; break; }Gl = t.return; } } function bu (e) { for (;Gl !== null;) { const t = Gl; try { switch (t.tag) { case 0: case 11: case 15: var n = t.return; try { eu(4, t); } catch (e) { Ss(t, n, e); } break; case 1: var r = t.stateNode; if (typeof r.componentDidMount === 'function') { const a = t.return; try { r.componentDidMount(); } catch (e) { Ss(t, a, e); } } var o = t.return; try { tu(t); } catch (e) { Ss(t, o, e); } break; case 5: var i = t.return; try { tu(t); } catch (e) { Ss(t, i, e); } } } catch (e) { Ss(t, t.return, e); } if (t === e) { Gl = null; break; } const l = t.sibling; if (l !== null) { l.return = t.return, Gl = l; break; }Gl = t.return; } } let wu; const ku = Math.ceil; const xu = w.ReactCurrentDispatcher; const Su = w.ReactCurrentOwner; const Au = w.ReactCurrentBatchConfig; let Cu = 0; var Eu = null; let _u = null; let Pu = 0; var Ou = 0; var Tu = Aa(0); var $u = 0; let Nu = null; var zu = 0; let Mu = 0; let Lu = 0; let Ru = null; let Du = null; var Iu = 0; var Fu = 1 / 0; let ju = null; var Bu = !1; var Uu = null; var Hu = null; let Wu = !1; let Vu = null; let Yu = 0; let Ku = 0; let Qu = null; let Gu = -1; let qu = 0; function Xu () { return (6 & Cu) != 0 ? Xe() : Gu !== -1 ? Gu : Gu = Xe(); } function Zu (e) { return (1 & e.mode) == 0 ? 1 : (2 & Cu) != 0 && Pu !== 0 ? Pu & -Pu : Ha.transition !== null ? (qu === 0 && (qu = ht()), qu) : (e = bt) !== 0 ? e : e = void 0 === (e = window.event) ? 16 : qt(e.type); } function Ju (e, t, n) { if (Ku > 50) throw Ku = 0, Qu = null, Error(o(185)); const r = es(e, t); return r === null ? null : (yt(r, t, n), (2 & Cu) != 0 && r === Eu || (r === Eu && ((2 & Cu) == 0 && (Mu |= t), $u === 4 && is(r, Pu)), ns(r, n), t === 1 && Cu === 0 && (1 & e.mode) == 0 && (Fu = Xe() + 500, Fa && Ua())), r); } function es (e, t) { e.lanes |= t; let n = e.alternate; for (n !== null && (n.lanes |= t), n = e, e = e.return; e !== null;)e.childLanes |= t, (n = e.alternate) !== null && (n.childLanes |= t), n = e, e = e.return; return n.tag === 3 ? n.stateNode : null; } function ts (e) { return (Eu !== null || eo !== null) && (1 & e.mode) != 0 && (2 & Cu) == 0; } function ns (e, t) { let n = e.callbackNode; !(function (e, t) { for (let n = e.suspendedLanes, r = e.pingedLanes, a = e.expirationTimes, o = e.pendingLanes; o > 0;) { const i = 31 - it(o); const l = 1 << i; const u = a[i]; u === -1 ? (l & n) != 0 && (l & r) == 0 || (a[i] = pt(l, t)) : u <= t && (e.expiredLanes |= l), o &= ~l; } }(e, t)); const r = dt(e, e === Eu ? Pu : 0); if (r === 0)n !== null && Qe(n), e.callbackNode = null, e.callbackPriority = 0; else if (t = r & -r, e.callbackPriority !== t) { if (n != null && Qe(n), t === 1)e.tag === 0 ? (function (e) { Fa = !0, Ba(e); }(ls.bind(null, e))) : Ba(ls.bind(null, e)), ia(() => { Cu === 0 && Ua(); }), n = null; else { switch (wt(r)) { case 1: n = Je; break; case 4: n = et; break; case 16: default: n = tt; break; case 536870912: n = rt; }n = Ps(n, rs.bind(null, e)); }e.callbackPriority = t, e.callbackNode = n; } } function rs (e, t) { if (Gu = -1, qu = 0, (6 & Cu) != 0) throw Error(o(327)); let n = e.callbackNode; if (ks() && e.callbackNode !== n) return null; let r = dt(e, e === Eu ? Pu : 0); if (r === 0) return null; if ((30 & r) != 0 || (r & e.expiredLanes) != 0 || t)t = hs(e, r); else { t = r; var a = Cu; Cu |= 2; var i = ps(); for (Eu === e && Pu === t || (ju = null, Fu = Xe() + 500, fs(e, t)); ;) try { ys(); break; } catch (t) { ds(e, t); }Ga(), xu.current = i, Cu = a, _u !== null ? t = 0 : (Eu = null, Pu = 0, t = $u); } if (t !== 0) { if (t === 2 && (a = mt(e)) !== 0 && (r = a, t = as(e, a)), t === 1) throw n = Nu, fs(e, 0), is(e, r), ns(e, Xe()), n; if (t === 6)is(e, r); else { if (a = e.current.alternate, (30 & r) == 0 && !(function (e) { for (let t = e; ;) { if (16384 & t.flags) { var n = t.updateQueue; if (n !== null && (n = n.stores) !== null) for (let r = 0; r < n.length; r++) { let a = n[r]; const o = a.getSnapshot; a = a.value; try { if (!lr(o(), a)) return !1; } catch (e) { return !1; } } } if (n = t.child, 16384 & t.subtreeFlags && n !== null)n.return = t, t = n; else { if (t === e) break; for (;t.sibling === null;) { if (t.return === null || t.return === e) return !0; t = t.return; }t.sibling.return = t.return, t = t.sibling; } } return !0; }(a)) && ((t = hs(e, r)) === 2 && (i = mt(e)) !== 0 && (r = i, t = as(e, i)), t === 1)) throw n = Nu, fs(e, 0), is(e, r), ns(e, Xe()), n; switch (e.finishedWork = a, e.finishedLanes = r, t) { case 0: case 1: throw Error(o(345)); case 2: case 5: ws(e, Du, ju); break; case 3: if (is(e, r), (130023424 & r) === r && (t = Iu + 500 - Xe()) > 10) { if (dt(e, 0) !== 0) break; if (((a = e.suspendedLanes) & r) !== r) { Xu(), e.pingedLanes |= e.suspendedLanes & a; break; }e.timeoutHandle = ra(ws.bind(null, e, Du, ju), t); break; }ws(e, Du, ju); break; case 4: if (is(e, r), (4194240 & r) === r) break; for (t = e.eventTimes, a = -1; r > 0;) { let l = 31 - it(r); i = 1 << l, (l = t[l]) > a && (a = l), r &= ~i; } if (r = a, (r = ((r = Xe() - r) < 120 ? 120 : r < 480 ? 480 : r < 1080 ? 1080 : r < 1920 ? 1920 : r < 3e3 ? 3e3 : r < 4320 ? 4320 : 1960 * ku(r / 1960)) - r) > 10) { e.timeoutHandle = ra(ws.bind(null, e, Du, ju), r); break; }ws(e, Du, ju); break; default: throw Error(o(329)); } } } return ns(e, Xe()), e.callbackNode === n ? rs.bind(null, e) : null; } function as (e, t) { const n = Ru; return e.current.memoizedState.isDehydrated && (fs(e, t).flags |= 256), (e = hs(e, t)) !== 2 && (t = Du, Du = n, t !== null && os(t)), e; } function os (e) { Du === null ? Du = e : Du.push.apply(Du, e); } function is (e, t) { for (t &= ~Lu, t &= ~Mu, e.suspendedLanes |= t, e.pingedLanes &= ~t, e = e.expirationTimes; t > 0;) { const n = 31 - it(t); const r = 1 << n; e[n] = -1, t &= ~r; } } function ls (e) { if ((6 & Cu) != 0) throw Error(o(327)); ks(); let t = dt(e, 0); if ((1 & t) == 0) return ns(e, Xe()), null; let n = hs(e, t); if (e.tag !== 0 && n === 2) { const r = mt(e); r !== 0 && (t = r, n = as(e, r)); } if (n === 1) throw n = Nu, fs(e, 0), is(e, t), ns(e, Xe()), n; if (n === 6) throw Error(o(345)); return e.finishedWork = e.current.alternate, e.finishedLanes = t, ws(e, Du, ju), ns(e, Xe()), null; } function us (e, t) { const n = Cu; Cu |= 1; try { return e(t); } finally { (Cu = n) === 0 && (Fu = Xe() + 500, Fa && Ua()); } } function ss (e) { Vu !== null && Vu.tag === 0 && (6 & Cu) == 0 && ks(); const t = Cu; Cu |= 1; const n = Au.transition; const r = bt; try { if (Au.transition = null, bt = 1, e) return e(); } finally { bt = r, Au.transition = n, (6 & (Cu = t)) == 0 && Ua(); } } function cs () { Ou = Tu.current, Ca(Tu); } function fs (e, t) { e.finishedWork = null, e.finishedLanes = 0; let n = e.timeoutHandle; if (n !== -1 && (e.timeoutHandle = -1, aa(n)), _u !== null) for (n = _u.return; n !== null;) { var r = n; switch (To(r), r.tag) { case 1: (r = r.type.childContextTypes) != null && za(); break; case 3: ti(), Ca(Oa), Ca(Pa), li(); break; case 5: ri(r); break; case 4: ti(); break; case 13: case 19: Ca(ai); break; case 10: qa(r.type._context); break; case 22: case 23: cs(); }n = n.return; } if (Eu = e, _u = e = Ns(e.current, null), Pu = Ou = t, $u = 0, Nu = null, Lu = Mu = zu = 0, Du = Ru = null, eo !== null) { for (t = 0; t < eo.length; t++) if ((r = (n = eo[t]).interleaved) !== null) { n.interleaved = null; const a = r.next; const o = n.pending; if (o !== null) { const i = o.next; o.next = a, r.next = i; }n.pending = r; }eo = null; } return e; } function ds (e, t) { for (;;) { let n = _u; try { if (Ga(), ui.current = nl, mi) { for (let r = fi.memoizedState; r !== null;) { const a = r.queue; a !== null && (a.pending = null), r = r.next; }mi = !1; } if (ci = 0, pi = di = fi = null, hi = !1, gi = 0, Su.current = null, n === null || n.return === null) { $u = 1, Nu = t, _u = null; break; }e: { let i = e; const l = n.return; let u = n; let s = t; if (t = Pu, u.flags |= 32768, s !== null && typeof s === 'object' && typeof s.then === 'function') { const c = s; const f = u; const d = f.tag; if ((1 & f.mode) == 0 && (d === 0 || d === 11 || d === 15)) { const p = f.alternate; p ? (f.updateQueue = p.updateQueue, f.memoizedState = p.memoizedState, f.lanes = p.lanes) : (f.updateQueue = null, f.memoizedState = null); } const m = hl(l); if (m !== null) { m.flags &= -257, gl(m, l, u, 0, t), 1 & m.mode && ml(i, c, t), s = c; const h = (t = m).updateQueue; if (h === null) { const g = new Set(); g.add(s), t.updateQueue = g; } else h.add(s); break e; } if ((1 & t) == 0) { ml(i, c, t), ms(); break e; }s = Error(o(426)); } else if (zo && 1 & u.mode) { const y = hl(l); if (y !== null) { (65536 & y.flags) == 0 && (y.flags |= 256), gl(y, l, u, 0, t), Uo(s); break e; } }i = s, $u !== 4 && ($u = 2), Ru === null ? Ru = [i] : Ru.push(i), s = il(s, u), u = l; do { switch (u.tag) { case 3: u.flags |= 65536, t &= -t, u.lanes |= t, lo(u, dl(0, s, t)); break e; case 1: i = s; var v = u.type; var b = u.stateNode; if ((128 & u.flags) == 0 && (typeof v.getDerivedStateFromError === 'function' || b !== null && typeof b.componentDidCatch === 'function' && (Hu === null || !Hu.has(b)))) { u.flags |= 65536, t &= -t, u.lanes |= t, lo(u, pl(u, i, t)); break e; } }u = u.return; } while (u !== null); }bs(n); } catch (e) { t = e, _u === n && n !== null && (_u = n = n.return); continue; } break; } } function ps () { const e = xu.current; return xu.current = nl, e === null ? nl : e; } function ms () { $u !== 0 && $u !== 3 && $u !== 2 || ($u = 4), Eu === null || (268435455 & zu) == 0 && (268435455 & Mu) == 0 || is(Eu, Pu); } function hs (e, t) { const n = Cu; Cu |= 2; const r = ps(); for (Eu === e && Pu === t || (ju = null, fs(e, t)); ;) try { gs(); break; } catch (t) { ds(e, t); } if (Ga(), Cu = n, xu.current = r, _u !== null) throw Error(o(261)); return Eu = null, Pu = 0, $u; } function gs () { for (;_u !== null;)vs(_u); } function ys () { for (;_u !== null && !Ge();)vs(_u); } function vs (e) { const t = wu(e.alternate, e, Ou); e.memoizedProps = e.pendingProps, t === null ? bs(e) : _u = t, Su.current = null; } function bs (e) { let t = e; do { let n = t.alternate; if (e = t.return, (32768 & t.flags) == 0) { if ((n = bl(n, t, Ou)) !== null) return void (_u = n); } else { if ((n = Vl(n, t)) !== null) return n.flags &= 32767, void (_u = n); if (e === null) return $u = 6, void (_u = null); e.flags |= 32768, e.subtreeFlags = 0, e.deletions = null; } if ((t = t.sibling) !== null) return void (_u = t); _u = t = e; } while (t !== null); $u === 0 && ($u = 5); } function ws (e, t, n) { const r = bt; const a = Au.transition; try { Au.transition = null, bt = 1, (function (e, t, n, r) { do { ks(); } while (Vu !== null); if ((6 & Cu) != 0) throw Error(o(327)); n = e.finishedWork; const a = e.finishedLanes; if (n === null) return null; if (e.finishedWork = null, e.finishedLanes = 0, n === e.current) throw Error(o(177)); e.callbackNode = null, e.callbackPriority = 0; let i = n.lanes | n.childLanes; if ((function (e, t) { let n = e.pendingLanes & ~t; e.pendingLanes = t, e.suspendedLanes = 0, e.pingedLanes = 0, e.expiredLanes &= t, e.mutableReadLanes &= t, e.entangledLanes &= t, t = e.entanglements; const r = e.eventTimes; for (e = e.expirationTimes; n > 0;) { const a = 31 - it(n); const o = 1 << a; t[a] = 0, r[a] = -1, e[a] = -1, n &= ~o; } }(e, i)), e === Eu && (_u = Eu = null, Pu = 0), (2064 & n.subtreeFlags) == 0 && (2064 & n.flags) == 0 || Wu || (Wu = !0, Ps(tt, () => (ks(), null))), i = (15990 & n.flags) != 0, (15990 & n.subtreeFlags) != 0 || i) { i = Au.transition, Au.transition = null; const l = bt; bt = 1; const u = Cu; Cu |= 4, Su.current = null, (function (e, t) { if (ea = Wt, pr(e = dr())) { if ('selectionStart' in e) var n = { start: e.selectionStart, end: e.selectionEnd }; else e: { let r = (n = (n = e.ownerDocument) && n.defaultView || window).getSelection && n.getSelection(); if (r && r.rangeCount !== 0) { n = r.anchorNode; const a = r.anchorOffset; const i = r.focusNode; r = r.focusOffset; try { n.nodeType, i.nodeType; } catch (e) { n = null; break e; } let l = 0; let u = -1; let s = -1; let c = 0; let f = 0; let d = e; let p = null; t:for (;;) { for (var m; d !== n || a !== 0 && d.nodeType !== 3 || (u = l + a), d !== i || r !== 0 && d.nodeType !== 3 || (s = l + r), d.nodeType === 3 && (l += d.nodeValue.length), (m = d.firstChild) !== null;)p = d, d = m; for (;;) { if (d === e) break t; if (p === n && ++c === a && (u = l), p === i && ++f === r && (s = l), (m = d.nextSibling) !== null) break; p = (d = p).parentNode; }d = m; }n = u === -1 || s === -1 ? null : { start: u, end: s }; } else n = null; }n = n || { start: 0, end: 0 }; } else n = null; for (ta = { focusedElem: e, selectionRange: n }, Wt = !1, Gl = t; Gl !== null;) if (e = (t = Gl).child, (1028 & t.subtreeFlags) != 0 && e !== null)e.return = t, Gl = e; else for (;Gl !== null;) { t = Gl; try { var h = t.alternate; if ((1024 & t.flags) != 0) switch (t.tag) { case 0: case 11: case 15: case 5: case 6: case 4: case 17: break; case 1: if (h !== null) { const g = h.memoizedProps; const y = h.memoizedState; const v = t.stateNode; const b = v.getSnapshotBeforeUpdate(t.elementType === t.type ? g : Wa(t.type, g), y); v.__reactInternalSnapshotBeforeUpdate = b; } break; case 3: var w = t.stateNode.containerInfo; if (w.nodeType === 1)w.textContent = ''; else if (w.nodeType === 9) { const k = w.body; k != null && (k.textContent = ''); } break; default: throw Error(o(163)); } } catch (e) { Ss(t, t.return, e); } if ((e = t.sibling) !== null) { e.return = t.return, Gl = e; break; }Gl = t.return; }h = Zl, Zl = !1; }(e, n)), pu(n, e), mr(ta), Wt = !!ea, ta = ea = null, e.current = n, hu(n, e, a), qe(), Cu = u, bt = l, Au.transition = i; } else e.current = n; if (Wu && (Wu = !1, Vu = e, Yu = a), (i = e.pendingLanes) === 0 && (Hu = null), (function (e) { if (ot && typeof ot.onCommitFiberRoot === 'function') try { ot.onCommitFiberRoot(at, e, void 0, (128 & e.current.flags) == 128); } catch (e) {} }(n.stateNode)), ns(e, Xe()), t !== null) for (r = e.onRecoverableError, n = 0; n < t.length; n++)r(t[n]); if (Bu) throw Bu = !1, e = Uu, Uu = null, e; (1 & Yu) != 0 && e.tag !== 0 && ks(), (1 & (i = e.pendingLanes)) != 0 ? e === Qu ? Ku++ : (Ku = 0, Qu = e) : Ku = 0, Ua(); }(e, t, n, r)); } finally { Au.transition = a, bt = r; } return null; } function ks () { if (Vu !== null) { let e = wt(Yu); const t = Au.transition; const n = bt; try { if (Au.transition = null, bt = e < 16 ? 16 : e, Vu === null) var r = !1; else { if (e = Vu, Vu = null, Yu = 0, (6 & Cu) != 0) throw Error(o(331)); const a = Cu; for (Cu |= 4, Gl = e.current; Gl !== null;) { let i = Gl; var l = i.child; if ((16 & Gl.flags) != 0) { var u = i.deletions; if (u !== null) { for (let s = 0; s < u.length; s++) { const c = u[s]; for (Gl = c; Gl !== null;) { let f = Gl; switch (f.tag) { case 0: case 11: case 15: Jl(8, f, i); } const d = f.child; if (d !== null)d.return = f, Gl = d; else for (;Gl !== null;) { const p = (f = Gl).sibling; const m = f.return; if (nu(f), f === c) { Gl = null; break; } if (p !== null) { p.return = m, Gl = p; break; }Gl = m; } } } const h = i.alternate; if (h !== null) { let g = h.child; if (g !== null) { h.child = null; do { const y = g.sibling; g.sibling = null, g = y; } while (g !== null); } }Gl = i; } } if ((2064 & i.subtreeFlags) != 0 && l !== null)l.return = i, Gl = l; else for (;Gl !== null;) { if ((2048 & (i = Gl).flags) != 0) switch (i.tag) { case 0: case 11: case 15: Jl(9, i, i.return); } const v = i.sibling; if (v !== null) { v.return = i.return, Gl = v; break; }Gl = i.return; } } const b = e.current; for (Gl = b; Gl !== null;) { const w = (l = Gl).child; if ((2064 & l.subtreeFlags) != 0 && w !== null)w.return = l, Gl = w; else for (l = b; Gl !== null;) { if ((2048 & (u = Gl).flags) != 0) try { switch (u.tag) { case 0: case 11: case 15: eu(9, u); } } catch (e) { Ss(u, u.return, e); } if (u === l) { Gl = null; break; } const k = u.sibling; if (k !== null) { k.return = u.return, Gl = k; break; }Gl = u.return; } } if (Cu = a, Ua(), ot && typeof ot.onPostCommitFiberRoot === 'function') try { ot.onPostCommitFiberRoot(at, e); } catch (e) {}r = !0; } return r; } finally { bt = n, Au.transition = t; } } return !1; } function xs (e, t, n) { oo(e, t = dl(0, t = il(n, t), 1)), t = Xu(), (e = es(e, 1)) !== null && (yt(e, 1, t), ns(e, t)); } function Ss (e, t, n) { if (e.tag === 3)xs(e, e, n); else for (;t !== null;) { if (t.tag === 3) { xs(t, e, n); break; } if (t.tag === 1) { const r = t.stateNode; if (typeof t.type.getDerivedStateFromError === 'function' || typeof r.componentDidCatch === 'function' && (Hu === null || !Hu.has(r))) { oo(t, e = pl(t, e = il(n, e), 1)), e = Xu(), (t = es(t, 1)) !== null && (yt(t, 1, e), ns(t, e)); break; } }t = t.return; } } function As (e, t, n) { const r = e.pingCache; r !== null && r.delete(t), t = Xu(), e.pingedLanes |= e.suspendedLanes & n, Eu === e && (Pu & n) === n && ($u === 4 || $u === 3 && (130023424 & Pu) === Pu && Xe() - Iu < 500 ? fs(e, 0) : Lu |= n), ns(e, t); } function Cs (e, t) { t === 0 && ((1 & e.mode) == 0 ? t = 1 : (t = ct, (130023424 & (ct <<= 1)) == 0 && (ct = 4194304))); const n = Xu(); (e = es(e, t)) !== null && (yt(e, t, n), ns(e, n)); } function Es (e) { const t = e.memoizedState; let n = 0; t !== null && (n = t.retryLane), Cs(e, n); } function _s (e, t) { let n = 0; switch (e.tag) { case 13: var r = e.stateNode; var a = e.memoizedState; a !== null && (n = a.retryLane); break; case 19: r = e.stateNode; break; default: throw Error(o(314)); }r !== null && r.delete(t), Cs(e, n); } function Ps (e, t) { return Ke(e, t); } function Os (e, t, n, r) { this.tag = e, this.key = n, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = t, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = r, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null; } function Ts (e, t, n, r) { return new Os(e, t, n, r); } function $s (e) { return !(!(e = e.prototype) || !e.isReactComponent); } function Ns (e, t) { let n = e.alternate; return n === null ? ((n = Ts(e.tag, t, e.key, e.mode)).elementType = e.elementType, n.type = e.type, n.stateNode = e.stateNode, n.alternate = e, e.alternate = n) : (n.pendingProps = t, n.type = e.type, n.flags = 0, n.subtreeFlags = 0, n.deletions = null), n.flags = 14680064 & e.flags, n.childLanes = e.childLanes, n.lanes = e.lanes, n.child = e.child, n.memoizedProps = e.memoizedProps, n.memoizedState = e.memoizedState, n.updateQueue = e.updateQueue, t = e.dependencies, n.dependencies = t === null ? null : { lanes: t.lanes, firstContext: t.firstContext }, n.sibling = e.sibling, n.index = e.index, n.ref = e.ref, n; } function zs (e, t, n, r, a, i) { let l = 2; if (r = e, typeof e === 'function')$s(e) && (l = 1); else if (typeof e === 'string')l = 5; else e:switch (e) { case S: return Ms(n.children, a, i, t); case A: l = 8, a |= 8; break; case C: return (e = Ts(12, n, t, 2 | a)).elementType = C, e.lanes = i, e; case O: return (e = Ts(13, n, t, a)).elementType = O, e.lanes = i, e; case T: return (e = Ts(19, n, t, a)).elementType = T, e.lanes = i, e; case z: return Ls(n, a, i, t); default: if (typeof e === 'object' && e !== null) switch (e.$$typeof) { case E: l = 10; break e; case _: l = 9; break e; case P: l = 11; break e; case $: l = 14; break e; case N: l = 16, r = null; break e; } throw Error(o(130, e == null ? e : typeof e, '')); } return (t = Ts(l, n, t, a)).elementType = e, t.type = r, t.lanes = i, t; } function Ms (e, t, n, r) { return (e = Ts(7, e, r, t)).lanes = n, e; } function Ls (e, t, n, r) { return (e = Ts(22, e, r, t)).elementType = z, e.lanes = n, e.stateNode = {}, e; } function Rs (e, t, n) { return (e = Ts(6, e, null, t)).lanes = n, e; } function Ds (e, t, n) { return (t = Ts(4, e.children !== null ? e.children : [], e.key, t)).lanes = n, t.stateNode = { containerInfo: e.containerInfo, pendingChildren: null, implementation: e.implementation }, t; } function Is (e, t, n, r, a) { this.tag = t, this.containerInfo = e, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = gt(0), this.expirationTimes = gt(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = gt(0), this.identifierPrefix = r, this.onRecoverableError = a, this.mutableSourceEagerHydrationData = null; } function Fs (e, t, n, r, a, o, i, l, u) { return e = new Is(e, t, n, l, u), t === 1 ? (t = 1, !0 === o && (t |= 8)) : t = 0, o = Ts(3, null, null, t), e.current = o, o.stateNode = e, o.memoizedState = { element: r, isDehydrated: n, cache: null, transitions: null, pendingSuspenseBoundaries: null }, no(o), e; } function js (e, t, n) { const r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null; return { $$typeof: x, key: r == null ? null : `${r}`, children: e, containerInfo: t, implementation: n }; } function Bs (e) { if (!e) return _a; e: { if (Ue(e = e._reactInternals) !== e || e.tag !== 1) throw Error(o(170)); var t = e; do { switch (t.tag) { case 3: t = t.stateNode.context; break e; case 1: if (Na(t.type)) { t = t.stateNode.__reactInternalMemoizedMergedChildContext; break e; } }t = t.return; } while (t !== null); throw Error(o(171)); } if (e.tag === 1) { const n = e.type; if (Na(n)) return La(e, n, t); } return t; } function Us (e, t, n, r, a, o, i, l, u) { return (e = Fs(n, r, !0, e, 0, o, 0, l, u)).context = Bs(null), n = e.current, (o = ao(r = Xu(), a = Zu(n))).callback = t != null ? t : null, oo(n, o), e.current.lanes = a, yt(e, a, r), ns(e, r), e; } function Hs (e, t, n, r) { const a = t.current; const o = Xu(); const i = Zu(a); return n = Bs(n), t.context === null ? t.context = n : t.pendingContext = n, (t = ao(o, i)).payload = { element: e }, (r = void 0 === r ? null : r) !== null && (t.callback = r), oo(a, t), (e = Ju(a, i, o)) !== null && io(e, a, i), i; } function Ws (e) { return (e = e.current).child ? (e.child.tag, e.child.stateNode) : null; } function Vs (e, t) { if ((e = e.memoizedState) !== null && e.dehydrated !== null) { const n = e.retryLane; e.retryLane = n !== 0 && n < t ? n : t; } } function Ys (e, t) { Vs(e, t), (e = e.alternate) && Vs(e, t); }wu = function (e, t, n) { if (e !== null) if (e.memoizedProps !== t.pendingProps || Oa.current)kl = !0; else { if ((e.lanes & n) == 0 && (128 & t.flags) == 0) return kl = !1, (function (e, t, n) { switch (t.tag) { case 3: $l(t), Bo(); break; case 5: ni(t); break; case 1: Na(t.type) && Ra(t); break; case 4: ei(t, t.stateNode.containerInfo); break; case 10: var r = t.type._context; var a = t.memoizedProps.value; Ea(Va, r._currentValue), r._currentValue = a; break; case 13: if ((r = t.memoizedState) !== null) return r.dehydrated !== null ? (Ea(ai, 1 & ai.current), t.flags |= 128, null) : (n & t.child.childLanes) != 0 ? Rl(e, t, n) : (Ea(ai, 1 & ai.current), (e = Wl(e, t, n)) !== null ? e.sibling : null); Ea(ai, 1 & ai.current); break; case 19: if (r = (n & t.childLanes) != 0, (128 & e.flags) != 0) { if (r) return Hl(e, t, n); t.flags |= 128; } if ((a = t.memoizedState) !== null && (a.rendering = null, a.tail = null, a.lastEffect = null), Ea(ai, ai.current), r) break; return null; case 22: case 23: return t.lanes = 0, El(e, t, n); } return Wl(e, t, n); }(e, t, n)); kl = (131072 & e.flags) != 0; } else kl = !1, zo && (1048576 & t.flags) != 0 && Po(t, ko, t.index); switch (t.lanes = 0, t.tag) { case 2: var r = t.type; e !== null && (e.alternate = null, t.alternate = null, t.flags |= 2), e = t.pendingProps; var a = $a(t, Pa.current); Za(t, n), a = wi(null, t, r, e, a, n); var i = ki(); return t.flags |= 1, typeof a === 'object' && a !== null && typeof a.render === 'function' && void 0 === a.$$typeof ? (t.tag = 1, t.memoizedState = null, t.updateQueue = null, Na(r) ? (i = !0, Ra(t)) : i = !1, t.memoizedState = a.state !== null && void 0 !== a.state ? a.state : null, no(t), a.updater = po, t.stateNode = a, a._reactInternals = t, yo(t, r, e, n), t = Tl(null, t, r, !0, i, n)) : (t.tag = 0, zo && i && Oo(t), xl(null, t, a, n), t = t.child), t; case 16: r = t.elementType; e: { switch (e !== null && (e.alternate = null, t.alternate = null, t.flags |= 2), e = t.pendingProps, r = (a = r._init)(r._payload), t.type = r, a = t.tag = (function (e) { if (typeof e === 'function') return $s(e) ? 1 : 0; if (e != null) { if ((e = e.$$typeof) === P) return 11; if (e === $) return 14; } return 2; }(r)), e = Wa(r, e), a) { case 0: t = Pl(null, t, r, e, n); break e; case 1: t = Ol(null, t, r, e, n); break e; case 11: t = Sl(null, t, r, e, n); break e; case 14: t = Al(null, t, r, Wa(r.type, e), n); break e; } throw Error(o(306, r, '')); } return t; case 0: return r = t.type, a = t.pendingProps, Pl(e, t, r, a = t.elementType === r ? a : Wa(r, a), n); case 1: return r = t.type, a = t.pendingProps, Ol(e, t, r, a = t.elementType === r ? a : Wa(r, a), n); case 3: e: { if ($l(t), e === null) throw Error(o(387)); r = t.pendingProps, a = (i = t.memoizedState).element, ro(e, t), uo(t, r, null, n); var l = t.memoizedState; if (r = l.element, i.isDehydrated) { if (i = { element: r, isDehydrated: !1, cache: l.cache, pendingSuspenseBoundaries: l.pendingSuspenseBoundaries, transitions: l.transitions }, t.updateQueue.baseState = i, t.memoizedState = i, 256 & t.flags) { t = Nl(e, t, r, n, a = Error(o(423))); break e; } if (r !== a) { t = Nl(e, t, r, n, a = Error(o(424))); break e; } for (No = sa(t.stateNode.containerInfo.firstChild), $o = t, zo = !0, Mo = null, n = Qo(t, null, r, n), t.child = n; n;)n.flags = -3 & n.flags | 4096, n = n.sibling; } else { if (Bo(), r === a) { t = Wl(e, t, n); break e; }xl(e, t, r, n); }t = t.child; } return t; case 5: return ni(t), e === null && Io(t), r = t.type, a = t.pendingProps, i = e !== null ? e.memoizedProps : null, l = a.children, na(r, a) ? l = null : i !== null && na(r, i) && (t.flags |= 32), _l(e, t), xl(e, t, l, n), t.child; case 6: return e === null && Io(t), null; case 13: return Rl(e, t, n); case 4: return ei(t, t.stateNode.containerInfo), r = t.pendingProps, e === null ? t.child = Ko(t, null, r, n) : xl(e, t, r, n), t.child; case 11: return r = t.type, a = t.pendingProps, Sl(e, t, r, a = t.elementType === r ? a : Wa(r, a), n); case 7: return xl(e, t, t.pendingProps, n), t.child; case 8: case 12: return xl(e, t, t.pendingProps.children, n), t.child; case 10: e: { if (r = t.type._context, a = t.pendingProps, i = t.memoizedProps, l = a.value, Ea(Va, r._currentValue), r._currentValue = l, i !== null) if (lr(i.value, l)) { if (i.children === a.children && !Oa.current) { t = Wl(e, t, n); break e; } } else for ((i = t.child) !== null && (i.return = t); i !== null;) { let u = i.dependencies; if (u !== null) { l = i.child; for (let s = u.firstContext; s !== null;) { if (s.context === r) { if (i.tag === 1) { (s = ao(-1, n & -n)).tag = 2; let c = i.updateQueue; if (c !== null) { const f = (c = c.shared).pending; f === null ? s.next = s : (s.next = f.next, f.next = s), c.pending = s; } }i.lanes |= n, (s = i.alternate) !== null && (s.lanes |= n), Xa(i.return, n, t), u.lanes |= n; break; }s = s.next; } } else if (i.tag === 10)l = i.type === t.type ? null : i.child; else if (i.tag === 18) { if ((l = i.return) === null) throw Error(o(341)); l.lanes |= n, (u = l.alternate) !== null && (u.lanes |= n), Xa(l, n, t), l = i.sibling; } else l = i.child; if (l !== null)l.return = i; else for (l = i; l !== null;) { if (l === t) { l = null; break; } if ((i = l.sibling) !== null) { i.return = l.return, l = i; break; }l = l.return; }i = l; }xl(e, t, a.children, n), t = t.child; } return t; case 9: return a = t.type, r = t.pendingProps.children, Za(t, n), r = r(a = Ja(a)), t.flags |= 1, xl(e, t, r, n), t.child; case 14: return a = Wa(r = t.type, t.pendingProps), Al(e, t, r, a = Wa(r.type, a), n); case 15: return Cl(e, t, t.type, t.pendingProps, n); case 17: return r = t.type, a = t.pendingProps, a = t.elementType === r ? a : Wa(r, a), e !== null && (e.alternate = null, t.alternate = null, t.flags |= 2), t.tag = 1, Na(r) ? (e = !0, Ra(t)) : e = !1, Za(t, n), ho(t, r, a), yo(t, r, a, n), Tl(null, t, r, !0, e, n); case 19: return Hl(e, t, n); case 22: return El(e, t, n); } throw Error(o(156, t.tag)); }; const Ks = typeof reportError === 'function' ? reportError : function (e) { console.error(e); }; function Qs (e) { this._internalRoot = e; } function Gs (e) { this._internalRoot = e; } function qs (e) { return !(!e || e.nodeType !== 1 && e.nodeType !== 9 && e.nodeType !== 11); } function Xs (e) { return !(!e || e.nodeType !== 1 && e.nodeType !== 9 && e.nodeType !== 11 && (e.nodeType !== 8 || e.nodeValue !== ' react-mount-point-unstable ')); } function Zs () {} function Js (e, t, n, r, a) { const o = n._reactRootContainer; if (o) { var i = o; if (typeof a === 'function') { const l = a; a = function () { const e = Ws(i); l.call(e); }; }Hs(t, i, e, a); } else i = (function (e, t, n, r, a) { if (a) { if (typeof r === 'function') { const o = r; r = function () { const e = Ws(i); o.call(e); }; } var i = Us(t, r, e, 0, null, !1, 0, '', Zs); return e._reactRootContainer = i, e[ma] = i.current, Ur(e.nodeType === 8 ? e.parentNode : e), ss(), i; } for (;a = e.lastChild;)e.removeChild(a); if (typeof r === 'function') { const l = r; r = function () { const e = Ws(u); l.call(e); }; } var u = Fs(e, 0, !1, null, 0, !1, 0, '', Zs); return e._reactRootContainer = u, e[ma] = u.current, Ur(e.nodeType === 8 ? e.parentNode : e), ss(() => { Hs(t, u, n, r); }), u; }(n, t, e, a, r)); return Ws(i); }Gs.prototype.render = Qs.prototype.render = function (e) { const t = this._internalRoot; if (t === null) throw Error(o(409)); Hs(e, t, null, null); }, Gs.prototype.unmount = Qs.prototype.unmount = function () { const e = this._internalRoot; if (e !== null) { this._internalRoot = null; const t = e.containerInfo; ss(() => { Hs(null, e, null, null); }), t[ma] = null; } }, Gs.prototype.unstable_scheduleHydration = function (e) { if (e) { const t = At(); e = { blockedOn: null, target: e, priority: t }; for (var n = 0; n < zt.length && t !== 0 && t < zt[n].priority; n++);zt.splice(n, 0, e), n === 0 && Dt(e); } }, kt = function (e) { switch (e.tag) { case 3: var t = e.stateNode; if (t.current.memoizedState.isDehydrated) { const n = ft(t.pendingLanes); n !== 0 && (vt(t, 1 | n), ns(t, Xe()), (6 & Cu) == 0 && (Fu = Xe() + 500, Ua())); } break; case 13: var r = Xu(); ss(() => Ju(e, 1, r)), Ys(e, 1); } }, xt = function (e) { e.tag === 13 && (Ju(e, 134217728, Xu()), Ys(e, 134217728)); }, St = function (e) { if (e.tag === 13) { const t = Xu(); const n = Zu(e); Ju(e, n, t), Ys(e, n); } }, At = function () { return bt; }, Ct = function (e, t) { const n = bt; try { return bt = e, t(); } finally { bt = n; } }, xe = function (e, t, n) { switch (t) { case 'input': if (Z(e, n), t = n.name, n.type === 'radio' && t != null) { for (n = e; n.parentNode;)n = n.parentNode; for (n = n.querySelectorAll(`input[name=${JSON.stringify(`${t}`)}][type="radio"]`), t = 0; t < n.length; t++) { const r = n[t]; if (r !== e && r.form === e.form) { const a = ka(r); if (!a) throw Error(o(90)); K(r), Z(r, a); } } } break; case 'textarea': oe(e, n); break; case 'select': (t = n.value) != null && ne(e, !!n.multiple, t, !1); } }, Pe = us, Oe = ss; const ec = { usingClientEntryPoint: !1, Events: [ba, wa, ka, Ee, _e, us] }; const tc = { findFiberByHostInstance: va, bundleType: 0, version: '18.1.0', rendererPackageName: 'react-dom' }; const nc = { bundleType: tc.bundleType, version: tc.version, rendererPackageName: tc.rendererPackageName, rendererConfig: tc.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: w.ReactCurrentDispatcher, findHostInstanceByFiber (e) { return (e = Ve(e)) === null ? null : e.stateNode; }, findFiberByHostInstance: tc.findFiberByHostInstance || function () { return null; }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: '18.1.0-next-22edb9f77-20220426' }; if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined') { const rc = __REACT_DEVTOOLS_GLOBAL_HOOK__; if (!rc.isDisabled && rc.supportsFiber) try { at = rc.inject(nc), ot = rc; } catch (ce) {} }t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ec, t.createPortal = function (e, t) { const n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null; if (!qs(t)) throw Error(o(200)); return js(e, t, null, n); }, t.createRoot = function (e, t) { if (!qs(e)) throw Error(o(299)); let n = !1; let r = ''; let a = Ks; return t != null && (!0 === t.unstable_strictMode && (n = !0), void 0 !== t.identifierPrefix && (r = t.identifierPrefix), void 0 !== t.onRecoverableError && (a = t.onRecoverableError)), t = Fs(e, 1, !1, null, 0, n, 0, r, a), e[ma] = t.current, Ur(e.nodeType === 8 ? e.parentNode : e), new Qs(t); }, t.findDOMNode = function (e) { if (e == null) return null; if (e.nodeType === 1) return e; const t = e._reactInternals; if (void 0 === t) { if (typeof e.render === 'function') throw Error(o(188)); throw e = Object.keys(e).join(','), Error(o(268, e)); } return (e = Ve(t)) === null ? null : e.stateNode; }, t.flushSync = function (e) { return ss(e); }, t.hydrate = function (e, t, n) { if (!Xs(t)) throw Error(o(200)); return Js(null, e, t, !0, n); }, t.hydrateRoot = function (e, t, n) { if (!qs(e)) throw Error(o(405)); const r = n != null && n.hydratedSources || null; let a = !1; let i = ''; let l = Ks; if (n != null && (!0 === n.unstable_strictMode && (a = !0), void 0 !== n.identifierPrefix && (i = n.identifierPrefix), void 0 !== n.onRecoverableError && (l = n.onRecoverableError)), t = Us(t, null, e, 1, n != null ? n : null, a, 0, i, l), e[ma] = t.current, Ur(e), r) for (e = 0; e < r.length; e++)a = (a = (n = r[e])._getVersion)(n._source), t.mutableSourceEagerHydrationData == null ? t.mutableSourceEagerHydrationData = [n, a] : t.mutableSourceEagerHydrationData.push(n, a); return new Gs(t); }, t.render = function (e, t, n) { if (!Xs(t)) throw Error(o(200)); return Js(null, e, t, !1, n); }, t.unmountComponentAtNode = function (e) { if (!Xs(e)) throw Error(o(40)); return !!e._reactRootContainer && (ss(() => { Js(null, null, e, !1, () => { e._reactRootContainer = null, e[ma] = null; }); }), !0); }, t.unstable_batchedUpdates = us, t.unstable_renderSubtreeIntoContainer = function (e, t, n, r) { if (!Xs(n)) throw Error(o(200)); if (e == null || void 0 === e._reactInternals) throw Error(o(38)); return Js(e, t, n, !1, r); }, t.version = '18.1.0-next-22edb9f77-20220426';
    },
    745: (e, t, n) => {
      const r = n(935); t.s = r.createRoot, r.hydrateRoot;
    },
    935: (e, t, n) => {
      !(function e () { if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE === 'function') try { __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e); } catch (e) { console.error(e); } }()), e.exports = n(448);
    },
    251: (e, t, n) => {
      const r = n(294); const a = Symbol.for('react.element'); const o = (Symbol.for('react.fragment'), Object.prototype.hasOwnProperty); const i = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner; const l = { key: !0, ref: !0, __self: !0, __source: !0 }; function u (e, t, n) { let r; const u = {}; let s = null; let c = null; for (r in void 0 !== n && (s = `${n}`), void 0 !== t.key && (s = `${t.key}`), void 0 !== t.ref && (c = t.ref), t)o.call(t, r) && !l.hasOwnProperty(r) && (u[r] = t[r]); if (e && e.defaultProps) for (r in t = e.defaultProps) void 0 === u[r] && (u[r] = t[r]); return { $$typeof: a, type: e, key: s, ref: c, props: u, _owner: i.current }; }t.jsx = u, t.jsxs = u;
    },
    408: (e, t) => {
      const n = Symbol.for('react.element'); const r = Symbol.for('react.portal'); const a = Symbol.for('react.fragment'); const o = Symbol.for('react.strict_mode'); const i = Symbol.for('react.profiler'); const l = Symbol.for('react.provider'); const u = Symbol.for('react.context'); const s = Symbol.for('react.forward_ref'); const c = Symbol.for('react.suspense'); const f = Symbol.for('react.memo'); const d = Symbol.for('react.lazy'); const p = Symbol.iterator; const m = { isMounted () { return !1; }, enqueueForceUpdate () {}, enqueueReplaceState () {}, enqueueSetState () {} }; const h = Object.assign; const g = {}; function y (e, t, n) { this.props = e, this.context = t, this.refs = g, this.updater = n || m; } function v () {} function b (e, t, n) { this.props = e, this.context = t, this.refs = g, this.updater = n || m; }y.prototype.isReactComponent = {}, y.prototype.setState = function (e, t) { if (typeof e !== 'object' && typeof e !== 'function' && e != null) throw Error('setState(...): takes an object of state variables to update or a function which returns an object of state variables.'); this.updater.enqueueSetState(this, e, t, 'setState'); }, y.prototype.forceUpdate = function (e) { this.updater.enqueueForceUpdate(this, e, 'forceUpdate'); }, v.prototype = y.prototype; const w = b.prototype = new v(); w.constructor = b, h(w, y.prototype), w.isPureReactComponent = !0; const k = Array.isArray; const x = Object.prototype.hasOwnProperty; const S = { current: null }; const A = { key: !0, ref: !0, __self: !0, __source: !0 }; function C (e, t, r) { let a; const o = {}; let i = null; let l = null; if (t != null) for (a in void 0 !== t.ref && (l = t.ref), void 0 !== t.key && (i = `${t.key}`), t)x.call(t, a) && !A.hasOwnProperty(a) && (o[a] = t[a]); let u = arguments.length - 2; if (u === 1)o.children = r; else if (u > 1) { for (var s = Array(u), c = 0; c < u; c++)s[c] = arguments[c + 2]; o.children = s; } if (e && e.defaultProps) for (a in u = e.defaultProps) void 0 === o[a] && (o[a] = u[a]); return { $$typeof: n, type: e, key: i, ref: l, props: o, _owner: S.current }; } function E (e) { return typeof e === 'object' && e !== null && e.$$typeof === n; } const _ = /\/+/g; function P (e, t) { return typeof e === 'object' && e !== null && e.key != null ? (function (e) { const t = { '=': '=0', ':': '=2' }; return `$${e.replace(/[=:]/g, (e) => t[e])}`; }(`${e.key}`)) : t.toString(36); } function O (e, t, a, o, i) { let l = typeof e; l !== 'undefined' && l !== 'boolean' || (e = null); let u = !1; if (e === null)u = !0; else switch (l) { case 'string': case 'number': u = !0; break; case 'object': switch (e.$$typeof) { case n: case r: u = !0; } } if (u) return i = i(u = e), e = o === '' ? `.${P(u, 0)}` : o, k(i) ? (a = '', e != null && (a = `${e.replace(_, '$&/')}/`), O(i, t, a, '', (e) => e)) : i != null && (E(i) && (i = (function (e, t) { return { $$typeof: n, type: e.type, key: t, ref: e.ref, props: e.props, _owner: e._owner }; }(i, a + (!i.key || u && u.key === i.key ? '' : `${(`${i.key}`).replace(_, '$&/')}/`) + e))), t.push(i)), 1; if (u = 0, o = o === '' ? '.' : `${o}:`, k(e)) for (var s = 0; s < e.length; s++) { var c = o + P(l = e[s], s); u += O(l, t, a, c, i); } else if (c = (function (e) { return e === null || typeof e !== 'object' ? null : typeof (e = p && e[p] || e['@@iterator']) === 'function' ? e : null; }(e)), typeof c === 'function') for (e = c.call(e), s = 0; !(l = e.next()).done;)u += O(l = l.value, t, a, c = o + P(l, s++), i); else if (l === 'object') throw t = String(e), Error(`Objects are not valid as a React child (found: ${t === '[object Object]' ? `object with keys {${Object.keys(e).join(', ')}}` : t}). If you meant to render a collection of children, use an array instead.`); return u; } function T (e, t, n) { if (e == null) return e; const r = []; let a = 0; return O(e, r, '', '', (e) => t.call(n, e, a++)), r; } function $ (e) { if (e._status === -1) { let t = e._result; (t = t()).then((t) => { e._status !== 0 && e._status !== -1 || (e._status = 1, e._result = t); }, (t) => { e._status !== 0 && e._status !== -1 || (e._status = 2, e._result = t); }), e._status === -1 && (e._status = 0, e._result = t); } if (e._status === 1) return e._result.default; throw e._result; } const N = { current: null }; const z = { transition: null }; const M = { ReactCurrentDispatcher: N, ReactCurrentBatchConfig: z, ReactCurrentOwner: S }; t.Children = { map: T, forEach (e, t, n) { T(e, function () { t.apply(this, arguments); }, n); }, count (e) { let t = 0; return T(e, () => { t++; }), t; }, toArray (e) { return T(e, (e) => e) || []; }, only (e) { if (!E(e)) throw Error('React.Children.only expected to receive a single React element child.'); return e; } }, t.Component = y, t.Fragment = a, t.Profiler = i, t.PureComponent = b, t.StrictMode = o, t.Suspense = c, t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = M, t.cloneElement = function (e, t, r) { if (e == null) throw Error(`React.cloneElement(...): The argument must be a React element, but you passed ${e}.`); const a = { ...e.props }; let o = e.key; let i = e.ref; let l = e._owner; if (t != null) { if (void 0 !== t.ref && (i = t.ref, l = S.current), void 0 !== t.key && (o = `${t.key}`), e.type && e.type.defaultProps) var u = e.type.defaultProps; for (s in t)x.call(t, s) && !A.hasOwnProperty(s) && (a[s] = void 0 === t[s] && void 0 !== u ? u[s] : t[s]); } var s = arguments.length - 2; if (s === 1)a.children = r; else if (s > 1) { u = Array(s); for (let c = 0; c < s; c++)u[c] = arguments[c + 2]; a.children = u; } return { $$typeof: n, type: e.type, key: o, ref: i, props: a, _owner: l }; }, t.createContext = function (e) { return (e = { $$typeof: u, _currentValue: e, _currentValue2: e, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null }).Provider = { $$typeof: l, _context: e }, e.Consumer = e; }, t.createElement = C, t.createFactory = function (e) { const t = C.bind(null, e); return t.type = e, t; }, t.createRef = function () { return { current: null }; }, t.forwardRef = function (e) { return { $$typeof: s, render: e }; }, t.isValidElement = E, t.lazy = function (e) { return { $$typeof: d, _payload: { _status: -1, _result: e }, _init: $ }; }, t.memo = function (e, t) { return { $$typeof: f, type: e, compare: void 0 === t ? null : t }; }, t.startTransition = function (e) { const t = z.transition; z.transition = {}; try { e(); } finally { z.transition = t; } }, t.unstable_act = function () { throw Error('act(...) is not supported in production builds of React.'); }, t.useCallback = function (e, t) { return N.current.useCallback(e, t); }, t.useContext = function (e) { return N.current.useContext(e); }, t.useDebugValue = function () {}, t.useDeferredValue = function (e) { return N.current.useDeferredValue(e); }, t.useEffect = function (e, t) { return N.current.useEffect(e, t); }, t.useId = function () { return N.current.useId(); }, t.useImperativeHandle = function (e, t, n) { return N.current.useImperativeHandle(e, t, n); }, t.useInsertionEffect = function (e, t) { return N.current.useInsertionEffect(e, t); }, t.useLayoutEffect = function (e, t) { return N.current.useLayoutEffect(e, t); }, t.useMemo = function (e, t) { return N.current.useMemo(e, t); }, t.useReducer = function (e, t, n) { return N.current.useReducer(e, t, n); }, t.useRef = function (e) { return N.current.useRef(e); }, t.useState = function (e) { return N.current.useState(e); }, t.useSyncExternalStore = function (e, t, n) { return N.current.useSyncExternalStore(e, t, n); }, t.useTransition = function () { return N.current.useTransition(); }, t.version = '18.1.0';
    },
    294: (e, t, n) => {
      e.exports = n(408);
    },
    893: (e, t, n) => {
      e.exports = n(251);
    },
    53: (e, t) => {
      function n (e, t) { let n = e.length; e.push(t); for (;n > 0;) { const r = n - 1 >>> 1; const a = e[r]; if (!(o(a, t) > 0)) break; e[r] = t, e[n] = a, n = r; } } function r (e) { return e.length === 0 ? null : e[0]; } function a (e) { if (e.length === 0) return null; const t = e[0]; const n = e.pop(); if (n !== t) { e[0] = n; for (let r = 0, a = e.length, i = a >>> 1; r < i;) { const l = 2 * (r + 1) - 1; const u = e[l]; const s = l + 1; const c = e[s]; if (o(u, n) < 0)s < a && o(c, u) < 0 ? (e[r] = c, e[s] = n, r = s) : (e[r] = u, e[l] = n, r = l); else { if (!(s < a && o(c, n) < 0)) break; e[r] = c, e[s] = n, r = s; } } } return t; } function o (e, t) { const n = e.sortIndex - t.sortIndex; return n !== 0 ? n : e.id - t.id; } if (typeof performance === 'object' && typeof performance.now === 'function') { const i = performance; t.unstable_now = function () { return i.now(); }; } else { const l = Date; const u = l.now(); t.unstable_now = function () { return l.now() - u; }; } const s = []; const c = []; let f = 1; let d = null; let p = 3; let m = !1; let h = !1; let g = !1; const y = typeof setTimeout === 'function' ? setTimeout : null; const v = typeof clearTimeout === 'function' ? clearTimeout : null; const b = typeof setImmediate !== 'undefined' ? setImmediate : null; function w (e) { for (let t = r(c); t !== null;) { if (t.callback === null)a(c); else { if (!(t.startTime <= e)) break; a(c), t.sortIndex = t.expirationTime, n(s, t); }t = r(c); } } function k (e) { if (g = !1, w(e), !h) if (r(s) !== null)h = !0, z(x); else { const t = r(c); t !== null && M(k, t.startTime - e); } } function x (e, n) { h = !1, g && (g = !1, v(E), E = -1), m = !0; const o = p; try { for (w(n), d = r(s); d !== null && (!(d.expirationTime > n) || e && !O());) { const i = d.callback; if (typeof i === 'function') { d.callback = null, p = d.priorityLevel; const l = i(d.expirationTime <= n); n = t.unstable_now(), typeof l === 'function' ? d.callback = l : d === r(s) && a(s), w(n); } else a(s); d = r(s); } if (d !== null) var u = !0; else { const f = r(c); f !== null && M(k, f.startTime - n), u = !1; } return u; } finally { d = null, p = o, m = !1; } } typeof navigator !== 'undefined' && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling); let S; let A = !1; let C = null; var E = -1; let _ = 5; let P = -1; function O () { return !(t.unstable_now() - P < _); } function T () { if (C !== null) { const e = t.unstable_now(); P = e; let n = !0; try { n = C(!0, e); } finally { n ? S() : (A = !1, C = null); } } else A = !1; } if (typeof b === 'function')S = function () { b(T); }; else if (typeof MessageChannel !== 'undefined') {
        const $ = new MessageChannel(); const
          N = $.port2; $.port1.onmessage = T, S = function () { N.postMessage(null); };
      } else S = function () { y(T, 0); }; function z (e) { C = e, A || (A = !0, S()); } function M (e, n) { E = y(() => { e(t.unstable_now()); }, n); }t.unstable_IdlePriority = 5, t.unstable_ImmediatePriority = 1, t.unstable_LowPriority = 4, t.unstable_NormalPriority = 3, t.unstable_Profiling = null, t.unstable_UserBlockingPriority = 2, t.unstable_cancelCallback = function (e) { e.callback = null; }, t.unstable_continueExecution = function () { h || m || (h = !0, z(x)); }, t.unstable_forceFrameRate = function (e) { e < 0 || e > 125 ? console.error('forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported') : _ = e > 0 ? Math.floor(1e3 / e) : 5; }, t.unstable_getCurrentPriorityLevel = function () { return p; }, t.unstable_getFirstCallbackNode = function () { return r(s); }, t.unstable_next = function (e) { switch (p) { case 1: case 2: case 3: var t = 3; break; default: t = p; } const n = p; p = t; try { return e(); } finally { p = n; } }, t.unstable_pauseExecution = function () {}, t.unstable_requestPaint = function () {}, t.unstable_runWithPriority = function (e, t) { switch (e) { case 1: case 2: case 3: case 4: case 5: break; default: e = 3; } const n = p; p = e; try { return t(); } finally { p = n; } }, t.unstable_scheduleCallback = function (e, a, o) { const i = t.unstable_now(); switch (o = typeof o === 'object' && o !== null && typeof (o = o.delay) === 'number' && o > 0 ? i + o : i, e) { case 1: var l = -1; break; case 2: l = 250; break; case 5: l = 1073741823; break; case 4: l = 1e4; break; default: l = 5e3; } return e = { id: f++, callback: a, priorityLevel: e, startTime: o, expirationTime: l = o + l, sortIndex: -1 }, o > i ? (e.sortIndex = o, n(c, e), r(s) === null && e === r(c) && (g ? (v(E), E = -1) : g = !0, M(k, o - i))) : (e.sortIndex = l, n(s, e), h || m || (h = !0, z(x))), e; }, t.unstable_shouldYield = O, t.unstable_wrapCallback = function (e) { const t = p; return function () { const n = p; p = t; try { return e.apply(this, arguments); } finally { p = n; } }; };
    },
    840: (e, t, n) => {
      e.exports = n(53);
    },
    379: (e) => {
      const t = []; function n (e) { for (var n = -1, r = 0; r < t.length; r++) if (t[r].identifier === e) { n = r; break; } return n; } function r (e, r) { for (var o = {}, i = [], l = 0; l < e.length; l++) { const u = e[l]; const s = r.base ? u[0] + r.base : u[0]; const c = o[s] || 0; const f = ''.concat(s, ' ').concat(c); o[s] = c + 1; const d = n(f); const p = { css: u[1], media: u[2], sourceMap: u[3], supports: u[4], layer: u[5] }; if (d !== -1)t[d].references++, t[d].updater(p); else { const m = a(p, r); r.byIndex = l, t.splice(l, 0, { identifier: f, updater: m, references: 1 }); }i.push(f); } return i; } function a (e, t) { const n = t.domAPI(t); return n.update(e), function (t) { if (t) { if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap && t.supports === e.supports && t.layer === e.layer) return; n.update(e = t); } else n.remove(); }; }e.exports = function (e, a) { let o = r(e = e || [], a = a || {}); return function (e) { e = e || []; for (let i = 0; i < o.length; i++) { const l = n(o[i]); t[l].references--; } for (var u = r(e, a), s = 0; s < o.length; s++) { const c = n(o[s]); t[c].references === 0 && (t[c].updater(), t.splice(c, 1)); }o = u; }; };
    },
    569: (e) => {
      const t = {}; e.exports = function (e, n) { const r = (function (e) { if (void 0 === t[e]) { let n = document.querySelector(e); if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) try { n = n.contentDocument.head; } catch (e) { n = null; }t[e] = n; } return t[e]; }(e)); if (!r) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); r.appendChild(n); };
    },
    216: (e) => {
      e.exports = function (e) { const t = document.createElement('style'); return e.setAttributes(t, e.attributes), e.insert(t, e.options), t; };
    },
    565: (e, t, n) => {
      e.exports = function (e) { const t = n.nc; t && e.setAttribute('nonce', t); };
    },
    795: (e) => {
      e.exports = function (e) { const t = e.insertStyleElement(e); return { update (n) { !(function (e, t, n) { let r = ''; n.supports && (r += '@supports ('.concat(n.supports, ') {')), n.media && (r += '@media '.concat(n.media, ' {')); const a = void 0 !== n.layer; a && (r += '@layer'.concat(n.layer.length > 0 ? ' '.concat(n.layer) : '', ' {')), r += n.css, a && (r += '}'), n.media && (r += '}'), n.supports && (r += '}'); const o = n.sourceMap; o && typeof btoa !== 'undefined' && (r += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(o)))), ' */')), t.styleTagTransform(r, e, t.options); }(t, e, n)); }, remove () { !(function (e) { if (e.parentNode === null) return !1; e.parentNode.removeChild(e); }(t)); } }; };
    },
    589: (e) => {
      e.exports = function (e, t) { if (t.styleSheet)t.styleSheet.cssText = e; else { for (;t.firstChild;)t.removeChild(t.firstChild); t.appendChild(document.createTextNode(e)); } };
    },
    480: () => {}
  }; const r = {}; function a (e) { const t = r[e]; if (void 0 !== t) return t.exports; const o = r[e] = { id: e, exports: {} }; return n[e].call(o.exports, o, o.exports, a), o.exports; }a.n = (e) => { const t = e && e.__esModule ? () => e.default : () => e; return a.d(t, { a: t }), t; }, t = Object.getPrototypeOf ? (e) => Object.getPrototypeOf(e) : (e) => e.__proto__, a.t = function (n, r) { if (1 & r && (n = this(n)), 8 & r) return n; if (typeof n === 'object' && n) { if (4 & r && n.__esModule) return n; if (16 & r && typeof n.then === 'function') return n; } const o = Object.create(null); a.r(o); const i = {}; e = e || [null, t({}), t([]), t(t)]; for (let l = 2 & r && n; typeof l === 'object' && !~e.indexOf(l); l = t(l))Object.getOwnPropertyNames(l).forEach((e) => i[e] = () => n[e]); return i.default = () => n, a.d(o, i), o; }, a.d = (e, t) => { for (const n in t)a.o(t, n) && !a.o(e, n) && Object.defineProperty(e, n, { enumerable: !0, get: t[n] }); }, a.g = (function () { if (typeof globalThis === 'object') return globalThis; try { return this || new Function('return this')(); } catch (e) { if (typeof window === 'object') return window; } }()), a.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), a.r = (e) => { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }); }, a.nc = void 0, (() => {
    const e = a(294); const t = a.t(e, 2); const n = a(745); const r = a(379); const o = a.n(r); const i = a(795); const l = a.n(i); const u = a(569); const s = a.n(u); const c = a(565); const f = a.n(c); const d = a(216); const p = a.n(d); const m = a(589); const h = a.n(m); const g = a(312); const y = {}; function v (e, t) { if (e == null) return {}; let n; let r; const a = {}; const o = Object.keys(e); for (r = 0; r < o.length; r++)n = o[r], t.indexOf(n) >= 0 || (a[n] = e[n]); return a; } function b () { return b = Object.assign ? Object.assign.bind() : function (e) { for (let t = 1; t < arguments.length; t++) { const n = arguments[t]; for (const r in n)Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]); } return e; }, b.apply(this, arguments); } function w (e) { let t; let n; let r = ''; if (typeof e === 'string' || typeof e === 'number')r += e; else if (typeof e === 'object') if (Array.isArray(e)) for (t = 0; t < e.length; t++)e[t] && (n = w(e[t])) && (r && (r += ' '), r += n); else for (t in e)e[t] && (r && (r += ' '), r += t); return r; }y.styleTagTransform = h(), y.setAttributes = f(), y.insert = s().bind(null, 'head'), y.domAPI = l(), y.insertStyleElement = p(), o()(g.Z, y), g.Z && g.Z.locals && g.Z.locals; const k = function () { for (var e, t, n = 0, r = ''; n < arguments.length;)(e = arguments[n++]) && (t = w(e)) && (r && (r += ' '), r += t); return r; }; function x (e, t, n) { const r = {}; return Object.keys(e).forEach((a) => { r[a] = e[a].reduce((e, r) => (r && (e.push(t(r)), n && n[r] && e.push(n[r])), e), []).join(' '); }), r; } const S = (function () { function e (e) { const t = this; this._insertTag = function (e) { let n; n = t.tags.length === 0 ? t.insertionPoint ? t.insertionPoint.nextSibling : t.prepend ? t.container.firstChild : t.before : t.tags[t.tags.length - 1].nextSibling, t.container.insertBefore(e, n), t.tags.push(e); }, this.isSpeedy = void 0 === e.speedy || e.speedy, this.tags = [], this.ctr = 0, this.nonce = e.nonce, this.key = e.key, this.container = e.container, this.prepend = e.prepend, this.insertionPoint = e.insertionPoint, this.before = null; } const t = e.prototype; return t.hydrate = function (e) { e.forEach(this._insertTag); }, t.insert = function (e) { this.ctr % (this.isSpeedy ? 65e3 : 1) == 0 && this._insertTag(function (e) { const t = document.createElement('style'); return t.setAttribute('data-emotion', e.key), void 0 !== e.nonce && t.setAttribute('nonce', e.nonce), t.appendChild(document.createTextNode('')), t.setAttribute('data-s', ''), t; }(this)); const t = this.tags[this.tags.length - 1]; if (this.isSpeedy) { const n = (function (e) { if (e.sheet) return e.sheet; for (let t = 0; t < document.styleSheets.length; t++) if (document.styleSheets[t].ownerNode === e) return document.styleSheets[t]; }(t)); try { n.insertRule(e, n.cssRules.length); } catch (e) {} } else t.appendChild(document.createTextNode(e)); this.ctr++; }, t.flush = function () { this.tags.forEach((e) => e.parentNode && e.parentNode.removeChild(e)), this.tags = [], this.ctr = 0; }, e; }()); const A = Math.abs; const C = String.fromCharCode; const E = Object.assign; function _ (e) { return e.trim(); } function P (e, t, n) { return e.replace(t, n); } function O (e, t) { return e.indexOf(t); } function T (e, t) { return 0 | e.charCodeAt(t); } function $ (e, t, n) { return e.slice(t, n); } function N (e) { return e.length; } function z (e) { return e.length; } function M (e, t) { return t.push(e), e; } let L = 1; let R = 1; let D = 0; let I = 0; let F = 0; let j = ''; function B (e, t, n, r, a, o, i) { return { value: e, root: t, parent: n, type: r, props: a, children: o, line: L, column: R, length: i, return: '' }; } function U (e, t) { return E(B('', null, null, '', null, null, 0), e, { length: -e.length }, t); } function H () { return F = I > 0 ? T(j, --I) : 0, R--, F === 10 && (R = 1, L--), F; } function W () { return F = I < D ? T(j, I++) : 0, R++, F === 10 && (R = 1, L++), F; } function V () { return T(j, I); } function Y () { return I; } function K (e, t) { return $(j, e, t); } function Q (e) { switch (e) { case 0: case 9: case 10: case 13: case 32: return 5; case 33: case 43: case 44: case 47: case 62: case 64: case 126: case 59: case 123: case 125: return 4; case 58: return 3; case 34: case 39: case 40: case 91: return 2; case 41: case 93: return 1; } return 0; } function G (e) { return L = R = 1, D = N(j = e), I = 0, []; } function q (e) { return j = '', e; } function X (e) { return _(K(I - 1, ee(e === 91 ? e + 2 : e === 40 ? e + 1 : e))); } function Z (e) { for (;(F = V()) && F < 33;)W(); return Q(e) > 2 || Q(F) > 3 ? '' : ' '; } function J (e, t) { for (;--t && W() && !(F < 48 || F > 102 || F > 57 && F < 65 || F > 70 && F < 97););return K(e, Y() + (t < 6 && V() == 32 && W() == 32)); } function ee (e) { for (;W();) switch (F) { case e: return I; case 34: case 39: e !== 34 && e !== 39 && ee(F); break; case 40: e === 41 && ee(e); break; case 92: W(); } return I; } function te (e, t) { for (;W() && e + F !== 57 && (e + F !== 84 || V() !== 47););return `/*${K(t, I - 1)}*${C(e === 47 ? e : W())}`; } function ne (e) { for (;!Q(V());)W(); return K(e, I); } const re = '-ms-'; const ae = '-webkit-'; const oe = 'comm'; const ie = 'rule'; const le = 'decl'; const ue = '@keyframes'; function se (e, t) { for (var n = '', r = z(e), a = 0; a < r; a++)n += t(e[a], a, e, t) || ''; return n; } function ce (e, t, n, r) { switch (e.type) { case '@import': case le: return e.return = e.return || e.value; case oe: return ''; case ue: return e.return = `${e.value}{${se(e.children, r)}}`; case ie: e.value = e.props.join(','); } return N(n = se(e.children, r)) ? e.return = `${e.value}{${n}}` : ''; } function fe (e) { return q(de('', null, null, null, [''], e = G(e), 0, [0], e)); } function de (e, t, n, r, a, o, i, l, u) { for (let s = 0, c = 0, f = i, d = 0, p = 0, m = 0, h = 1, g = 1, y = 1, v = 0, b = '', w = a, k = o, x = r, S = b; g;) switch (m = v, v = W()) { case 40: if (m != 108 && T(S, f - 1) == 58) { O(S += P(X(v), '&', '&\f'), '&\f') != -1 && (y = -1); break; } case 34: case 39: case 91: S += X(v); break; case 9: case 10: case 13: case 32: S += Z(m); break; case 92: S += J(Y() - 1, 7); continue; case 47: switch (V()) { case 42: case 47: M(me(te(W(), Y()), t, n), u); break; default: S += '/'; } break; case 123 * h: l[s++] = N(S) * y; case 125 * h: case 59: case 0: switch (v) { case 0: case 125: g = 0; case 59 + c: p > 0 && N(S) - f && M(p > 32 ? he(`${S};`, r, n, f - 1) : he(`${P(S, ' ', '')};`, r, n, f - 2), u); break; case 59: S += ';'; default: if (M(x = pe(S, t, n, s, c, a, l, b, w = [], k = [], f), o), v === 123) if (c === 0)de(S, t, x, x, w, o, f, l, k); else switch (d === 99 && T(S, 3) === 110 ? 100 : d) { case 100: case 109: case 115: de(e, x, x, r && M(pe(e, x, x, 0, 0, a, l, b, a, w = [], f), k), a, k, f, l, r ? w : k); break; default: de(S, x, x, x, [''], k, 0, l, k); } }s = c = p = 0, h = y = 1, b = S = '', f = i; break; case 58: f = 1 + N(S), p = m; default: if (h < 1) if (v == 123)--h; else if (v == 125 && h++ == 0 && H() == 125) continue; switch (S += C(v), v * h) { case 38: y = c > 0 ? 1 : (S += '\f', -1); break; case 44: l[s++] = (N(S) - 1) * y, y = 1; break; case 64: V() === 45 && (S += X(W())), d = V(), c = f = N(b = S += ne(Y())), v++; break; case 45: m === 45 && N(S) == 2 && (h = 0); } } return o; } function pe (e, t, n, r, a, o, i, l, u, s, c) { for (let f = a - 1, d = a === 0 ? o : [''], p = z(d), m = 0, h = 0, g = 0; m < r; ++m) for (let y = 0, v = $(e, f + 1, f = A(h = i[m])), b = e; y < p; ++y)(b = _(h > 0 ? `${d[y]} ${v}` : P(v, /&\f/g, d[y]))) && (u[g++] = b); return B(e, t, n, a === 0 ? ie : l, u, s, c); } function me (e, t, n) { return B(e, t, n, oe, C(F), $(e, 2, -2), 0); } function he (e, t, n, r) { return B(e, t, n, le, $(e, 0, r), $(e, r + 1, -1), r); } const ge = function (e, t, n) { for (let r = 0, a = 0; r = a, a = V(), r === 38 && a === 12 && (t[n] = 1), !Q(a);)W(); return K(e, I); }; const ye = new WeakMap(); const ve = function (e) { if (e.type === 'rule' && e.parent && !(e.length < 1)) { for (var t = e.value, n = e.parent, r = e.column === n.column && e.line === n.line; n.type !== 'rule';) if (!(n = n.parent)) return; if ((e.props.length !== 1 || t.charCodeAt(0) === 58 || ye.get(n)) && !r) { ye.set(e, !0); for (let a = [], o = (function (e, t) { return q(function (e, t) { let n = -1; let r = 44; do { switch (Q(r)) { case 0: r === 38 && V() === 12 && (t[n] = 1), e[n] += ge(I - 1, t, n); break; case 2: e[n] += X(r); break; case 4: if (r === 44) { e[++n] = V() === 58 ? '&\f' : '', t[n] = e[n].length; break; } default: e[n] += C(r); } } while (r = W()); return e; }(G(e), t)); }(t, a)), i = n.props, l = 0, u = 0; l < o.length; l++) for (let s = 0; s < i.length; s++, u++)e.props[u] = a[l] ? o[l].replace(/&\f/g, i[s]) : `${i[s]} ${o[l]}`; } } }; const be = function (e) { if (e.type === 'decl') { const t = e.value; t.charCodeAt(0) === 108 && t.charCodeAt(2) === 98 && (e.return = '', e.value = ''); } }; function we (e, t) { switch (function (e, t) { return 45 ^ T(e, 0) ? (((t << 2 ^ T(e, 0)) << 2 ^ T(e, 1)) << 2 ^ T(e, 2)) << 2 ^ T(e, 3) : 0; }(e, t)) { case 5103: return `-webkit-print-${e}${e}`; case 5737: case 4201: case 3177: case 3433: case 1641: case 4457: case 2921: case 5572: case 6356: case 5844: case 3191: case 6645: case 3005: case 6391: case 5879: case 5623: case 6135: case 4599: case 4855: case 4215: case 6389: case 5109: case 5365: case 5621: case 3829: return ae + e + e; case 5349: case 4246: case 4810: case 6968: case 2756: return `${ae + e}-moz-${e}${re}${e}${e}`; case 6828: case 4268: return ae + e + re + e + e; case 6165: return `${ae + e + re}flex-${e}${e}`; case 5187: return ae + e + P(e, /(\w+).+(:[^]+)/, '-webkit-box-$1$2-ms-flex-$1$2') + e; case 5443: return `${ae + e + re}flex-item-${P(e, /flex-|-self/, '')}${e}`; case 4675: return `${ae + e + re}flex-line-pack${P(e, /align-content|flex-|-self/, '')}${e}`; case 5548: return ae + e + re + P(e, 'shrink', 'negative') + e; case 5292: return ae + e + re + P(e, 'basis', 'preferred-size') + e; case 6060: return `-webkit-box-${P(e, '-grow', '')}${ae}${e}${re}${P(e, 'grow', 'positive')}${e}`; case 4554: return ae + P(e, /([^-])(transform)/g, '$1-webkit-$2') + e; case 6187: return P(P(P(e, /(zoom-|grab)/, '-webkit-$1'), /(image-set)/, '-webkit-$1'), e, '') + e; case 5495: case 3959: return P(e, /(image-set\([^]*)/, '-webkit-$1$`$1'); case 4968: return P(P(e, /(.+:)(flex-)?(.*)/, '-webkit-box-pack:$3-ms-flex-pack:$3'), /s.+-b[^;]+/, 'justify') + ae + e + e; case 4095: case 3583: case 4068: case 2532: return P(e, /(.+)-inline(.+)/, '-webkit-$1$2') + e; case 8116: case 7059: case 5753: case 5535: case 5445: case 5701: case 4933: case 4677: case 5533: case 5789: case 5021: case 4765: if (N(e) - 1 - t > 6) switch (T(e, t + 1)) { case 109: if (T(e, t + 4) !== 45) break; case 102: return P(e, /(.+:)(.+)-([^]+)/, `$1-webkit-$2-$3$1-moz-${T(e, t + 3) == 108 ? '$3' : '$2-$3'}`) + e; case 115: return ~O(e, 'stretch') ? we(P(e, 'stretch', 'fill-available'), t) + e : e; } break; case 4949: if (T(e, t + 1) !== 115) break; case 6444: switch (T(e, N(e) - 3 - (~O(e, '!important') && 10))) { case 107: return P(e, ':', ':-webkit-') + e; case 101: return P(e, /(.+:)([^;!]+)(;|!.+)?/, `$1-webkit-${T(e, 14) === 45 ? 'inline-' : ''}box$3$1-webkit-$2$3$1-ms-$2box$3`) + e; } break; case 5936: switch (T(e, t + 11)) { case 114: return ae + e + re + P(e, /[svh]\w+-[tblr]{2}/, 'tb') + e; case 108: return ae + e + re + P(e, /[svh]\w+-[tblr]{2}/, 'tb-rl') + e; case 45: return ae + e + re + P(e, /[svh]\w+-[tblr]{2}/, 'lr') + e; } return ae + e + re + e + e; } return e; } const ke = [function (e, t, n, r) { if (e.length > -1 && !e.return) switch (e.type) { case le: e.return = we(e.value, e.length); break; case ue: return se([U(e, { value: P(e.value, '@', '@-webkit-') })], r); case ie: if (e.length) return (function (e, t) { return e.map(t).join(''); }(e.props, (t) => { switch (function (e, t) { return (e = /(::plac\w+|:read-\w+)/.exec(e)) ? e[0] : e; }(t)) { case ':read-only': case ':read-write': return se([U(e, { props: [P(t, /:(read-\w+)/, ':-moz-$1')] })], r); case '::placeholder': return se([U(e, { props: [P(t, /:(plac\w+)/, ':-webkit-input-$1')] }), U(e, { props: [P(t, /:(plac\w+)/, ':-moz-$1')] }), U(e, { props: [P(t, /:(plac\w+)/, '-ms-input-$1')] })], r); } return ''; })); } }]; const xe = function (e) { const t = e.key; if (t === 'css') { const n = document.querySelectorAll('style[data-emotion]:not([data-s])'); Array.prototype.forEach.call(n, (e) => { e.getAttribute('data-emotion').indexOf(' ') !== -1 && (document.head.appendChild(e), e.setAttribute('data-s', '')); }); } let r; let a; const o = e.stylisPlugins || ke; const i = {}; const l = []; r = e.container || document.head, Array.prototype.forEach.call(document.querySelectorAll(`style[data-emotion^="${t} "]`), (e) => { for (let t = e.getAttribute('data-emotion').split(' '), n = 1; n < t.length; n++)i[t[n]] = !0; l.push(e); }); let u; let s; let c; let f; const d = [ce, (f = function (e) { u.insert(e); }, function (e) { e.root || (e = e.return) && f(e); })]; const p = (s = [ve, be].concat(o, d), c = z(s), function (e, t, n, r) { for (var a = '', o = 0; o < c; o++)a += s[o](e, t, n, r) || ''; return a; }); a = function (e, t, n, r) { u = n, se(fe(e ? `${e}{${t.styles}}` : t.styles), p), r && (m.inserted[t.name] = !0); }; var m = { key: t, sheet: new S({ key: t, container: r, nonce: e.nonce, speedy: e.speedy, prepend: e.prepend, insertionPoint: e.insertionPoint }), nonce: e.nonce, inserted: i, registered: {}, insert: a }; return m.sheet.hydrate(l), m; }; a(679); const Se = function (e) { for (var t, n = 0, r = 0, a = e.length; a >= 4; ++r, a -= 4)t = 1540483477 * (65535 & (t = 255 & e.charCodeAt(r) | (255 & e.charCodeAt(++r)) << 8 | (255 & e.charCodeAt(++r)) << 16 | (255 & e.charCodeAt(++r)) << 24)) + (59797 * (t >>> 16) << 16), n = 1540483477 * (65535 & (t ^= t >>> 24)) + (59797 * (t >>> 16) << 16) ^ 1540483477 * (65535 & n) + (59797 * (n >>> 16) << 16); switch (a) { case 3: n ^= (255 & e.charCodeAt(r + 2)) << 16; case 2: n ^= (255 & e.charCodeAt(r + 1)) << 8; case 1: n = 1540483477 * (65535 & (n ^= 255 & e.charCodeAt(r))) + (59797 * (n >>> 16) << 16); } return (((n = 1540483477 * (65535 & (n ^= n >>> 13)) + (59797 * (n >>> 16) << 16)) ^ n >>> 15) >>> 0).toString(36); }; const Ae = { animationIterationCount: 1, borderImageOutset: 1, borderImageSlice: 1, borderImageWidth: 1, boxFlex: 1, boxFlexGroup: 1, boxOrdinalGroup: 1, columnCount: 1, columns: 1, flex: 1, flexGrow: 1, flexPositive: 1, flexShrink: 1, flexNegative: 1, flexOrder: 1, gridRow: 1, gridRowEnd: 1, gridRowSpan: 1, gridRowStart: 1, gridColumn: 1, gridColumnEnd: 1, gridColumnSpan: 1, gridColumnStart: 1, msGridRow: 1, msGridRowSpan: 1, msGridColumn: 1, msGridColumnSpan: 1, fontWeight: 1, lineHeight: 1, opacity: 1, order: 1, orphans: 1, tabSize: 1, widows: 1, zIndex: 1, zoom: 1, WebkitLineClamp: 1, fillOpacity: 1, floodOpacity: 1, stopOpacity: 1, strokeDasharray: 1, strokeDashoffset: 1, strokeMiterlimit: 1, strokeOpacity: 1, strokeWidth: 1 }; const Ce = function (e) { const t = Object.create(null); return function (n) { return void 0 === t[n] && (t[n] = e(n)), t[n]; }; }; const Ee = /[A-Z]|^ms/g; const _e = /_EMO_([^_]+?)_([^]*?)_EMO_/g; const Pe = function (e) { return e.charCodeAt(1) === 45; }; const Oe = function (e) { return e != null && typeof e !== 'boolean'; }; const Te = Ce((e) => (Pe(e) ? e : e.replace(Ee, '-$&').toLowerCase())); const $e = function (e, t) { switch (e) { case 'animation': case 'animationName': if (typeof t === 'string') return t.replace(_e, (e, t, n) => (ze = { name: t, styles: n, next: ze }, t)); } return Ae[e] === 1 || Pe(e) || typeof t !== 'number' || t === 0 ? t : `${t}px`; }; function Ne (e, t, n) { if (n == null) return ''; if (void 0 !== n.__emotion_styles) return n; switch (typeof n) { case 'boolean': return ''; case 'object': if (n.anim === 1) return ze = { name: n.name, styles: n.styles, next: ze }, n.name; if (void 0 !== n.styles) { let r = n.next; if (void 0 !== r) for (;void 0 !== r;)ze = { name: r.name, styles: r.styles, next: ze }, r = r.next; return `${n.styles};`; } return (function (e, t, n) { let r = ''; if (Array.isArray(n)) for (let a = 0; a < n.length; a++)r += `${Ne(e, t, n[a])};`; else for (const o in n) { const i = n[o]; if (typeof i !== 'object')t != null && void 0 !== t[i] ? r += `${o}{${t[i]}}` : Oe(i) && (r += `${Te(o)}:${$e(o, i)};`); else if (!Array.isArray(i) || typeof i[0] !== 'string' || t != null && void 0 !== t[i[0]]) { const l = Ne(e, t, i); switch (o) { case 'animation': case 'animationName': r += `${Te(o)}:${l};`; break; default: r += `${o}{${l}}`; } } else for (let u = 0; u < i.length; u++)Oe(i[u]) && (r += `${Te(o)}:${$e(o, i[u])};`); } return r; }(e, t, n)); case 'function': if (void 0 !== e) { const a = ze; const o = n(e); return ze = a, Ne(e, t, o); } } if (t == null) return n; const i = t[n]; return void 0 !== i ? i : n; } let ze; const Me = /label:\s*([^\s;\n{]+)\s*(;|$)/g; const Le = function (e, t, n) { if (e.length === 1 && typeof e[0] === 'object' && e[0] !== null && void 0 !== e[0].styles) return e[0]; let r = !0; let a = ''; ze = void 0; const o = e[0]; o == null || void 0 === o.raw ? (r = !1, a += Ne(n, t, o)) : a += o[0]; for (let i = 1; i < e.length; i++)a += Ne(n, t, e[i]), r && (a += o[i]); Me.lastIndex = 0; for (var l, u = ''; (l = Me.exec(a)) !== null;)u += `-${l[1]}`; return { name: Se(a) + u, styles: a, next: ze }; }; const Re = !!t.useInsertionEffect && t.useInsertionEffect; const De = Re || function (e) { return e(); }; function Ie () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return Le(t); }Re || e.useLayoutEffect; const Fe = function () { const e = Ie.apply(void 0, arguments); const t = `animation-${e.name}`; return { name: t, styles: `@keyframes ${t}{${e.styles}}`, anim: 1, toString () { return `_EMO_${this.name}_${this.styles}_EMO_`; } }; }; function je (e) { let t = `https://mui.com/production-error/?code=${e}`; for (let e = 1; e < arguments.length; e += 1)t += `&args[]=${encodeURIComponent(arguments[e])}`; return `Minified MUI error #${e}; visit ${t} for the full message.`; } function Be (e) { if (typeof e !== 'string') throw new Error(je(7)); return e.charAt(0).toUpperCase() + e.slice(1); } const Ue = Be; function He (e, t) { const n = b({}, t); return Object.keys(e).forEach((r) => { if (r.toString().match(/^(components|slots)$/))n[r] = b({}, e[r], n[r]); else if (r.toString().match(/^(componentsProps|slotProps)$/)) { const a = e[r] || {}; const o = t[r]; n[r] = {}, o && Object.keys(o) ? a && Object.keys(a) ? (n[r] = b({}, o), Object.keys(a).forEach((e) => { n[r][e] = He(a[e], o[e]); })) : n[r] = o : n[r] = a; } else void 0 === n[r] && (n[r] = e[r]); }), n; } function We (e) { const { theme: t, name: n, props: r } = e; return t && t.components && t.components[n] && t.components[n].defaultProps ? He(t.components[n].defaultProps, r) : r; } function Ve (e) { return e !== null && typeof e === 'object' && e.constructor === Object; } function Ye (e) { if (!Ve(e)) return e; const t = {}; return Object.keys(e).forEach((n) => { t[n] = Ye(e[n]); }), t; } function Ke (e, t, n = { clone: !0 }) { const r = n.clone ? b({}, e) : e; return Ve(e) && Ve(t) && Object.keys(t).forEach((a) => { a !== '__proto__' && (Ve(t[a]) && a in e && Ve(e[a]) ? r[a] = Ke(e[a], t[a], n) : n.clone ? r[a] = Ve(t[a]) ? Ye(t[a]) : t[a] : r[a] = t[a]); }), r; } const Qe = ['values', 'unit', 'step']; const Ge = { borderRadius: 4 }; const qe = { xs: 0, sm: 600, md: 900, lg: 1200, xl: 1536 }; const Xe = { keys: ['xs', 'sm', 'md', 'lg', 'xl'], up: (e) => `@media (min-width:${qe[e]}px)` }; function Ze (e, t, n) { const r = e.theme || {}; if (Array.isArray(t)) { const e = r.breakpoints || Xe; return t.reduce((r, a, o) => (r[e.up(e.keys[o])] = n(t[o]), r), {}); } if (typeof t === 'object') { const e = r.breakpoints || Xe; return Object.keys(t).reduce((r, a) => { if (Object.keys(e.values || qe).indexOf(a) !== -1)r[e.up(a)] = n(t[a], a); else { const e = a; r[e] = t[e]; } return r; }, {}); } return n(t); } function Je (e, t, n = !0) { if (!t || typeof t !== 'string') return null; if (e && e.vars && n) { const n = `vars.${t}`.split('.').reduce((e, t) => (e && e[t] ? e[t] : null), e); if (n != null) return n; } return t.split('.').reduce((e, t) => (e && e[t] != null ? e[t] : null), e); } function et (e, t, n, r = n) { let a; return a = typeof e === 'function' ? e(n) : Array.isArray(e) ? e[n] || r : Je(e, n) || r, t && (a = t(a, r, e)), a; } const tt = function (e) { const { prop: t, cssProperty: n = e.prop, themeKey: r, transform: a } = e; const o = (e) => { if (e[t] == null) return null; const o = e[t]; const i = Je(e.theme, r) || {}; return Ze(e, o, (e) => { let r = et(i, a, e); return e === r && typeof e === 'string' && (r = et(i, a, `${t}${e === 'default' ? '' : Be(e)}`, e)), !1 === n ? r : { [n]: r }; }); }; return o.propTypes = {}, o.filterProps = [t], o; }; const nt = function (e, t) { return t ? Ke(e, t, { clone: !1 }) : e; }; const rt = { m: 'margin', p: 'padding' }; const at = { t: 'Top', r: 'Right', b: 'Bottom', l: 'Left', x: ['Left', 'Right'], y: ['Top', 'Bottom'] }; const ot = { marginX: 'mx', marginY: 'my', paddingX: 'px', paddingY: 'py' }; const it = (function (e) { const t = {}; return (e) => (void 0 === t[e] && (t[e] = ((e) => { if (e.length > 2) { if (!ot[e]) return [e]; e = ot[e]; } const [t, n] = e.split(''); const r = rt[t]; const a = at[n] || ''; return Array.isArray(a) ? a.map((e) => r + e) : [r + a]; })(e)), t[e]); }()); const lt = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd']; const ut = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd']; const st = [...lt, ...ut]; function ct (e, t, n, r) { let a; const o = (a = Je(e, t, !1)) != null ? a : n; return typeof o === 'number' ? (e) => (typeof e === 'string' ? e : o * e) : Array.isArray(o) ? (e) => (typeof e === 'string' ? e : o[e]) : typeof o === 'function' ? o : () => {}; } function ft (e) { return ct(e, 'spacing', 8); } function dt (e, t) { if (typeof t === 'string' || t == null) return t; const n = e(Math.abs(t)); return t >= 0 ? n : typeof n === 'number' ? -n : `-${n}`; } function pt (e, t) { const n = ft(e.theme); return Object.keys(e).map((r) => (function (e, t, n, r) { if (t.indexOf(n) === -1) return null; const a = (function (e, t) { return (n) => e.reduce((e, r) => (e[r] = dt(t, n), e), {}); }(it(n), r)); return Ze(e, e[n], a); }(e, t, r, n))).reduce(nt, {}); } function mt (e) { return pt(e, lt); } function ht (e) { return pt(e, ut); } function gt (e) { return pt(e, st); }mt.propTypes = {}, mt.filterProps = lt, ht.propTypes = {}, ht.filterProps = ut, gt.propTypes = {}, gt.filterProps = st; const yt = function (...e) { const t = e.reduce((e, t) => (t.filterProps.forEach((n) => { e[n] = t; }), e), {}); const n = (e) => Object.keys(e).reduce((n, r) => (t[r] ? nt(n, t[r](e)) : n), {}); return n.propTypes = {}, n.filterProps = e.reduce((e, t) => e.concat(t.filterProps), []), n; }; function vt (e) { return typeof e !== 'number' ? e : `${e}px solid`; } const bt = tt({ prop: 'border', themeKey: 'borders', transform: vt }); const wt = tt({ prop: 'borderTop', themeKey: 'borders', transform: vt }); const kt = tt({ prop: 'borderRight', themeKey: 'borders', transform: vt }); const xt = tt({ prop: 'borderBottom', themeKey: 'borders', transform: vt }); const St = tt({ prop: 'borderLeft', themeKey: 'borders', transform: vt }); const At = tt({ prop: 'borderColor', themeKey: 'palette' }); const Ct = tt({ prop: 'borderTopColor', themeKey: 'palette' }); const Et = tt({ prop: 'borderRightColor', themeKey: 'palette' }); const _t = tt({ prop: 'borderBottomColor', themeKey: 'palette' }); const Pt = tt({ prop: 'borderLeftColor', themeKey: 'palette' }); const Ot = (e) => { if (void 0 !== e.borderRadius && e.borderRadius !== null) { const t = ct(e.theme, 'shape.borderRadius', 4); const n = (e) => ({ borderRadius: dt(t, e) }); return Ze(e, e.borderRadius, n); } return null; }; Ot.propTypes = {}, Ot.filterProps = ['borderRadius'], yt(bt, wt, kt, xt, St, At, Ct, Et, _t, Pt, Ot); const Tt = (e) => { if (void 0 !== e.gap && e.gap !== null) { const t = ct(e.theme, 'spacing', 8); const n = (e) => ({ gap: dt(t, e) }); return Ze(e, e.gap, n); } return null; }; Tt.propTypes = {}, Tt.filterProps = ['gap']; const $t = (e) => { if (void 0 !== e.columnGap && e.columnGap !== null) { const t = ct(e.theme, 'spacing', 8); const n = (e) => ({ columnGap: dt(t, e) }); return Ze(e, e.columnGap, n); } return null; }; $t.propTypes = {}, $t.filterProps = ['columnGap']; const Nt = (e) => { if (void 0 !== e.rowGap && e.rowGap !== null) { const t = ct(e.theme, 'spacing', 8); const n = (e) => ({ rowGap: dt(t, e) }); return Ze(e, e.rowGap, n); } return null; }; function zt (e, t) { return t === 'grey' ? t : e; } function Mt (e) { return e <= 1 && e !== 0 ? `${100 * e}%` : e; }Nt.propTypes = {}, Nt.filterProps = ['rowGap'], yt(Tt, $t, Nt, tt({ prop: 'gridColumn' }), tt({ prop: 'gridRow' }), tt({ prop: 'gridAutoFlow' }), tt({ prop: 'gridAutoColumns' }), tt({ prop: 'gridAutoRows' }), tt({ prop: 'gridTemplateColumns' }), tt({ prop: 'gridTemplateRows' }), tt({ prop: 'gridTemplateAreas' }), tt({ prop: 'gridArea' })), yt(tt({ prop: 'color', themeKey: 'palette', transform: zt }), tt({ prop: 'bgcolor', cssProperty: 'backgroundColor', themeKey: 'palette', transform: zt }), tt({ prop: 'backgroundColor', themeKey: 'palette', transform: zt })); const Lt = tt({ prop: 'width', transform: Mt }); const Rt = (e) => {
      if (void 0 !== e.maxWidth && e.maxWidth !== null) {
        const t = (t) => {
          let n,
            r,
            a; return { maxWidth: ((n = e.theme) == null || (r = n.breakpoints) == null || (a = r.values) == null ? void 0 : a[t]) || qe[t] || Mt(t) };
        }; return Ze(e, e.maxWidth, t);
      } return null;
    }; Rt.filterProps = ['maxWidth']; const Dt = tt({ prop: 'minWidth', transform: Mt }); const It = tt({ prop: 'height', transform: Mt }); const Ft = tt({ prop: 'maxHeight', transform: Mt }); const jt = tt({ prop: 'minHeight', transform: Mt }); const Bt = (tt({ prop: 'size', cssProperty: 'width', transform: Mt }), tt({ prop: 'size', cssProperty: 'height', transform: Mt }), yt(Lt, Rt, Dt, It, Ft, jt, tt({ prop: 'boxSizing' })), { border: { themeKey: 'borders', transform: vt }, borderTop: { themeKey: 'borders', transform: vt }, borderRight: { themeKey: 'borders', transform: vt }, borderBottom: { themeKey: 'borders', transform: vt }, borderLeft: { themeKey: 'borders', transform: vt }, borderColor: { themeKey: 'palette' }, borderTopColor: { themeKey: 'palette' }, borderRightColor: { themeKey: 'palette' }, borderBottomColor: { themeKey: 'palette' }, borderLeftColor: { themeKey: 'palette' }, borderRadius: { themeKey: 'shape.borderRadius', style: Ot }, color: { themeKey: 'palette', transform: zt }, bgcolor: { themeKey: 'palette', cssProperty: 'backgroundColor', transform: zt }, backgroundColor: { themeKey: 'palette', transform: zt }, p: { style: ht }, pt: { style: ht }, pr: { style: ht }, pb: { style: ht }, pl: { style: ht }, px: { style: ht }, py: { style: ht }, padding: { style: ht }, paddingTop: { style: ht }, paddingRight: { style: ht }, paddingBottom: { style: ht }, paddingLeft: { style: ht }, paddingX: { style: ht }, paddingY: { style: ht }, paddingInline: { style: ht }, paddingInlineStart: { style: ht }, paddingInlineEnd: { style: ht }, paddingBlock: { style: ht }, paddingBlockStart: { style: ht }, paddingBlockEnd: { style: ht }, m: { style: mt }, mt: { style: mt }, mr: { style: mt }, mb: { style: mt }, ml: { style: mt }, mx: { style: mt }, my: { style: mt }, margin: { style: mt }, marginTop: { style: mt }, marginRight: { style: mt }, marginBottom: { style: mt }, marginLeft: { style: mt }, marginX: { style: mt }, marginY: { style: mt }, marginInline: { style: mt }, marginInlineStart: { style: mt }, marginInlineEnd: { style: mt }, marginBlock: { style: mt }, marginBlockStart: { style: mt }, marginBlockEnd: { style: mt }, displayPrint: { cssProperty: !1, transform: (e) => ({ '@media print': { display: e } }) }, display: {}, overflow: {}, textOverflow: {}, visibility: {}, whiteSpace: {}, flexBasis: {}, flexDirection: {}, flexWrap: {}, justifyContent: {}, alignItems: {}, alignContent: {}, order: {}, flex: {}, flexGrow: {}, flexShrink: {}, alignSelf: {}, justifyItems: {}, justifySelf: {}, gap: { style: Tt }, rowGap: { style: Nt }, columnGap: { style: $t }, gridColumn: {}, gridRow: {}, gridAutoFlow: {}, gridAutoColumns: {}, gridAutoRows: {}, gridTemplateColumns: {}, gridTemplateRows: {}, gridTemplateAreas: {}, gridArea: {}, position: {}, zIndex: { themeKey: 'zIndex' }, top: {}, right: {}, bottom: {}, left: {}, boxShadow: { themeKey: 'shadows' }, width: { transform: Mt }, maxWidth: { style: Rt }, minWidth: { transform: Mt }, height: { transform: Mt }, maxHeight: { transform: Mt }, minHeight: { transform: Mt }, boxSizing: {}, fontFamily: { themeKey: 'typography' }, fontSize: { themeKey: 'typography' }, fontStyle: { themeKey: 'typography' }, fontWeight: { themeKey: 'typography' }, letterSpacing: {}, textTransform: {}, lineHeight: {}, textAlign: {}, typography: { cssProperty: !1, themeKey: 'typography' } }); const Ut = (function () { function e (e, t, n, r) { const a = { [e]: t, theme: n }; const o = r[e]; if (!o) return { [e]: t }; const { cssProperty: i = e, themeKey: l, transform: u, style: s } = o; if (t == null) return null; const c = Je(n, l) || {}; return s ? s(a) : Ze(a, t, (t) => { let n = et(c, u, t); return t === n && typeof t === 'string' && (n = et(c, u, `${e}${t === 'default' ? '' : Be(t)}`, t)), !1 === i ? n : { [i]: n }; }); } return function t (n) { let r; const { sx: a, theme: o = {} } = n || {}; if (!a) return null; const i = (r = o.unstable_sxConfig) != null ? r : Bt; function l (n) { let r = n; if (typeof n === 'function')r = n(o); else if (typeof n !== 'object') return n; if (!r) return null; const a = (function (e = {}) { let t; return ((t = e.keys) == null ? void 0 : t.reduce((t, n) => (t[e.up(n)] = {}, t), {})) || {}; }(o.breakpoints)); const l = Object.keys(a); let u = a; return Object.keys(r).forEach((n) => { const a = typeof (l = r[n]) === 'function' ? l(o) : l; let l; if (a != null) if (typeof a === 'object') if (i[n])u = nt(u, e(n, a, o, i)); else { const e = Ze({ theme: o }, a, (e) => ({ [n]: e })); !(function (...e) { const t = e.reduce((e, t) => e.concat(Object.keys(t)), []); const n = new Set(t); return e.every((e) => n.size === Object.keys(e).length); }(e, a)) ? u = nt(u, e) : u[n] = t({ sx: a, theme: o }); } else u = nt(u, e(n, a, o, i)); }), s = u, l.reduce((e, t) => { const n = e[t]; return (!n || Object.keys(n).length === 0) && delete e[t], e; }, s); let s; } return Array.isArray(a) ? a.map(l) : l(a); }; }()); Ut.filterProps = ['sx']; const Ht = Ut; const Wt = ['breakpoints', 'palette', 'spacing', 'shape']; const Vt = function (e = {}, ...t) { const { breakpoints: n = {}, palette: r = {}, spacing: a, shape: o = {} } = e; const i = v(e, Wt); const l = (function (e) { const { values: t = { xs: 0, sm: 600, md: 900, lg: 1200, xl: 1536 }, unit: n = 'px', step: r = 5 } = e; const a = v(e, Qe); const o = ((e) => { const t = Object.keys(e).map((t) => ({ key: t, val: e[t] })) || []; return t.sort((e, t) => e.val - t.val), t.reduce((e, t) => b({}, e, { [t.key]: t.val }), {}); })(t); const i = Object.keys(o); function l (e) { return `@media (min-width:${typeof t[e] === 'number' ? t[e] : e}${n})`; } function u (e) { return `@media (max-width:${(typeof t[e] === 'number' ? t[e] : e) - r / 100}${n})`; } function s (e, a) { const o = i.indexOf(a); return `@media (min-width:${typeof t[e] === 'number' ? t[e] : e}${n}) and (max-width:${(o !== -1 && typeof t[i[o]] === 'number' ? t[i[o]] : a) - r / 100}${n})`; } return b({ keys: i, values: o, up: l, down: u, between: s, only (e) { return i.indexOf(e) + 1 < i.length ? s(e, i[i.indexOf(e) + 1]) : l(e); }, not (e) { const t = i.indexOf(e); return t === 0 ? l(i[1]) : t === i.length - 1 ? u(i[t]) : s(e, i[i.indexOf(e) + 1]).replace('@media', '@media not all and'); }, unit: n }, a); }(n)); const u = (function (e = 8) { if (e.mui) return e; const t = ft({ spacing: e }); const n = (...e) => (e.length === 0 ? [1] : e).map((e) => { const n = t(e); return typeof n === 'number' ? `${n}px` : n; }).join(' '); return n.mui = !0, n; }(a)); let s = Ke({ breakpoints: l, direction: 'ltr', components: {}, palette: b({ mode: 'light' }, r), spacing: u, shape: b({}, Ge, o) }, i); return s = t.reduce((e, t) => Ke(e, t), s), s.unstable_sxConfig = b({}, Bt, i == null ? void 0 : i.unstable_sxConfig), s.unstable_sx = function (e) { return Ht({ sx: e, theme: this }); }, s; }; const Yt = e.createContext(null); const Kt = Vt(); const Qt = function (t = Kt) { return (function (t = null) { const n = e.useContext(Yt); return n && (r = n, Object.keys(r).length !== 0) ? n : t; let r; }(t)); }; function Gt (e, t = 0, n = 1) { return Math.min(Math.max(t, e), n); } function qt (e) { if (e.type) return e; if (e.charAt(0) === '#') return qt(function (e) { e = e.slice(1); const t = new RegExp(`.{1,${e.length >= 6 ? 2 : 1}}`, 'g'); let n = e.match(t); return n && n[0].length === 1 && (n = n.map((e) => e + e)), n ? `rgb${n.length === 4 ? 'a' : ''}(${n.map((e, t) => (t < 3 ? parseInt(e, 16) : Math.round(parseInt(e, 16) / 255 * 1e3) / 1e3)).join(', ')})` : ''; }(e)); const t = e.indexOf('('); const n = e.substring(0, t); if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(n) === -1) throw new Error(je(9, e)); let r; let a = e.substring(t + 1, e.length - 1); if (n === 'color') { if (a = a.split(' '), r = a.shift(), a.length === 4 && a[3].charAt(0) === '/' && (a[3] = a[3].slice(1)), ['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(r) === -1) throw new Error(je(10, r)); } else a = a.split(','); return a = a.map((e) => parseFloat(e)), { type: n, values: a, colorSpace: r }; } function Xt (e) { const { type: t, colorSpace: n } = e; let{ values: r } = e; return t.indexOf('rgb') !== -1 ? r = r.map((e, t) => (t < 3 ? parseInt(e, 10) : e)) : t.indexOf('hsl') !== -1 && (r[1] = `${r[1]}%`, r[2] = `${r[2]}%`), r = t.indexOf('color') !== -1 ? `${n} ${r.join(' ')}` : `${r.join(', ')}`, `${t}(${r})`; } function Zt (e) { let t = (e = qt(e)).type === 'hsl' || e.type === 'hsla' ? qt(function (e) { e = qt(e); const { values: t } = e; const n = t[0]; const r = t[1] / 100; const a = t[2] / 100; const o = r * Math.min(a, 1 - a); const i = (e, t = (e + n / 30) % 12) => a - o * Math.max(Math.min(t - 3, 9 - t, 1), -1); let l = 'rgb'; const u = [Math.round(255 * i(0)), Math.round(255 * i(8)), Math.round(255 * i(4))]; return e.type === 'hsla' && (l += 'a', u.push(t[3])), Xt({ type: l, values: u }); }(e)).values : e.values; return t = t.map((t) => (e.type !== 'color' && (t /= 255), t <= 0.03928 ? t / 12.92 : ((t + 0.055) / 1.055) ** 2.4)), Number((0.2126 * t[0] + 0.7152 * t[1] + 0.0722 * t[2]).toFixed(3)); } function Jt (e, t) { if (e = qt(e), t = Gt(t), e.type.indexOf('hsl') !== -1)e.values[2] *= 1 - t; else if (e.type.indexOf('rgb') !== -1 || e.type.indexOf('color') !== -1) for (let n = 0; n < 3; n += 1)e.values[n] *= 1 - t; return Xt(e); } function en (e, t) { if (e = qt(e), t = Gt(t), e.type.indexOf('hsl') !== -1)e.values[2] += (100 - e.values[2]) * t; else if (e.type.indexOf('rgb') !== -1) for (let n = 0; n < 3; n += 1)e.values[n] += (255 - e.values[n]) * t; else if (e.type.indexOf('color') !== -1) for (let n = 0; n < 3; n += 1)e.values[n] += (1 - e.values[n]) * t; return Xt(e); } const tn = { black: '#000', white: '#fff' }; const nn = { 50: '#fafafa', 100: '#f5f5f5', 200: '#eeeeee', 300: '#e0e0e0', 400: '#bdbdbd', 500: '#9e9e9e', 600: '#757575', 700: '#616161', 800: '#424242', 900: '#212121', A100: '#f5f5f5', A200: '#eeeeee', A400: '#bdbdbd', A700: '#616161' }; const rn = '#f3e5f5'; const an = '#ce93d8'; const on = '#ba68c8'; const ln = '#ab47bc'; const un = '#9c27b0'; const sn = '#7b1fa2'; const cn = '#e57373'; const fn = '#ef5350'; const dn = '#f44336'; const pn = '#d32f2f'; const mn = '#c62828'; const hn = '#ffb74d'; const gn = '#ffa726'; const yn = '#ff9800'; const vn = '#f57c00'; const bn = '#e65100'; const wn = '#e3f2fd'; const kn = '#90caf9'; const xn = '#42a5f5'; const Sn = '#1976d2'; const An = '#1565c0'; const Cn = '#4fc3f7'; const En = '#29b6f6'; const _n = '#03a9f4'; const Pn = '#0288d1'; const On = '#01579b'; const Tn = '#81c784'; const $n = '#66bb6a'; const Nn = '#4caf50'; const zn = '#388e3c'; const Mn = '#2e7d32'; const Ln = '#1b5e20'; const Rn = ['mode', 'contrastThreshold', 'tonalOffset']; const Dn = { text: { primary: 'rgba(0, 0, 0, 0.87)', secondary: 'rgba(0, 0, 0, 0.6)', disabled: 'rgba(0, 0, 0, 0.38)' }, divider: 'rgba(0, 0, 0, 0.12)', background: { paper: tn.white, default: tn.white }, action: { active: 'rgba(0, 0, 0, 0.54)', hover: 'rgba(0, 0, 0, 0.04)', hoverOpacity: 0.04, selected: 'rgba(0, 0, 0, 0.08)', selectedOpacity: 0.08, disabled: 'rgba(0, 0, 0, 0.26)', disabledBackground: 'rgba(0, 0, 0, 0.12)', disabledOpacity: 0.38, focus: 'rgba(0, 0, 0, 0.12)', focusOpacity: 0.12, activatedOpacity: 0.12 } }; const In = { text: { primary: tn.white, secondary: 'rgba(255, 255, 255, 0.7)', disabled: 'rgba(255, 255, 255, 0.5)', icon: 'rgba(255, 255, 255, 0.5)' }, divider: 'rgba(255, 255, 255, 0.12)', background: { paper: '#121212', default: '#121212' }, action: { active: tn.white, hover: 'rgba(255, 255, 255, 0.08)', hoverOpacity: 0.08, selected: 'rgba(255, 255, 255, 0.16)', selectedOpacity: 0.16, disabled: 'rgba(255, 255, 255, 0.3)', disabledBackground: 'rgba(255, 255, 255, 0.12)', disabledOpacity: 0.38, focus: 'rgba(255, 255, 255, 0.12)', focusOpacity: 0.12, activatedOpacity: 0.24 } }; function Fn (e, t, n, r) { const a = r.light || r; const o = r.dark || 1.5 * r; e[t] || (e.hasOwnProperty(n) ? e[t] = e[n] : t === 'light' ? e.light = en(e.main, a) : t === 'dark' && (e.dark = Jt(e.main, o))); } const jn = ['fontFamily', 'fontSize', 'fontWeightLight', 'fontWeightRegular', 'fontWeightMedium', 'fontWeightBold', 'htmlFontSize', 'allVariants', 'pxToRem']; const Bn = { textTransform: 'uppercase' }; const Un = '"Roboto", "Helvetica", "Arial", sans-serif'; function Hn (e, t) { const n = typeof t === 'function' ? t(e) : t; const { fontFamily: r = Un, fontSize: a = 14, fontWeightLight: o = 300, fontWeightRegular: i = 400, fontWeightMedium: l = 500, fontWeightBold: u = 700, htmlFontSize: s = 16, allVariants: c, pxToRem: f } = n; const d = v(n, jn); const p = a / 14; const m = f || ((e) => `${e / s * p}rem`); const h = (e, t, n, a, o) => { return b({ fontFamily: r, fontWeight: e, fontSize: m(t), lineHeight: n }, r === Un ? { letterSpacing: (i = a / t, `${Math.round(1e5 * i) / 1e5}em`) } : {}, o, c); let i; }; const g = { h1: h(o, 96, 1.167, -1.5), h2: h(o, 60, 1.2, -0.5), h3: h(i, 48, 1.167, 0), h4: h(i, 34, 1.235, 0.25), h5: h(i, 24, 1.334, 0), h6: h(l, 20, 1.6, 0.15), subtitle1: h(i, 16, 1.75, 0.15), subtitle2: h(l, 14, 1.57, 0.1), body1: h(i, 16, 1.5, 0.15), body2: h(i, 14, 1.43, 0.15), button: h(l, 14, 1.75, 0.4, Bn), caption: h(i, 12, 1.66, 0.4), overline: h(i, 12, 2.66, 1, Bn) }; return Ke(b({ htmlFontSize: s, pxToRem: m, fontFamily: r, fontSize: a, fontWeightLight: o, fontWeightRegular: i, fontWeightMedium: l, fontWeightBold: u }, g), d, { clone: !1 }); } function Wn (...e) { return [`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`, `${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`, `${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(','); } const Vn = ['none', Wn(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), Wn(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), Wn(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), Wn(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), Wn(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), Wn(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), Wn(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), Wn(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), Wn(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), Wn(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), Wn(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), Wn(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), Wn(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), Wn(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), Wn(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), Wn(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), Wn(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), Wn(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), Wn(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), Wn(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), Wn(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), Wn(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), Wn(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), Wn(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)]; const Yn = ['duration', 'easing', 'delay']; const Kn = { easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)', easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)', easeIn: 'cubic-bezier(0.4, 0, 1, 1)', sharp: 'cubic-bezier(0.4, 0, 0.6, 1)' }; const Qn = { shortest: 150, shorter: 200, short: 250, standard: 300, complex: 375, enteringScreen: 225, leavingScreen: 195 }; function Gn (e) { return `${Math.round(e)}ms`; } function qn (e) { if (!e) return 0; const t = e / 36; return Math.round(10 * (4 + 15 * t ** 0.25 + t / 5)); } function Xn (e) { const t = b({}, Kn, e.easing); const n = b({}, Qn, e.duration); return b({ getAutoHeightDuration: qn, create: (e = ['all'], r = {}) => { const { duration: a = n.standard, easing: o = t.easeInOut, delay: i = 0 } = r; return v(r, Yn), (Array.isArray(e) ? e : [e]).map((e) => `${e} ${typeof a === 'string' ? a : Gn(a)} ${o} ${typeof i === 'string' ? i : Gn(i)}`).join(','); } }, e, { easing: t, duration: n }); } const Zn = { mobileStepper: 1e3, fab: 1050, speedDial: 1050, appBar: 1100, drawer: 1200, modal: 1300, snackbar: 1400, tooltip: 1500 }; const Jn = ['breakpoints', 'mixins', 'spacing', 'palette', 'transitions', 'typography', 'shape']; const er = function (e = {}, ...t) {
      const { mixins: n = {}, palette: r = {}, transitions: a = {}, typography: o = {} } = e; const i = v(e, Jn); if (e.vars) throw new Error(je(18)); const l = (function (e) { const { mode: t = 'light', contrastThreshold: n = 3, tonalOffset: r = 0.2 } = e; const a = v(e, Rn); const o = e.primary || (function (e = 'light') { return e === 'dark' ? { main: kn, light: wn, dark: xn } : { main: Sn, light: xn, dark: An }; }(t)); const i = e.secondary || (function (e = 'light') { return e === 'dark' ? { main: an, light: rn, dark: ln } : { main: un, light: on, dark: sn }; }(t)); const l = e.error || (function (e = 'light') { return e === 'dark' ? { main: dn, light: cn, dark: pn } : { main: pn, light: fn, dark: mn }; }(t)); const u = e.info || (function (e = 'light') { return e === 'dark' ? { main: En, light: Cn, dark: Pn } : { main: Pn, light: _n, dark: On }; }(t)); const s = e.success || (function (e = 'light') { return e === 'dark' ? { main: $n, light: Tn, dark: zn } : { main: Mn, light: Nn, dark: Ln }; }(t)); const c = e.warning || (function (e = 'light') { return e === 'dark' ? { main: gn, light: hn, dark: vn } : { main: '#ed6c02', light: yn, dark: bn }; }(t)); function f (e) { const t = (function (e, t) { const n = Zt(e); const r = Zt(t); return (Math.max(n, r) + 0.05) / (Math.min(n, r) + 0.05); }(e, In.text.primary)) >= n ? In.text.primary : Dn.text.primary; return t; } const d = ({ color: e, name: t, mainShade: n = 500, lightShade: a = 300, darkShade: o = 700 }) => { if (!(e = b({}, e)).main && e[n] && (e.main = e[n]), !e.hasOwnProperty('main')) throw new Error(je(11, t ? ` (${t})` : '', n)); if (typeof e.main !== 'string') throw new Error(je(12, t ? ` (${t})` : '', JSON.stringify(e.main))); return Fn(e, 'light', a, r), Fn(e, 'dark', o, r), e.contrastText || (e.contrastText = f(e.main)), e; }; const p = { dark: In, light: Dn }; return Ke(b({ common: b({}, tn), mode: t, primary: d({ color: o, name: 'primary' }), secondary: d({ color: i, name: 'secondary', mainShade: 'A400', lightShade: 'A200', darkShade: 'A700' }), error: d({ color: l, name: 'error' }), warning: d({ color: c, name: 'warning' }), info: d({ color: u, name: 'info' }), success: d({ color: s, name: 'success' }), grey: nn, contrastThreshold: n, getContrastText: f, augmentColor: d, tonalOffset: r }, p[t]), a); }(r)); const u = Vt(e); let s = Ke(u, { mixins: (c = u.breakpoints, f = n, b({ toolbar: { minHeight: 56, [c.up('xs')]: { '@media (orientation: landscape)': { minHeight: 48 } }, [c.up('sm')]: { minHeight: 64 } } }, f)), palette: l, shadows: Vn.slice(), typography: Hn(l, o), transitions: Xn(a), zIndex: b({}, Zn) }); let c,
        f; return s = Ke(s, i), s = t.reduce((e, t) => Ke(e, t), s), s.unstable_sxConfig = b({}, Bt, i == null ? void 0 : i.unstable_sxConfig), s.unstable_sx = function (e) { return Ht({ sx: e, theme: this }); }, s;
    }; const tr = er(); function nr ({ props: e, name: t }) { return (function ({ props: e, name: t, defaultTheme: n }) { return We({ theme: Qt(n), name: t, props: e }); }({ props: e, name: t, defaultTheme: tr })); } const rr = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; const ar = Ce((e) => rr.test(e) || e.charCodeAt(0) === 111 && e.charCodeAt(1) === 110 && e.charCodeAt(2) < 91); const or = (0, e.createContext)(typeof HTMLElement !== 'undefined' ? xe({ key: 'css' }) : null); or.Provider; const ir = function (t) { return (0, e.forwardRef)((n, r) => { const a = (0, e.useContext)(or); return t(n, a, r); }); }; const lr = (0, e.createContext)({}); function ur (e, t, n) { let r = ''; return n.split(' ').forEach((n) => { void 0 !== e[n] ? t.push(`${e[n]};`) : r += `${n} `; }), r; } const sr = function (e, t, n) { const r = `${e.key}-${t.name}`; !1 === n && void 0 === e.registered[r] && (e.registered[r] = t.styles); }; const cr = ar; const fr = function (e) { return e !== 'theme'; }; const dr = function (e) { return typeof e === 'string' && e.charCodeAt(0) > 96 ? cr : fr; }; const pr = function (e, t, n) { let r; if (t) { const a = t.shouldForwardProp; r = e.__emotion_forwardProp && a ? function (t) { return e.__emotion_forwardProp(t) && a(t); } : a; } return typeof r !== 'function' && n && (r = e.__emotion_forwardProp), r; }; const mr = function (e) { const t = e.cache; const n = e.serialized; const r = e.isStringTag; return sr(t, n, r), De(() => (function (e, t, n) { sr(e, t, n); const r = `${e.key}-${t.name}`; if (void 0 === e.inserted[t.name]) { let a = t; do { e.insert(t === a ? `.${r}` : '', a, e.sheet, !0), a = a.next; } while (void 0 !== a); } }(t, n, r))), null; }; const hr = function t (n, r) { let a; let o; const i = n.__emotion_real === n; const l = i && n.__emotion_base || n; void 0 !== r && (a = r.label, o = r.target); const u = pr(n, r, i); const s = u || dr(l); const c = !s('as'); return function () { const f = arguments; const d = i && void 0 !== n.__emotion_styles ? n.__emotion_styles.slice(0) : []; if (void 0 !== a && d.push(`label:${a};`), f[0] == null || void 0 === f[0].raw)d.push.apply(d, f); else { d.push(f[0][0]); for (let p = f.length, m = 1; m < p; m++)d.push(f[m], f[0][m]); } const h = ir((t, n, r) => { const a = c && t.as || l; let i = ''; const f = []; let p = t; if (t.theme == null) { for (const m in p = {}, t)p[m] = t[m]; p.theme = (0, e.useContext)(lr); } typeof t.className === 'string' ? i = ur(n.registered, f, t.className) : t.className != null && (i = `${t.className} `); const h = Le(d.concat(f), n.registered, p); i += `${n.key}-${h.name}`, void 0 !== o && (i += ` ${o}`); const g = c && void 0 === u ? dr(a) : s; const y = {}; for (const v in t)c && v === 'as' || g(v) && (y[v] = t[v]); return y.className = i, y.ref = r, (0, e.createElement)(e.Fragment, null, (0, e.createElement)(mr, { cache: n, serialized: h, isStringTag: typeof a === 'string' }), (0, e.createElement)(a, y)); }); return h.displayName = void 0 !== a ? a : `Styled(${typeof l === 'string' ? l : l.displayName || l.name || 'Component'})`, h.defaultProps = n.defaultProps, h.__emotion_real = h, h.__emotion_base = l, h.__emotion_styles = d, h.__emotion_forwardProp = u, Object.defineProperty(h, 'toString', { value () { return `.${o}`; } }), h.withComponent = function (e, n) { return t(e, b({}, r, n, { shouldForwardProp: pr(h, n, !0) })).apply(void 0, d); }, h; }; }.bind(); ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', 'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'].forEach((e) => { hr[e] = hr(e); }); const gr = hr; function yr (e, t) { return gr(e, t); } const vr = ['variant']; function br (e) { return e.length === 0; } function wr (e) { const { variant: t } = e; const n = v(e, vr); let r = t || ''; return Object.keys(n).sort().forEach((t) => { r += t === 'color' ? br(r) ? e[t] : Be(e[t]) : `${br(r) ? t : Be(t)}${Be(e[t].toString())}`; }), r; } const kr = ['name', 'slot', 'skipVariantsResolver', 'skipSx', 'overridesResolver']; const xr = ['theme']; const Sr = ['theme']; function Ar (e) { return Object.keys(e).length === 0; } function Cr (e) { return e !== 'ownerState' && e !== 'theme' && e !== 'sx' && e !== 'as'; } const Er = Vt(); const _r = (function (e = {}) {
      const { defaultTheme: t = Er, rootShouldForwardProp: n = Cr, slotShouldForwardProp: r = Cr } = e; const a = (e) => { const n = Ar(e.theme) ? t : e.theme; return Ht(b({}, e, { theme: n })); }; return a.__mui_systemSx = !0, (e, o = {}) => {
        ((e, t) => { Array.isArray(e.__emotion_styles) && (e.__emotion_styles = e.__emotion_styles.filter((e) => !(e != null && e.__mui_systemSx))); })(e); const { name: i, slot: l, skipVariantsResolver: u, skipSx: s, overridesResolver: c } = o; const f = v(o, kr); const d = void 0 !== u ? u : l && l !== 'Root' || !1; const p = s || !1; let m = Cr; l === 'Root' ? m = n : l ? m = r : (function (e) { return typeof e === 'string' && e.charCodeAt(0) > 96; }(e)) && (m = void 0); const h = yr(e, b({ shouldForwardProp: m, label: void 0 }, f)); const g = (e, ...n) => {
          const r = n ? n.map((e) => (typeof e === 'function' && e.__emotion_real !== e ? (n) => { const { theme: r } = n; const a = v(n, xr); return e(b({ theme: Ar(r) ? t : r }, a)); } : e)) : []; let o = e; i && c && r.push((e) => { const n = Ar(e.theme) ? t : e.theme; const r = ((e, t) => (t.components && t.components[e] && t.components[e].styleOverrides ? t.components[e].styleOverrides : null))(i, n); if (r) { const t = {}; return Object.entries(r).forEach(([r, a]) => { t[r] = typeof a === 'function' ? a(b({}, e, { theme: n })) : a; }), c(e, t); } return null; }), i && !d && r.push((e) => {
            const n = Ar(e.theme) ? t : e.theme; return ((e, t, n, r) => {
              let a,
                o; const { ownerState: i = {} } = e; const l = []; const u = n == null || (a = n.components) == null || (o = a[r]) == null ? void 0 : o.variants; return u && u.forEach((n) => { let r = !0; Object.keys(n.props).forEach((t) => { i[t] !== n.props[t] && e[t] !== n.props[t] && (r = !1); }), r && l.push(t[wr(n.props)]); }), l;
            })(e, ((e, t) => { let n = []; t && t.components && t.components[e] && t.components[e].variants && (n = t.components[e].variants); const r = {}; return n.forEach((e) => { const t = wr(e.props); r[t] = e.style; }), r; })(i, n), n, i);
          }), p || r.push(a); const l = r.length - n.length; if (Array.isArray(e) && l > 0) { const t = new Array(l).fill(''); o = [...e, ...t], o.raw = [...e.raw, ...t]; } else typeof e === 'function' && e.__emotion_real !== e && (o = (n) => { const { theme: r } = n; const a = v(n, Sr); return e(b({ theme: Ar(r) ? t : r }, a)); }); return h(o, ...r);
        }; return h.withConfig && (g.withConfig = h.withConfig), g;
      };
    }({ defaultTheme: tr, rootShouldForwardProp: (e) => Cr(e) && e !== 'classes' })); const Pr = _r; const Or = (e) => e; const Tr = (() => { let e = Or; return { configure (t) { e = t; }, generate: (t) => e(t), reset () { e = Or; } }; })(); const $r = { active: 'active', checked: 'checked', completed: 'completed', disabled: 'disabled', error: 'error', expanded: 'expanded', focused: 'focused', focusVisible: 'focusVisible', required: 'required', selected: 'selected' }; function Nr (e, t, n = 'Mui') { const r = $r[t]; return r ? `${n}-${r}` : `${Tr.generate(e)}-${t}`; } function zr (e, t, n = 'Mui') { const r = {}; return t.forEach((t) => { r[t] = Nr(e, t, n); }), r; } function Mr (e) { return Nr('MuiCircularProgress', e); }zr('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']); const Lr = a(893); const Rr = ['className', 'color', 'disableShrink', 'size', 'style', 'thickness', 'value', 'variant']; let Dr; let Ir; let Fr; let jr; const Br = (e) => e; const Ur = Fe(Dr || (Dr = Br`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)); const Hr = Fe(Ir || (Ir = Br`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)); const Wr = Pr('span', { name: 'MuiCircularProgress', slot: 'Root', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.root, t[n.variant], t[`color${Ue(n.color)}`]]; } })(({ ownerState: e, theme: t }) => b({ display: 'inline-block' }, e.variant === 'determinate' && { transition: t.transitions.create('transform') }, e.color !== 'inherit' && { color: (t.vars || t).palette[e.color].main }), ({ ownerState: e }) => e.variant === 'indeterminate' && Ie(Fr || (Fr = Br`
      animation: ${0} 1.4s linear infinite;
    `), Ur)); const Vr = Pr('svg', { name: 'MuiCircularProgress', slot: 'Svg', overridesResolver: (e, t) => t.svg })({ display: 'block' }); const Yr = Pr('circle', { name: 'MuiCircularProgress', slot: 'Circle', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.circle, t[`circle${Ue(n.variant)}`], n.disableShrink && t.circleDisableShrink]; } })(({ ownerState: e, theme: t }) => b({ stroke: 'currentColor' }, e.variant === 'determinate' && { transition: t.transitions.create('stroke-dashoffset') }, e.variant === 'indeterminate' && { strokeDasharray: '80px, 200px', strokeDashoffset: 0 }), ({ ownerState: e }) => e.variant === 'indeterminate' && !e.disableShrink && Ie(jr || (jr = Br`
      animation: ${0} 1.4s ease-in-out infinite;
    `), Hr)); const Kr = e.forwardRef((e, t) => { const n = nr({ props: e, name: 'MuiCircularProgress' }); const { className: r, color: a = 'primary', disableShrink: o = !1, size: i = 40, style: l, thickness: u = 3.6, value: s = 0, variant: c = 'indeterminate' } = n; const f = v(n, Rr); const d = b({}, n, { color: a, disableShrink: o, size: i, thickness: u, value: s, variant: c }); const p = ((e) => { const { classes: t, variant: n, color: r, disableShrink: a } = e; return x({ root: ['root', n, `color${Ue(r)}`], svg: ['svg'], circle: ['circle', `circle${Ue(n)}`, a && 'circleDisableShrink'] }, Mr, t); })(d); const m = {}; const h = {}; const g = {}; if (c === 'determinate') { const e = 2 * Math.PI * ((44 - u) / 2); m.strokeDasharray = e.toFixed(3), g['aria-valuenow'] = Math.round(s), m.strokeDashoffset = `${((100 - s) / 100 * e).toFixed(3)}px`, h.transform = 'rotate(-90deg)'; } return (0, Lr.jsx)(Wr, b({ className: k(p.root, r), style: b({ width: i, height: i }, h, l), ownerState: d, ref: t, role: 'progressbar' }, g, f, { children: (0, Lr.jsx)(Vr, { className: p.svg, ownerState: d, viewBox: '22 22 44 44', children: (0, Lr.jsx)(Yr, { className: p.circle, style: m, ownerState: d, cx: 44, cy: 44, r: (44 - u) / 2, fill: 'none', strokeWidth: u }) }) })); }); const Qr = ['sx']; function Gr (e) {
      const { sx: t } = e; const n = v(e, Qr); const { systemProps: r, otherProps: a } = ((e) => {
        let t,
          n; const r = { systemProps: {}, otherProps: {} }; const a = (t = e == null || (n = e.theme) == null ? void 0 : n.unstable_sxConfig) != null ? t : Bt; return Object.keys(e).forEach((t) => { a[t] ? r.systemProps[t] = e[t] : r.otherProps[t] = e[t]; }), r;
      })(n); let o; return o = Array.isArray(t) ? [r, ...t] : typeof t === 'function' ? (...e) => { const n = t(...e); return Ve(n) ? b({}, r, n) : r; } : b({}, r, t), b({}, a, { sx: o });
    } const qr = ['className', 'component']; const Xr = (function (t = {}) { const { defaultTheme: n, defaultClassName: r = 'MuiBox-root', generateClassName: a } = t; const o = yr('div', { shouldForwardProp: (e) => e !== 'theme' && e !== 'sx' && e !== 'as' })(Ht); return e.forwardRef((e, t) => { const i = Qt(n); const l = Gr(e); const { className: u, component: s = 'div' } = l; const c = v(l, qr); return (0, Lr.jsx)(o, b({ as: s, ref: t, className: k(u, a ? a(r) : r), theme: i }, c)); }); }({ defaultTheme: er(), defaultClassName: 'MuiBox-root', generateClassName: Tr.generate })); const Zr = Xr; const Jr = a(484); const ea = a.n(Jr); const ta = a(178); const na = a.n(ta); const ra = a(387); const aa = a.n(ra); const oa = a(212); const ia = a.n(oa); ea().extend(na()), ea().extend(aa()), ea().extend(ia()); const la = ea(); const ua = a(697); const sa = a.n(ua); function ca (e) { return Nr('MuiLinearProgress', e); }zr('MuiLinearProgress', ['root', 'colorPrimary', 'colorSecondary', 'determinate', 'indeterminate', 'buffer', 'query', 'dashed', 'dashedColorPrimary', 'dashedColorSecondary', 'bar', 'barColorPrimary', 'barColorSecondary', 'bar1Indeterminate', 'bar1Determinate', 'bar1Buffer', 'bar2Indeterminate', 'bar2Buffer']); const fa = ['className', 'color', 'value', 'valueBuffer', 'variant']; let da; let pa; let ma; let ha; let ga; let ya; const va = (e) => e; const ba = Fe(da || (da = va`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)); const wa = Fe(pa || (pa = va`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)); const ka = Fe(ma || (ma = va`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)); const xa = (e, t) => (t === 'inherit' ? 'currentColor' : e.vars ? e.vars.palette.LinearProgress[`${t}Bg`] : e.palette.mode === 'light' ? en(e.palette[t].main, 0.62) : Jt(e.palette[t].main, 0.5)); const Sa = Pr('span', { name: 'MuiLinearProgress', slot: 'Root', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.root, t[`color${Ue(n.color)}`], t[n.variant]]; } })(({ ownerState: e, theme: t }) => b({ position: 'relative', overflow: 'hidden', display: 'block', height: 4, zIndex: 0, '@media print': { colorAdjust: 'exact' }, backgroundColor: xa(t, e.color) }, e.color === 'inherit' && e.variant !== 'buffer' && { backgroundColor: 'none', '&::before': { content: '""', position: 'absolute', left: 0, top: 0, right: 0, bottom: 0, backgroundColor: 'currentColor', opacity: 0.3 } }, e.variant === 'buffer' && { backgroundColor: 'transparent' }, e.variant === 'query' && { transform: 'rotate(180deg)' })); const Aa = Pr('span', { name: 'MuiLinearProgress', slot: 'Dashed', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.dashed, t[`dashedColor${Ue(n.color)}`]]; } })(({ ownerState: e, theme: t }) => { const n = xa(t, e.color); return b({ position: 'absolute', marginTop: 0, height: '100%', width: '100%' }, e.color === 'inherit' && { opacity: 0.3 }, { backgroundImage: `radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`, backgroundSize: '10px 10px', backgroundPosition: '0 -23px' }); }, Ie(ha || (ha = va`
    animation: ${0} 3s infinite linear;
  `), ka)); const Ca = Pr('span', { name: 'MuiLinearProgress', slot: 'Bar1', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.bar, t[`barColor${Ue(n.color)}`], (n.variant === 'indeterminate' || n.variant === 'query') && t.bar1Indeterminate, n.variant === 'determinate' && t.bar1Determinate, n.variant === 'buffer' && t.bar1Buffer]; } })(({ ownerState: e, theme: t }) => b({ width: '100%', position: 'absolute', left: 0, bottom: 0, top: 0, transition: 'transform 0.2s linear', transformOrigin: 'left', backgroundColor: e.color === 'inherit' ? 'currentColor' : (t.vars || t).palette[e.color].main }, e.variant === 'determinate' && { transition: 'transform .4s linear' }, e.variant === 'buffer' && { zIndex: 1, transition: 'transform .4s linear' }), ({ ownerState: e }) => (e.variant === 'indeterminate' || e.variant === 'query') && Ie(ga || (ga = va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), ba)); const Ea = Pr('span', { name: 'MuiLinearProgress', slot: 'Bar2', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.bar, t[`barColor${Ue(n.color)}`], (n.variant === 'indeterminate' || n.variant === 'query') && t.bar2Indeterminate, n.variant === 'buffer' && t.bar2Buffer]; } })(({ ownerState: e, theme: t }) => b({ width: '100%', position: 'absolute', left: 0, bottom: 0, top: 0, transition: 'transform 0.2s linear', transformOrigin: 'left' }, e.variant !== 'buffer' && { backgroundColor: e.color === 'inherit' ? 'currentColor' : (t.vars || t).palette[e.color].main }, e.color === 'inherit' && { opacity: 0.3 }, e.variant === 'buffer' && { backgroundColor: xa(t, e.color), transition: 'transform .4s linear' }), ({ ownerState: e }) => (e.variant === 'indeterminate' || e.variant === 'query') && Ie(ya || (ya = va`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), wa)); const _a = e.forwardRef((e, t) => { const n = nr({ props: e, name: 'MuiLinearProgress' }); const { className: r, color: a = 'primary', value: o, valueBuffer: i, variant: l = 'indeterminate' } = n; const u = v(n, fa); const s = b({}, n, { color: a, variant: l }); const c = ((e) => { const { classes: t, variant: n, color: r } = e; return x({ root: ['root', `color${Ue(r)}`, n], dashed: ['dashed', `dashedColor${Ue(r)}`], bar1: ['bar', `barColor${Ue(r)}`, (n === 'indeterminate' || n === 'query') && 'bar1Indeterminate', n === 'determinate' && 'bar1Determinate', n === 'buffer' && 'bar1Buffer'], bar2: ['bar', n !== 'buffer' && `barColor${Ue(r)}`, n === 'buffer' && `color${Ue(r)}`, (n === 'indeterminate' || n === 'query') && 'bar2Indeterminate', n === 'buffer' && 'bar2Buffer'] }, ca, t); })(s); const f = Qt(tr); const d = {}; const p = { bar1: {}, bar2: {} }; if ((l === 'determinate' || l === 'buffer') && void 0 !== o) { d['aria-valuenow'] = Math.round(o), d['aria-valuemin'] = 0, d['aria-valuemax'] = 100; let e = o - 100; f.direction === 'rtl' && (e = -e), p.bar1.transform = `translateX(${e}%)`; } if (l === 'buffer' && void 0 !== i) { let e = (i || 0) - 100; f.direction === 'rtl' && (e = -e), p.bar2.transform = `translateX(${e}%)`; } return (0, Lr.jsxs)(Sa, b({ className: k(c.root, r), ownerState: s, role: 'progressbar' }, d, { ref: t }, u, { children: [l === 'buffer' ? (0, Lr.jsx)(Aa, { className: c.dashed, ownerState: s }) : null, (0, Lr.jsx)(Ca, { className: c.bar1, ownerState: s, style: p.bar1 }), l === 'determinate' ? null : (0, Lr.jsx)(Ea, { className: c.bar2, ownerState: s, style: p.bar2 })] })); }); function Pa (e) { return Nr('MuiTypography', e); }zr('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']); const Oa = ['align', 'className', 'component', 'gutterBottom', 'noWrap', 'paragraph', 'variant', 'variantMapping']; const Ta = Pr('span', { name: 'MuiTypography', slot: 'Root', overridesResolver: (e, t) => { const { ownerState: n } = e; return [t.root, n.variant && t[n.variant], n.align !== 'inherit' && t[`align${Ue(n.align)}`], n.noWrap && t.noWrap, n.gutterBottom && t.gutterBottom, n.paragraph && t.paragraph]; } })(({ theme: e, ownerState: t }) => b({ margin: 0 }, t.variant && e.typography[t.variant], t.align !== 'inherit' && { textAlign: t.align }, t.noWrap && { overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }, t.gutterBottom && { marginBottom: '0.35em' }, t.paragraph && { marginBottom: 16 })); const $a = { h1: 'h1', h2: 'h2', h3: 'h3', h4: 'h4', h5: 'h5', h6: 'h6', subtitle1: 'h6', subtitle2: 'h6', body1: 'p', body2: 'p', inherit: 'p' }; const Na = { primary: 'primary.main', textPrimary: 'text.primary', secondary: 'secondary.main', textSecondary: 'text.secondary', error: 'error.main' }; const za = e.forwardRef((e, t) => { const n = nr({ props: e, name: 'MuiTypography' }); const r = ((e) => Na[e] || e)(n.color); const a = Gr(b({}, n, { color: r })); const { align: o = 'inherit', className: i, component: l, gutterBottom: u = !1, noWrap: s = !1, paragraph: c = !1, variant: f = 'body1', variantMapping: d = $a } = a; const p = v(a, Oa); const m = b({}, a, { align: o, color: r, className: i, component: l, gutterBottom: u, noWrap: s, paragraph: c, variant: f, variantMapping: d }); const h = l || (c ? 'p' : d[f] || $a[f]) || 'span'; const g = ((e) => { const { align: t, gutterBottom: n, noWrap: r, paragraph: a, variant: o, classes: i } = e; return x({ root: ['root', o, e.align !== 'inherit' && `align${Ue(t)}`, n && 'gutterBottom', r && 'noWrap', a && 'paragraph'] }, Pa, i); })(m); return (0, Lr.jsx)(Ta, b({ as: h, ref: t, ownerState: m, className: k(g.root, i) }, p)); }); function Ma () { return Ma = Object.assign || function (e) { for (let t = 1; t < arguments.length; t++) { const n = arguments[t]; for (const r in n)Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]); } return e; }, Ma.apply(this, arguments); } function La (t) { return e.createElement(Zr, { sx: { display: 'flex', alignItems: 'center' } }, e.createElement(Zr, { sx: { width: '100%', mr: 1 } }, e.createElement(_a, { variant: 'determinate', ...t })), e.createElement(Zr, { sx: { minWidth: 35 } }, e.createElement(za, { variant: 'body2', color: 'text.secondary' }, ''.concat(Math.round(t.value), '%')))); }La.propTypes = { value: sa().number.isRequired }; const Ra = a(214); const Da = a.n(Ra); const Ia = a(867); const Fa = {}; function ja (t) { const n = t.data; const r = t.setDataSelection; const a = t.dataSelection; return e.createElement('nav', null, e.createElement('ul', null, n.map((t, n) => { return e.createElement('li', { key: (o = t.file, Da()(o)) }, e.createElement('button', { type: 'button', className: a === n && 'active', onClick () { return r(n); } }, (function (e) { return e.split('/').pop(); }(t.file)), ' ', e.createElement('strong', null, '(', Math.round(t.output.percent), '%)'))); let o; }))); } function Ba (e) { return Ba = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === 'function' && e.constructor === Symbol && e !== Symbol.prototype ? 'symbol' : typeof e; }, Ba(e); } function Ua () { Ua = function () { return e; }; var e = {}; const t = Object.prototype; const n = t.hasOwnProperty; const r = typeof Symbol === 'function' ? Symbol : {}; const a = r.iterator || '@@iterator'; const o = r.asyncIterator || '@@asyncIterator'; const i = r.toStringTag || '@@toStringTag'; function l (e, t, n) { return Object.defineProperty(e, t, { value: n, enumerable: !0, configurable: !0, writable: !0 }), e[t]; } try { l({}, ''); } catch (e) { l = function (e, t, n) { return e[t] = n; }; } function u (e, t, n, r) { const a = t && t.prototype instanceof f ? t : f; const o = Object.create(a.prototype); const i = new S(r || []); return o._invoke = (function (e, t, n) { let r = 'suspendedStart'; return function (a, o) { if (r === 'executing') throw new Error('Generator is already running'); if (r === 'completed') { if (a === 'throw') throw o; return { value: void 0, done: !0 }; } for (n.method = a, n.arg = o; ;) { const i = n.delegate; if (i) { const l = w(i, n); if (l) { if (l === c) continue; return l; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (r === 'suspendedStart') throw r = 'completed', n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); r = 'executing'; const u = s(e, t, n); if (u.type === 'normal') { if (r = n.done ? 'completed' : 'suspendedYield', u.arg === c) continue; return { value: u.arg, done: n.done }; }u.type === 'throw' && (r = 'completed', n.method = 'throw', n.arg = u.arg); } }; }(e, n, i)), o; } function s (e, t, n) { try { return { type: 'normal', arg: e.call(t, n) }; } catch (e) { return { type: 'throw', arg: e }; } }e.wrap = u; var c = {}; function f () {} function d () {} function p () {} let m = {}; l(m, a, function () { return this; }); const h = Object.getPrototypeOf; const g = h && h(h(A([]))); g && g !== t && n.call(g, a) && (m = g); const y = p.prototype = f.prototype = Object.create(m); function v (e) { ['next', 'throw', 'return'].forEach((t) => { l(e, t, function (e) { return this._invoke(t, e); }); }); } function b (e, t) { function r (a, o, i, l) { const u = s(e[a], e, o); if (u.type !== 'throw') { const c = u.arg; const f = c.value; return f && Ba(f) == 'object' && n.call(f, '__await') ? t.resolve(f.__await).then((e) => { r('next', e, i, l); }, (e) => { r('throw', e, i, l); }) : t.resolve(f).then((e) => { c.value = e, i(c); }, (e) => r('throw', e, i, l)); }l(u.arg); } let a; this._invoke = function (e, n) { function o () { return new t((t, a) => { r(e, n, t, a); }); } return a = a ? a.then(o, o) : o(); }; } function w (e, t) { const n = e.iterator[t.method]; if (void 0 === n) { if (t.delegate = null, t.method === 'throw') { if (e.iterator.return && (t.method = 'return', t.arg = void 0, w(e, t), t.method === 'throw')) return c; t.method = 'throw', t.arg = new TypeError("The iterator does not provide a 'throw' method"); } return c; } const r = s(n, e.iterator, t.arg); if (r.type === 'throw') return t.method = 'throw', t.arg = r.arg, t.delegate = null, c; const a = r.arg; return a ? a.done ? (t[e.resultName] = a.value, t.next = e.nextLoc, t.method !== 'return' && (t.method = 'next', t.arg = void 0), t.delegate = null, c) : a : (t.method = 'throw', t.arg = new TypeError('iterator result is not an object'), t.delegate = null, c); } function k (e) { const t = { tryLoc: e[0] }; 1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t); } function x (e) { const t = e.completion || {}; t.type = 'normal', delete t.arg, e.completion = t; } function S (e) { this.tryEntries = [{ tryLoc: 'root' }], e.forEach(k, this), this.reset(!0); } function A (e) { if (e) { const t = e[a]; if (t) return t.call(e); if (typeof e.next === 'function') return e; if (!isNaN(e.length)) { let r = -1; const o = function t () { for (;++r < e.length;) if (n.call(e, r)) return t.value = e[r], t.done = !1, t; return t.value = void 0, t.done = !0, t; }; return o.next = o; } } return { next: C }; } function C () { return { value: void 0, done: !0 }; } return d.prototype = p, l(y, 'constructor', p), l(p, 'constructor', d), d.displayName = l(p, i, 'GeneratorFunction'), e.isGeneratorFunction = function (e) { const t = typeof e === 'function' && e.constructor; return !!t && (t === d || (t.displayName || t.name) === 'GeneratorFunction'); }, e.mark = function (e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, p) : (e.__proto__ = p, l(e, i, 'GeneratorFunction')), e.prototype = Object.create(y), e; }, e.awrap = function (e) { return { __await: e }; }, v(b.prototype), l(b.prototype, o, function () { return this; }), e.AsyncIterator = b, e.async = function (t, n, r, a, o) { void 0 === o && (o = Promise); const i = new b(u(t, n, r, a), o); return e.isGeneratorFunction(n) ? i : i.next().then((e) => (e.done ? e.value : i.next())); }, v(y), l(y, i, 'Generator'), l(y, a, function () { return this; }), l(y, 'toString', () => '[object Generator]'), e.keys = function (e) { const t = []; for (const n in e)t.push(n); return t.reverse(), function n () { for (;t.length;) { const r = t.pop(); if (r in e) return n.value = r, n.done = !1, n; } return n.done = !0, n; }; }, e.values = A, S.prototype = { constructor: S, reset (e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = !1, this.delegate = null, this.method = 'next', this.arg = void 0, this.tryEntries.forEach(x), !e) for (const t in this)t.charAt(0) === 't' && n.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = void 0); }, stop () { this.done = !0; const e = this.tryEntries[0].completion; if (e.type === 'throw') throw e.arg; return this.rval; }, dispatchException (e) { if (this.done) throw e; const t = this; function r (n, r) { return i.type = 'throw', i.arg = e, t.next = n, r && (t.method = 'next', t.arg = void 0), !!r; } for (let a = this.tryEntries.length - 1; a >= 0; --a) { const o = this.tryEntries[a]; var i = o.completion; if (o.tryLoc === 'root') return r('end'); if (o.tryLoc <= this.prev) { const l = n.call(o, 'catchLoc'); const u = n.call(o, 'finallyLoc'); if (l && u) { if (this.prev < o.catchLoc) return r(o.catchLoc, !0); if (this.prev < o.finallyLoc) return r(o.finallyLoc); } else if (l) { if (this.prev < o.catchLoc) return r(o.catchLoc, !0); } else { if (!u) throw new Error('try statement without catch or finally'); if (this.prev < o.finallyLoc) return r(o.finallyLoc); } } } }, abrupt (e, t) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const a = this.tryEntries[r]; if (a.tryLoc <= this.prev && n.call(a, 'finallyLoc') && this.prev < a.finallyLoc) { var o = a; break; } }o && (e === 'break' || e === 'continue') && o.tryLoc <= t && t <= o.finallyLoc && (o = null); const i = o ? o.completion : {}; return i.type = e, i.arg = t, o ? (this.method = 'next', this.next = o.finallyLoc, c) : this.complete(i); }, complete (e, t) { if (e.type === 'throw') throw e.arg; return e.type === 'break' || e.type === 'continue' ? this.next = e.arg : e.type === 'return' ? (this.rval = this.arg = e.arg, this.method = 'return', this.next = 'end') : e.type === 'normal' && t && (this.next = t), c; }, finish (e) { for (let t = this.tryEntries.length - 1; t >= 0; --t) { const n = this.tryEntries[t]; if (n.finallyLoc === e) return this.complete(n.completion, n.afterLoc), x(n), c; } }, catch (e) { for (let t = this.tryEntries.length - 1; t >= 0; --t) { const n = this.tryEntries[t]; if (n.tryLoc === e) { const r = n.completion; if (r.type === 'throw') { var a = r.arg; x(n); } return a; } } throw new Error('illegal catch attempt'); }, delegateYield (e, t, n) { return this.delegate = { iterator: A(e), resultName: t, nextLoc: n }, this.method === 'next' && (this.arg = void 0), c; } }, e; } function Ha (e) { return (function (e) { if (Array.isArray(e)) return Ya(e); }(e)) || (function (e) { if (typeof Symbol !== 'undefined' && e[Symbol.iterator] != null || e['@@iterator'] != null) return Array.from(e); }(e)) || Va(e) || (function () { throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }()); } function Wa (e, t) { return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) { let n = e == null ? null : typeof Symbol !== 'undefined' && e[Symbol.iterator] || e['@@iterator']; if (n != null) { let r; let a; const o = []; let i = !0; let l = !1; try { for (n = n.call(e); !(i = (r = n.next()).done) && (o.push(r.value), !t || o.length !== t); i = !0); } catch (e) { l = !0, a = e; } finally { try { i || n.return == null || n.return(); } finally { if (l) throw a; } } return o; } }(e, t)) || Va(e, t) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }()); } function Va (e, t) { if (e) { if (typeof e === 'string') return Ya(e, t); let n = Object.prototype.toString.call(e).slice(8, -1); return n === 'Object' && e.constructor && (n = e.constructor.name), n === 'Map' || n === 'Set' ? Array.from(e) : n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Ya(e, t) : void 0; } } function Ya (e, t) { (t == null || t > e.length) && (t = e.length); for (var n = 0, r = new Array(t); n < t; n++)r[n] = e[n]; return r; } function Ka (e, t, n, r, a, o, i) { try { var l = e[o](i); var u = l.value; } catch (e) { return void n(e); }l.done ? t(u) : Promise.resolve(u).then(r, a); } function Qa (e) { return function () { const t = this; const n = arguments; return new Promise((r, a) => { const o = e.apply(t, n); function i (e) { Ka(o, r, a, i, l, 'next', e); } function l (e) { Ka(o, r, a, i, l, 'throw', e); }i(void 0); }); }; } function Ga (e, t, n, r, a) { return qa.apply(this, arguments); } function qa () { return qa = Qa(Ua().mark(function e (t, n, r, a, o) { let i; let l; let u; let s; let c; const f = arguments; return Ua().wrap((e) => { for (;;) switch (e.prev = e.next) { case 0: return e.prev = 0, clearTimeout(window.dataTimeout), e.next = 4, fetch('active.json').then((e) => e.json()); case 4: return i = e.sent, t(i), e.next = 8, fetch('filelist.json').then((e) => e.json()); case 8: return l = e.sent, n(l), e.next = 12, fetch('disk.json').then((e) => e.json()); case 12: return u = e.sent, r(u), e.next = 16, fetch('utilization.json').then((e) => e.json()); case 16: return s = e.sent, a(s), e.next = 20, fetch('status.json').then((e) => e.json()); case 20: c = e.sent, o(c), window.dataTimeout = setTimeout(() => { Ga.apply(void 0, Ha(f)); }, 1e3), e.next = 28; break; case 25: e.prev = 25, e.t0 = e.catch(0), window.dataTimeout = setTimeout(() => { Ga.apply(void 0, Ha(f)); }, 1e3); case 28: case 'end': return e.stop(); } }, e, null, [[0, 25]]); })), qa.apply(this, arguments); } function Xa (e) { const t = ['gb', 'mb', 'kb'].find((t) => e[t] >= 1); return Math.round(100 * e[t]) / 100 + t; }Fa.styleTagTransform = h(), Fa.setAttributes = f(), Fa.insert = s().bind(null, 'head'), Fa.domAPI = l(), Fa.insertStyleElement = p(), o()(Ia.Z, Fa), Ia.Z && Ia.Z.locals && Ia.Z.locals, ja.propTypes = { data: sa().object.isRequired, setDataSelection: sa().func.isRequired, dataSelection: sa().number.isRequired }; const Za = function () { const t = Wa((0, e.useState)(!1), 2); const n = t[0]; const r = t[1]; const a = Wa((0, e.useState)([]), 2); const o = a[0]; const i = a[1]; const l = Wa((0, e.useState)(!1), 2); const u = l[0]; const s = l[1]; const c = Wa((0, e.useState)(!1), 2); const f = c[0]; const d = c[1]; const p = Wa((0, e.useState)(!1), 2); const m = p[0]; const h = p[1]; const g = Wa((0, e.useState)(0), 2); const y = g[0]; const v = g[1]; if ([n, o, u, f, m].filter((e) => !e).length > 0) return Ga(r, i, s, d, h), e.createElement(Zr, { sx: { display: 'flex' } }, e.createElement(Kr, null)); if (n.length === 0) return e.createElement(Zr, { sx: { display: 'flex' } }, e.createElement(Kr, null)); let b; let w; let k; const x = n[y]; return e.createElement('div', { className: 'container image' }, e.createElement('div', { className: 'overline' }), e.createElement('h1', null, 'Optimized video encoding'), e.createElement(ja, { data: n, dataSelection: y, setDataSelection: v }), e.createElement('div', { className: 'widget center' }, e.createElement('strong', null, x.file), ' ', '(', x.video_stream.codec_name, '/', x.audio_stream.codec_name, ')'), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'CPU'), e.createElement(La, { value: f.cpu })), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Memory'), e.createElement(La, { value: f.memory }))), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Elapsed'), x.output.run_time), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Timecode'), x.output.timemark), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Profile'), x.name)), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Expected completed time'), (b = x.output.est_completed_seconds, k = 'MM/DD/YYYY HH:mm:ss', (w = la().add(b, 'seconds')).isSame(la(), 'day') && (k = 'HH:mm:ss'), w.format(k))), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'ETA'), x.output.time_remaining)), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Files Remaining'), m.unprocessed_files.toLocaleString()), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'File Progress'), e.createElement(La, { value: x.output.percent }))), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Library Coverage'), e.createElement(La, { value: Math.round(m.library_coverage) }))), e.createElement('div', { className: 'flex' }, e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Original Size'), Xa(x.output.size.original)), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Current Size'), Xa(x.output.size.progress)), e.createElement('div', { className: 'widget' }, e.createElement('strong', null, 'Est. Final Size'), e.createElement('em', null, ''.concat(Math.round(100 * +x.output.size.estimated_final.change.replace('%', '')) / 100, '%')), Xa(x.output.size.estimated_final))), e.createElement('div', { className: 'widget center' }, e.createElement('strong', null, 'Command'), x.ffmpeg_cmd), e.createElement('div', { className: 'flex quarter disks' }, !(u != null && u.map) && e.createElement('div', { className: 'widget center' }, 'Loading...'), (u == null ? void 0 : u.map) && (u == null ? void 0 : u.map((t) => e.createElement('div', { className: ['widget', t.above_threshold && 'danger'].filter((e) => e).join(' ') }, e.createElement('strong', null, t.mounted), e.createElement('em', null, [t.used, 'of', t.size].join(' ')), e.createElement(La, { value: t.percent_used, className: [t.above_threshold && 'danger'].filter((e) => e).join(' ') }))))), e.createElement('div', { className: 'widget list' }, !(o != null && o.map) && e.createElement('em', null, 'Loading...'), e.createElement('strong', null, 'Next', ' ', o.length.toLocaleString(), ' ', 'queued files'), e.createElement('div', { className: 'overflow' }, (o == null ? void 0 : o.map) && e.createElement('table', null, e.createElement('tr', null, e.createElement('th', null, '#'), e.createElement('th', null, 'Priority'), e.createElement('th', null, 'Path'), e.createElement('th', null, 'Size'), e.createElement('th', null, 'Resolution'), e.createElement('th', null, 'Codec'), e.createElement('th', null, 'Encode version')), o.map((t, n) => e.createElement('tr', null, e.createElement('td', null, n + 1), e.createElement('td', null, t.priority), e.createElement('td', null, t.path), e.createElement('td', null, (function (e) { for (var t = +e, n = 0; t > 1024;)t /= 1024, n += 1; return ''.concat(Math.round(100 * t) / 100).concat(['kb', 'mb', 'gb'][n]); }(t.size))), e.createElement('td', null, t.resolution), e.createElement('td', null, t.codec), e.createElement('td', null, t.encode_version))))))); }; (0, n.s)(document.getElementById('app')).render(e.createElement(Za, null));
  })();
})();
// # sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEdBQWEsRUFBRyxFQUFHLElBQUssRUFBRyxFQUFHLEdB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QyxLQUFLLE1BQ3ZDLGdCQUFDd3NFLEdBQUQsQ0FBeUIzOUQsTUFBT3NnRSxFQUFLSSxhQUFjL04sVUFBVyxDQUFDMk4sRUFBS0MsaUJBQW1CLFVBQVVuTCxRQUFPLFNBQUE5K0QsR0FBQyxPQUFJQSxLQUFHbkYsS0FBSyxhQUs3SCx1QkFBS3doRSxVQUFVLGlCQUNYdU0sTUFBQUEsR0FBQUEsRUFBVXRuRSxNQUFPLHdDQUNuQixxQ0FFRyxJQUNBc25FLEVBQVN2dkUsT0FBT3VRLGlCQUNoQixJQUpILGdCQU9BLHVCQUFLeXlELFVBQVUsYUFDWnVNLE1BQUFBLE9BQUEsRUFBQUEsRUFBVXRuRSxNQUNULDZCQUNFLDBCQUNFLCtCQUNBLHNDQUNBLGtDQUNBLGtDQUNBLHdDQUNBLG1DQUNBLDZDQUVEc25FLEVBQVN0bkUsS0FBSSxTQUFDd0IsRUFBR3VuRSxHQUFKLE9BQ1osMEJBQ0UsMEJBQUtBLEVBQU0sR0FDWCwwQkFBS3ZuRSxFQUFFcWlCLFVBQ1AsMEJBQUtyaUIsRUFBRTZsRCxNQUNQLDBCQTVLbEIsU0FBOEIvZSxHQUs1QixJQUpBLElBQUkwZ0MsR0FBYTFnQyxFQUVib29CLEVBQU8sRUFFSnNZLEVBQVksTUFDakJBLEdBQWEsS0FDYnRZLEdBQVEsRUFHVixNQUFPLEdBQVAsT0FBVXI3RCxLQUFLaVIsTUFBa0IsSUFBWjBpRSxHQUFtQixLQUF4QyxPQVJjLENBQUMsS0FBTSxLQUFNLE1BUXlCdFksSUFrSy9CdVksQ0FBb0J6bkUsRUFBRThtQyxPQUMzQiwwQkFBSzltQyxFQUFFMG5FLFlBQ1AsMEJBQUsxbkUsRUFBRTJuRSxPQUNQLDBCQUFLM25FLEVBQUU0bkUsMEJDck9aMXpCLEVBQUFBLEVBQUFBLEdBQVdqbEMsU0FBUzQ0RCxlQUFlLFFBRTNDdCtELE9BQU8sZ0JBQUMsR0FBRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvY3J5cHRvLWpzL2NvcmUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2NyeXB0by1qcy9tZDUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvSG9tZS9Ib21lLnNjc3MiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9OYXYuc2NzcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9kYXlqcy9kYXlqcy5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi9pc1NhbWVPckFmdGVyLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9kYXlqcy9wbHVnaW4vdGltZXpvbmUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2RheWpzL3BsdWdpbi91dGMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL0hvbWUvSG9tZS5zY3NzPzdkYzIiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NvbXBvc2VDbGFzc2VzL2NvbXBvc2VDbGFzc2VzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L2Vtb3Rpb24tc2hlZXQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvVXRpbGl0eS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvRW51bS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9lbW90aW9uLWNhY2hlLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL01pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9lbW90aW9uLWhhc2guZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L2Vtb3Rpb24tdW5pdGxlc3MuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3QvZW1vdGlvbi1zZXJpYWxpemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvdXRpbHMvY2FwaXRhbGl6ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL3NoYXBlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lcmdlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3BhY2luZy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYm9yZGVycy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2Nzc0dyaWQuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc2l6aW5nLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2RlZmF1bHRTeENvbmZpZy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlRnVuY3Rpb25TeC9zdHlsZUZ1bmN0aW9uU3guanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jcmVhdGVUaGVtZS9jcmVhdGVUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL1RoZW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVXaXRob3V0RGVmYXVsdC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvdXNlVGhlbWUvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL3B1cnBsZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2xpZ2h0Qmx1ZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9jb2xvcnMvZ3JlZW4uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRyYW5zaXRpb25zLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVNaXhpbnMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3JlYWN0L2Rpc3QvZW1vdGlvbi1lbGVtZW50LTZhODgzZGE5LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L2Vtb3Rpb24tdXRpbHMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGVkL2Rpc3QvZW1vdGlvbi1zdHlsZWQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3Byb3BzVG9DbGFzc0tleS5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVN0eWxlZC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc3R5bGVkLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9DbGFzc05hbWVHZW5lcmF0b3IvQ2xhc3NOYW1lR2VuZXJhdG9yLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZW5lcmF0ZVV0aWxpdHlDbGFzcy9nZW5lcmF0ZVV0aWxpdHlDbGFzcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcy9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL0NpcmN1bGFyUHJvZ3Jlc3MvY2lyY3VsYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvQ2lyY3VsYXJQcm9ncmVzcy9DaXJjdWxhclByb2dyZXNzLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9Cb3gvQm94LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9kYXlqcy5qcyIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9MaW5lYXJQcm9ncmVzcy9saW5lYXJQcm9ncmVzc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvTGluZWFyUHJvZ3Jlc3MvTGluZWFyUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL1R5cG9ncmFwaHkvdHlwb2dyYXBoeUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL0xpbmVhclByb2dyZXNzV2l0aExhYmVsL0xpbmVhclByb2dyZXNzV2l0aExhYmVsLmpzeCIsIndlYnBhY2s6Ly90Yy10cmFuc2NvZGUvLi9zcmMvY29tcG9uZW50cy9OYXZpZ2F0aW9uL05hdi5zY3NzPzQzZTYiLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9OYXYuanN4Iiwid2VicGFjazovL3RjLXRyYW5zY29kZS8uL3NyYy9jb21wb25lbnRzL0hvbWUvSG9tZS5qc3giLCJ3ZWJwYWNrOi8vdGMtdHJhbnNjb2RlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQvKmdsb2JhbHMgd2luZG93LCBnbG9iYWwsIHJlcXVpcmUqL1xuXG5cdC8qKlxuXHQgKiBDcnlwdG9KUyBjb3JlIGNvbXBvbmVudHMuXG5cdCAqL1xuXHR2YXIgQ3J5cHRvSlMgPSBDcnlwdG9KUyB8fCAoZnVuY3Rpb24gKE1hdGgsIHVuZGVmaW5lZCkge1xuXG5cdCAgICB2YXIgY3J5cHRvO1xuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGZyb20gd2luZG93IChCcm93c2VyKVxuXHQgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSB3aW5kb3cuY3J5cHRvO1xuXHQgICAgfVxuXG5cdCAgICAvLyBOYXRpdmUgY3J5cHRvIGluIHdlYiB3b3JrZXIgKEJyb3dzZXIpXG5cdCAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnICYmIHNlbGYuY3J5cHRvKSB7XG5cdCAgICAgICAgY3J5cHRvID0gc2VsZi5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gZnJvbSB3b3JrZXJcblx0ICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcy5jcnlwdG8pIHtcblx0ICAgICAgICBjcnlwdG8gPSBnbG9iYWxUaGlzLmNyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIChleHBlcmltZW50YWwgSUUgMTEpIGNyeXB0byBmcm9tIHdpbmRvdyAoQnJvd3Nlcilcblx0ICAgIGlmICghY3J5cHRvICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5tc0NyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IHdpbmRvdy5tc0NyeXB0bztcblx0ICAgIH1cblxuXHQgICAgLy8gTmF0aXZlIGNyeXB0byBmcm9tIGdsb2JhbCAoTm9kZUpTKVxuXHQgICAgaWYgKCFjcnlwdG8gJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLmNyeXB0bykge1xuXHQgICAgICAgIGNyeXB0byA9IGdsb2JhbC5jcnlwdG87XG5cdCAgICB9XG5cblx0ICAgIC8vIE5hdGl2ZSBjcnlwdG8gaW1wb3J0IHZpYSByZXF1aXJlIChOb2RlSlMpXG5cdCAgICBpZiAoIWNyeXB0byAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgIH1cblxuXHQgICAgLypcblx0ICAgICAqIENyeXB0b2dyYXBoaWNhbGx5IHNlY3VyZSBwc2V1ZG9yYW5kb20gbnVtYmVyIGdlbmVyYXRvclxuXHQgICAgICpcblx0ICAgICAqIEFzIE1hdGgucmFuZG9tKCkgaXMgY3J5cHRvZ3JhcGhpY2FsbHkgbm90IHNhZmUgdG8gdXNlXG5cdCAgICAgKi9cblx0ICAgIHZhciBjcnlwdG9TZWN1cmVSYW5kb21JbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKGNyeXB0bykge1xuXHQgICAgICAgICAgICAvLyBVc2UgZ2V0UmFuZG9tVmFsdWVzIG1ldGhvZCAoQnJvd3Nlcilcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50MzJBcnJheSgxKSlbMF07XG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVc2UgcmFuZG9tQnl0ZXMgbWV0aG9kIChOb2RlSlMpXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgY3J5cHRvLnJhbmRvbUJ5dGVzID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoNCkucmVhZEludDMyTEUoKTtcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignTmF0aXZlIGNyeXB0byBtb2R1bGUgY291bGQgbm90IGJlIHVzZWQgdG8gZ2V0IHNlY3VyZSByYW5kb20gbnVtYmVyLicpO1xuXHQgICAgfTtcblxuXHQgICAgLypcblx0ICAgICAqIExvY2FsIHBvbHlmaWxsIG9mIE9iamVjdC5jcmVhdGVcblxuXHQgICAgICovXG5cdCAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZ1bmN0aW9uIEYoKSB7fVxuXG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcblx0ICAgICAgICAgICAgdmFyIHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBvYmo7XG5cblx0ICAgICAgICAgICAgc3VidHlwZSA9IG5ldyBGKCk7XG5cblx0ICAgICAgICAgICAgRi5wcm90b3R5cGUgPSBudWxsO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBzdWJ0eXBlO1xuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIENyeXB0b0pTIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBMaWJyYXJ5IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfbGliID0gQy5saWIgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHtcblxuXG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG92ZXJyaWRlcyBQcm9wZXJ0aWVzIHRvIGNvcHkgaW50byB0aGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgZmllbGQ6ICd2YWx1ZScsXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgfVxuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNwYXduXG5cdCAgICAgICAgICAgICAgICB2YXIgc3VidHlwZSA9IGNyZWF0ZSh0aGlzKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQXVnbWVudFxuXHQgICAgICAgICAgICAgICAgaWYgKG92ZXJyaWRlcykge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUubWl4SW4ob3ZlcnJpZGVzKTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRlZmF1bHQgaW5pdGlhbGl6ZXJcblx0ICAgICAgICAgICAgICAgIGlmICghc3VidHlwZS5oYXNPd25Qcm9wZXJ0eSgnaW5pdCcpIHx8IHRoaXMuaW5pdCA9PT0gc3VidHlwZS5pbml0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZXIncyBwcm90b3R5cGUgaXMgdGhlIHN1YnR5cGUgb2JqZWN0XG5cdCAgICAgICAgICAgICAgICBzdWJ0eXBlLmluaXQucHJvdG90eXBlID0gc3VidHlwZTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVmZXJlbmNlIHN1cGVydHlwZVxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3VidHlwZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogRXh0ZW5kcyB0aGlzIG9iamVjdCBhbmQgcnVucyB0aGUgaW5pdCBtZXRob2QuXG5cdCAgICAgICAgICAgICAqIEFyZ3VtZW50cyB0byBjcmVhdGUoKSB3aWxsIGJlIHBhc3NlZCB0byBpbml0KCkuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBpbnN0YW5jZSA9IE15VHlwZS5jcmVhdGUoKTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5leHRlbmQoKTtcblx0ICAgICAgICAgICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cyk7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG9iamVjdC5cblx0ICAgICAgICAgICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gYWRkIHNvbWUgbG9naWMgd2hlbiB5b3VyIG9iamVjdHMgYXJlIGNyZWF0ZWQuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgICAgIC8vIC4uLlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBpbnRvIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgcHJvcGVydGllcyB0byBtaXggaW4uXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBNeVR5cGUubWl4SW4oe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnXG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIG1peEluOiBmdW5jdGlvbiAocHJvcGVydGllcykge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIElFIHdvbid0IGNvcHkgdG9TdHJpbmcgdXNpbmcgdGhlIGxvb3AgYWJvdmVcblx0ICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmluZyA9IHByb3BlcnRpZXMudG9TdHJpbmc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGluc3RhbmNlLmNsb25lKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQW4gYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IHdvcmRzIFRoZSBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgKi9cblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10pO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddLCA2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA0O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgd29yZCBhcnJheSB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7RW5jb2Rlcn0gZW5jb2RlciAoT3B0aW9uYWwpIFRoZSBlbmNvZGluZyBzdHJhdGVneSB0byB1c2UuIERlZmF1bHQ6IENyeXB0b0pTLmVuYy5IZXhcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHN0cmluZ2lmaWVkIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5LnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGVuY29kZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIChlbmNvZGVyIHx8IEhleCkuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheTEuY29uY2F0KHdvcmRBcnJheTIpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbmNhdDogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHRoaXNXb3JkcyA9IHRoaXMud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGF0V29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciB0aGlzU2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHRoaXMuY2xhbXAoKTtcblxuXHQgICAgICAgICAgICAvLyBDb25jYXRcblx0ICAgICAgICAgICAgaWYgKHRoaXNTaWdCeXRlcyAlIDQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIENvcHkgb25lIGJ5dGUgYXQgYSB0aW1lXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXRCeXRlID0gKHRoYXRXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpc1dvcmRzWyh0aGlzU2lnQnl0ZXMgKyBpKSA+Pj4gMl0gfD0gdGhhdEJ5dGUgPDwgKDI0IC0gKCh0aGlzU2lnQnl0ZXMgKyBpKSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSB3b3JkIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGF0U2lnQnl0ZXM7IGogKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaikgPj4+IDJdID0gdGhhdFdvcmRzW2ogPj4+IDJdO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgKz0gdGhhdFNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVtb3ZlcyBpbnNpZ25pZmljYW50IGJpdHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsYW1wOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB0aGlzLnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wXG5cdCAgICAgICAgICAgIHdvcmRzW3NpZ0J5dGVzID4+PiAyXSAmPSAweGZmZmZmZmZmIDw8ICgzMiAtIChzaWdCeXRlcyAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIHdvcmRzLmxlbmd0aCA9IE1hdGguY2VpbChzaWdCeXRlcyAvIDQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gd29yZEFycmF5LmNsb25lKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS53b3JkcyA9IHRoaXMud29yZHMuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgd29yZCBhcnJheSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbkJ5dGVzIFRoZSBudW1iZXIgb2YgcmFuZG9tIGJ5dGVzIHRvIGdlbmVyYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcmFuZG9tIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSgxNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmFuZG9tOiBmdW5jdGlvbiAobkJ5dGVzKSB7XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkJ5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goY3J5cHRvU2VjdXJlUmFuZG9tSW50KCkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbkJ5dGVzKTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBFbmNvZGVyIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmMgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGhleENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJpdGUgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSA+Pj4gNCkudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgJiAweDBmKS50b1N0cmluZygxNikpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhleENoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIGhleCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleFN0ciBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChoZXhTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXhTdHJMZW5ndGg7IGkgKz0gMikge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gM10gfD0gcGFyc2VJbnQoaGV4U3RyLnN1YnN0cihpLCAyKSwgMTYpIDw8ICgyNCAtIChpICUgOCkgKiA0KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIGhleFN0ckxlbmd0aCAvIDIpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGF0aW4xIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBsYXRpbjFDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGxhdGluMUNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiaXRlKSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbGF0aW4xQ2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF0aW4xU3RyIFRoZSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5MYXRpbjEucGFyc2UobGF0aW4xU3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xU3RyTGVuZ3RoID0gbGF0aW4xU3RyLmxlbmd0aDtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGluMVN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAyXSB8PSAobGF0aW4xU3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBsYXRpbjFTdHJMZW5ndGgpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTggZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmOCA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmOFN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGY4LnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpKSk7XG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFVURi04IGRhdGEnKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIFVURi04IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmOFN0ciBUaGUgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHV0ZjhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmOFN0cikge1xuXHQgICAgICAgICAgICByZXR1cm4gTGF0aW4xLnBhcnNlKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh1dGY4U3RyKSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYnVmZmVyZWQgYmxvY2sgYWxnb3JpdGhtIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIFRoZSBwcm9wZXJ0eSBibG9ja1NpemUgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9taW5CdWZmZXJTaXplIFRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgc2hvdWxkIGJlIGtlcHQgdW5wcm9jZXNzZWQgaW4gdGhlIGJ1ZmZlci4gRGVmYXVsdDogMFxuXHQgICAgICovXG5cdCAgICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgZGF0YSBidWZmZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFdvcmRBcnJheS5pbml0KCk7XG5cdCAgICAgICAgICAgIHRoaXMuX25EYXRhQnl0ZXMgPSAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIG5ldyBkYXRhIHRvIHRoaXMgYmxvY2sgYWxnb3JpdGhtJ3MgYnVmZmVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGFwcGVuZC4gU3RyaW5ncyBhcmUgY29udmVydGVkIHRvIGEgV29yZEFycmF5IHVzaW5nIFVURi04LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9hcHBlbmQoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2FwcGVuZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGRhdGEgPSBVdGY4LnBhcnNlKGRhdGEpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2RhdGEuY29uY2F0KGRhdGEpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzICs9IGRhdGEuc2lnQnl0ZXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFByb2Nlc3NlcyBhdmFpbGFibGUgZGF0YSBibG9ja3MuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIF9kb1Byb2Nlc3NCbG9jayhvZmZzZXQpLCB3aGljaCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGEgY29uY3JldGUgc3VidHlwZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9GbHVzaCBXaGV0aGVyIGFsbCBibG9ja3MgYW5kIHBhcnRpYWwgYmxvY2tzIHNob3VsZCBiZSBwcm9jZXNzZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwcm9jZXNzZWQgZGF0YS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHByb2Nlc3NlZERhdGEgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLl9wcm9jZXNzKCk7XG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9wcm9jZXNzOiBmdW5jdGlvbiAoZG9GbHVzaCkge1xuXHQgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkV29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gdGhpcy5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYmxvY2tzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tzUmVhZHkgPSBkYXRhU2lnQnl0ZXMgLyBibG9ja1NpemVCeXRlcztcblx0ICAgICAgICAgICAgaWYgKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwIHRvIGluY2x1ZGUgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgZG93biB0byBpbmNsdWRlIG9ubHkgZnVsbCBibG9ja3MsXG5cdCAgICAgICAgICAgICAgICAvLyBsZXNzIHRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgbXVzdCByZW1haW4gaW4gdGhlIGJ1ZmZlclxuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5tYXgoKG5CbG9ja3NSZWFkeSB8IDApIC0gdGhpcy5fbWluQnVmZmVyU2l6ZSwgMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudCB3b3JkcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbldvcmRzUmVhZHkgPSBuQmxvY2tzUmVhZHkgKiBibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYnl0ZXMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CeXRlc1JlYWR5ID0gTWF0aC5taW4obldvcmRzUmVhZHkgKiA0LCBkYXRhU2lnQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgYmxvY2tzXG5cdCAgICAgICAgICAgIGlmIChuV29yZHNSZWFkeSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWFsZ29yaXRobSBsb2dpY1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvUHJvY2Vzc0Jsb2NrKGRhdGFXb3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICAgICAgcHJvY2Vzc2VkV29yZHMgPSBkYXRhV29yZHMuc3BsaWNlKDAsIG5Xb3Jkc1JlYWR5KTtcblx0ICAgICAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gcHJvY2Vzc2VkIHdvcmRzXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQocHJvY2Vzc2VkV29yZHMsIG5CeXRlc1JlYWR5KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2RhdGEgPSB0aGlzLl9kYXRhLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfbWluQnVmZmVyU2l6ZTogMFxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgaGFzaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBoYXNoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDE2ICg1MTIgYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaGVyID0gQ3J5cHRvSlMuYWxnby5TSEEyNTYuY3JlYXRlKCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSZXNldHMgdGhpcyBoYXNoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXG5cdCAgICAgICAgICAgIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xuXHQgICAgICAgICAgICB0aGlzLl9kb1Jlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFVwZGF0ZXMgdGhpcyBoYXNoZXIgd2l0aCBhIG1lc3NhZ2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7SGFzaGVyfSBUaGlzIGhhc2hlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICBoYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBBcHBlbmRcblx0ICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgaGFzaFxuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2hhaW5hYmxlXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBGaW5hbGl6ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24uXG5cdCAgICAgICAgICogTm90ZSB0aGF0IHRoZSBmaW5hbGl6ZSBvcGVyYXRpb24gaXMgZWZmZWN0aXZlbHkgYSBkZXN0cnVjdGl2ZSwgcmVhZC1vbmNlIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSAoT3B0aW9uYWwpIEEgZmluYWwgbWVzc2FnZSB1cGRhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGZpbmFsaXplOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAvLyBGaW5hbCBtZXNzYWdlIHVwZGF0ZVxuXHQgICAgICAgICAgICBpZiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogNTEyLzMyLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIGEgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIFNIQTI1NiA9IENyeXB0b0pTLmxpYi5IYXNoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGNmZykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIGEgc2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZSBpbiB0aGlzIEhNQUMgaGVscGVyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIEhtYWNTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfY3JlYXRlSG1hY0hlbHBlcjogZnVuY3Rpb24gKGhhc2hlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDX2FsZ28uSE1BQy5pbml0KGhhc2hlciwga2V5KS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBbGdvcml0aG0gbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge307XG5cblx0ICAgIHJldHVybiBDO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgVCA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIGNvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcblx0ICAgICAgICAgICAgVFtpXSA9IChNYXRoLmFicyhNYXRoLnNpbihpICsgMSkpICogMHgxMDAwMDAwMDApIHwgMDtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1ENSBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIE1ENSA9IENfYWxnby5NRDUgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzAgID0gTVtvZmZzZXQgKyAwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEgID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzIgID0gTVtvZmZzZXQgKyAyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzMgID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzQgID0gTVtvZmZzZXQgKyA0XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzUgID0gTVtvZmZzZXQgKyA1XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzYgID0gTVtvZmZzZXQgKyA2XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzcgID0gTVtvZmZzZXQgKyA3XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzggID0gTVtvZmZzZXQgKyA4XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzkgID0gTVtvZmZzZXQgKyA5XTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEwID0gTVtvZmZzZXQgKyAxMF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMSA9IE1bb2Zmc2V0ICsgMTFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzEzID0gTVtvZmZzZXQgKyAxM107XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNCA9IE1bb2Zmc2V0ICsgMTRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XTtcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzAsICA3LCAgVFswXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xLCAgMTIsIFRbMV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE3LCBUWzJdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzMsICAyMiwgVFszXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNywgIFRbNF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfNSwgIDEyLCBUWzVdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNywgVFs2XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF83LCAgMjIsIFRbN10pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDcsICBUWzhdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzksICAxMiwgVFs5XSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTcsIFRbMTBdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzExLCAyMiwgVFsxMV0pO1xuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDcsICBUWzEyXSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xMywgMTIsIFRbMTNdKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNywgVFsxNF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTUsIDIyLCBUWzE1XSk7XG5cblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA1LCAgVFsxNl0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfNiwgIDksICBUWzE3XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzAsICAyMCwgVFsxOV0pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfNSwgIDUsICBUWzIwXSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgIFRbMjFdKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfNCwgIDIwLCBUWzIzXSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNSwgIFRbMjRdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCAgVFsyNV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE0LCBUWzI2XSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAgMjAsIFRbMjddKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCAgVFsyOF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgIDksICBUWzI5XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTQsIFRbMzBdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEyLCAyMCwgVFszMV0pO1xuXG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNCwgIFRbMzJdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzgsICAxMSwgVFszM10pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTEsIDE2LCBUWzM0XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8xNCwgMjMsIFRbMzVdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsICA0LCAgVFszNl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfNCwgIDExLCBUWzM3XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF83LCAgMTYsIFRbMzhdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEwLCAyMywgVFszOV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDQsICBUWzQwXSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8wLCAgMTEsIFRbNDFdKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsICAxNiwgVFs0Ml0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfNiwgIDIzLCBUWzQzXSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF85LCAgNCwgIFRbNDRdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEyLCAxMSwgVFs0NV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE2LCBUWzQ2XSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF8yLCAgMjMsIFRbNDddKTtcblxuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDYsICBUWzQ4XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF83LCAgMTAsIFRbNDldKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE0LCAxNSwgVFs1MF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfNSwgIDIxLCBUWzUxXSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNiwgIFRbNTJdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzMsICAxMCwgVFs1M10pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE1LCBUWzU0XSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xLCAgMjEsIFRbNTVdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzgsICA2LCAgVFs1Nl0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTUsIDEwLCBUWzU3XSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF82LCAgMTUsIFRbNThdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEzLCAyMSwgVFs1OV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfNCwgIDYsICBUWzYwXSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xMSwgMTAsIFRbNjFdKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzIsICAxNSwgVFs2Ml0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfOSwgIDIxLCBUWzYzXSk7XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWxIID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEwgPSBuQml0c1RvdGFsO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IChcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDgpICB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDI0KSB8IChuQml0c1RvdGFsSCA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgOCkgIHwgKG5CaXRzVG90YWxMID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEwgPDwgMjQpIHwgKG5CaXRzVG90YWxMID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBmdW5jdGlvbiBGRihhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBHRyhhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKChiICYgZCkgfCAoYyAmIH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGIgXiBjIF4gZCkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBJSShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG5cdCAgICAgICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdDtcblx0ICAgICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5NRDUgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihNRDUpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY01ENShtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNNRDUgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoTUQ1KTtcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuTUQ1O1xuXG59KSk7IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvbm9ybWFsaXplLzcuMC4wL25vcm1hbGl6ZS5taW4uY3NzKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKntib3gtc2l6aW5nOmJvcmRlci1ib3h9Ym9keSxodG1se2ZvbnQtc2l6ZToxNnB4O2ZvbnQtZmFtaWx5OlxcXCJMYXRvXFxcIixzYW5zLXNlcmlmO2JhY2tncm91bmQtY29sb3I6I2VlZX1maWd1cmUsaW1ne3dpZHRoOjEwMCU7ZGlzcGxheTpibG9jazttYXJnaW46MCBhdXRvfXB7bGluZS1oZWlnaHQ6MS4yZW19LmNhcHRpb24sZmlnY2FwdGlvbntmb250LXNpemU6LjlyZW07Y29sb3I6IzhlOGE4YTtwYWRkaW5nOjVweCAwfS5jb250YWluZXJ7d2lkdGg6MTAwJTttYXgtd2lkdGg6ODAwcHg7cGFkZGluZzoxMHB4O21hcmdpbjowIGF1dG99LmNvbnRhaW5lci5pbWFnZXttYXgtd2lkdGg6ODAwcHg7cGFkZGluZzowfS5jb250YWluZXIuaW1hZ2UgLmNhcHRpb24sLmNvbnRhaW5lci5pbWFnZSBmaWdjYXB0aW9ue3BhZGRpbmc6NXB4IDEwcHh9LmRlc2t0b3B7ZGlzcGxheTpub25lfS5tb2JpbGV7ZGlzcGxheTpibG9ja30jYXBwe3BhZGRpbmc6MTBweH1AbWVkaWEobWluLXdpZHRoOiA2ODFweCl7I2FwcHtwYWRkaW5nOjB9fS5vdmVyYWxsPmRpdnttYXJnaW4tYm90dG9tOi04cHh9Lm92ZXJhbGw+ZGl2OmZpcnN0LWNoaWxke21hcmdpbi10b3A6LTI1JX0ub3ZlcmxpbmV7bWF4LXdpZHRoOjIwJTtoZWlnaHQ6MXB4O2JvcmRlci1ib3R0b206NXB4IHNvbGlkICMzNzkyY2I7bWFyZ2luOjEwcHggMCAtMTBweCAwfS5zY3JlZW57d2lkdGg6MTAwJTttaW4taGVpZ2h0OjEwMHZofS5zY3JlZW4ucGFkZHtwYWRkaW5nLXRvcDoyNSV9LnZpZGVve3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjA7cGFkZGluZy1ib3R0b206NTYuMjUlfS52aWRlby52ZXJ0aWNhbHtwYWRkaW5nLWJvdHRvbToxNzcuNzc3Nzc3Nzc3OCV9LnZpZGVvIGlmcmFtZSwudmlkZW8gdmlkZW97cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0b3A6MDtsZWZ0OjA7Ym9yZGVyOjB9LndpZGdldHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czo1cHg7cGFkZGluZzoxMHB4O21heC13aWR0aDo4MDBweDttYXJnaW4tYm90dG9tOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LndpZGdldCAub3ZlcmZsb3d7b3ZlcmZsb3cteDphdXRvfS53aWRnZXQuY2VudGVye21hcmdpbjowIGF1dG8gMTBweH0ud2lkZ2V0Lmxpc3Qgb2wsLndpZGdldC5saXN0IHVse3RleHQtYWxpZ246bGVmdH0ud2lkZ2V0Lmxpc3Qgb2wgbGksLndpZGdldC5saXN0IHVsIGxpe3BhZGRpbmctbGVmdDoxMHB4fS53aWRnZXQgc3Ryb25nLC53aWRnZXQgZW17ZGlzcGxheTpibG9ja30ud2lkZ2V0IGVte2ZvbnQtc2l6ZTouOXJlbX0ud2lkZ2V0IHRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZX0ud2lkZ2V0IHRhYmxlIHRyIHRke3BhZGRpbmc6NXB4fS53aWRnZXQgdGFibGUgdHI6bnRoLWNoaWxkKGV2ZW4pe2JhY2tncm91bmQtY29sb3I6I2Y5ZjlmOX0uZGlza3MgLndpZGdldCAuZGFuZ2VyPip7YmFja2dyb3VuZC1jb2xvcjpyZWR9QG1lZGlhKG1pbi13aWR0aDogNjgxcHgpey5kZXNrdG9we2Rpc3BsYXk6YmxvY2t9Lm1vYmlsZXtkaXNwbGF5Om5vbmV9LmZsZXh7ZGlzcGxheTpmbGV4O3RleHQtYWxpZ246Y2VudGVyO2ZsZXgtd3JhcDp3cmFwO2dhcDoxMHB4O21heC13aWR0aDo4MDBweDttYXJnaW46MCBhdXRvfS5mbGV4PmRpdntmbGV4OjF9LmZsZXgucXVhcnRlcj5kaXZ7ZmxleC1iYXNpczoyNSV9LmNpcmNsZXttYXgtd2lkdGg6NDBweDttYXJnaW46MCBhdXRvfX1AbWVkaWEobWluLXdpZHRoOiA4MDVweCl7LmNvbnRhaW5lcntwYWRkaW5nOjB9fUBtZWRpYShtaW4td2lkdGg6IDEyMDVweCl7LmNvbnRhaW5lci5pbWFnZSAuY2FwdGlvbiwuY29udGFpbmVyLmltYWdlIGZpZ2NhcHRpb257cGFkZGluZzo1cHggMH19XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvSG9tZS9Ib21lLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBZ0JBLEVBQ0UscUJBQUEsQ0FHRixVQUdFLGNBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBR0YsV0FHRSxVQUFBLENBQ0EsYUFBQSxDQUNBLGFBQUEsQ0FHRixFQUNFLGlCQUFBLENBR0Ysb0JBRUUsZUFBQSxDQUNBLGFBQUEsQ0FDQSxhQUFBLENBS0YsV0FDRSxVQUFBLENBQ0EsZUFBQSxDQUNBLFlBQUEsQ0FDQSxhQUFBLENBR0YsaUJBQ0UsZUFBQSxDQUNBLFNBQUEsQ0FHRixzREFFRSxnQkFBQSxDQUdGLFNBQ0UsWUFBQSxDQUdGLFFBQ0UsYUFBQSxDQUdGLEtBQ0UsWUFBQSxDQUVBLHlCQUhGLEtBSUksU0FBQSxDQUFBLENBS0YsYUFDRSxrQkFBQSxDQUVBLHlCQUNFLGVBQUEsQ0FLTixVQUNFLGFBQUEsQ0FDQSxVQUFBLENBQ0EsK0JBQUEsQ0FDQSxxQkFBQSxDQUlGLFFBQ0UsVUFBQSxDQUNBLGdCQUFBLENBR0YsYUFDRSxlQUFBLENBR0YsT0FDRSxpQkFBQSxDQUNBLFVBQUEsQ0FDQSxRQUFBLENBQ0EscUJBQUEsQ0FHRixnQkFDRSw4QkFBQSxDQUdGLDJCQUVFLGlCQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxLQUFBLENBQ0EsTUFBQSxDQUNBLFFBQUEsQ0FHRixRQUNFLHFCQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0EsZUFBQSxDQUNBLGtCQUFBLENBQ0EsaUJBQUEsQ0FFQSxrQkFDRSxlQUFBLENBR0YsZUFDRSxrQkFBQSxDQUlBLGdDQUVFLGVBQUEsQ0FDQSxzQ0FDRSxpQkFBQSxDQUtOLDBCQUVFLGFBQUEsQ0FHRixXQUNFLGVBQUEsQ0FHRixjQUNFLHdCQUFBLENBRUUsb0JBQ0UsV0FBQSxDQUVGLGlDQUNFLHdCQUFBLENBU0YseUJBQ0Usb0JBQUEsQ0FRUix5QkFHRSxTQUNFLGFBQUEsQ0FHRixRQUNFLFlBQUEsQ0FHRixNQUNFLFlBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSxRQUFBLENBQ0EsZUFBQSxDQUNBLGFBQUEsQ0FFQSxVQUNFLE1BQUEsQ0FJQSxrQkFDRSxjQUFBLENBS04sUUFDRSxjQUFBLENBQ0EsYUFBQSxDQUFBLENBYUoseUJBR0UsV0FDRSxTQUFBLENBQUEsQ0FNSiwwQkFHRSxzREFFRSxhQUFBLENBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLypcXG5UaGlzIGlzIGEgZ29vZCBsYXlvdXQgZm9yIGEgbW9iaWxlLWZpcnN0IENTUyB0ZW1wbGF0ZS5cXG5Gb2xsb3dpbmcgdGhpcyBmbG93IHdpbGwgbWluaW1pemUgdGhlIG51bWJlciBvZiBzdHlsZXMgeW91IG5lZWQgdG8gd3JpdGUgYW5kIHdpbGwgZW5zdXJlIHlvdSBhcmUgdGhpbmtpbmcsIGRlc2lnbmluZyBhbmQgZGV2ZWxvcGluZyBtb2JpbGUtZmlyc3QuXFxuTW9zdCBvZiB5b3VyIHN0eWxlcyBnZXQgd3JpdHRlbiBsaWtlIHN0YW5kYXJkIENTUywgYnV0IGZvciB5b3VyIG1vYmlsZSBwcmVzZW50YXRpb24uIEdlbmVyYWxseSBzcGVha2luZywgYSBnb29kIG1vYmlsZSBwcmVzZW50aW9uIHdpbGwgc3RyZXRjaCBvdXQgbmljZWx5IGZvciBsYXJnZXIgc2NyZWVucy5cXG5cXG5Tb21ldGltZXMsIHdoZW4gd2Ugc3RyZXRjaCBvdXQgdG8gbGFyZ2VyIHNjcmVlbnMsIHdlIG5lZWQgdG8gbWFrZSBtaW5vciB0d2Vha3MgZm9yIHRoZSBsYXJnZXIgZGV2aWNlcyAtLSB5b3UgY2FuIG1ha2UgdGhlc2UgdHdlYWtzIGluIHRoZSB0YWJsZXQgbWVkaWEgcXVlcnksIG9yIGlmIHRoZSBpc3N1ZSBleGlzdHMgb24gZGVza3RvcCBvbmx5LCB0aGUgZGVza3RvcCBtZWRpYSBxdWVyeS5cXG5Zb3Ugd2lsbCBmaW5kIHRoaXMgaXMgZmFyIGVhc2llciB0aGFuIHRoZSBvcHBvc2l0ZSB0YXNrIG9mIHVzaW5nIENTUyB0byBjcmFtIHlvdXIgZGVza3RvcCBleHBlcmllbmNlIGludG8gYSBtb2JpbGUgZGV2aWNlLlxcbiovXFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiBMT0FEUyBJTiBBIE5JQ0UgUkVTRVQgVE8gRU5TVVJFIEFMTCBCUk9XU0VSUyBIQVZFIFRIRSBTQU1FIEJBU0UgU1RZTEVTXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbkBpbXBvcnQgdXJsKCdodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9ub3JtYWxpemUvNy4wLjAvbm9ybWFsaXplLm1pbi5jc3MnKTtcXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuICBZT1VSIE1PQklMRS9CQVNFIFNUWUxFUyBHTyBIRVJFXFxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xcbi8qKiBTRVQgQk9SREVSIEJPWCBFVkVSWVdIRVJFICovXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4vKiogQVBQTFkgQkFTRSBUQUcgU1RZTEVTICovXFxuYm9keSxcXG5odG1sIHtcXG4gIC8qIFNldHMgZGVmYXVsdCBmb250LXNpemUgdG8gMTZweCwgZW5zdXJpbmcgMWVtID0gMTZweDsgKi9cXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtZmFtaWx5OiAnTGF0bycsIHNhbnMtc2VyaWY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbn1cXG4vKiogUkVTUE9OU0lWRSBJTUFHRVMgKi9cXG5maWd1cmUsXFxuaW1nIHtcXG4gIC8qIFNldHMgaW1hZ2Ugd2lkdGggdG8gbWF0Y2ggcGFyZW50ICovXFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbnAge1xcbiAgbGluZS1oZWlnaHQ6IDEuMmVtO1xcbn1cXG4vKiogQ2FwdGlvbiBzdHlsZXMgKi9cXG4uY2FwdGlvbixcXG5maWdjYXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMC45cmVtO1xcbiAgY29sb3I6ICM4ZThhOGE7XFxuICBwYWRkaW5nOiA1cHggMDtcXG59XFxuLyoqIEJBU0UgQ0xBU1NFUyAqL1xcbi8qKiBDb250YWluZXIgc3R5bGVzIHRvIGtlZXAgY29udGVudCBmcm9tIGJlY29taW5nIHRvbyB3aWRlIG9yIGNvbWluZyB0b28gY2xvc2UgdG9cXG4qIG1vYmlsZSBlZGdlICovXFxuLmNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcbi8qKiBJbWFnZXMgYXJlIGFsbG93ZWQgdG8gYmUgYSBsaXR0bGUgd2lkZXIgd2hlbiBicm9rZW4gb3V0IGludG8gdGhlaXIgb3duIGNvbnRhaW5lciAqL1xcbi5jb250YWluZXIuaW1hZ2Uge1xcbiAgbWF4LXdpZHRoOiA4MDBweDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi5jb250YWluZXIuaW1hZ2UgLmNhcHRpb24sXFxuLmNvbnRhaW5lci5pbWFnZSBmaWdjYXB0aW9uIHtcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcbn1cXG5cXG4uZGVza3RvcCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubW9iaWxlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4jYXBwIHtcXG4gIHBhZGRpbmc6IDEwcHg7XFxuXFxuICBAbWVkaWEgKG1pbi13aWR0aDogNjgxcHgpIHtcXG4gICAgcGFkZGluZzogMDtcXG4gIH1cXG59XFxuXFxuLm92ZXJhbGwge1xcbiAgPiBkaXYge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtOHB4O1xcblxcbiAgICAmOmZpcnN0LWNoaWxkIHtcXG4gICAgICBtYXJnaW4tdG9wOiAtMjUlO1xcbiAgICB9XFxuICB9XFxufVxcblxcbi5vdmVybGluZSB7XFxuICBtYXgtd2lkdGg6IDIwJTtcXG4gIGhlaWdodDogMXB4O1xcbiAgYm9yZGVyLWJvdHRvbTogNXB4IHNvbGlkICMzNzkyY2I7XFxuICBtYXJnaW46IDEwcHggMCAtMTBweCAwO1xcbn1cXG5cXG4vKiogU2NyZWVucyBhcmUgdGhlIHNpemUgb2YgYXQgbGVhc3Qgb25lIGRldmljZSBzY3JlZW4gKi9cXG4uc2NyZWVuIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxufVxcbi8qKiBmb3IgdmVydGljYWwgY2VudGVyaW5nICovXFxuLnNjcmVlbi5wYWRkIHtcXG4gIHBhZGRpbmctdG9wOiAyNSU7XFxufVxcbi8qKiB2aWRlbyBzZXR1cCAqL1xcbi52aWRlbyB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMDtcXG4gIHBhZGRpbmctYm90dG9tOiBjYWxjKDkgLyAxNiAqIDEwMCUpO1xcbn1cXG5cXG4udmlkZW8udmVydGljYWwge1xcbiAgcGFkZGluZy1ib3R0b206IGNhbGMoMTYgLyA5ICogMTAwJSk7XFxufVxcblxcbi52aWRlbyBpZnJhbWUsXFxuLnZpZGVvIHZpZGVvIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJvcmRlcjogMDtcXG59XFxuXFxuLndpZGdldCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcblxcbiAgLm92ZXJmbG93IHtcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXG4gIH1cXG5cXG4gICYuY2VudGVyIHtcXG4gICAgbWFyZ2luOiAwIGF1dG8gMTBweDtcXG4gIH1cXG5cXG4gICYubGlzdCB7XFxuICAgIG9sLFxcbiAgICB1bCB7XFxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcXG4gICAgICBsaSB7XFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICBzdHJvbmcsXFxuICBlbSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgfVxcblxcbiAgZW0ge1xcbiAgICBmb250LXNpemU6IDAuOXJlbTtcXG4gIH1cXG5cXG4gIHRhYmxlIHtcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gICAgdHIge1xcbiAgICAgIHRkIHtcXG4gICAgICAgIHBhZGRpbmc6IDVweDtcXG4gICAgICB9XFxuICAgICAgJjpudGgtY2hpbGQoZXZlbikge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuLmRpc2tzIHtcXG4gIC53aWRnZXQge1xcbiAgICAuZGFuZ2VyIHtcXG4gICAgICA+ICoge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2YwMDtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG59XFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxcbiAgWU9VUiBUQUJMRVQvREVTS1RPUCBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5AbWVkaWEgKG1pbi13aWR0aDogNjgxcHgpIHtcXG4gIC8qIEFueSBhZGp1c3RtZW50cyBmb3IgdGFibGV0cyBhbmQgbGFyZ2VyIGdvIGhlcmUuXFxuICAgIE5vdGUgdGhlc2Ugc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0byBhbnl0aGluZyA2ODFweCBvciBsYXJnZXIgLS0gc28gdGFibGV0IEFORCBkZXNrdG9wICovXFxuICAuZGVza3RvcCB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgfVxcblxcbiAgLm1vYmlsZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAuZmxleCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBnYXA6IDEwcHg7XFxuICAgIG1heC13aWR0aDogODAwcHg7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcblxcbiAgICA+IGRpdiB7XFxuICAgICAgZmxleDogMTtcXG4gICAgfVxcblxcbiAgICAmLnF1YXJ0ZXIge1xcbiAgICAgID4gZGl2IHtcXG4gICAgICAgIGZsZXgtYmFzaXM6IDI1JTtcXG4gICAgICB9XFxuICAgIH1cXG4gIH1cXG5cXG4gIC5jaXJjbGUge1xcbiAgICBtYXgtd2lkdGg6IDQwcHg7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgfVxcbn1cXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuICBZT1VSIERFU0tUT1AtT05MWSBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5AbWVkaWEgKG1pbi13aWR0aDogNzY5cHgpIHtcXG4gIC8qIEFueSBhZGp1c3RtZW50cyBmb3IgZGVza3RvcCBhbmQgbGFyZ2VyIGdvIGhlcmUuXFxuICAgIE5vdGUgdGhlc2Ugc3R5bGVzIHdpbGwgYmUgYXBwbGllZCB0byBhbnl0aGluZyA3NjlweCBvciBsYXJnZXIgLS0gc28gZGVza3RvcCAqL1xcbn1cXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuICBZT1VSIE1FRElVTS1ERVNLVE9QLU9OTFkgU1RZTEVTIEdPIEhFUkVcXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXFxuQG1lZGlhIChtaW4td2lkdGg6IDgwNXB4KSB7XFxuICAvKiBBbnkgYWRqdXN0bWVudHMgZm9yIGRlc2t0b3AgYW5kIGxhcmdlciBnbyBoZXJlLlxcbiAgICBOb3RlIHRoZXNlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gYW55dGhpbmcgNzY5cHggb3IgbGFyZ2VyIC0tIHNvIGRlc2t0b3AgKi9cXG4gIC5jb250YWluZXIge1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgfVxcbn1cXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXFxuICBZT1VSIExBUkdFIERFU0tUT1AtT05MWSBTVFlMRVMgR08gSEVSRVxcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cXG5AbWVkaWEgKG1pbi13aWR0aDogMTIwNXB4KSB7XFxuICAvKiBBbnkgYWRqdXN0bWVudHMgZm9yIGRlc2t0b3AgYW5kIGxhcmdlciBnbyBoZXJlLlxcbiAgICBOb3RlIHRoZXNlIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG8gYW55dGhpbmcgNzY5cHggb3IgbGFyZ2VyIC0tIHNvIGRlc2t0b3AgKi9cXG4gIC5jb250YWluZXIuaW1hZ2UgLmNhcHRpb24sXFxuICAuY29udGFpbmVyLmltYWdlIGZpZ2NhcHRpb24ge1xcbiAgICBwYWRkaW5nOiA1cHggMDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwibmF2e292ZXJmbG93LXk6YXV0bzstd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzp0b3VjaDttYXgtaGVpZ2h0OjIwdmg7bWFyZ2luOjAgYXV0byAyMnB4fW5hdiB1bHttYXJnaW46MDtwYWRkaW5nOjB9bmF2IHVsIGxpe2xpc3Qtc3R5bGU6bm9uZTtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6MTBweDttYXJnaW46MTBweH1uYXYgdWwgbGkgYnV0dG9ue2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKTtib3JkZXI6MDtiYWNrZ3JvdW5kOiNmZmY7bWFyZ2luLXJpZ2h0OjEwcHg7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MTAwJTtwYWRkaW5nOjIycHg7Y29sb3I6IzAwMH1uYXYgdWwgbGkgYnV0dG9uLmFjdGl2ZXtib3JkZXItYm90dG9tOjNweCBzb2xpZCAjMDAwfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL05hdmlnYXRpb24vTmF2LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsSUFDRSxlQUFBLENBRUEsZ0NBQUEsQ0FDQSxlQUFBLENBQ0Esa0JBQUEsQ0FFQSxPQUNFLFFBQUEsQ0FDQSxTQUFBLENBRUEsVUFDRSxlQUFBLENBQ0EsYUFBQSxDQUNBLFlBQUEsQ0FDQSxXQUFBLENBRUEsaUJBQ0Usd0JBQUEsQ0FDQSxRQUFBLENBQ0EsZUFBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUNBLFVBQUEsQ0FDQSxZQUFBLENBQ0EsVUFBQSxDQUVBLHdCQUNFLDRCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIm5hdiB7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbiAgLyogbW9tZW50dW0gc2Nyb2xsaW5nICovXFxuICAtd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzogdG91Y2g7XFxuICBtYXgtaGVpZ2h0OiAyMHZoO1xcbiAgbWFyZ2luOiAwIGF1dG8gMjJweDtcXG5cXG4gIHVsIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcblxcbiAgICBsaSB7XFxuICAgICAgbGlzdC1zdHlsZTogbm9uZTtcXG4gICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgIG1hcmdpbjogMTBweDtcXG5cXG4gICAgICBidXR0b24ge1xcbiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBwYWRkaW5nOiAyMnB4O1xcbiAgICAgICAgY29sb3I6ICMwMDA7XFxuXFxuICAgICAgICAmLmFjdGl2ZSB7XFxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCAjMDAwO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqcz1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9MWUzLGU9NmU0LG49MzZlNSxyPVwibWlsbGlzZWNvbmRcIixpPVwic2Vjb25kXCIscz1cIm1pbnV0ZVwiLHU9XCJob3VyXCIsYT1cImRheVwiLG89XCJ3ZWVrXCIsYz1cIm1vbnRoXCIsZj1cInF1YXJ0ZXJcIixoPVwieWVhclwiLGQ9XCJkYXRlXCIsbD1cIkludmFsaWQgRGF0ZVwiLCQ9L14oXFxkezR9KVstL10/KFxcZHsxLDJ9KT9bLS9dPyhcXGR7MCwyfSlbVHRcXHNdKihcXGR7MSwyfSk/Oj8oXFxkezEsMn0pPzo/KFxcZHsxLDJ9KT9bLjpdPyhcXGQrKT8kLyx5PS9cXFsoW15cXF1dKyldfFl7MSw0fXxNezEsNH18RHsxLDJ9fGR7MSw0fXxIezEsMn18aHsxLDJ9fGF8QXxtezEsMn18c3sxLDJ9fFp7MSwyfXxTU1MvZyxNPXtuYW1lOlwiZW5cIix3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLG1vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksb3JkaW5hbDpmdW5jdGlvbih0KXt2YXIgZT1bXCJ0aFwiLFwic3RcIixcIm5kXCIsXCJyZFwiXSxuPXQlMTAwO3JldHVyblwiW1wiK3QrKGVbKG4tMjApJTEwXXx8ZVtuXXx8ZVswXSkrXCJdXCJ9fSxtPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1TdHJpbmcodCk7cmV0dXJuIXJ8fHIubGVuZ3RoPj1lP3Q6XCJcIitBcnJheShlKzEtci5sZW5ndGgpLmpvaW4obikrdH0sdj17czptLHo6ZnVuY3Rpb24odCl7dmFyIGU9LXQudXRjT2Zmc2V0KCksbj1NYXRoLmFicyhlKSxyPU1hdGguZmxvb3Iobi82MCksaT1uJTYwO3JldHVybihlPD0wP1wiK1wiOlwiLVwiKSttKHIsMixcIjBcIikrXCI6XCIrbShpLDIsXCIwXCIpfSxtOmZ1bmN0aW9uIHQoZSxuKXtpZihlLmRhdGUoKTxuLmRhdGUoKSlyZXR1cm4tdChuLGUpO3ZhciByPTEyKihuLnllYXIoKS1lLnllYXIoKSkrKG4ubW9udGgoKS1lLm1vbnRoKCkpLGk9ZS5jbG9uZSgpLmFkZChyLGMpLHM9bi1pPDAsdT1lLmNsb25lKCkuYWRkKHIrKHM/LTE6MSksYyk7cmV0dXJuKygtKHIrKG4taSkvKHM/aS11OnUtaSkpfHwwKX0sYTpmdW5jdGlvbih0KXtyZXR1cm4gdDwwP01hdGguY2VpbCh0KXx8MDpNYXRoLmZsb29yKHQpfSxwOmZ1bmN0aW9uKHQpe3JldHVybntNOmMseTpoLHc6byxkOmEsRDpkLGg6dSxtOnMsczppLG1zOnIsUTpmfVt0XXx8U3RyaW5nKHR8fFwiXCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLFwiXCIpfSx1OmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10fX0sZz1cImVuXCIsRD17fTtEW2ddPU07dmFyIHA9XCIkaXNEYXlqc09iamVjdFwiLFM9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBffHwhKCF0fHwhdFtwXSl9LHc9ZnVuY3Rpb24gdChlLG4scil7dmFyIGk7aWYoIWUpcmV0dXJuIGc7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBzPWUudG9Mb3dlckNhc2UoKTtEW3NdJiYoaT1zKSxuJiYoRFtzXT1uLGk9cyk7dmFyIHU9ZS5zcGxpdChcIi1cIik7aWYoIWkmJnUubGVuZ3RoPjEpcmV0dXJuIHQodVswXSl9ZWxzZXt2YXIgYT1lLm5hbWU7RFthXT1lLGk9YX1yZXR1cm4hciYmaSYmKGc9aSksaXx8IXImJmd9LE89ZnVuY3Rpb24odCxlKXtpZihTKHQpKXJldHVybiB0LmNsb25lKCk7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIGU/ZTp7fTtyZXR1cm4gbi5kYXRlPXQsbi5hcmdzPWFyZ3VtZW50cyxuZXcgXyhuKX0sYj12O2IubD13LGIuaT1TLGIudz1mdW5jdGlvbih0LGUpe3JldHVybiBPKHQse2xvY2FsZTplLiRMLHV0YzplLiR1LHg6ZS4keCwkb2Zmc2V0OmUuJG9mZnNldH0pfTt2YXIgXz1mdW5jdGlvbigpe2Z1bmN0aW9uIE0odCl7dGhpcy4kTD13KHQubG9jYWxlLG51bGwsITApLHRoaXMucGFyc2UodCksdGhpcy4keD10aGlzLiR4fHx0Lnh8fHt9LHRoaXNbcF09ITB9dmFyIG09TS5wcm90b3R5cGU7cmV0dXJuIG0ucGFyc2U9ZnVuY3Rpb24odCl7dGhpcy4kZD1mdW5jdGlvbih0KXt2YXIgZT10LmRhdGUsbj10LnV0YztpZihudWxsPT09ZSlyZXR1cm4gbmV3IERhdGUoTmFOKTtpZihiLnUoZSkpcmV0dXJuIG5ldyBEYXRlO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIS9aJC9pLnRlc3QoZSkpe3ZhciByPWUubWF0Y2goJCk7aWYocil7dmFyIGk9clsyXS0xfHwwLHM9KHJbN118fFwiMFwiKS5zdWJzdHJpbmcoMCwzKTtyZXR1cm4gbj9uZXcgRGF0ZShEYXRlLlVUQyhyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKSk6bmV3IERhdGUoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscyl9fXJldHVybiBuZXcgRGF0ZShlKX0odCksdGhpcy5pbml0KCl9LG0uaW5pdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuJGQ7dGhpcy4keT10LmdldEZ1bGxZZWFyKCksdGhpcy4kTT10LmdldE1vbnRoKCksdGhpcy4kRD10LmdldERhdGUoKSx0aGlzLiRXPXQuZ2V0RGF5KCksdGhpcy4kSD10LmdldEhvdXJzKCksdGhpcy4kbT10LmdldE1pbnV0ZXMoKSx0aGlzLiRzPXQuZ2V0U2Vjb25kcygpLHRoaXMuJG1zPXQuZ2V0TWlsbGlzZWNvbmRzKCl9LG0uJHV0aWxzPWZ1bmN0aW9uKCl7cmV0dXJuIGJ9LG0uaXNWYWxpZD1mdW5jdGlvbigpe3JldHVybiEodGhpcy4kZC50b1N0cmluZygpPT09bCl9LG0uaXNTYW1lPWZ1bmN0aW9uKHQsZSl7dmFyIG49Tyh0KTtyZXR1cm4gdGhpcy5zdGFydE9mKGUpPD1uJiZuPD10aGlzLmVuZE9mKGUpfSxtLmlzQWZ0ZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gTyh0KTx0aGlzLnN0YXJ0T2YoZSl9LG0uaXNCZWZvcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5lbmRPZihlKTxPKHQpfSxtLiRnPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gYi51KHQpP3RoaXNbZV06dGhpcy5zZXQobix0KX0sbS51bml4PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX0sbS52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQuZ2V0VGltZSgpfSxtLnN0YXJ0T2Y9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9ISFiLnUoZSl8fGUsZj1iLnAodCksbD1mdW5jdGlvbih0LGUpe3ZhciBpPWIudyhuLiR1P0RhdGUuVVRDKG4uJHksZSx0KTpuZXcgRGF0ZShuLiR5LGUsdCksbik7cmV0dXJuIHI/aTppLmVuZE9mKGEpfSwkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGIudyhuLnRvRGF0ZSgpW3RdLmFwcGx5KG4udG9EYXRlKFwic1wiKSwocj9bMCwwLDAsMF06WzIzLDU5LDU5LDk5OV0pLnNsaWNlKGUpKSxuKX0seT10aGlzLiRXLE09dGhpcy4kTSxtPXRoaXMuJEQsdj1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIik7c3dpdGNoKGYpe2Nhc2UgaDpyZXR1cm4gcj9sKDEsMCk6bCgzMSwxMSk7Y2FzZSBjOnJldHVybiByP2woMSxNKTpsKDAsTSsxKTtjYXNlIG86dmFyIGc9dGhpcy4kbG9jYWxlKCkud2Vla1N0YXJ0fHwwLEQ9KHk8Zz95Kzc6eSktZztyZXR1cm4gbChyP20tRDptKyg2LUQpLE0pO2Nhc2UgYTpjYXNlIGQ6cmV0dXJuICQoditcIkhvdXJzXCIsMCk7Y2FzZSB1OnJldHVybiAkKHYrXCJNaW51dGVzXCIsMSk7Y2FzZSBzOnJldHVybiAkKHYrXCJTZWNvbmRzXCIsMik7Y2FzZSBpOnJldHVybiAkKHYrXCJNaWxsaXNlY29uZHNcIiwzKTtkZWZhdWx0OnJldHVybiB0aGlzLmNsb25lKCl9fSxtLmVuZE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXJ0T2YodCwhMSl9LG0uJHNldD1mdW5jdGlvbih0LGUpe3ZhciBuLG89Yi5wKHQpLGY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpLGw9KG49e30sblthXT1mK1wiRGF0ZVwiLG5bZF09ZitcIkRhdGVcIixuW2NdPWYrXCJNb250aFwiLG5baF09ZitcIkZ1bGxZZWFyXCIsblt1XT1mK1wiSG91cnNcIixuW3NdPWYrXCJNaW51dGVzXCIsbltpXT1mK1wiU2Vjb25kc1wiLG5bcl09ZitcIk1pbGxpc2Vjb25kc1wiLG4pW29dLCQ9bz09PWE/dGhpcy4kRCsoZS10aGlzLiRXKTplO2lmKG89PT1jfHxvPT09aCl7dmFyIHk9dGhpcy5jbG9uZSgpLnNldChkLDEpO3kuJGRbbF0oJCkseS5pbml0KCksdGhpcy4kZD15LnNldChkLE1hdGgubWluKHRoaXMuJEQseS5kYXlzSW5Nb250aCgpKSkuJGR9ZWxzZSBsJiZ0aGlzLiRkW2xdKCQpO3JldHVybiB0aGlzLmluaXQoKSx0aGlzfSxtLnNldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmNsb25lKCkuJHNldCh0LGUpfSxtLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1tiLnAodCldKCl9LG0uYWRkPWZ1bmN0aW9uKHIsZil7dmFyIGQsbD10aGlzO3I9TnVtYmVyKHIpO3ZhciAkPWIucChmKSx5PWZ1bmN0aW9uKHQpe3ZhciBlPU8obCk7cmV0dXJuIGIudyhlLmRhdGUoZS5kYXRlKCkrTWF0aC5yb3VuZCh0KnIpKSxsKX07aWYoJD09PWMpcmV0dXJuIHRoaXMuc2V0KGMsdGhpcy4kTStyKTtpZigkPT09aClyZXR1cm4gdGhpcy5zZXQoaCx0aGlzLiR5K3IpO2lmKCQ9PT1hKXJldHVybiB5KDEpO2lmKCQ9PT1vKXJldHVybiB5KDcpO3ZhciBNPShkPXt9LGRbc109ZSxkW3VdPW4sZFtpXT10LGQpWyRdfHwxLG09dGhpcy4kZC5nZXRUaW1lKCkrcipNO3JldHVybiBiLncobSx0aGlzKX0sbS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFkZCgtMSp0LGUpfSxtLmZvcm1hdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy4kbG9jYWxlKCk7aWYoIXRoaXMuaXNWYWxpZCgpKXJldHVybiBuLmludmFsaWREYXRlfHxsO3ZhciByPXR8fFwiWVlZWS1NTS1ERFRISDptbTpzc1pcIixpPWIueih0aGlzKSxzPXRoaXMuJEgsdT10aGlzLiRtLGE9dGhpcy4kTSxvPW4ud2Vla2RheXMsYz1uLm1vbnRocyxmPW4ubWVyaWRpZW0saD1mdW5jdGlvbih0LG4saSxzKXtyZXR1cm4gdCYmKHRbbl18fHQoZSxyKSl8fGlbbl0uc2xpY2UoMCxzKX0sZD1mdW5jdGlvbih0KXtyZXR1cm4gYi5zKHMlMTJ8fDEyLHQsXCIwXCIpfSwkPWZ8fGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10PDEyP1wiQU1cIjpcIlBNXCI7cmV0dXJuIG4/ci50b0xvd2VyQ2FzZSgpOnJ9O3JldHVybiByLnJlcGxhY2UoeSwoZnVuY3Rpb24odCxyKXtyZXR1cm4gcnx8ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcIllZXCI6cmV0dXJuIFN0cmluZyhlLiR5KS5zbGljZSgtMik7Y2FzZVwiWVlZWVwiOnJldHVybiBiLnMoZS4keSw0LFwiMFwiKTtjYXNlXCJNXCI6cmV0dXJuIGErMTtjYXNlXCJNTVwiOnJldHVybiBiLnMoYSsxLDIsXCIwXCIpO2Nhc2VcIk1NTVwiOnJldHVybiBoKG4ubW9udGhzU2hvcnQsYSxjLDMpO2Nhc2VcIk1NTU1cIjpyZXR1cm4gaChjLGEpO2Nhc2VcIkRcIjpyZXR1cm4gZS4kRDtjYXNlXCJERFwiOnJldHVybiBiLnMoZS4kRCwyLFwiMFwiKTtjYXNlXCJkXCI6cmV0dXJuIFN0cmluZyhlLiRXKTtjYXNlXCJkZFwiOnJldHVybiBoKG4ud2Vla2RheXNNaW4sZS4kVyxvLDIpO2Nhc2VcImRkZFwiOnJldHVybiBoKG4ud2Vla2RheXNTaG9ydCxlLiRXLG8sMyk7Y2FzZVwiZGRkZFwiOnJldHVybiBvW2UuJFddO2Nhc2VcIkhcIjpyZXR1cm4gU3RyaW5nKHMpO2Nhc2VcIkhIXCI6cmV0dXJuIGIucyhzLDIsXCIwXCIpO2Nhc2VcImhcIjpyZXR1cm4gZCgxKTtjYXNlXCJoaFwiOnJldHVybiBkKDIpO2Nhc2VcImFcIjpyZXR1cm4gJChzLHUsITApO2Nhc2VcIkFcIjpyZXR1cm4gJChzLHUsITEpO2Nhc2VcIm1cIjpyZXR1cm4gU3RyaW5nKHUpO2Nhc2VcIm1tXCI6cmV0dXJuIGIucyh1LDIsXCIwXCIpO2Nhc2VcInNcIjpyZXR1cm4gU3RyaW5nKGUuJHMpO2Nhc2VcInNzXCI6cmV0dXJuIGIucyhlLiRzLDIsXCIwXCIpO2Nhc2VcIlNTU1wiOnJldHVybiBiLnMoZS4kbXMsMyxcIjBcIik7Y2FzZVwiWlwiOnJldHVybiBpfXJldHVybiBudWxsfSh0KXx8aS5yZXBsYWNlKFwiOlwiLFwiXCIpfSkpfSxtLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSxtLmRpZmY9ZnVuY3Rpb24ocixkLGwpe3ZhciAkLHk9dGhpcyxNPWIucChkKSxtPU8ociksdj0obS51dGNPZmZzZXQoKS10aGlzLnV0Y09mZnNldCgpKSplLGc9dGhpcy1tLEQ9ZnVuY3Rpb24oKXtyZXR1cm4gYi5tKHksbSl9O3N3aXRjaChNKXtjYXNlIGg6JD1EKCkvMTI7YnJlYWs7Y2FzZSBjOiQ9RCgpO2JyZWFrO2Nhc2UgZjokPUQoKS8zO2JyZWFrO2Nhc2UgbzokPShnLXYpLzYwNDhlNTticmVhaztjYXNlIGE6JD0oZy12KS84NjRlNTticmVhaztjYXNlIHU6JD1nL247YnJlYWs7Y2FzZSBzOiQ9Zy9lO2JyZWFrO2Nhc2UgaTokPWcvdDticmVhaztkZWZhdWx0OiQ9Z31yZXR1cm4gbD8kOmIuYSgkKX0sbS5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKGMpLiREfSxtLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gRFt0aGlzLiRMXX0sbS5sb2NhbGU9ZnVuY3Rpb24odCxlKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgbj10aGlzLmNsb25lKCkscj13KHQsZSwhMCk7cmV0dXJuIHImJihuLiRMPXIpLG59LG0uY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gYi53KHRoaXMuJGQsdGhpcyl9LG0udG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKX0sbS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9LG0udG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSxtLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sTX0oKSxrPV8ucHJvdG90eXBlO3JldHVybiBPLnByb3RvdHlwZT1rLFtbXCIkbXNcIixyXSxbXCIkc1wiLGldLFtcIiRtXCIsc10sW1wiJEhcIix1XSxbXCIkV1wiLGFdLFtcIiRNXCIsY10sW1wiJHlcIixoXSxbXCIkRFwiLGRdXS5mb3JFYWNoKChmdW5jdGlvbih0KXtrW3RbMV1dPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLiRnKGUsdFswXSx0WzFdKX19KSksTy5leHRlbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC4kaXx8KHQoZSxfLE8pLHQuJGk9ITApLE99LE8ubG9jYWxlPXcsTy5pc0RheWpzPVMsTy51bml4PWZ1bmN0aW9uKHQpe3JldHVybiBPKDFlMyp0KX0sTy5lbj1EW2ddLE8uTHM9RCxPLnA9e30sT30pKTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTooZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmRheWpzX3BsdWdpbl9pc1NhbWVPckFmdGVyPXQoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtyZXR1cm4gZnVuY3Rpb24oZSx0KXt0LnByb3RvdHlwZS5pc1NhbWVPckFmdGVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuaXNTYW1lKGUsdCl8fHRoaXMuaXNBZnRlcihlLHQpfX19KSk7IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6KHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5kYXlqc19wbHVnaW5fdGltZXpvbmU9ZSgpfSh0aGlzLChmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciB0PXt5ZWFyOjAsbW9udGg6MSxkYXk6Mixob3VyOjMsbWludXRlOjQsc2Vjb25kOjV9LGU9e307cmV0dXJuIGZ1bmN0aW9uKG4saSxvKXt2YXIgcixhPWZ1bmN0aW9uKHQsbixpKXt2b2lkIDA9PT1pJiYoaT17fSk7dmFyIG89bmV3IERhdGUodCkscj1mdW5jdGlvbih0LG4pe3ZvaWQgMD09PW4mJihuPXt9KTt2YXIgaT1uLnRpbWVab25lTmFtZXx8XCJzaG9ydFwiLG89dCtcInxcIitpLHI9ZVtvXTtyZXR1cm4gcnx8KHI9bmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXCJlbi1VU1wiLHtob3VyMTI6ITEsdGltZVpvbmU6dCx5ZWFyOlwibnVtZXJpY1wiLG1vbnRoOlwiMi1kaWdpdFwiLGRheTpcIjItZGlnaXRcIixob3VyOlwiMi1kaWdpdFwiLG1pbnV0ZTpcIjItZGlnaXRcIixzZWNvbmQ6XCIyLWRpZ2l0XCIsdGltZVpvbmVOYW1lOml9KSxlW29dPXIpLHJ9KG4saSk7cmV0dXJuIHIuZm9ybWF0VG9QYXJ0cyhvKX0sdT1mdW5jdGlvbihlLG4pe2Zvcih2YXIgaT1hKGUsbikscj1bXSx1PTA7dTxpLmxlbmd0aDt1Kz0xKXt2YXIgZj1pW3VdLHM9Zi50eXBlLG09Zi52YWx1ZSxjPXRbc107Yz49MCYmKHJbY109cGFyc2VJbnQobSwxMCkpfXZhciBkPXJbM10sbD0yND09PWQ/MDpkLGg9clswXStcIi1cIityWzFdK1wiLVwiK3JbMl0rXCIgXCIrbCtcIjpcIityWzRdK1wiOlwiK3JbNV0rXCI6MDAwXCIsdj0rZTtyZXR1cm4oby51dGMoaCkudmFsdWVPZigpLSh2LT12JTFlMykpLzZlNH0sZj1pLnByb3RvdHlwZTtmLnR6PWZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09dCYmKHQ9cik7dmFyIG4saT10aGlzLnV0Y09mZnNldCgpLGE9dGhpcy50b0RhdGUoKSx1PWEudG9Mb2NhbGVTdHJpbmcoXCJlbi1VU1wiLHt0aW1lWm9uZTp0fSksZj1NYXRoLnJvdW5kKChhLW5ldyBEYXRlKHUpKS8xZTMvNjApLHM9MTUqLU1hdGgucm91bmQoYS5nZXRUaW1lem9uZU9mZnNldCgpLzE1KS1mO2lmKCFOdW1iZXIocykpbj10aGlzLnV0Y09mZnNldCgwLGUpO2Vsc2UgaWYobj1vKHUse2xvY2FsZTp0aGlzLiRMfSkuJHNldChcIm1pbGxpc2Vjb25kXCIsdGhpcy4kbXMpLnV0Y09mZnNldChzLCEwKSxlKXt2YXIgbT1uLnV0Y09mZnNldCgpO249bi5hZGQoaS1tLFwibWludXRlXCIpfXJldHVybiBuLiR4LiR0aW1lem9uZT10LG59LGYub2Zmc2V0TmFtZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLiR4LiR0aW1lem9uZXx8by50ei5ndWVzcygpLG49YSh0aGlzLnZhbHVlT2YoKSxlLHt0aW1lWm9uZU5hbWU6dH0pLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVyblwidGltZXpvbmVuYW1lXCI9PT10LnR5cGUudG9Mb3dlckNhc2UoKX0pKTtyZXR1cm4gbiYmbi52YWx1ZX07dmFyIHM9Zi5zdGFydE9mO2Yuc3RhcnRPZj1mdW5jdGlvbih0LGUpe2lmKCF0aGlzLiR4fHwhdGhpcy4keC4kdGltZXpvbmUpcmV0dXJuIHMuY2FsbCh0aGlzLHQsZSk7dmFyIG49byh0aGlzLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW06c3M6U1NTXCIpLHtsb2NhbGU6dGhpcy4kTH0pO3JldHVybiBzLmNhbGwobix0LGUpLnR6KHRoaXMuJHguJHRpbWV6b25lLCEwKX0sby50ej1mdW5jdGlvbih0LGUsbil7dmFyIGk9biYmZSxhPW58fGV8fHIsZj11KCtvKCksYSk7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIG8odCkudHooYSk7dmFyIHM9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPXQtNjAqZSoxZTMsbz11KGksbik7aWYoZT09PW8pcmV0dXJuW2ksZV07dmFyIHI9dShpLT02MCooby1lKSoxZTMsbik7cmV0dXJuIG89PT1yP1tpLG9dOlt0LTYwKk1hdGgubWluKG8scikqMWUzLE1hdGgubWF4KG8scildfShvLnV0Yyh0LGkpLnZhbHVlT2YoKSxmLGEpLG09c1swXSxjPXNbMV0sZD1vKG0pLnV0Y09mZnNldChjKTtyZXR1cm4gZC4keC4kdGltZXpvbmU9YSxkfSxvLnR6Lmd1ZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZX0sby50ei5zZXREZWZhdWx0PWZ1bmN0aW9uKHQpe3I9dH19fSkpOyIsIiFmdW5jdGlvbih0LGkpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWkoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKGkpOih0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6dHx8c2VsZikuZGF5anNfcGx1Z2luX3V0Yz1pKCl9KHRoaXMsKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9XCJtaW51dGVcIixpPS9bKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9nLGU9LyhbKy1dfFxcZFxcZCkvZztyZXR1cm4gZnVuY3Rpb24ocyxmLG4pe3ZhciB1PWYucHJvdG90eXBlO24udXRjPWZ1bmN0aW9uKHQpe3ZhciBpPXtkYXRlOnQsdXRjOiEwLGFyZ3M6YXJndW1lbnRzfTtyZXR1cm4gbmV3IGYoaSl9LHUudXRjPWZ1bmN0aW9uKGkpe3ZhciBlPW4odGhpcy50b0RhdGUoKSx7bG9jYWxlOnRoaXMuJEwsdXRjOiEwfSk7cmV0dXJuIGk/ZS5hZGQodGhpcy51dGNPZmZzZXQoKSx0KTplfSx1LmxvY2FsPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcy50b0RhdGUoKSx7bG9jYWxlOnRoaXMuJEwsdXRjOiExfSl9O3ZhciBvPXUucGFyc2U7dS5wYXJzZT1mdW5jdGlvbih0KXt0LnV0YyYmKHRoaXMuJHU9ITApLHRoaXMuJHV0aWxzKCkudSh0LiRvZmZzZXQpfHwodGhpcy4kb2Zmc2V0PXQuJG9mZnNldCksby5jYWxsKHRoaXMsdCl9O3ZhciByPXUuaW5pdDt1LmluaXQ9ZnVuY3Rpb24oKXtpZih0aGlzLiR1KXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRVVENGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRVVENNb250aCgpLHRoaXMuJEQ9dC5nZXRVVENEYXRlKCksdGhpcy4kVz10LmdldFVUQ0RheSgpLHRoaXMuJEg9dC5nZXRVVENIb3VycygpLHRoaXMuJG09dC5nZXRVVENNaW51dGVzKCksdGhpcy4kcz10LmdldFVUQ1NlY29uZHMoKSx0aGlzLiRtcz10LmdldFVUQ01pbGxpc2Vjb25kcygpfWVsc2Ugci5jYWxsKHRoaXMpfTt2YXIgYT11LnV0Y09mZnNldDt1LnV0Y09mZnNldD1mdW5jdGlvbihzLGYpe3ZhciBuPXRoaXMuJHV0aWxzKCkudTtpZihuKHMpKXJldHVybiB0aGlzLiR1PzA6bih0aGlzLiRvZmZzZXQpP2EuY2FsbCh0aGlzKTp0aGlzLiRvZmZzZXQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHMmJihzPWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PVwiXCIpO3ZhciBzPXQubWF0Y2goaSk7aWYoIXMpcmV0dXJuIG51bGw7dmFyIGY9KFwiXCIrc1swXSkubWF0Y2goZSl8fFtcIi1cIiwwLDBdLG49ZlswXSx1PTYwKitmWzFdKyArZlsyXTtyZXR1cm4gMD09PXU/MDpcIitcIj09PW4/dTotdX0ocyksbnVsbD09PXMpKXJldHVybiB0aGlzO3ZhciB1PU1hdGguYWJzKHMpPD0xNj82MCpzOnMsbz10aGlzO2lmKGYpcmV0dXJuIG8uJG9mZnNldD11LG8uJHU9MD09PXMsbztpZigwIT09cyl7dmFyIHI9dGhpcy4kdT90aGlzLnRvRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCk6LTEqdGhpcy51dGNPZmZzZXQoKTsobz10aGlzLmxvY2FsKCkuYWRkKHUrcix0KSkuJG9mZnNldD11LG8uJHguJGxvY2FsT2Zmc2V0PXJ9ZWxzZSBvPXRoaXMudXRjKCk7cmV0dXJuIG99O3ZhciBoPXUuZm9ybWF0O3UuZm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBpPXR8fCh0aGlzLiR1P1wiWVlZWS1NTS1ERFRISDptbTpzc1taXVwiOlwiXCIpO3JldHVybiBoLmNhbGwodGhpcyxpKX0sdS52YWx1ZU9mPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kdXRpbHMoKS51KHRoaXMuJG9mZnNldCk/MDp0aGlzLiRvZmZzZXQrKHRoaXMuJHguJGxvY2FsT2Zmc2V0fHx0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkpO3JldHVybiB0aGlzLiRkLnZhbHVlT2YoKS02ZTQqdH0sdS5pc1VUQz1mdW5jdGlvbigpe3JldHVybiEhdGhpcy4kdX0sdS50b0lTT1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCl9LHUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b0RhdGUoKS50b1VUQ1N0cmluZygpfTt2YXIgbD11LnRvRGF0ZTt1LnRvRGF0ZT1mdW5jdGlvbih0KXtyZXR1cm5cInNcIj09PXQmJnRoaXMuJG9mZnNldD9uKHRoaXMuZm9ybWF0KFwiWVlZWS1NTS1ERCBISDptbTpzczpTU1NcIikpLnRvRGF0ZSgpOmwuY2FsbCh0aGlzKX07dmFyIGM9dS5kaWZmO3UuZGlmZj1mdW5jdGlvbih0LGksZSl7aWYodCYmdGhpcy4kdT09PXQuJHUpcmV0dXJuIGMuY2FsbCh0aGlzLHQsaSxlKTt2YXIgcz10aGlzLmxvY2FsKCksZj1uKHQpLmxvY2FsKCk7cmV0dXJuIGMuY2FsbChzLGYsaSxlKX19fSkpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gbmEoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG9hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8b2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB0KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB0KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHQoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHFhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocWEsXG5yYSk7eltiXT1uZXcgdChiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHFhLHJhKTt6W2JdPW5ldyB0KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdChcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdChhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBzYShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlwYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHRhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHVhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHhhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksR2E9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSWE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEphKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1JYSYmYVtJYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLEthO2Z1bmN0aW9uIExhKGEpe2lmKHZvaWQgMD09PUthKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0thPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitLYSthfXZhciBNYT0hMTtcbmZ1bmN0aW9uIE5hKGEsYil7aWYoIWF8fE1hKXJldHVyblwiXCI7TWE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TWE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9MYShhKTpcIlwifVxuZnVuY3Rpb24gT2EoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIExhKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTGEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIExhKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTGEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU5hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU5hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU5hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUGEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB3YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB2YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgemE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgeGE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBEYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBBYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBDYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBGYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UGEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBHYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUGEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFFhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFBhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXhhP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFJhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFNhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1TYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVWEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVRhKGEpKX1mdW5jdGlvbiBWYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9U2EoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBXYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBYYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9UmEobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBaYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnNhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiAkYShhLGIpe1phKGEsYik7dmFyIGM9UmEoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsUmEoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxXYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGRiPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBlYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrUmEoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGZiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gZ2IoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGRiKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpSYShjKX19XG5mdW5jdGlvbiBoYihhLGIpe3ZhciBjPVJhKGIudmFsdWUpLGQ9UmEoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBpYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGpiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBrYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/amIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbGIsbWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bGI9bGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gbmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBvYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxwYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMob2IpLmZvckVhY2goZnVuY3Rpb24oYSl7cGIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtvYltiXT1vYlthXX0pfSk7ZnVuY3Rpb24gcWIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fG9iLmhhc093blByb3BlcnR5KGEpJiZvYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiByYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1xYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBzYj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdGIoYSxiKXtpZihiKXtpZihzYlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdWIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB2Yj1udWxsO2Z1bmN0aW9uIHdiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeGI9bnVsbCx5Yj1udWxsLHpiPW51bGw7XG5mdW5jdGlvbiBBYihhKXtpZihhPUJiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeGIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1DYihiKSx4YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYihhKXt5Yj96Yj96Yi5wdXNoKGEpOnpiPVthXTp5Yj1hfWZ1bmN0aW9uIEViKCl7aWYoeWIpe3ZhciBhPXliLGI9emI7emI9eWI9bnVsbDtBYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQWIoYlthXSl9fWZ1bmN0aW9uIEZiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2IoKXt9dmFyIEhiPSExO2Z1bmN0aW9uIEliKGEsYixjKXtpZihIYilyZXR1cm4gYShiLGMpO0hiPSEwO3RyeXtyZXR1cm4gRmIoYSxiLGMpfWZpbmFsbHl7aWYoSGI9ITEsbnVsbCE9PXlifHxudWxsIT09emIpR2IoKSxFYigpfX1cbmZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Q2IoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBLYj0hMTtpZihpYSl0cnl7dmFyIExiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShMYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7S2I9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTGIsTGIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLExiLExiKX1jYXRjaChhKXtLYj0hMX1mdW5jdGlvbiBNYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgTmI9ITEsT2I9bnVsbCxQYj0hMSxRYj1udWxsLFJiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe05iPSEwO09iPWF9fTtmdW5jdGlvbiBTYihhLGIsYyxkLGUsZixnLGgsayl7TmI9ITE7T2I9bnVsbDtNYi5hcHBseShSYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihOYil7aWYoTmIpe3ZhciBsPU9iO05iPSExO09iPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1BifHwoUGI9ITAsUWI9bCl9fWZ1bmN0aW9uIFViKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gVmIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBXYihhKXtpZihVYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBYYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1VYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBXYihlKSxhO2lmKGY9PT1kKXJldHVybiBXYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFliKGEpe2E9WGIoYSk7cmV0dXJuIG51bGwhPT1hP1piKGEpOm51bGx9ZnVuY3Rpb24gWmIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPVpiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyICRiPWJhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYWM9YmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssYmM9YmEudW5zdGFibGVfc2hvdWxkWWllbGQsY2M9YmEudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9YmEudW5zdGFibGVfbm93LGRjPWJhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGVjPWJhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGZjPWJhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGdjPWJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGhjPWJhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGljPWJhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxqYz1udWxsLGtjPW51bGw7ZnVuY3Rpb24gbGMoYSl7aWYoa2MmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Db21taXRGaWJlclJvb3QoamMsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG5jPU1hdGguY2x6MzI/TWF0aC5jbHozMjptYyxvYz1NYXRoLmxvZyxwYz1NYXRoLkxOMjtmdW5jdGlvbiBtYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShvYyhhKS9wY3wwKXwwfXZhciBxYz02NCxyYz00MTk0MzA0O1xuZnVuY3Rpb24gc2MoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdGMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXNjKGgpOihmJj1nLDAhPT1mJiYoZD1zYyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9c2MoZyk6MCE9PWYmJihkPXNjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtbmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB1YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHZjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1uYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT11YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24gd2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHhjKCl7dmFyIGE9cWM7cWM8PD0xOzA9PT0ocWMmNDE5NDI0MCkmJihxYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24geWMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiB6YyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtbmMoYik7YVtiXT1jfWZ1bmN0aW9uIEFjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1uYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1uYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIENjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIERjLEVjLEZjLEdjLEhjLEljPSExLEpjPVtdLEtjPW51bGwsTGM9bnVsbCxNYz1udWxsLE5jPW5ldyBNYXAsT2M9bmV3IE1hcCxQYz1bXSxRYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBSYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOktjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6TmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBTYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUJiKGIpLG51bGwhPT1iJiZFYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBLYz1TYyhLYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTGM9U2MoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE1jPVNjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7TmMuc2V0KGYsU2MoTmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLE9jLnNldChmLFNjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFVjKGEpe3ZhciBiPVZjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VWIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9VmIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SGMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0ZjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1YYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt2Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7dmI9bnVsbH1lbHNlIHJldHVybiBiPUJiKGMpLG51bGwhPT1iJiZFYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBZYyhhLGIsYyl7V2MoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFpjKCl7SWM9ITE7bnVsbCE9PUtjJiZXYyhLYykmJihLYz1udWxsKTtudWxsIT09TGMmJldjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmV2MoTWMpJiYoTWM9bnVsbCk7TmMuZm9yRWFjaChZYyk7T2MuZm9yRWFjaChZYyl9XG5mdW5jdGlvbiAkYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSWN8fChJYz0hMCxiYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFpjKSkpfVxuZnVuY3Rpb24gYWQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gJGMoYixhKX1pZigwPEpjLmxlbmd0aCl7JGMoSmNbMF0sYSk7Zm9yKHZhciBjPTE7YzxKYy5sZW5ndGg7YysrKXt2YXIgZD1KY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUtjJiYkYyhLYyxhKTtudWxsIT09TGMmJiRjKExjLGEpO251bGwhPT1NYyYmJGMoTWMsYSk7TmMuZm9yRWFjaChiKTtPYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxQYy5sZW5ndGg7YysrKWQ9UGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFBjLmxlbmd0aCYmKGM9UGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVWMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZQYy5zaGlmdCgpfXZhciBiZD10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxjZD0hMDtcbmZ1bmN0aW9uIGRkKGEsYixjLGQpe3ZhciBlPUMsZj1iZC50cmFuc2l0aW9uO2JkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGVkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGJkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZmQoYSxiLGMsZCl7dmFyIGU9QyxmPWJkLnRyYW5zaXRpb247YmQudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZWQoYSxiLGMsZCl9ZmluYWxseXtDPWUsYmQudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGVkKGEsYixjLGQpe2lmKGNkKXt2YXIgZT1YYyhhLGIsYyxkKTtpZihudWxsPT09ZSlnZChhLGIsZCxoZCxjKSxSYyhhLGQpO2Vsc2UgaWYoVGMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoUmMoYSxkKSxiJjQmJi0xPFFjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1CYihlKTtudWxsIT09ZiYmRGMoZik7Zj1YYyhhLGIsYyxkKTtudWxsPT09ZiYmZ2QoYSxiLGQsaGQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgZ2QoYSxiLGQsbnVsbCxjKX19dmFyIGhkPW51bGw7XG5mdW5jdGlvbiBYYyhhLGIsYyxkKXtoZD1udWxsO2E9d2IoZCk7YT1WYyhhKTtpZihudWxsIT09YSlpZihiPVViKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVZiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtoZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gaWQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZGMoKSl7Y2FzZSBlYzpyZXR1cm4gMTtjYXNlIGZjOnJldHVybiA0O2Nhc2UgZ2M6Y2FzZSBoYzpyZXR1cm4gMTY7Y2FzZSBpYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIgamQ9bnVsbCxrZD1udWxsLGxkPW51bGw7ZnVuY3Rpb24gbWQoKXtpZihsZClyZXR1cm4gbGQ7dmFyIGEsYj1rZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBsZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gbmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gb2QoKXtyZXR1cm4hMH1mdW5jdGlvbiBwZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcWQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/b2Q6cGQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1vZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1vZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpvZH0pO3JldHVybiBifVxudmFyIHJkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHNkPXFkKHJkKSx0ZD1BKHt9LHJkLHt2aWV3OjAsZGV0YWlsOjB9KSx1ZD1xZCh0ZCksdmQsd2QseGQsemQ9QSh7fSx0ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT14ZCYmKHhkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh2ZD1hLnNjcmVlblgteGQuc2NyZWVuWCx3ZD1hLnNjcmVlblkteGQuc2NyZWVuWSk6d2Q9dmQ9MCx4ZD1hKTtyZXR1cm4gdmR9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp3ZH19KSxBZD1xZCh6ZCksQmQ9QSh7fSx6ZCx7ZGF0YVRyYW5zZmVyOjB9KSxDZD1xZChCZCksRGQ9QSh7fSx0ZCx7cmVsYXRlZFRhcmdldDowfSksRWQ9cWQoRGQpLEZkPUEoe30scmQse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEdkPXFkKEZkKSxIZD1BKHt9LHJkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSWQ9cWQoSGQpLEpkPUEoe30scmQse2RhdGE6MH0pLEtkPXFkKEpkKSxMZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxNZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sTmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIE9kKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9TmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB5ZCgpe3JldHVybiBPZH1cbnZhciBQZD1BKHt9LHRkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPUxkW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW5kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9NZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnlkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9uZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP25kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUWQ9cWQoUGQpLFJkPUEoe30semQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksU2Q9cWQoUmQpLFRkPUEoe30sdGQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp5ZH0pLFVkPXFkKFRkKSxWZD1BKHt9LHJkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFdkPXFkKFZkKSxYZD1BKHt9LHpkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWWQ9cWQoWGQpLFpkPVs5LDEzLDI3LDMyXSwkZD1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYWU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYWU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgYmU9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFhZSxjZT1pYSYmKCEkZHx8YWUmJjg8YWUmJjExPj1hZSksZGU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZWU9ITE7XG5mdW5jdGlvbiBmZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PVpkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGdlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGhlPSExO2Z1bmN0aW9uIGllKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBnZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZWU9ITA7cmV0dXJuIGRlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWRlJiZlZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBqZShhLGIpe2lmKGhlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCEkZCYmZmUoYSxiKT8oYT1tZCgpLGxkPWtkPWpkPW51bGwsaGU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGNlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBrZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBsZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWtlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBtZShhLGIsYyxkKXtEYihkKTtiPW5lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgc2QoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgb2U9bnVsbCxwZT1udWxsO2Z1bmN0aW9uIHFlKGEpe3JlKGEsMCl9ZnVuY3Rpb24gc2UoYSl7dmFyIGI9dGUoYSk7aWYoVmEoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB1ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB2ZT0hMTtpZihpYSl7dmFyIHdlO2lmKGlhKXt2YXIgeGU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheGUpe3ZhciB5ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3llLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHllLm9uaW5wdXR9d2U9eGV9ZWxzZSB3ZT0hMTt2ZT13ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiB6ZSgpe29lJiYob2UuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpLHBlPW9lPW51bGwpfWZ1bmN0aW9uIEFlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZzZShwZSkpe3ZhciBiPVtdO21lKGIscGUsYSx3YihhKSk7SWIocWUsYil9fVxuZnVuY3Rpb24gQmUoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oemUoKSxvZT1iLHBlPWMsb2UuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQWUpKTpcImZvY3Vzb3V0XCI9PT1hJiZ6ZSgpfWZ1bmN0aW9uIENlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHNlKHBlKX1mdW5jdGlvbiBEZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHNlKGIpfWZ1bmN0aW9uIEZlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgR2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6RmU7XG5mdW5jdGlvbiBIZShhLGIpe2lmKEdlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhR2UoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZShhLGIpe3ZhciBjPUllKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUllKGMpfX1mdW5jdGlvbiBLZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0tlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIExlKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVdhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVdhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBOZShhKXt2YXIgYj1MZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmS2UoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk1lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUplKGMsZik7dmFyIGc9SmUoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBPZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFBlPW51bGwsUWU9bnVsbCxSZT1udWxsLFNlPSExO1xuZnVuY3Rpb24gVGUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1NlfHxudWxsPT1QZXx8UGUhPT1XYShkKXx8KGQ9UGUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTWUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxSZSYmSGUoUmUsZCl8fChSZT1kLGQ9bmUoUWUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgc2QoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVBlKSkpfVxuZnVuY3Rpb24gVWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmU9e2FuaW1hdGlvbmVuZDpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlVlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlVlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2U9e30sWGU9e307XG5pYSYmKFhlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWUoYSl7aWYoV2VbYV0pcmV0dXJuIFdlW2FdO2lmKCFWZVthXSlyZXR1cm4gYTt2YXIgYj1WZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYZSlyZXR1cm4gV2VbYV09YltjXTtyZXR1cm4gYX12YXIgWmU9WWUoXCJhbmltYXRpb25lbmRcIiksJGU9WWUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWY9WWUoXCJhbmltYXRpb25zdGFydFwiKSxiZj1ZZShcInRyYW5zaXRpb25lbmRcIiksY2Y9bmV3IE1hcCxkZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWYoYSxiKXtjZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBmZj0wO2ZmPGRmLmxlbmd0aDtmZisrKXt2YXIgZ2Y9ZGZbZmZdLGhmPWdmLnRvTG93ZXJDYXNlKCksamY9Z2ZbMF0udG9VcHBlckNhc2UoKStnZi5zbGljZSgxKTtlZihoZixcIm9uXCIramYpfWVmKFplLFwib25BbmltYXRpb25FbmRcIik7ZWYoJGUsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtlZihhZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZWYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtlZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZWYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2VmKGJmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBrZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGxmPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGtmKSk7XG5mdW5jdGlvbiBtZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztUYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gcmUoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTttZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO21mKGUsaCxsKTtmPWt9fX1pZihQYil0aHJvdyBhPVFiLFBiPSExLFFiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltuZl07dm9pZCAwPT09YyYmKGM9YltuZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChvZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtvZihjLGEsZCxiKX12YXIgcWY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiByZihhKXtpZighYVtxZl0pe2FbcWZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihsZi5oYXMoYil8fHBmKGIsITEsYSkscGYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltxZl18fChiW3FmXT0hMCxwZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBvZihhLGIsYyxkKXtzd2l0Y2goaWQoYikpe2Nhc2UgMTp2YXIgZT1kZDticmVhaztjYXNlIDQ6ZT1mZDticmVhaztkZWZhdWx0OmU9ZWR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUtifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGdkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9VmMoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUliKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXdiKGMpLGc9W107XG5hOnt2YXIgaD1jZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9c2QsbT1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09bmQoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UWQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjptPVwiZm9jdXNcIjtrPUVkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm09XCJibHVyXCI7az1FZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUVkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1BZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuQ2Q7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1VZDticmVhaztjYXNlIFplOmNhc2UgJGU6Y2FzZSBhZjprPUdkO2JyZWFrO2Nhc2UgYmY6az1XZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az11ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVlkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SWQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1TZH12YXIgdz0wIT09KGImNCksSj0hdyYmXCJzY3JvbGxcIj09PWEsdj13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB4PWQscjtudWxsIT09XG54Oyl7cj14O3ZhciBGPXIuc3RhdGVOb2RlOzU9PT1yLnRhZyYmbnVsbCE9PUYmJihyPUYsbnVsbCE9PXYmJihGPUpiKHgsdiksbnVsbCE9RiYmdy5wdXNoKHNmKHgsRixyKSkpKTtpZihKKWJyZWFrO3g9eC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCxtLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09dmImJihtPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihWYyhtKXx8bVt0Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihtPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG09bT9WYyhtKTpudWxsLG51bGwhPT1cbm0mJihKPVViKG0pLG0hPT1KfHw1IT09bS50YWcmJjYhPT1tLnRhZykpbT1udWxsfWVsc2Ugaz1udWxsLG09ZDtpZihrIT09bSl7dz1BZDtGPVwib25Nb3VzZUxlYXZlXCI7dj1cIm9uTW91c2VFbnRlclwiO3g9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVNkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHY9XCJvblBvaW50ZXJFbnRlclwiLHg9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dGUoayk7cj1udWxsPT1tP2g6dGUobSk7aD1uZXcgdyhGLHgrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD1yO0Y9bnVsbDtWYyhlKT09PWQmJih3PW5ldyB3KHYseCtcImVudGVyXCIsbSxjLGUpLHcudGFyZ2V0PXIsdy5yZWxhdGVkVGFyZ2V0PUosRj13KTtKPUY7aWYoayYmbSliOnt3PWs7dj1tO3g9MDtmb3Iocj13O3I7cj11ZihyKSl4Kys7cj0wO2ZvcihGPXY7RjtGPXVmKEYpKXIrKztmb3IoOzA8eC1yOyl3PXVmKHcpLHgtLTtmb3IoOzA8ci14Oyl2PVxudWYodiksci0tO2Zvcig7eC0tOyl7aWYodz09PXZ8fG51bGwhPT12JiZ3PT09di5hbHRlcm5hdGUpYnJlYWsgYjt3PXVmKHcpO3Y9dWYodil9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZ2ZihnLGgsayx3LCExKTtudWxsIT09bSYmbnVsbCE9PUomJnZmKGcsSixtLHcsITApfX19YTp7aD1kP3RlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIFo9dWU7ZWxzZSBpZihsZShoKSlpZih2ZSlaPUVlO2Vsc2V7Wj1DZTt2YXIgeWE9QmV9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihaPURlKTtpZihaJiYoWj1aKGEsZCkpKXttZShnLFosYyxlKTticmVhayBhfXlhJiZ5YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHlhPWguX3dyYXBwZXJTdGF0ZSkmJlxueWEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfXlhPWQ/dGUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKGxlKHlhKXx8XCJ0cnVlXCI9PT15YS5jb250ZW50RWRpdGFibGUpUGU9eWEsUWU9ZCxSZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlJlPVFlPVBlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlNlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpTZT0hMTtUZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKE9lKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VGUoZyxjLGUpfXZhciBhYjtpZigkZCliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgY2E9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWNhPXZvaWQgMH1lbHNlIGhlP2ZlKGEsYykmJihjYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihjYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtjYSYmKGNlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGhlfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09Y2E/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1jYSYmaGUmJihhYj1tZCgpKTooamQ9ZSxrZD1cInZhbHVlXCJpbiBqZD9qZC52YWx1ZTpqZC50ZXh0Q29udGVudCxoZT0hMCkpLHlhPW5lKGQsY2EpLDA8eWEubGVuZ3RoJiYoY2E9bmV3IEtkKGNhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6Y2EsbGlzdGVuZXJzOnlhfSksYWI/Y2EuZGF0YT1hYjooYWI9Z2UoYyksbnVsbCE9PWFiJiYoY2EuZGF0YT1hYikpKSk7aWYoYWI9YmU/aWUoYSxjKTpqZShhLGMpKWQ9bmUoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgS2QoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9YWIpfXJlKGcsYil9KX1mdW5jdGlvbiBzZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG5lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9SmIoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoc2YoYSxmLGUpKSxmPUpiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHNmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdWYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHZmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9SmIoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoc2YoYyxrLGgpKSk6ZXx8KGs9SmIoYyxmKSxudWxsIT1rJiZnLnB1c2goc2YoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgd2Y9L1xcclxcbj8vZyx4Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24geWYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh3ZixcIlxcblwiKS5yZXBsYWNlKHhmLFwiXCIpfWZ1bmN0aW9uIHpmKGEsYixjKXtiPXlmKGIpO2lmKHlmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBBZigpe31cbnZhciBCZj1udWxsLENmPW51bGw7ZnVuY3Rpb24gRGYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRWY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLElmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEdmP2Z1bmN0aW9uKGEpe3JldHVybiBHZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSGYpfTpFZjtmdW5jdGlvbiBIZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEpmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2FkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTthZChiKX1mdW5jdGlvbiBLZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTGYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE1mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE5mPVwiX19yZWFjdEZpYmVyJFwiK01mLE9mPVwiX19yZWFjdFByb3BzJFwiK01mLHRmPVwiX19yZWFjdENvbnRhaW5lciRcIitNZixuZj1cIl9fcmVhY3RFdmVudHMkXCIrTWYsUGY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK01mLFFmPVwiX19yZWFjdEhhbmRsZXMkXCIrTWY7XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1hW05mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t0Zl18fGNbTmZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TGYoYSk7bnVsbCE9PWE7KXtpZihjPWFbTmZdKXJldHVybiBjO2E9TGYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIEJiKGEpe2E9YVtOZl18fGFbdGZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB0ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBDYihhKXtyZXR1cm4gYVtPZl18fG51bGx9dmFyIFJmPVtdLFNmPS0xO2Z1bmN0aW9uIFRmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlNmfHwoYS5jdXJyZW50PVJmW1NmXSxSZltTZl09bnVsbCxTZi0tKX1mdW5jdGlvbiBHKGEsYil7U2YrKztSZltTZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBVZj17fSxIPVRmKFVmKSxWZj1UZighMSksV2Y9VWY7ZnVuY3Rpb24gWGYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBVZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFlmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gWmYoKXtFKFZmKTtFKEgpfWZ1bmN0aW9uICRmKGEsYixjKXtpZihILmN1cnJlbnQhPT1VZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFZmLGMpfWZ1bmN0aW9uIGFnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUWEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gYmcoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFVmO1dmPUguY3VycmVudDtHKEgsYSk7RyhWZixWZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBjZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWFnKGEsYixXZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoVmYpLEUoSCksRyhILGEpKTpFKFZmKTtHKFZmLGMpfXZhciBkZz1udWxsLGVnPSExLGZnPSExO2Z1bmN0aW9uIGdnKGEpe251bGw9PT1kZz9kZz1bYV06ZGcucHVzaChhKX1mdW5jdGlvbiBoZyhhKXtlZz0hMDtnZyhhKX1cbmZ1bmN0aW9uIGlnKCl7aWYoIWZnJiZudWxsIT09ZGcpe2ZnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1kZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWRnPW51bGw7ZWc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWRnJiYoZGc9ZGcuc2xpY2UoYSsxKSksJGIoZWMsaWcpLGU7fWZpbmFsbHl7Qz1iLGZnPSExfX1yZXR1cm4gbnVsbH12YXIgamc9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24ga2coYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIGxnPVRmKG51bGwpLG1nPW51bGwsbmc9bnVsbCxvZz1udWxsO2Z1bmN0aW9uIHBnKCl7b2c9bmc9bWc9bnVsbH1cbmZ1bmN0aW9uIHFnKGEpe3ZhciBiPWxnLmN1cnJlbnQ7RShsZyk7YS5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcmcoYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBzZyhhLGIpe21nPWE7b2c9bmc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih0Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB1ZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYob2chPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09bmcpe2lmKG51bGw9PT1tZyl0aHJvdyBFcnJvcihwKDMwOCkpO25nPWE7bWcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIG5nPW5nLm5leHQ9YTtyZXR1cm4gYn12YXIgdmc9bnVsbCx3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7bnVsbCE9PWMmJihjPWMuc2hhcmVkLEJnKGEpPyhhPWMuaW50ZXJsZWF2ZWQsbnVsbD09PWE/KGIubmV4dD1iLG51bGw9PT12Zz92Zz1bY106dmcucHVzaChjKSk6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMuaW50ZXJsZWF2ZWQ9Yik6KGE9Yy5wZW5kaW5nLG51bGw9PT1hP2IubmV4dD1iOihiLm5leHQ9YS5uZXh0LGEubmV4dD1iKSxjLnBlbmRpbmc9YikpfWZ1bmN0aW9uIENnKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gRWcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO251bGwhPT1uJiYobj1uLnVwZGF0ZVF1ZXVlLGg9bi5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP24uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciB1PWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2g9Zjtkb3t2YXIgcT1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZxKT09PXEpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBtPWEsdz1oO3E9Yjt5PWM7c3dpdGNoKHcudGFnKXtjYXNlIDE6bT13LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG0pe3U9bS5jYWxsKHksdSxxKTticmVhayBhfXU9bTticmVhayBhO2Nhc2UgMzptLmZsYWdzPW0uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bT13LnBheWxvYWQ7cT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbT9tLmNhbGwoeSx1LHEpOm07aWYobnVsbD09PXF8fHZvaWQgMD09PXEpYnJlYWsgYTt1PUEoe30sdSxxKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxxPWUuZWZmZWN0cyxudWxsPT09cT9lLmVmZmVjdHM9W2hdOnEucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnEsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXksaz11KTpuPW4ubmV4dD15LGd8PXE7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBxPWgsaD1xLm5leHQscS5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1xLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9dSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7Rmd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT11fX1cbmZ1bmN0aW9uIEdnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEhnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIElnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBNZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9VYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1KZygpLGU9S2coYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SmcoKSxlPUtnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO2I9TGcoYSxlLGQpO251bGwhPT1iJiZDZyhiLGEsZSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SmcoKSxkPUtnKGEpLGU9emcoYyxcbmQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO0FnKGEsZSk7Yj1MZyhhLGQsYyk7bnVsbCE9PWImJkNnKGIsYSxkKX19O2Z1bmN0aW9uIE5nKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUhlKGMsZCl8fCFIZShlLGYpOiEwfVxuZnVuY3Rpb24gT2coYSxiLGMpe3ZhciBkPSExLGU9VWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dWcoZik6KGU9WWYoYik/V2Y6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WGYoYSxlKTpVZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPU1nO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gUGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gUWcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1IZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXVnKGYpOihmPVlmKGIpP1dmOkguY3VycmVudCxlLmNvbnRleHQ9WGYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKElnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJk1nLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLEVnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfXZhciBSZz1bXSxTZz0wLFRnPW51bGwsVWc9MCxWZz1bXSxXZz0wLFhnPW51bGwsWWc9MSxaZz1cIlwiO2Z1bmN0aW9uICRnKGEsYil7UmdbU2crK109VWc7UmdbU2crK109VGc7VGc9YTtVZz1ifVxuZnVuY3Rpb24gYWgoYSxiLGMpe1ZnW1dnKytdPVlnO1ZnW1dnKytdPVpnO1ZnW1dnKytdPVhnO1hnPWE7dmFyIGQ9WWc7YT1aZzt2YXIgZT0zMi1uYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1uYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO1lnPTE8PDMyLW5jKGIpK2V8Yzw8ZXxkO1pnPWYrYX1lbHNlIFlnPTE8PGZ8Yzw8ZXxkLFpnPWF9ZnVuY3Rpb24gYmgoYSl7bnVsbCE9PWEucmV0dXJuJiYoJGcoYSwxKSxhaChhLDEsMCkpfWZ1bmN0aW9uIGNoKGEpe2Zvcig7YT09PVRnOylUZz1SZ1stLVNnXSxSZ1tTZ109bnVsbCxVZz1SZ1stLVNnXSxSZ1tTZ109bnVsbDtmb3IoO2E9PT1YZzspWGc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWmc9VmdbLS1XZ10sVmdbV2ddPW51bGwsWWc9VmdbLS1XZ10sVmdbV2ddPW51bGx9dmFyIGRoPW51bGwsZWg9bnVsbCxJPSExLGZoPW51bGw7XG5mdW5jdGlvbiBnaChhLGIpe3ZhciBjPWhoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gaWgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1LZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsZGg9YSxlaD1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09WGc/e2lkOllnLG92ZXJmbG93OlpnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9aGgoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMsZGg9YSxlaD1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGpoKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24ga2goYSl7aWYoSSl7dmFyIGI9ZWg7aWYoYil7dmFyIGM9YjtpZighaWgoYSxiKSl7aWYoamgoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUtmKGMubmV4dFNpYmxpbmcpO3ZhciBkPWRoO2ImJmloKGEsYik/Z2goZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSxkaD1hKX19ZWxzZXtpZihqaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7ZGg9YX19fWZ1bmN0aW9uIGxoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtkaD1hfVxuZnVuY3Rpb24gbWgoYSl7aWYoYSE9PWRoKXJldHVybiExO2lmKCFJKXJldHVybiBsaChhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIURmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj1laCkpe2lmKGpoKGEpKXtmb3IoYT1laDthOylhPUtmKGEubmV4dFNpYmxpbmcpO3Rocm93IEVycm9yKHAoNDE4KSk7fWZvcig7YjspZ2goYSxiKSxiPUtmKGIubmV4dFNpYmxpbmcpfWxoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7ZWg9S2YoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXG5cIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWVoPW51bGx9fWVsc2UgZWg9ZGg/S2YoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gbmgoKXtlaD1kaD1udWxsO0k9ITF9ZnVuY3Rpb24gb2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gcGgoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1IZyYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gcWgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gcmgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHNoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXRoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9dWgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXdhKXJldHVybiBuKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1HYSYmcmgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1waChhLGIsYyksZC5yZXR1cm49YSxkO2Q9dmgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9cGgoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj13aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB1KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9dWgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGM9dmgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1waChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdmE6cmV0dXJuIGI9d2goYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgR2E6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gdShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZGIoYil8fEphKGIpKXJldHVybiBiPXhoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3FoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdWE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEdhOnJldHVybiBlPWMuX2luaXQscShhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGRiKGMpfHxKYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7cWgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB1YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgR2E6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGRiKGQpfHxKYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7cWgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG0oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbj1udWxsLHI9ZyxtPWc9MCx4PW51bGw7bnVsbCE9PXImJm08aC5sZW5ndGg7bSsrKXtyLmluZGV4Pm0/KHg9cixyPW51bGwpOng9ci5zaWJsaW5nO3ZhciB2PXEoZSxyLGhbbV0sayk7aWYobnVsbD09PXYpe251bGw9PT1yJiYocj14KTticmVha31hJiZyJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxyKTtnPWYodixnLG0pO251bGw9PT1uP2w9djpuLnNpYmxpbmc9djtuPXY7cj14fWlmKG09PT1oLmxlbmd0aClyZXR1cm4gYyhlLHIpLEkmJiRnKGUsbSksbDtpZihudWxsPT09cil7Zm9yKDttPGgubGVuZ3RoO20rKylyPXUoZSxoW21dLGspLG51bGwhPT1yJiYoZz1mKHIsZyxtKSxudWxsPT09bj9sPXI6bi5zaWJsaW5nPXIsbj1yKTtJJiYkZyhlLG0pO3JldHVybiBsfWZvcihyPWQoZSxyKTttPGgubGVuZ3RoO20rKyl4PXkocixlLG0saFttXSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PVxueC5rZXk/bTp4LmtleSksZz1mKHgsZyxtKSxudWxsPT09bj9sPXg6bi5zaWJsaW5nPXgsbj14KTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJiRnKGUsbSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1KYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIG49bD1udWxsLG09ZyxyPWc9MCx4PW51bGwsdj1oLm5leHQoKTtudWxsIT09bSYmIXYuZG9uZTtyKyssdj1oLm5leHQoKSl7bS5pbmRleD5yPyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdz1xKGUsbSx2LnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHcsZyxyKTtudWxsPT09bj9sPXc6bi5zaWJsaW5nPXc7bj13O209eH1pZih2LmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJiRnKGUsciksbDtpZihudWxsPT09bSl7Zm9yKDshdi5kb25lO3IrKyx2PWgubmV4dCgpKXY9dShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO0kmJiRnKGUscik7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyF2LmRvbmU7cisrLHY9aC5uZXh0KCkpdj15KG0sZSxyLHYudmFsdWUsayksbnVsbCE9PXYmJihhJiZudWxsIT09di5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT12LmtleT9yOnYua2V5KSxnPWYodixnLHIpLG51bGw9PT1uP2w9djpuLnNpYmxpbmc9dixuPXYpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmJGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXdhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHVhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXdhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYSYmcmgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXBoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT13YT8oZD14aChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9dmgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9cGgoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHZhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9d2goZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBHYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZGIoZikpcmV0dXJuIG0oYSxkLGYsaCk7aWYoSmEoZikpcmV0dXJuIHcoYSxkLGYsaCk7cWgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD11aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciB5aD1zaCghMCksemg9c2goITEpLEFoPXt9LEJoPVRmKEFoKSxDaD1UZihBaCksRGg9VGYoQWgpO2Z1bmN0aW9uIEVoKGEpe2lmKGE9PT1BaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEZoKGEsYil7RyhEaCxiKTtHKENoLGEpO0coQmgsQWgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6a2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWtiKGIsYSl9RShCaCk7RyhCaCxiKX1mdW5jdGlvbiBHaCgpe0UoQmgpO0UoQ2gpO0UoRGgpfVxuZnVuY3Rpb24gSGgoYSl7RWgoRGguY3VycmVudCk7dmFyIGI9RWgoQmguY3VycmVudCk7dmFyIGM9a2IoYixhLnR5cGUpO2IhPT1jJiYoRyhDaCxhKSxHKEJoLGMpKX1mdW5jdGlvbiBJaChhKXtDaC5jdXJyZW50PT09YSYmKEUoQmgpLEUoQ2gpKX12YXIgSz1UZigwKTtcbmZ1bmN0aW9uIEpoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBLaD1bXTtcbmZ1bmN0aW9uIExoKCl7Zm9yKHZhciBhPTA7YTxLaC5sZW5ndGg7YSsrKUtoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7S2gubGVuZ3RoPTB9dmFyIE1oPXRhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTmg9dGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsT2g9MCxMPW51bGwsTT1udWxsLE49bnVsbCxQaD0hMSxRaD0hMSxSaD0wLFNoPTA7ZnVuY3Rpb24gTygpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFRoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUdlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBVaChhLGIsYyxkLGUsZil7T2g9ZjtMPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtNaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1ZoOldoO2E9YyhkLGUpO2lmKFFoKXtmPTA7ZG97UWg9ITE7Umg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tj1NPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO01oLmN1cnJlbnQ9WGg7YT1jKGQsZSl9d2hpbGUoUWgpfU1oLmN1cnJlbnQ9WWg7Yj1udWxsIT09TSYmbnVsbCE9PU0ubmV4dDtPaD0wO049TT1MPW51bGw7UGg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFpoKCl7dmFyIGE9MCE9PVJoO1JoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiAkaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1OP0wubWVtb2l6ZWRTdGF0ZT1OPWE6Tj1OLm5leHQ9YTtyZXR1cm4gTn1mdW5jdGlvbiBhaSgpe2lmKG51bGw9PT1NKXt2YXIgYT1MLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1NLm5leHQ7dmFyIGI9bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlOk4ubmV4dDtpZihudWxsIT09YilOPWIsTT1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtNPWE7YT17bWVtb2l6ZWRTdGF0ZTpNLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk0uYmFzZVN0YXRlLGJhc2VRdWV1ZTpNLmJhc2VRdWV1ZSxxdWV1ZTpNLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU4/TC5tZW1vaXplZFN0YXRlPU49YTpOPU4ubmV4dD1hfXJldHVybiBOfVxuZnVuY3Rpb24gYmkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBjaShhKXt2YXIgYj1haSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU0sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbj1sLmxhbmU7aWYoKE9oJm4pPT09biludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHU9e2xhbmU6bixhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9dSxnPWQpOms9ay5uZXh0PXU7TC5sYW5lc3w9bjtGZ3w9bn1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtHZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh0Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxMLmxhbmVzfD1mLEZnfD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZGkoYSl7dmFyIGI9YWkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0dlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHRnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gZWkoKXt9XG5mdW5jdGlvbiBmaShhLGIpe3ZhciBjPUwsZD1haSgpLGU9YigpLGY9IUdlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsdGc9ITApO2Q9ZC5xdWV1ZTtnaShoaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1OJiZOLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7aWkoOSxqaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1QKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShPaCYzMCl8fGtpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBraShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPUwudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTC51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBqaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2xpKGIpJiZMZyhhLDEsLTEpfWZ1bmN0aW9uIGhpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe2xpKGIpJiZMZyhhLDEsLTEpfSl9ZnVuY3Rpb24gbGkoYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hR2UoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gbWkoYSl7dmFyIGI9JGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpiaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPW5pLmJpbmQobnVsbCxMLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBpaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1MLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LEwudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gb2koKXtyZXR1cm4gYWkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHBpKGEsYixjLGQpe3ZhciBlPSRoKCk7TC5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9aWkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQpe3ZhciBlPWFpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU0pe3ZhciBnPU0ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmVGgoZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9aWkoYixjLGYsZCk7cmV0dXJufX1MLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1paSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHJpKGEsYil7cmV0dXJuIHBpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGdpKGEsYil7cmV0dXJuIHFpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHNpKGEsYil7cmV0dXJuIHFpKDQsMixhLGIpfWZ1bmN0aW9uIHRpKGEsYil7cmV0dXJuIHFpKDQsNCxhLGIpfVxuZnVuY3Rpb24gdWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB2aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHFpKDQsNCx1aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiB3aSgpe31mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWFpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZUaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHlpKGEsYil7dmFyIGM9YWkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJlRoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIHppKGEsYixjKXtpZigwPT09KE9oJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSx0Zz0hMCksYS5tZW1vaXplZFN0YXRlPWM7R2UoYyxiKXx8KGM9eGMoKSxMLmxhbmVzfD1jLEZnfD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBBaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1OaC50cmFuc2l0aW9uO05oLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxOaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEJpKCl7cmV0dXJuIGFpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIENpKGEsYixjKXt2YXIgZD1LZyhhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtEaShhKT9FaShiLGMpOihGaShhLGIsYyksYz1KZygpLGE9TGcoYSxkLGMpLG51bGwhPT1hJiZHaShhLGIsZCkpfVxuZnVuY3Rpb24gbmkoYSxiLGMpe3ZhciBkPUtnKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKERpKGEpKUVpKGIsZSk7ZWxzZXtGaShhLGIsZSk7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihHZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9Yz1KZygpO2E9TGcoYSxkLGMpO251bGwhPT1hJiZHaShhLGIsZCl9fWZ1bmN0aW9uIERpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09THx8bnVsbCE9PWImJmI9PT1MfVxuZnVuY3Rpb24gRWkoYSxiKXtRaD1QaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEZpKGEsYixjKXtCZyhhKT8oYT1iLmludGVybGVhdmVkLG51bGw9PT1hPyhjLm5leHQ9YyxudWxsPT09dmc/dmc9W2JdOnZnLnB1c2goYikpOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLmludGVybGVhdmVkPWMpOihhPWIucGVuZGluZyxudWxsPT09YT9jLm5leHQ9YzooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5wZW5kaW5nPWMpfWZ1bmN0aW9uIEdpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7QmMoYSxjKX19XG52YXIgWWg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOk8sdXNlQ29udGV4dDpPLHVzZUVmZmVjdDpPLHVzZUltcGVyYXRpdmVIYW5kbGU6Tyx1c2VJbnNlcnRpb25FZmZlY3Q6Tyx1c2VMYXlvdXRFZmZlY3Q6Tyx1c2VNZW1vOk8sdXNlUmVkdWNlcjpPLHVzZVJlZjpPLHVzZVN0YXRlOk8sdXNlRGVidWdWYWx1ZTpPLHVzZURlZmVycmVkVmFsdWU6Tyx1c2VUcmFuc2l0aW9uOk8sdXNlTXV0YWJsZVNvdXJjZTpPLHVzZVN5bmNFeHRlcm5hbFN0b3JlOk8sdXNlSWQ6Tyx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFZoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpeyRoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OnJpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBwaSg0MTk0MzA4LFxuNCx1aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHBpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gcGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz0kaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD0kaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUNpLmJpbmQobnVsbCxMLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbiRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOm1pLHVzZURlYnVnVmFsdWU6d2ksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gJGgoKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1taSghMSksYj1hWzBdO2E9QWkuYmluZChudWxsLGFbMV0pOyRoKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TCxlPSRoKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVApdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KE9oJjMwKXx8a2koZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9ZjtyaShoaS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2lpKDksamkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT0kaCgpLGI9UC5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPVpnO3ZhciBkPVlnO2M9KGQmfigxPDwzMi1uYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1SaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9U2grKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFdoPXtyZWFkQ29udGV4dDp1Zyx1c2VDYWxsYmFjazp4aSx1c2VDb250ZXh0OnVnLHVzZUVmZmVjdDpnaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnZpLHVzZUluc2VydGlvbkVmZmVjdDpzaSx1c2VMYXlvdXRFZmZlY3Q6dGksdXNlTWVtbzp5aSx1c2VSZWR1Y2VyOmNpLHVzZVJlZjpvaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBjaShiaSl9LFxudXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIHppKGIsTS5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Y2koYmkpWzBdLGI9YWkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmVpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZpLHVzZUlkOkJpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWGg9e3JlYWRDb250ZXh0OnVnLHVzZUNhbGxiYWNrOnhpLHVzZUNvbnRleHQ6dWcsdXNlRWZmZWN0OmdpLHVzZUltcGVyYXRpdmVIYW5kbGU6dmksdXNlSW5zZXJ0aW9uRWZmZWN0OnNpLHVzZUxheW91dEVmZmVjdDp0aSx1c2VNZW1vOnlpLHVzZVJlZHVjZXI6ZGksdXNlUmVmOm9pLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGRpKGJpKX0sdXNlRGVidWdWYWx1ZTp3aSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWFpKCk7cmV0dXJuIG51bGw9PT1cbk0/Yi5tZW1vaXplZFN0YXRlPWE6emkoYixNLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1kaShiaSlbMF0sYj1haSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZWksdXNlU3luY0V4dGVybmFsU3RvcmU6ZmksdXNlSWQ6QmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBIaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1PYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gSWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19XG52YXIgSmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gS2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGl8fChMaT0hMCxNaT1kKTtJaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIE5pKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0lpKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtJaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PU9pP09pPW5ldyBTZXQoW3RoaXNdKTpPaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gUGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBKaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVFpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFJpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9emcoLTEsMSksYi50YWc9MixBZyhjLGIpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFRpLFVpLFZpLFdpO1xuVGk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O1VpPWZ1bmN0aW9uKCl7fTtcblZpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtFaChCaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVhhKGEsZSk7ZD1YYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWZiKGEsZSk7ZD1mYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUFmKX10YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07V2k9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBYaShhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBRKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gWWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFEoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0doKCk7RShWZik7RShIKTtMaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCltaChiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PWZoJiYoWmkoZmgpLGZoPW51bGwpKTtVaShhLGIpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkloKGIpO3ZhciBlPUVoKERoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKVZpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtRKGIpO3JldHVybiBudWxsfWE9RWgoQmguY3VycmVudCk7aWYobWgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTmZdPWI7ZFtPZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8a2YubGVuZ3RoO2UrKylEKGtmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WWEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dGIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJnpmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpVYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlVhKGQpO2liKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUFmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9amIoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtOZl09YjthW09mXT1kO1RpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXViKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGtmLmxlbmd0aDtlKyspRChrZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpZYShhLGQpO2U9WGEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpnYihhLGQpO2U9ZmIoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXRiKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3JiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZtYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm5iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZuYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZzYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlVhKGEpO2NiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VWEoYSk7aWIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1JhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZWIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmViKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1BZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UShiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpV2koYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1FaChEaC5jdXJyZW50KTtFaChCaC5jdXJyZW50KTtpZihtaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW05mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG5kaCxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzp6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZ6ZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtOZl09YixiLnN0YXRlTm9kZT1kfVEoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKEspO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKEkmJm51bGwhPT1laCYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKXtmb3IoZD1laDtkOylkPUtmKGQubmV4dFNpYmxpbmcpO25oKCk7Yi5mbGFnc3w9OTg1NjA7cmV0dXJuIGJ9aWYobnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2Q9bWgoYik7aWYobnVsbD09PWEpe2lmKCFkKXRocm93IEVycm9yKHAoMzE4KSk7ZD1cbmIubWVtb2l6ZWRTdGF0ZTtkPW51bGwhPT1kP2QuZGVoeWRyYXRlZDpudWxsO2lmKCFkKXRocm93IEVycm9yKHAoMzE3KSk7ZFtOZl09Yn1lbHNlIG5oKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtRKGIpO3JldHVybiBudWxsfW51bGwhPT1maCYmKFppKGZoKSxmaD1udWxsKTtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP21oKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtkIT09YyYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShLLmN1cnJlbnQmMSk/MD09PVImJihSPTMpOiRpKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1EoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBHaCgpLFVpKGEsYiksbnVsbD09PWEmJnJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFEoYiksXG5udWxsO2Nhc2UgMTA6cmV0dXJuIHFnKGIudHlwZS5fY29udGV4dCksUShiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFlmKGIudHlwZSkmJlpmKCksUShiKSxudWxsO2Nhc2UgMTk6RShLKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUShiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKVhpKGYsITEpO2Vsc2V7aWYoMCE9PVJ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1KaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O1hpKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPVxubnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhLLEsuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5haiYmKGIuZmxhZ3N8PVxuMTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9SmgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxYaShmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUShiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+YWomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsWGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPWIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1cbkIoKSxiLnNpYmxpbmc9bnVsbCxjPUsuY3VycmVudCxHKEssZD9jJjF8MjpjJjEpLGI7UShiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGJqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oY2omMTA3Mzc0MTgyNCkmJihRKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UShiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO312YXIgZGo9dGEuUmVhY3RDdXJyZW50T3duZXIsdGc9ITE7ZnVuY3Rpb24gZWooYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT96aChiLG51bGwsYyxkKTp5aChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIGZqKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtzZyhiLGUpO2Q9VWgoYSxiLGMsZCxmLGUpO2M9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmMmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFpaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixqaihhLGIsZixkLGUpO2E9dmgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpIZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIGdqKGEsYixlKX1iLmZsYWdzfD0xO2E9dGgoZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSGUoZixkKSYmYS5yZWY9PT1iLnJlZilpZih0Zz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYodGc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxnaihhLGIsZSl9cmV0dXJuIGtqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBsaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcobWosY2opLGNqfD1jO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjLEcobWosY2opLGNqfD1kO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhtaixjaiksY2p8PWEsbnVsbDtcbmVsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcobWosY2opLGNqfD1kO2VqKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIG5qKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGtqKGEsYixjLGQsZSl7dmFyIGY9WWYoYyk/V2Y6SC5jdXJyZW50O2Y9WGYoYixmKTtzZyhiLGUpO2M9VWgoYSxiLGMsZCxmLGUpO2Q9WmgoKTtpZihudWxsIT09YSYmIXRnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsZ2ooYSxiLGUpO0kmJmQmJmJoKGIpO2IuZmxhZ3N8PTE7ZWooYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaihhLGIsYyxkLGUpe2lmKFlmKGMpKXt2YXIgZj0hMDtiZyhiKX1lbHNlIGY9ITE7c2coYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksT2coYixjLGQpLFFnKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXVnKGwpOihsPVlmKGMpP1dmOkguY3VycmVudCxsPVhmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHU9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3V8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZQZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcT1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1xO0VnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxxIT09a3x8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoSWcoYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxOZyhiLGMsaCxkLHEsayxsKSk/KHV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmtnKGIudHlwZSxoKTtnLnByb3BzPWw7dT1iLnBlbmRpbmdQcm9wcztxPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXVnKGspOihrPVlmKGMpP1dmOkguY3VycmVudCxrPVhmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PVxudHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09dXx8cSE9PWspJiZQZyhiLGcsZCxrKTt3Zz0hMTtxPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXE7RWcoYixkLGcsZSk7dmFyIG09Yi5tZW1vaXplZFN0YXRlO2ghPT11fHxxIT09bXx8VmYuY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoSWcoYixjLHksZCksbT1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxOZyhiLGMsbCxkLHEsbSxrKXx8ITEpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbSxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG0saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1tKSxnLnByb3BzPWQsZy5zdGF0ZT1tLGcuY29udGV4dD1cbmssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4gcGooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcGooYSxiLGMsZCxlLGYpe25qKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZjZyhiLGMsITEpLGdqKGEsYixmKTtkPWIuc3RhdGVOb2RlO2RqLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9eWgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD15aChiLG51bGwsaCxmKSk6ZWooYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmY2coYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBxaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0PyRmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJiRmKGEsYi5jb250ZXh0LCExKTtGaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiByaihhLGIsYyxkLGUpe25oKCk7b2goZSk7Yi5mbGFnc3w9MjU2O2VqKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBzaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIHRqKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1mdW5jdGlvbiB1aihhLGIpe3JldHVybntiYXNlTGFuZXM6YS5iYXNlTGFuZXN8YixjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczphLnRyYW5zaXRpb25zfX1cbmZ1bmN0aW9uIHZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPUsuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhLLGUmMSk7aWYobnVsbD09PWEpe2toKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtlPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZT17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmV9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZSk6Zj13aihlLGQsMCxudWxsKSxhPXhoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPXRqKGMpLGIubWVtb2l6ZWRTdGF0ZT1zaixhKTp4aihiLGUpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtoPWUuZGVoeWRyYXRlZDtpZihudWxsIT09aCl7aWYoZyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcseWooYSxiLGMsRXJyb3IocCg0MjIpKSk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXdqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPXhoKGYsZSxjLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmeWgoYixhLmNoaWxkLFxubnVsbCxjKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9dGooYyk7Yi5tZW1vaXplZFN0YXRlPXNqO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKWI9eWooYSxiLGMsbnVsbCk7ZWxzZSBpZihcIiQhXCI9PT1oLmRhdGEpYj15aihhLGIsYyxFcnJvcihwKDQxOSkpKTtlbHNlIGlmKGQ9MCE9PShjJmEuY2hpbGRMYW5lcyksdGd8fGQpe2Q9UDtpZihudWxsIT09ZCl7c3dpdGNoKGMmLWMpe2Nhc2UgNDpmPTI7YnJlYWs7Y2FzZSAxNjpmPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmY9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Zj1cbjI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmY9MH1kPTAhPT0oZiYoZC5zdXNwZW5kZWRMYW5lc3xjKSk/MDpmOzAhPT1kJiZkIT09ZS5yZXRyeUxhbmUmJihlLnJldHJ5TGFuZT1kLExnKGEsZCwtMSkpfSRpKCk7Yj15aihhLGIsYyxFcnJvcihwKDQyMSkpKX1lbHNlXCIkP1wiPT09aC5kYXRhPyhiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9emouYmluZChudWxsLGEpLGguX3JlYWN0UmV0cnk9YixiPW51bGwpOihjPWUudHJlZUNvbnRleHQsZWg9S2YoaC5uZXh0U2libGluZyksZGg9YixJPSEwLGZoPW51bGwsbnVsbCE9PWMmJihWZ1tXZysrXT1ZZyxWZ1tXZysrXT1aZyxWZ1tXZysrXT1YZyxZZz1jLmlkLFpnPWMub3ZlcmZsb3csWGc9YiksYj14aihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKSxiLmZsYWdzfD00MDk2KTtyZXR1cm4gYn1pZihmKXJldHVybiBkPUFqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLFxuZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9QWooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3RqKGMpOnVqKGUsYyksZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2osZDtjPUJqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHhqKGEsYil7Yj13aih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9XG5mdW5jdGlvbiBCaihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9dGgoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMSkmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihkPWIuZGVsZXRpb25zLG51bGw9PT1kPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmQucHVzaChhKSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIEFqKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlO2E9YS5jaGlsZDt2YXIgZz1hLnNpYmxpbmcsaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYxKSYmYi5jaGlsZCE9PWE/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGIuZGVsZXRpb25zPW51bGwpOihjPXRoKGEsaCksYy5zdWJ0cmVlRmxhZ3M9YS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1nP2Q9dGgoZyxkKTooZD14aChkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlqKGEsYixjLGQpe251bGwhPT1kJiZvaChkKTt5aChiLGEuY2hpbGQsbnVsbCxjKTthPXhqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBDaihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO3JnKGEucmV0dXJuLGIsYyl9ZnVuY3Rpb24gRGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZWooYSxiLGQuY2hpbGRyZW4sYyk7ZD1LLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmQ2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZylDaihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoSyxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09SmgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtEaihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUpoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1EaihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpEaihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBnaihhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7Rmd8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXRoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz10aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gRmooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnFqKGIpO25oKCk7YnJlYWs7Y2FzZSA1OkhoKGIpO2JyZWFrO2Nhc2UgMTpZZihiLnR5cGUpJiZiZyhiKTticmVhaztjYXNlIDQ6RmgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKGxnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhLLEsuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdmooYSxiLGMpO0coSyxLLmN1cnJlbnQmMSk7YT1naihhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoSyxLLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIEVqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKEssSy5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsbGooYSxiLGMpfXJldHVybiBnaihhLGIsYyl9XG5mdW5jdGlvbiBHaihhLGIpe2NoKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBZZihiLnR5cGUpJiZaZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gR2goKSxFKFZmKSxFKEgpLExoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gSWgoYiksbnVsbDtjYXNlIDEzOkUoSyk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO25oKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoSyksbnVsbDtjYXNlIDQ6cmV0dXJuIEdoKCksbnVsbDtjYXNlIDEwOnJldHVybiBxZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBIaj0hMSxTPSExLElqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFQ9bnVsbDtmdW5jdGlvbiBKaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1UoYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gS2ooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VShhLGIsZCl9fXZhciBMaj0hMTtcbmZ1bmN0aW9uIE1qKGEsYil7QmY9Y2Q7YT1MZSgpO2lmKE1lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKFope2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxuPTAsdT1hLHE9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3UhPT1jfHwwIT09ZSYmMyE9PXUubm9kZVR5cGV8fChoPWcrZSk7dSE9PWZ8fDAhPT1kJiYzIT09dS5ub2RlVHlwZXx8KGs9ZytkKTszPT09dS5ub2RlVHlwZSYmKGcrPVxudS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9dS5maXJzdENoaWxkKSlicmVhaztxPXU7dT15fWZvcig7Oyl7aWYodT09PWEpYnJlYWsgYjtxPT09YyYmKytsPT09ZSYmKGg9Zyk7cT09PWYmJisrbj09PWQmJihrPWcpO2lmKG51bGwhPT0oeT11Lm5leHRTaWJsaW5nKSlicmVhazt1PXE7cT11LnBhcmVudE5vZGV9dT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7Q2Y9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307Y2Q9ITE7Zm9yKFQ9YjtudWxsIT09VDspaWYoYj1ULGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFQ9YTtlbHNlIGZvcig7bnVsbCE9PVQ7KXtiPVQ7dHJ5e3ZhciBtPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW0pe3ZhciB3PW0ubWVtb2l6ZWRQcm9wcyxKPW0ubWVtb2l6ZWRTdGF0ZSx2PWIuc3RhdGVOb2RlLHg9di5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3c6a2coYi50eXBlLHcpLEopO3YuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9eH1icmVhaztjYXNlIDM6dmFyIHI9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZigxPT09ci5ub2RlVHlwZSlyLnRleHRDb250ZW50PVwiXCI7ZWxzZSBpZig5PT09ci5ub2RlVHlwZSl7dmFyIEY9ci5ib2R5O251bGwhPUYmJihGLnRleHRDb250ZW50PVwiXCIpfWJyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goWil7VShiLGIucmV0dXJuLFopfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtUPWE7YnJlYWt9VD1iLnJldHVybn1tPUxqO0xqPSExO3JldHVybiBtfVxuZnVuY3Rpb24gTmooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmS2ooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gT2ooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFBqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBRaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsUWooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltOZl0sZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW25mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbUWZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBSaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFNqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFJqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBUaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QWYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoVGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylUaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBVaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFVqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspVWooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBWPW51bGwsVmo9ITE7ZnVuY3Rpb24gV2ooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KVhqKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtrYy5vbkNvbW1pdEZpYmVyVW5tb3VudChqYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6U3x8SmooYyxiKTtjYXNlIDY6dmFyIGQ9VixlPVZqO1Y9bnVsbDtXaihhLGIsYyk7Vj1kO1ZqPWU7bnVsbCE9PVYmJihWaj8oYT1WLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlYucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1WJiYoVmo/KGE9VixjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0pmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmSmYoYSxjKSxhZChhKSk6SmYoVixjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVY7ZT1WajtWPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Vmo9ITA7XG5XaihhLGIsYyk7Vj1kO1ZqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFTJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9LaihjLGIsZyk6MCE9PShmJjQpJiZLaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1XaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFTJiYoSmooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1UoYyxiLGgpfVdqKGEsYixjKTticmVhaztjYXNlIDIxOldqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhTPShkPVMpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsV2ooYSxiLGMpLFM9ZCk6V2ooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6V2ooYSxiLGMpfX1mdW5jdGlvbiBZaihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBJaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVpqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gYWsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1OlY9aC5zdGF0ZU5vZGU7Vmo9ITE7YnJlYWsgYTtjYXNlIDM6Vj1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1ZqPSEwO2JyZWFrIGE7Y2FzZSA0OlY9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztWaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVYpdGhyb3cgRXJyb3IocCgxNjApKTtYaihmLGcsZSk7Vj1udWxsO1ZqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtVKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspYmsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmFrKGIsYSk7Y2soYSk7aWYoZCY0KXt0cnl7TmooMyxhLGEucmV0dXJuKSxPaigzLGEpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX10cnl7TmooNSxhLGEucmV0dXJuKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMTphayhiLGEpO2NrKGEpO2QmNTEyJiZudWxsIT09YyYmSmooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmFrKGIsYSk7Y2soYSk7ZCY1MTImJm51bGwhPT1jJiZKaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7bmIoZSxcIlwiKX1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJlphKGUsZik7dWIoaCxnKTt2YXIgbD11YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbj1rW2ddLHU9a1tnKzFdO1wic3R5bGVcIj09PW4/cmIoZSx1KTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1uP21iKGUsdSk6XCJjaGlsZHJlblwiPT09bj9uYihlLHUpOnNhKGUsbix1LGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjokYShlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciBxPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9lYihlLCEhZi5tdWx0aXBsZSx5LCExKTpxIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZWIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZWIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtPZl09Zn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgNjphayhiLGEpO2NrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7bD1hLnN0YXRlTm9kZTtuPWEubWVtb2l6ZWRQcm9wczt0cnl7bC5ub2RlVmFsdWU9bn1jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWJyZWFrO2Nhc2UgMzphayhiLGEpO2NrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2FkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2gobSl7VShhLGEucmV0dXJuLG0pfWJyZWFrO2Nhc2UgNDphayhiLGEpO2NrKGEpO2JyZWFrO2Nhc2UgMTM6YWsoYixhKTtjayhhKTtsPWEuY2hpbGQ7bC5mbGFncyY4MTkyJiZudWxsIT09bC5tZW1vaXplZFN0YXRlJiYobnVsbD09PWwuYWx0ZXJuYXRlfHxudWxsPT09bC5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSkmJlxuKGRrPUIoKSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIyOmw9bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFM9KG49Uyl8fGwsYWsoYixhKSxTPW4pOmFrKGIsYSk7Y2soYSk7aWYoZCY4MTkyKXtuPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7YTpmb3IodT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT11KXt1PXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbj8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9cWIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKG0pe1UoYSxhLnJldHVybixtKX19fWVsc2UgaWYoNj09PVxucS50YWcpe2lmKG51bGw9PT11KXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bj9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaChtKXtVKGEsYS5yZXR1cm4sbSl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTt1PT09cSYmKHU9bnVsbCk7cT1xLnJldHVybn11PT09cSYmKHU9bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ31pZihuJiYhbCYmMCE9PShhLm1vZGUmMSkpZm9yKFQ9YSxhPWEuY2hpbGQ7bnVsbCE9PWE7KXtmb3IobD1UPWE7bnVsbCE9PVQ7KXtuPVQ7dT1uLmNoaWxkO3N3aXRjaChuLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1Ok5qKDQsXG5uLG4ucmV0dXJuKTticmVhaztjYXNlIDE6SmoobixuLnJldHVybik7Zj1uLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnRXaWxsVW5tb3VudCl7cT1uO3k9bi5yZXR1cm47dHJ5e2U9cSxmLnByb3BzPWUubWVtb2l6ZWRQcm9wcyxmLnN0YXRlPWUubWVtb2l6ZWRTdGF0ZSxmLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2gobSl7VShxLHksbSl9fWJyZWFrO2Nhc2UgNTpKaihuLG4ucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1uLm1lbW9pemVkU3RhdGUpe2VrKGwpO2NvbnRpbnVlfX1udWxsIT09dT8odS5yZXR1cm49bixUPXUpOmVrKGwpfWE9YS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmFrKGIsYSk7Y2soYSk7ZCY0JiZZaihhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6YWsoYixhKSxjayhhKX19XG5mdW5jdGlvbiBjayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFJqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYobmIoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVNqKGEpO1VqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1TaihhKTtUaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VShhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBmayhhLGIsYyl7VD1hO2drKGEsYixjKX1cbmZ1bmN0aW9uIGdrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVQ7KXt2YXIgZT1ULGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxIajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8UztoPUhqO3ZhciBsPVM7SGo9ZztpZigoUz1rKSYmIWwpZm9yKFQ9ZTtudWxsIT09VDspZz1ULGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2hrKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFQ9ayk6aGsoZSk7Zm9yKDtudWxsIT09ZjspVD1mLGdrKGYsYixjKSxmPWYuc2libGluZztUPWU7SGo9aDtTPWx9aWsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVD1mKTppayhhLGIsYyl9fVxuZnVuY3Rpb24gaWsoYSl7Zm9yKDtudWxsIT09VDspe3ZhciBiPVQ7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpTfHxPaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFTKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOmtnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJkdnKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1HZyhiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBuPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bil7dmFyIHU9bi5kZWh5ZHJhdGVkO251bGwhPT11JiZhZCh1KX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9U3x8Yi5mbGFncyY1MTImJlBqKGIpfWNhdGNoKHEpe1UoYixiLnJldHVybixxKX19aWYoYj09PWEpe1Q9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47VD1jO2JyZWFrfVQ9Yi5yZXR1cm59fWZ1bmN0aW9uIGVrKGEpe2Zvcig7bnVsbCE9PVQ7KXt2YXIgYj1UO2lmKGI9PT1hKXtUPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtUPWM7YnJlYWt9VD1iLnJldHVybn19XG5mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1UOyl7dmFyIGI9VDt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtPaig0LGIpfWNhdGNoKGspe1UoYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtVKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1BqKGIpfWNhdGNoKGspe1UoYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7UGooYil9Y2F0Y2goayl7VShiLGcsayl9fX1jYXRjaChrKXtVKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Q9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Q9aDticmVha31UPWIucmV0dXJufX1cbnZhciBqaz1NYXRoLmNlaWwsa2s9dGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixsaz10YS5SZWFjdEN1cnJlbnRPd25lcixtaz10YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxXPTAsUD1udWxsLFg9bnVsbCxZPTAsY2o9MCxtaj1UZigwKSxSPTAsbms9bnVsbCxGZz0wLG9rPTAscGs9MCxxaz1udWxsLHJrPW51bGwsZGs9MCxhaj1JbmZpbml0eSxzaz1udWxsLExpPSExLE1pPW51bGwsT2k9bnVsbCx0az0hMSx1az1udWxsLHZrPTAsd2s9MCx4az1udWxsLHlrPS0xLHprPTA7ZnVuY3Rpb24gSmcoKXtyZXR1cm4gMCE9PShXJjYpP0IoKTotMSE9PXlrP3lrOnlrPUIoKX1cbmZ1bmN0aW9uIEtnKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oVyYyKSYmMCE9PVkpcmV0dXJuIFkmLVk7aWYobnVsbCE9PWpnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT16ayYmKHprPXhjKCkpLHprO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6aWQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBMZyhhLGIsYyl7aWYoNTA8d2spdGhyb3cgd2s9MCx4az1udWxsLEVycm9yKHAoMTg1KSk7dmFyIGQ9QWsoYSxiKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDt6YyhkLGIsYyk7aWYoMD09PShXJjIpfHxkIT09UClkPT09UCYmKDA9PT0oVyYyKSYmKG9rfD1iKSw0PT09UiYmQmsoZCxZKSksQ2soZCxjKSwxPT09YiYmMD09PVcmJjA9PT0oYS5tb2RlJjEpJiYoYWo9QigpKzUwMCxlZyYmaWcoKSk7cmV0dXJuIGR9XG5mdW5jdGlvbiBBayhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9ZnVuY3Rpb24gQmcoYSl7cmV0dXJuKG51bGwhPT1QfHxudWxsIT09dmcpJiYwIT09KGEubW9kZSYxKSYmMD09PShXJjIpfVxuZnVuY3Rpb24gQ2soYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt2YyhhLGIpO3ZhciBkPXRjKGEsYT09PVA/WTowKTtpZigwPT09ZCludWxsIT09YyYmYWMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZhYyhjKTtpZigxPT09YikwPT09YS50YWc/aGcoRGsuYmluZChudWxsLGEpKTpnZyhEay5iaW5kKG51bGwsYSkpLElmKGZ1bmN0aW9uKCl7MD09PVcmJmlnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goQ2MoZCkpe2Nhc2UgMTpjPWVjO2JyZWFrO2Nhc2UgNDpjPWZjO2JyZWFrO2Nhc2UgMTY6Yz1nYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWljO2JyZWFrO2RlZmF1bHQ6Yz1nY31jPUVrKGMsRmsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEZrKGEsYil7eWs9LTE7ems9MDtpZigwIT09KFcmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihHaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dGMoYSxhPT09UD9ZOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1IayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPVc7V3w9Mjt2YXIgZj1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLGFqPUIoKSs1MDAsSmsoYSxiKTtkbyB0cnl7S2soKTticmVha31jYXRjaChoKXtMayhhLGgpfXdoaWxlKDEpO3BnKCk7a2suY3VycmVudD1mO1c9ZTtudWxsIT09WD9iPTA6KFA9bnVsbCxZPTAsYj1SKX1pZigwIT09Yil7Mj09PWImJihlPXdjKGEpLDAhPT1lJiYoZD1lLGI9TWsoYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9bmssSmsoYSwwKSxCayhhLGQpLENrKGEsQigpKSxjO2lmKDY9PT1iKUJrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhTmsoZSkmJihiPUhrKGEsZCksMj09PWImJihmPXdjKGEpLDAhPT1mJiYoZD1mLGI9TWsoYSxmKSkpLDE9PT1iKSl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxkKSxDayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOk9rKGEscmssc2spO2JyZWFrO2Nhc2UgMzpCayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1kays1MDAtQigpLDEwPGIpKXtpZigwIT09dGMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtKZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RWYoT2suYmluZChudWxsLGEscmssc2spLGIpO2JyZWFrfU9rKGEscmssc2spO2JyZWFrO2Nhc2UgNDpCayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW5jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmprKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUVmKE9rLmJpbmQobnVsbCxhLHJrLHNrKSxkKTticmVha31PayhhLHJrLHNrKTticmVhaztjYXNlIDU6T2soYSxyayxzayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUNrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0ZrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTWsoYSxiKXt2YXIgYz1xazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihKayhhLGIpLmZsYWdzfD0yNTYpO2E9SGsoYSxiKTsyIT09YSYmKGI9cmsscms9YyxudWxsIT09YiYmWmkoYikpO3JldHVybiBhfWZ1bmN0aW9uIFppKGEpe251bGw9PT1yaz9yaz1hOnJrLnB1c2guYXBwbHkocmssYSl9XG5mdW5jdGlvbiBOayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUdlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQmsoYSxiKXtiJj1+cGs7YiY9fm9rO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtbmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIERrKGEpe2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0drKCk7dmFyIGI9dGMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIENrKGEsQigpKSxudWxsO3ZhciBjPUhrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9d2MoYSk7MCE9PWQmJihiPWQsYz1NayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPW5rLEprKGEsMCksQmsoYSxiKSxDayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7T2soYSxyayxzayk7Q2soYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUGsoYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLDA9PT1XJiYoYWo9QigpKzUwMCxlZyYmaWcoKSl9fWZ1bmN0aW9uIFFrKGEpe251bGwhPT11ayYmMD09PXVrLnRhZyYmMD09PShXJjYpJiZHaygpO3ZhciBiPVc7V3w9MTt2YXIgYz1tay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYobWsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsbWsudHJhbnNpdGlvbj1jLFc9YiwwPT09KFcmNikmJmlnKCl9fWZ1bmN0aW9uIGJqKCl7Y2o9bWouY3VycmVudDtFKG1qKX1cbmZ1bmN0aW9uIEprKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEZmKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7Y2goZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJlpmKCk7YnJlYWs7Y2FzZSAzOkdoKCk7RShWZik7RShIKTtMaCgpO2JyZWFrO2Nhc2UgNTpJaChkKTticmVhaztjYXNlIDQ6R2goKTticmVhaztjYXNlIDEzOkUoSyk7YnJlYWs7Y2FzZSAxOTpFKEspO2JyZWFrO2Nhc2UgMTA6cWcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6YmooKX1jPWMucmV0dXJufVA9YTtYPWE9dGgoYS5jdXJyZW50LG51bGwpO1k9Y2o9YjtSPTA7bms9bnVsbDtwaz1vaz1GZz0wO3JrPXFrPW51bGw7aWYobnVsbCE9PXZnKXtmb3IoYj1cbjA7Yjx2Zy5sZW5ndGg7YisrKWlmKGM9dmdbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9dmc9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIExrKGEsYil7ZG97dmFyIGM9WDt0cnl7cGcoKTtNaC5jdXJyZW50PVloO2lmKFBoKXtmb3IodmFyIGQ9TC5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1QaD0hMX1PaD0wO049TT1MPW51bGw7UWg9ITE7Umg9MDtsay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Uj0xO25rPWI7WD1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WTtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG49aCx1PW4udGFnO2lmKDA9PT0obi5tb2RlJjEpJiYoMD09PXV8fDExPT09dXx8MTU9PT11KSl7dmFyIHE9bi5hbHRlcm5hdGU7cT8obi51cGRhdGVRdWV1ZT1xLnVwZGF0ZVF1ZXVlLG4ubWVtb2l6ZWRTdGF0ZT1xLm1lbW9pemVkU3RhdGUsXG5uLmxhbmVzPXEubGFuZXMpOihuLnVwZGF0ZVF1ZXVlPW51bGwsbi5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVJpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1NpKHksZyxoLGYsYik7eS5tb2RlJjEmJlBpKGYsbCxiKTtiPXk7az1sO3ZhciBtPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW0pe3ZhciB3PW5ldyBTZXQ7dy5hZGQoayk7Yi51cGRhdGVRdWV1ZT13fWVsc2UgbS5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7UGkoZixsLGIpOyRpKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVJpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtTaShKLGcsaCxmLGIpO29oKGspO2JyZWFrIGF9fWY9azs0IT09UiYmKFI9Mik7bnVsbD09PXFrP3FrPVtmXTpxay5wdXNoKGYpO2s9SGkoayxoKTtoPWc7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aC5mbGFnc3w9NjU1MzY7XG5iJj0tYjtoLmxhbmVzfD1iO3ZhciB2PUtpKGgsayxiKTtEZyhoLHYpO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgeD1oLnR5cGUscj1oLnN0YXRlTm9kZTtpZigwPT09KGguZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiByLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PU9pfHwhT2kuaGFzKHIpKSkpe2guZmxhZ3N8PTY1NTM2O2ImPS1iO2gubGFuZXN8PWI7dmFyIEY9TmkoaCxmLGIpO0RnKGgsRik7YnJlYWsgYX19aD1oLnJldHVybn13aGlsZShudWxsIT09aCl9UmsoYyl9Y2F0Y2goWil7Yj1aO1g9PT1jJiZudWxsIT09YyYmKFg9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSWsoKXt2YXIgYT1ray5jdXJyZW50O2trLmN1cnJlbnQ9WWg7cmV0dXJuIG51bGw9PT1hP1loOmF9XG5mdW5jdGlvbiAkaSgpe2lmKDA9PT1SfHwzPT09Unx8Mj09PVIpUj00O251bGw9PT1QfHwwPT09KEZnJjI2ODQzNTQ1NSkmJjA9PT0ob2smMjY4NDM1NDU1KXx8QmsoUCxZKX1mdW5jdGlvbiBIayhhLGIpe3ZhciBjPVc7V3w9Mjt2YXIgZD1JaygpO2lmKFAhPT1hfHxZIT09Yilzaz1udWxsLEprKGEsYik7ZG8gdHJ5e1NrKCk7YnJlYWt9Y2F0Y2goZSl7TGsoYSxlKX13aGlsZSgxKTtwZygpO1c9Yztray5jdXJyZW50PWQ7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IocCgyNjEpKTtQPW51bGw7WT0wO3JldHVybiBSfWZ1bmN0aW9uIFNrKCl7Zm9yKDtudWxsIT09WDspVGsoWCl9ZnVuY3Rpb24gS2soKXtmb3IoO251bGwhPT1YJiYhYmMoKTspVGsoWCl9ZnVuY3Rpb24gVGsoYSl7dmFyIGI9VWsoYS5hbHRlcm5hdGUsYSxjaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1JrKGEpOlg9Yjtsay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBSayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1ZaShjLGIsY2opLG51bGwhPT1jKXtYPWM7cmV0dXJufX1lbHNle2M9R2ooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WD1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtSPTY7WD1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1g9YjtyZXR1cm59WD1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1SJiYoUj01KX1mdW5jdGlvbiBPayhhLGIsYyl7dmFyIGQ9QyxlPW1rLnRyYW5zaXRpb247dHJ5e21rLnRyYW5zaXRpb249bnVsbCxDPTEsVmsoYSxiLGMsZCl9ZmluYWxseXttay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gVmsoYSxiLGMsZCl7ZG8gR2soKTt3aGlsZShudWxsIT09dWspO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QWMoYSxmKTthPT09UCYmKFg9UD1udWxsLFk9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx0a3x8KHRrPSEwLEVrKGdjLGZ1bmN0aW9uKCl7R2soKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9bWsudHJhbnNpdGlvbjttay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1XO1d8PTQ7bGsuY3VycmVudD1udWxsO01qKGEsYyk7YmsoYyxhKTtOZShDZik7Y2Q9ISFCZjtDZj1CZj1udWxsO2EuY3VycmVudD1jO2ZrKGMsYSxlKTtjYygpO1c9aDtDPWc7bWsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dGsmJih0az0hMSx1az1hLHZrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihPaT1udWxsKTtsYyhjLnN0YXRlTm9kZSxkKTtDayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWQoYltjXSk7aWYoTGkpdGhyb3cgTGk9ITEsYT1NaSxNaT1udWxsLGE7MCE9PSh2ayYxKSYmMCE9PWEudGFnJiZHaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT14az93aysrOih3az0wLHhrPWEpOndrPTA7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdrKCl7aWYobnVsbCE9PXVrKXt2YXIgYT1DYyh2ayksYj1tay50cmFuc2l0aW9uLGM9Qzt0cnl7bWsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT11ayl2YXIgZD0hMTtlbHNle2E9dWs7dWs9bnVsbDt2az0wO2lmKDAhPT0oVyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPVc7V3w9NDtmb3IoVD1hLmN1cnJlbnQ7bnVsbCE9PVQ7KXt2YXIgZj1ULGc9Zi5jaGlsZDtpZigwIT09KFQuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFQ9bDtudWxsIT09VDspe3ZhciBuPVQ7c3dpdGNoKG4udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok5qKDgsbixmKX12YXIgdT1uLmNoaWxkO2lmKG51bGwhPT11KXUucmV0dXJuPW4sVD11O2Vsc2UgZm9yKDtudWxsIT09VDspe249VDt2YXIgcT1uLnNpYmxpbmcseT1uLnJldHVybjtRaihuKTtpZihuPT09XG5sKXtUPW51bGw7YnJlYWt9aWYobnVsbCE9PXEpe3EucmV0dXJuPXk7VD1xO2JyZWFrfVQ9eX19fXZhciBtPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1tKXt2YXIgdz1tLmNoaWxkO2lmKG51bGwhPT13KXttLmNoaWxkPW51bGw7ZG97dmFyIEo9dy5zaWJsaW5nO3cuc2libGluZz1udWxsO3c9Sn13aGlsZShudWxsIT09dyl9fVQ9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixUPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVQ7KXtmPVQ7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpOaig5LGYsZi5yZXR1cm4pfXZhciB2PWYuc2libGluZztpZihudWxsIT09dil7di5yZXR1cm49Zi5yZXR1cm47VD12O2JyZWFrIGJ9VD1mLnJldHVybn19dmFyIHg9YS5jdXJyZW50O2ZvcihUPXg7bnVsbCE9PVQ7KXtnPVQ7dmFyIHI9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG5yKXIucmV0dXJuPWcsVD1yO2Vsc2UgYjpmb3IoZz14O251bGwhPT1UOyl7aD1UO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1Ok9qKDksaCl9fWNhdGNoKFope1UoaCxoLnJldHVybixaKX1pZihoPT09Zyl7VD1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtUPUY7YnJlYWsgYn1UPWgucmV0dXJufX1XPWU7aWcoKTtpZihrYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGtjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7a2Mub25Qb3N0Q29tbWl0RmliZXJSb290KGpjLGEpfWNhdGNoKFope31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG1rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gV2soYSxiLGMpe2I9SGkoYyxiKTtiPUtpKGEsYiwxKTtBZyhhLGIpO2I9SmcoKTthPUFrKGEsMSk7bnVsbCE9PWEmJih6YyhhLDEsYiksQ2soYSxiKSl9XG5mdW5jdGlvbiBVKGEsYixjKXtpZigzPT09YS50YWcpV2soYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7V2soYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09T2l8fCFPaS5oYXMoZCkpKXthPUhpKGMsYSk7YT1OaShiLGEsMSk7QWcoYixhKTthPUpnKCk7Yj1BayhiLDEpO251bGwhPT1iJiYoemMoYiwxLGEpLENrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1KZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztQPT09YSYmKFkmYyk9PT1jJiYoND09PVJ8fDM9PT1SJiYoWSYxMzAwMjM0MjQpPT09WSYmNTAwPkIoKS1kaz9KayhhLDApOnBrfD1jKTtDayhhLGIpfWZ1bmN0aW9uIFhrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9cmMscmM8PD0xLDA9PT0ocmMmMTMwMDIzNDI0KSYmKHJjPTQxOTQzMDQpKSk7dmFyIGM9SmcoKTthPUFrKGEsYik7bnVsbCE9PWEmJih6YyhhLGIsYyksQ2soYSxjKSl9ZnVuY3Rpb24gemooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1hrKGEsYyl9XG5mdW5jdGlvbiBaaihhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtYayhhLGMpfXZhciBVaztcblVrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8VmYuY3VycmVudCl0Zz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIHRnPSExLEZqKGEsYixjKTt0Zz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIHRnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmYWgoYixVZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WGYoYixILmN1cnJlbnQpO3NnKGIsYyk7ZT1VaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9WmgoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj9cbihiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9bnVsbCxZZihkKT8oZj0hMCxiZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLHhnKGIpLGUudXBkYXRlcj1NZyxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIsUWcoYixkLGEsYyksYj1waihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZiaChiKSxlaihudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVlrKGQpO2E9a2coZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9a2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPW9qKG51bGwsYixcbmQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1maihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWhqKG51bGwsYixkLGtnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LGQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksa2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksb2ooYSxiLGQsZSxjKTtjYXNlIDM6YTp7cWooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O3lnKGEsYik7RWcoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsXG5jYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPWYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9RXJyb3IocCg0MjMpKTtiPXJqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUVycm9yKHAoNDI0KSk7Yj1yaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoZWg9S2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxkaD1iLEk9ITAsZmg9bnVsbCxjPXpoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle25oKCk7aWYoZD09PWUpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9ZWooYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gSGgoYiksbnVsbD09PWEmJmtoKGIpLGQ9Yi50eXBlLGU9XG5iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixEZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRGYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxuaihhLGIpLGVqKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYma2goYiksbnVsbDtjYXNlIDEzOnJldHVybiB2aihhLGIsYyk7Y2FzZSA0OnJldHVybiBGaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD15aChiLG51bGwsZCxjKTplaihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmtnKGQsZSksZmooYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGVqKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZWooYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZWooYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7Zz1lLnZhbHVlO0cobGcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihHZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVZmLmN1cnJlbnQpe2I9Z2ooYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9emcoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBuPWwucGVuZGluZztudWxsPT09bj9rLm5leHQ9XG5rOihrLm5leHQ9bi5uZXh0LG4ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7cmcoZi5yZXR1cm4sYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO3JnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31laihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7XG5jYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sc2coYixjKSxlPXVnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLGVqKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1rZyhkLGIucGVuZGluZ1Byb3BzKSxlPWtnKGQudHlwZSxlKSxoaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGpqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6a2coZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLFlmKGQpPyhhPSEwLGJnKGIpKTphPSExLHNnKGIsYyksT2coYixkLGUpLFFnKGIsZCxlLGMpLHBqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gRWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGxqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixcbmIudGFnKSk7fTtmdW5jdGlvbiBFayhhLGIpe3JldHVybiAkYihhLGIpfWZ1bmN0aW9uIFprKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIGhoKGEsYixjLGQpe3JldHVybiBuZXcgWmsoYSxiLGMsZCl9XG5mdW5jdGlvbiBpaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFlrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBpaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Q2EpcmV0dXJuIDExO2lmKGE9PT1GYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB0aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPWhoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB2aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpaWooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2Ugd2E6cmV0dXJuIHhoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgeGE6Zz04O2V8PTg7YnJlYWs7Y2FzZSB6YTpyZXR1cm4gYT1oaCgxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPXphLGEubGFuZXM9ZixhO2Nhc2UgRGE6cmV0dXJuIGE9aGgoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RGEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1oaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEhhOnJldHVybiB3aihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQWE6Zz0xMDticmVhayBhO2Nhc2UgQmE6Zz05O2JyZWFrIGE7Y2FzZSBDYTpnPTExO1xuYnJlYWsgYTtjYXNlIEZhOmc9MTQ7YnJlYWsgYTtjYXNlIEdhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1oaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIHhoKGEsYixjLGQpe2E9aGgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHdqKGEsYixjLGQpe2E9aGgoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SGE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXt9O3JldHVybiBhfWZ1bmN0aW9uIHVoKGEsYixjKXthPWhoKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHdoKGEsYixjKXtiPWhoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gJGsoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz15YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz15YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz15YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gYWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3ICRrKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9aGgoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTt4ZyhmKTtyZXR1cm4gYX1mdW5jdGlvbiBibChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnZhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gY2woYSl7aWYoIWEpcmV0dXJuIFVmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVWIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihZZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFlmKGMpKXJldHVybiBhZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBkbChhLGIsYyxkLGUsZixnLGgsayl7YT1hbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1jbChudWxsKTtjPWEuY3VycmVudDtkPUpnKCk7ZT1LZyhjKTtmPXpnKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7QWcoYyxmKTthLmN1cnJlbnQubGFuZXM9ZTt6YyhhLGUsZCk7Q2soYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBlbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1KZygpLGc9S2coZSk7Yz1jbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7YT1MZyhlLGcsZik7bnVsbCE9PWEmJkNnKGEsZSxnKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGZsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZ2woYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGhsKGEsYil7Z2woYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmdsKGEsYil9ZnVuY3Rpb24gaWwoKXtyZXR1cm4gbnVsbH12YXIgamw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIGtsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubGwucHJvdG90eXBlLnJlbmRlcj1rbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2VsKGEsYixudWxsLG51bGwpfTtsbC5wcm90b3R5cGUudW5tb3VudD1rbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1FrKGZ1bmN0aW9uKCl7ZWwobnVsbCxhLG51bGwsbnVsbCl9KTtiW3RmXT1udWxsfX07ZnVuY3Rpb24gbGwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5sbC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9R2MoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFBjLmxlbmd0aCYmMCE9PWImJmI8UGNbY10ucHJpb3JpdHk7YysrKTtQYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZVYyhhKX19O2Z1bmN0aW9uIG1sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gb2woKXt9XG5mdW5jdGlvbiBwbChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtmLmNhbGwoYSl9fXZhciBnPWRsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLG9sKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3RmXT1nLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1FrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1mbChrKTtoLmNhbGwoYSl9fXZhciBrPWFsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixvbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt0Zl09ay5jdXJyZW50O3JmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtRayhmdW5jdGlvbigpe2VsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBxbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1mbChnKTtoLmNhbGwoYSl9fWVsKGIsZyxhLGUpfWVsc2UgZz1wbChjLGIsYSxlLGQpO3JldHVybiBmbChnKX1EYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXNjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKEJjKGIsY3wxKSxDayhiLEIoKSksMD09PShXJjYpJiYoYWo9QigpKzUwMCxpZygpKSl9YnJlYWs7Y2FzZSAxMzp2YXIgZD1KZygpO1FrKGZ1bmN0aW9uKCl7cmV0dXJuIExnKGEsMSxkKX0pO2hsKGEsMSl9fTtFYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1KZygpO0xnKGEsMTM0MjE3NzI4LGIpO2hsKGEsMTM0MjE3NzI4KX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SmcoKSxjPUtnKGEpO0xnKGEsYyxiKTtobChhLGMpfX07R2M9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SGM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueGI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjokYShhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9Q2IoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1ZhKGQpOyRhKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZWIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYj1QaztHYj1RaztcbnZhciBybD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQmIsdGUsQ2IsRGIsRWIsUGtdfSxzbD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4xLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHRsPXtidW5kbGVUeXBlOnNsLmJ1bmRsZVR5cGUsdmVyc2lvbjpzbC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6c2wucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzpzbC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp0YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WWIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnNsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmlsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4xLjAtbmV4dC0yMmVkYjlmNzctMjAyMjA0MjZcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB1bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXVsLmlzRGlzYWJsZWQmJnVsLnN1cHBvcnRzRmliZXIpdHJ5e2pjPXVsLmluamVjdCh0bCksa2M9dWx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXJsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighbWwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gYmwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFtbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWpsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1hbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3RmXT1iLmN1cnJlbnQ7cmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcga2woYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVliKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFFrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighbWwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWpsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1kbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3RmXT1iLmN1cnJlbnQ7cmYoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBsbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFubChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBxbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFubChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oUWsoZnVuY3Rpb24oKXtxbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdGZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1QaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIW5sKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBxbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMS4wLW5leHQtMjJlZGI5Zjc3LTIwMjIwNDI2XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4xLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hvbWUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zik7ZWxzZSBmb3IodCBpbiBlKWVbdF0mJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIjtmPGFyZ3VtZW50cy5sZW5ndGg7KShlPWFyZ3VtZW50c1tmKytdKSYmKHQ9cihlKSkmJihuJiYobis9XCIgXCIpLG4rPXQpO3JldHVybiBufWV4cG9ydCBkZWZhdWx0IGNsc3g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3Nlcykge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goXG4gIC8vIGBPYmpldC5rZXlzKHNsb3RzKWAgY2FuJ3QgYmUgd2lkZXIgdGhhbiBgVGAgYmVjYXVzZSB3ZSBpbmZlciBgVGAgZnJvbSBgc2xvdHNgLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzEyMjUzI2lzc3VlY29tbWVudC0yNjMxMzIyMDhcbiAgc2xvdCA9PiB7XG4gICAgb3V0cHV0W3Nsb3RdID0gc2xvdHNbc2xvdF0ucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBhY2MucHVzaChnZXRVdGlsaXR5Q2xhc3Moa2V5KSk7XG4gICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXNba2V5XSkge1xuICAgICAgICAgIGFjYy5wdXNoKGNsYXNzZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLmpvaW4oJyAnKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLypcblxuQmFzZWQgb2ZmIGdsYW1vcidzIFN0eWxlU2hlZXQsIHRoYW5rcyBTdW5pbCDinaTvuI9cblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCdcblxubGV0IHN0eWxlU2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7IGtleTogJycsIGNvbnRhaW5lcjogZG9jdW1lbnQuaGVhZCB9KVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbi8vICRGbG93Rml4TWVcbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiB0YWcuc2hlZXQ7XG4gIH0gLy8gdGhpcyB3ZWlyZG5lc3MgYnJvdWdodCB0byB5b3UgYnkgZmlyZWZveFxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nLCBvcHRpb25zLmtleSk7XG5cbiAgaWYgKG9wdGlvbnMubm9uY2UgIT09IHVuZGVmaW5lZCkge1xuICAgIHRhZy5zZXRBdHRyaWJ1dGUoJ25vbmNlJywgb3B0aW9ucy5ub25jZSk7XG4gIH1cblxuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1zJywgJycpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFVzaW5nIE5vZGUgaW5zdGVhZCBvZiBIVE1MRWxlbWVudCBzaW5jZSBjb250YWluZXIgbWF5IGJlIGEgU2hhZG93Um9vdFxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5faW5zZXJ0VGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKF90aGlzLnRhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChfdGhpcy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmluc2VydGlvblBvaW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKF90aGlzLnByZXBlbmQpIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5jb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBiZWZvcmUgPSBfdGhpcy5iZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJlZm9yZSA9IF90aGlzLnRhZ3NbX3RoaXMudGFncy5sZW5ndGggLSAxXS5uZXh0U2libGluZztcbiAgICAgIH1cblxuICAgICAgX3RoaXMuY29udGFpbmVyLmluc2VydEJlZm9yZSh0YWcsIGJlZm9yZSk7XG5cbiAgICAgIF90aGlzLnRhZ3MucHVzaCh0YWcpO1xuICAgIH07XG5cbiAgICB0aGlzLmlzU3BlZWR5ID0gb3B0aW9ucy5zcGVlZHkgPT09IHVuZGVmaW5lZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgOiBvcHRpb25zLnNwZWVkeTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG4gICAgdGhpcy5ub25jZSA9IG9wdGlvbnMubm9uY2U7IC8vIGtleSBpcyB0aGUgdmFsdWUgb2YgdGhlIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGUsIGl0J3MgdXNlZCB0byBpZGVudGlmeSBkaWZmZXJlbnQgc2hlZXRzXG5cbiAgICB0aGlzLmtleSA9IG9wdGlvbnMua2V5O1xuICAgIHRoaXMuY29udGFpbmVyID0gb3B0aW9ucy5jb250YWluZXI7XG4gICAgdGhpcy5wcmVwZW5kID0gb3B0aW9ucy5wcmVwZW5kO1xuICAgIHRoaXMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaHlkcmF0ZSA9IGZ1bmN0aW9uIGh5ZHJhdGUobm9kZXMpIHtcbiAgICBub2Rlcy5mb3JFYWNoKHRoaXMuX2luc2VydFRhZyk7XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydCA9IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgLy8gdGhlIG1heCBsZW5ndGggaXMgaG93IG1hbnkgcnVsZXMgd2UgaGF2ZSBwZXIgc3R5bGUgdGFnLCBpdCdzIDY1MDAwIGluIHNwZWVkeSBtb2RlXG4gICAgLy8gaXQncyAxIGluIGRldiBiZWNhdXNlIHdlIGluc2VydCBzb3VyY2UgbWFwcyB0aGF0IG1hcCBhIHNpbmdsZSBydWxlIHRvIGEgbG9jYXRpb25cbiAgICAvLyBhbmQgeW91IGNhbiBvbmx5IGhhdmUgb25lIHNvdXJjZSBtYXAgcGVyIHN0eWxlIHRhZ1xuICAgIGlmICh0aGlzLmN0ciAlICh0aGlzLmlzU3BlZWR5ID8gNjUwMDAgOiAxKSA9PT0gMCkge1xuICAgICAgdGhpcy5faW5zZXJ0VGFnKGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzSW1wb3J0UnVsZSA9IHJ1bGUuY2hhckNvZGVBdCgwKSA9PT0gNjQgJiYgcnVsZS5jaGFyQ29kZUF0KDEpID09PSAxMDU7XG5cbiAgICAgIGlmIChpc0ltcG9ydFJ1bGUgJiYgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUpIHtcbiAgICAgICAgLy8gdGhpcyB3b3VsZCBvbmx5IGNhdXNlIHByb2JsZW0gaW4gc3BlZWR5IG1vZGVcbiAgICAgICAgLy8gYnV0IHdlIGRvbid0IHdhbnQgZW5hYmxpbmcgc3BlZWR5IHRvIGFmZmVjdCB0aGUgb2JzZXJ2YWJsZSBiZWhhdmlvclxuICAgICAgICAvLyBzbyB3ZSByZXBvcnQgdGhpcyBlcnJvciBhdCBhbGwgdGltZXNcbiAgICAgICAgY29uc29sZS5lcnJvcihcIllvdSdyZSBhdHRlbXB0aW5nIHRvIGluc2VydCB0aGUgZm9sbG93aW5nIHJ1bGU6XFxuXCIgKyBydWxlICsgJ1xcblxcbmBAaW1wb3J0YCBydWxlcyBtdXN0IGJlIGJlZm9yZSBhbGwgb3RoZXIgdHlwZXMgb2YgcnVsZXMgaW4gYSBzdHlsZXNoZWV0IGJ1dCBvdGhlciBydWxlcyBoYXZlIGFscmVhZHkgYmVlbiBpbnNlcnRlZC4gUGxlYXNlIGVuc3VyZSB0aGF0IGBAaW1wb3J0YCBydWxlcyBhcmUgYmVmb3JlIGFsbCBvdGhlciBydWxlcy4nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgfHwgIWlzSW1wb3J0UnVsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NwZWVkeSkge1xuICAgICAgdmFyIHNoZWV0ID0gc2hlZXRGb3JUYWcodGFnKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyB0aGUgYmlnIGRyYXdiYWNrIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEvOigtbW96LXBsYWNlaG9sZGVyfC1tb3otZm9jdXMtaW5uZXJ8LW1vei1mb2N1c3Jpbmd8LW1zLWlucHV0LXBsYWNlaG9sZGVyfC1tb3otcmVhZC13cml0ZXwtbW96LXJlYWQtb25seXwtbXMtY2xlYXJ8LW1zLWV4cGFuZHwtbXMtcmV2ZWFsKXsvLnRlc3QocnVsZSkpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBpbnNlcnRpbmcgdGhlIGZvbGxvd2luZyBydWxlOiBcXFwiXCIgKyBydWxlICsgXCJcXFwiXCIsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdHIrKztcbiAgfTtcblxuICBfcHJvdG8uZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgcmV0dXJuIHRhZy5wYXJlbnROb2RlICYmIHRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZyk7XG4gICAgfSk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuX2FscmVhZHlJbnNlcnRlZE9yZGVySW5zZW5zaXRpdmVSdWxlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5leHBvcnQgeyBTdHlsZVNoZWV0IH07XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCB2YXIgZnJvbSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoICh2YWx1ZSwgbGVuZ3RoKSB7XG5cdHJldHVybiBjaGFyYXQodmFsdWUsIDApIF4gNDUgPyAoKCgoKCgobGVuZ3RoIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAwKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDEpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMikpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAzKSA6IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4b2YgKHZhbHVlLCBzZWFyY2gpIHtcblx0cmV0dXJuIHZhbHVlLmluZGV4T2Yoc2VhcmNoKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyYXQgKHZhbHVlLCBpbmRleCkge1xuXHRyZXR1cm4gdmFsdWUuY2hhckNvZGVBdChpbmRleCkgfCAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnN0ciAodmFsdWUsIGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHZhbHVlLnNsaWNlKGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJsZW4gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueVtdfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2l6ZW9mICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcGFyYW0ge2FueVtdfSBhcnJheVxuICogQHJldHVybiB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kICh2YWx1ZSwgYXJyYXkpIHtcblx0cmV0dXJuIGFycmF5LnB1c2godmFsdWUpLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZSAoYXJyYXksIGNhbGxiYWNrKSB7XG5cdHJldHVybiBhcnJheS5tYXAoY2FsbGJhY2spLmpvaW4oJycpXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9kZSAodmFsdWUsIHJvb3QsIHBhcmVudCwgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0cmV0dXJuIHt2YWx1ZTogdmFsdWUsIHJvb3Q6IHJvb3QsIHBhcmVudDogcGFyZW50LCB0eXBlOiB0eXBlLCBwcm9wczogcHJvcHMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4sIGxlbmd0aDogbGVuZ3RoLCByZXR1cm46ICcnfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcHkgKHJvb3QsIHByb3BzKSB7XG5cdHJldHVybiBhc3NpZ24obm9kZSgnJywgbnVsbCwgbnVsbCwgJycsIG51bGwsIG51bGwsIDApLCByb290LCB7bGVuZ3RoOiAtcm9vdC5sZW5ndGh9LCBwcm9wcylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCJleHBvcnQgdmFyIE1TID0gJy1tcy0nXG5leHBvcnQgdmFyIE1PWiA9ICctbW96LSdcbmV4cG9ydCB2YXIgV0VCS0lUID0gJy13ZWJraXQtJ1xuXG5leHBvcnQgdmFyIENPTU1FTlQgPSAnY29tbSdcbmV4cG9ydCB2YXIgUlVMRVNFVCA9ICdydWxlJ1xuZXhwb3J0IHZhciBERUNMQVJBVElPTiA9ICdkZWNsJ1xuXG5leHBvcnQgdmFyIFBBR0UgPSAnQHBhZ2UnXG5leHBvcnQgdmFyIE1FRElBID0gJ0BtZWRpYSdcbmV4cG9ydCB2YXIgSU1QT1JUID0gJ0BpbXBvcnQnXG5leHBvcnQgdmFyIENIQVJTRVQgPSAnQGNoYXJzZXQnXG5leHBvcnQgdmFyIFZJRVdQT1JUID0gJ0B2aWV3cG9ydCdcbmV4cG9ydCB2YXIgU1VQUE9SVFMgPSAnQHN1cHBvcnRzJ1xuZXhwb3J0IHZhciBET0NVTUVOVCA9ICdAZG9jdW1lbnQnXG5leHBvcnQgdmFyIE5BTUVTUEFDRSA9ICdAbmFtZXNwYWNlJ1xuZXhwb3J0IHZhciBLRVlGUkFNRVMgPSAnQGtleWZyYW1lcydcbmV4cG9ydCB2YXIgRk9OVF9GQUNFID0gJ0Bmb250LWZhY2UnXG5leHBvcnQgdmFyIENPVU5URVJfU1RZTEUgPSAnQGNvdW50ZXItc3R5bGUnXG5leHBvcnQgdmFyIEZPTlRfRkVBVFVSRV9WQUxVRVMgPSAnQGZvbnQtZmVhdHVyZS12YWx1ZXMnXG4iLCJpbXBvcnQge0lNUE9SVCwgQ09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT04sIEtFWUZSQU1FU30gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHtzdHJsZW4sIHNpemVvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0dmFyIG91dHB1dCA9ICcnXG5cdHZhciBsZW5ndGggPSBzaXplb2YoY2hpbGRyZW4pXG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcblx0XHRvdXRwdXQgKz0gY2FsbGJhY2soY2hpbGRyZW5baV0sIGksIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRyZXR1cm4gb3V0cHV0XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkgKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBERUNMQVJBVElPTjogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC5yZXR1cm4gfHwgZWxlbWVudC52YWx1ZVxuXHRcdGNhc2UgQ09NTUVOVDogcmV0dXJuICcnXG5cdFx0Y2FzZSBLRVlGUkFNRVM6IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spICsgJ30nXG5cdFx0Y2FzZSBSVUxFU0VUOiBlbGVtZW50LnZhbHVlID0gZWxlbWVudC5wcm9wcy5qb2luKCcsJylcblx0fVxuXG5cdHJldHVybiBzdHJsZW4oY2hpbGRyZW4gPSBzZXJpYWxpemUoZWxlbWVudC5jaGlsZHJlbiwgY2FsbGJhY2spKSA/IGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIGNoaWxkcmVuICsgJ30nIDogJydcbn1cbiIsImltcG9ydCB7Q09NTUVOVCwgUlVMRVNFVCwgREVDTEFSQVRJT059IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7YWJzLCBjaGFyYXQsIHRyaW0sIGZyb20sIHNpemVvZiwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgcmVwbGFjZSwgaW5kZXhvZn0gZnJvbSAnLi9VdGlsaXR5LmpzJ1xuaW1wb3J0IHtub2RlLCBjaGFyLCBwcmV2LCBuZXh0LCBwZWVrLCBjYXJldCwgYWxsb2MsIGRlYWxsb2MsIGRlbGltaXQsIHdoaXRlc3BhY2UsIGVzY2FwaW5nLCBpZGVudGlmaWVyLCBjb21tZW50ZXJ9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7b2JqZWN0W119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21waWxlICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyhwYXJzZSgnJywgbnVsbCwgbnVsbCwgbnVsbCwgWycnXSwgdmFsdWUgPSBhbGxvYyh2YWx1ZSksIDAsIFswXSwgdmFsdWUpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNldHNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBzZXVkb1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkZWNsYXJhdGlvbnNcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBydWxlLCBydWxlcywgcnVsZXNldHMsIHBzZXVkbywgcG9pbnRzLCBkZWNsYXJhdGlvbnMpIHtcblx0dmFyIGluZGV4ID0gMFxuXHR2YXIgb2Zmc2V0ID0gMFxuXHR2YXIgbGVuZ3RoID0gcHNldWRvXG5cdHZhciBhdHJ1bGUgPSAwXG5cdHZhciBwcm9wZXJ0eSA9IDBcblx0dmFyIHByZXZpb3VzID0gMFxuXHR2YXIgdmFyaWFibGUgPSAxXG5cdHZhciBzY2FubmluZyA9IDFcblx0dmFyIGFtcGVyc2FuZCA9IDFcblx0dmFyIGNoYXJhY3RlciA9IDBcblx0dmFyIHR5cGUgPSAnJ1xuXHR2YXIgcHJvcHMgPSBydWxlc1xuXHR2YXIgY2hpbGRyZW4gPSBydWxlc2V0c1xuXHR2YXIgcmVmZXJlbmNlID0gcnVsZVxuXHR2YXIgY2hhcmFjdGVycyA9IHR5cGVcblxuXHR3aGlsZSAoc2Nhbm5pbmcpXG5cdFx0c3dpdGNoIChwcmV2aW91cyA9IGNoYXJhY3RlciwgY2hhcmFjdGVyID0gbmV4dCgpKSB7XG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAocHJldmlvdXMgIT0gMTA4ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCBsZW5ndGggLSAxKSA9PSA1OCkge1xuXHRcdFx0XHRcdGlmIChpbmRleG9mKGNoYXJhY3RlcnMgKz0gcmVwbGFjZShkZWxpbWl0KGNoYXJhY3RlciksICcmJywgJyZcXGYnKSwgJyZcXGYnKSAhPSAtMSlcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IC0xXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0Ly8gXCIgJyBbXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OiBjYXNlIDkxOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQoY2hhcmFjdGVyKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFx0IFxcbiBcXHIgXFxzXG5cdFx0XHRjYXNlIDk6IGNhc2UgMTA6IGNhc2UgMTM6IGNhc2UgMzI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gd2hpdGVzcGFjZShwcmV2aW91cylcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRjaGFyYWN0ZXJzICs9IGVzY2FwaW5nKGNhcmV0KCkgLSAxLCA3KVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0Ly8gL1xuXHRcdFx0Y2FzZSA0Nzpcblx0XHRcdFx0c3dpdGNoIChwZWVrKCkpIHtcblx0XHRcdFx0XHRjYXNlIDQyOiBjYXNlIDQ3OlxuXHRcdFx0XHRcdFx0YXBwZW5kKGNvbW1lbnQoY29tbWVudGVyKG5leHQoKSwgY2FyZXQoKSksIHJvb3QsIHBhcmVudCksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6XG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSkgOiBkZWNsYXJhdGlvbihyZXBsYWNlKGNoYXJhY3RlcnMsICcgJywgJycpICsgJzsnLCBydWxlLCBwYXJlbnQsIGxlbmd0aCAtIDIpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIEAgO1xuXHRcdFx0XHRcdGNhc2UgNTk6IGNoYXJhY3RlcnMgKz0gJzsnXG5cdFx0XHRcdFx0Ly8geyBydWxlL2F0LXJ1bGVcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0YXBwZW5kKHJlZmVyZW5jZSA9IHJ1bGVzZXQoY2hhcmFjdGVycywgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcyA9IFtdLCBjaGlsZHJlbiA9IFtdLCBsZW5ndGgpLCBydWxlc2V0cylcblxuXHRcdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PT0gMTIzKVxuXHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0ID09PSAwKVxuXHRcdFx0XHRcdFx0XHRcdHBhcnNlKGNoYXJhY3RlcnMsIHJvb3QsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBwcm9wcywgcnVsZXNldHMsIGxlbmd0aCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0XHRcdHN3aXRjaCAoYXRydWxlID09PSA5OSAmJiBjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCA/IDEwMCA6IGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gZCBtIHNcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMTAwOiBjYXNlIDEwOTogY2FzZSAxMTU6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHBhcnNlKHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcnVsZSAmJiBhcHBlbmQocnVsZXNldCh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIDAsIDAsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHJ1bGVzLCBwcm9wcyA9IFtdLCBsZW5ndGgpLCBjaGlsZHJlbiksIHJ1bGVzLCBjaGlsZHJlbiwgbGVuZ3RoLCBwb2ludHMsIHJ1bGUgPyBwcm9wcyA6IGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgWycnXSwgY2hpbGRyZW4sIDAsIHBvaW50cywgY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNldCAodmFsdWUsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpIHtcblx0dmFyIHBvc3QgPSBvZmZzZXQgLSAxXG5cdHZhciBydWxlID0gb2Zmc2V0ID09PSAwID8gcnVsZXMgOiBbJyddXG5cdHZhciBzaXplID0gc2l6ZW9mKHJ1bGUpXG5cblx0Zm9yICh2YXIgaSA9IDAsIGogPSAwLCBrID0gMDsgaSA8IGluZGV4OyArK2kpXG5cdFx0Zm9yICh2YXIgeCA9IDAsIHkgPSBzdWJzdHIodmFsdWUsIHBvc3QgKyAxLCBwb3N0ID0gYWJzKGogPSBwb2ludHNbaV0pKSwgeiA9IHZhbHVlOyB4IDwgc2l6ZTsgKyt4KVxuXHRcdFx0aWYgKHogPSB0cmltKGogPiAwID8gcnVsZVt4XSArICcgJyArIHkgOiByZXBsYWNlKHksIC8mXFxmL2csIHJ1bGVbeF0pKSlcblx0XHRcdFx0cHJvcHNbaysrXSA9IHpcblxuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBvZmZzZXQgPT09IDAgPyBSVUxFU0VUIDogdHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBsZW5ndGgpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQgKHZhbHVlLCByb290LCBwYXJlbnQpIHtcblx0cmV0dXJuIG5vZGUodmFsdWUsIHJvb3QsIHBhcmVudCwgQ09NTUVOVCwgZnJvbShjaGFyKCkpLCBzdWJzdHIodmFsdWUsIDIsIC0yKSwgMClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjbGFyYXRpb24gKHZhbHVlLCByb290LCBwYXJlbnQsIGxlbmd0aCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBERUNMQVJBVElPTiwgc3Vic3RyKHZhbHVlLCAwLCBsZW5ndGgpLCBzdWJzdHIodmFsdWUsIGxlbmd0aCArIDEsIC0xKSwgbGVuZ3RoKVxufVxuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCB7IGRlYWxsb2MsIGFsbG9jLCBuZXh0LCB0b2tlbiwgZnJvbSwgcGVlaywgZGVsaW1pdCwgc2xpY2UsIHBvc2l0aW9uLCBSVUxFU0VULCBjb21iaW5lLCBtYXRjaCwgc2VyaWFsaXplLCBjb3B5LCByZXBsYWNlLCBXRUJLSVQsIE1PWiwgTVMsIEtFWUZSQU1FUywgREVDTEFSQVRJT04sIGhhc2gsIGNoYXJhdCwgc3RybGVuLCBpbmRleG9mLCBzdHJpbmdpZnksIENPTU1FTlQsIHJ1bGVzaGVldCwgbWlkZGxld2FyZSwgY29tcGlsZSB9IGZyb20gJ3N0eWxpcyc7XG5pbXBvcnQgJ0BlbW90aW9uL3dlYWstbWVtb2l6ZSc7XG5pbXBvcnQgJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nID0gZnVuY3Rpb24gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKGJlZ2luLCBwb2ludHMsIGluZGV4KSB7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgcHJldmlvdXMgPSBjaGFyYWN0ZXI7XG4gICAgY2hhcmFjdGVyID0gcGVlaygpOyAvLyAmXFxmXG5cbiAgICBpZiAocHJldmlvdXMgPT09IDM4ICYmIGNoYXJhY3RlciA9PT0gMTIpIHtcbiAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgIH1cblxuICAgIGlmICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gc2xpY2UoYmVnaW4sIHBvc2l0aW9uKTtcbn07XG5cbnZhciB0b1J1bGVzID0gZnVuY3Rpb24gdG9SdWxlcyhwYXJzZWQsIHBvaW50cykge1xuICAvLyBwcmV0ZW5kIHdlJ3ZlIHN0YXJ0ZWQgd2l0aCBhIGNvbW1hXG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgY2hhcmFjdGVyID0gNDQ7XG5cbiAgZG8ge1xuICAgIHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAvLyAmXFxmXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDM4ICYmIHBlZWsoKSA9PT0gMTIpIHtcbiAgICAgICAgICAvLyB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHdlIGRvbid0IGFjY291bnQgZm9yIGxpdGVyYWwgc2VxdWVuY2VzIGhlcmUgLSBsaWtlIGZvciBleGFtcGxlIHF1b3RlZCBzdHJpbmdzXG4gICAgICAgICAgLy8gc3R5bGlzIGluc2VydHMgXFxmIGFmdGVyICYgdG8ga25vdyB3aGVuICYgd2hlcmUgaXQgc2hvdWxkIHJlcGxhY2UgdGhpcyBzZXF1ZW5jZSB3aXRoIHRoZSBjb250ZXh0IHNlbGVjdG9yXG4gICAgICAgICAgLy8gYW5kIHdoZW4gaXQgc2hvdWxkIGp1c3QgY29uY2F0ZW5hdGUgdGhlIG91dGVyIGFuZCBpbm5lciBzZWxlY3RvcnNcbiAgICAgICAgICAvLyBpdCdzIHZlcnkgdW5saWtlbHkgZm9yIHRoaXMgc2VxdWVuY2UgdG8gYWN0dWFsbHkgYXBwZWFyIGluIGEgZGlmZmVyZW50IGNvbnRleHQsIHNvIHdlIGp1c3QgbGV2ZXJhZ2UgdGhpcyBmYWN0IGhlcmVcbiAgICAgICAgICBwb2ludHNbaW5kZXhdID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nKHBvc2l0aW9uIC0gMSwgcG9pbnRzLCBpbmRleCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZGVsaW1pdChjaGFyYWN0ZXIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICAvLyBjb21tYVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSA0NCkge1xuICAgICAgICAgIC8vIGNvbG9uXG4gICAgICAgICAgcGFyc2VkWysraW5kZXhdID0gcGVlaygpID09PSA1OCA/ICcmXFxmJyA6ICcnO1xuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSBwYXJzZWRbaW5kZXhdLmxlbmd0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxsdGhyb3VnaFxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXJzZWRbaW5kZXhdICs9IGZyb20oY2hhcmFjdGVyKTtcbiAgICB9XG4gIH0gd2hpbGUgKGNoYXJhY3RlciA9IG5leHQoKSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbnZhciBnZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpIHtcbiAgcmV0dXJuIGRlYWxsb2ModG9SdWxlcyhhbGxvYyh2YWx1ZSksIHBvaW50cykpO1xufTsgLy8gV2Vha1NldCB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLCBidXQgb25seSBXZWFrTWFwIGlzIHN1cHBvcnRlZCBpbiBJRTExXG5cblxudmFyIGZpeGVkRWxlbWVudHMgPSAvKiAjX19QVVJFX18gKi9uZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhdCA9IGZ1bmN0aW9uIGNvbXBhdChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgIT09ICdydWxlJyB8fCAhZWxlbWVudC5wYXJlbnQgfHwgLy8gcG9zaXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgY29udGFpbnMgcHNldWRvXG4gIC8vIG5lZ2F0aXZlIC5sZW5ndGggaW5kaWNhdGVzIHRoYXQgdGhpcyBydWxlIGhhcyBiZWVuIGFscmVhZHkgcHJlZml4ZWRcbiAgZWxlbWVudC5sZW5ndGggPCAxKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xuICB2YXIgaXNJbXBsaWNpdFJ1bGUgPSBlbGVtZW50LmNvbHVtbiA9PT0gcGFyZW50LmNvbHVtbiAmJiBlbGVtZW50LmxpbmUgPT09IHBhcmVudC5saW5lO1xuXG4gIHdoaWxlIChwYXJlbnQudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICB9IC8vIHNob3J0LWNpcmN1aXQgZm9yIHRoZSBzaW1wbGVzdCBjYXNlXG5cblxuICBpZiAoZWxlbWVudC5wcm9wcy5sZW5ndGggPT09IDEgJiYgdmFsdWUuY2hhckNvZGVBdCgwKSAhPT0gNThcbiAgLyogY29sb24gKi9cbiAgJiYgIWZpeGVkRWxlbWVudHMuZ2V0KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gaWYgdGhpcyBpcyBhbiBpbXBsaWNpdGx5IGluc2VydGVkIHJ1bGUgKHRoZSBvbmUgZWFnZXJseSBpbnNlcnRlZCBhdCB0aGUgZWFjaCBuZXcgbmVzdGVkIGxldmVsKVxuICAvLyB0aGVuIHRoZSBwcm9wcyBoYXMgYWxyZWFkeSBiZWVuIG1hbmlwdWxhdGVkIGJlZm9yZWhhbmQgYXMgdGhleSB0aGF0IGFycmF5IGlzIHNoYXJlZCBiZXR3ZWVuIGl0IGFuZCBpdHMgXCJydWxlIHBhcmVudFwiXG5cblxuICBpZiAoaXNJbXBsaWNpdFJ1bGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaXhlZEVsZW1lbnRzLnNldChlbGVtZW50LCB0cnVlKTtcbiAgdmFyIHBvaW50cyA9IFtdO1xuICB2YXIgcnVsZXMgPSBnZXRSdWxlcyh2YWx1ZSwgcG9pbnRzKTtcbiAgdmFyIHBhcmVudFJ1bGVzID0gcGFyZW50LnByb3BzO1xuXG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYXJlbnRSdWxlcy5sZW5ndGg7IGorKywgaysrKSB7XG4gICAgICBlbGVtZW50LnByb3BzW2tdID0gcG9pbnRzW2ldID8gcnVsZXNbaV0ucmVwbGFjZSgvJlxcZi9nLCBwYXJlbnRSdWxlc1tqXSkgOiBwYXJlbnRSdWxlc1tqXSArIFwiIFwiICsgcnVsZXNbaV07XG4gICAgfVxuICB9XG59O1xudmFyIHJlbW92ZUxhYmVsID0gZnVuY3Rpb24gcmVtb3ZlTGFiZWwoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC50eXBlID09PSAnZGVjbCcpIHtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgaWYgKCAvLyBjaGFyY29kZSBmb3IgbFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEwOCAmJiAvLyBjaGFyY29kZSBmb3IgYlxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMikgPT09IDk4KSB7XG4gICAgICAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgICAgIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgICAgIGVsZW1lbnQudmFsdWUgPSAnJztcbiAgICB9XG4gIH1cbn07XG52YXIgaWdub3JlRmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuXG52YXIgaXNJZ25vcmluZ0NvbW1lbnQgPSBmdW5jdGlvbiBpc0lnbm9yaW5nQ29tbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUgPT09ICdjb21tJyAmJiBlbGVtZW50LmNoaWxkcmVuLmluZGV4T2YoaWdub3JlRmxhZykgPiAtMTtcbn07XG5cbnZhciBjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSA9IGZ1bmN0aW9uIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKGNhY2hlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gICAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8IGNhY2hlLmNvbXBhdCkgcmV0dXJuO1xuICAgIHZhciB1bnNhZmVQc2V1ZG9DbGFzc2VzID0gZWxlbWVudC52YWx1ZS5tYXRjaCgvKDpmaXJzdHw6bnRofDpudGgtbGFzdCktY2hpbGQvZyk7XG5cbiAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3Nlcykge1xuICAgICAgdmFyIGlzTmVzdGVkID0gZWxlbWVudC5wYXJlbnQgPT09IGNoaWxkcmVuWzBdOyAvLyBpbiBuZXN0ZWQgcnVsZXMgY29tbWVudHMgYmVjb21lIGNoaWxkcmVuIG9mIHRoZSBcImF1dG8taW5zZXJ0ZWRcIiBydWxlXG4gICAgICAvL1xuICAgICAgLy8gY29uc2lkZXJpbmcgdGhpcyBpbnB1dDpcbiAgICAgIC8vIC5hIHtcbiAgICAgIC8vICAgLmIgLyogY29tbSAqLyB7fVxuICAgICAgLy8gICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vIH1cbiAgICAgIC8vIHdlIGdldCBvdXRwdXQgY29ycmVzcG9uZGluZyB0byB0aGlzOlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAmIHtcbiAgICAgIC8vICAgICAvKiBjb21tICovXG4gICAgICAvLyAgICAgY29sb3I6IGhvdHBpbms7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgLmIge31cbiAgICAgIC8vIH1cblxuICAgICAgdmFyIGNvbW1lbnRDb250YWluZXIgPSBpc05lc3RlZCA/IGNoaWxkcmVuWzBdLmNoaWxkcmVuIDogLy8gZ2xvYmFsIHJ1bGUgYXQgdGhlIHJvb3QgbGV2ZWxcbiAgICAgIGNoaWxkcmVuO1xuXG4gICAgICBmb3IgKHZhciBpID0gY29tbWVudENvbnRhaW5lci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgbm9kZSA9IGNvbW1lbnRDb250YWluZXJbaV07XG5cbiAgICAgICAgaWYgKG5vZGUubGluZSA8IGVsZW1lbnQubGluZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IC8vIGl0IGlzIHF1aXRlIHdlaXJkIGJ1dCBjb21tZW50cyBhcmUgKnVzdWFsbHkqIHB1dCBhdCBgY29sdW1uOiBlbGVtZW50LmNvbHVtbiAtIDFgXG4gICAgICAgIC8vIHNvIHdlIHNlZWsgKmZyb20gdGhlIGVuZCogZm9yIHRoZSBub2RlIHRoYXQgaXMgZWFybGllciB0aGFuIHRoZSBydWxlJ3MgYGVsZW1lbnRgIGFuZCBjaGVjayB0aGF0XG4gICAgICAgIC8vIHRoaXMgd2lsbCBhbHNvIG1hdGNoIGlucHV0cyBsaWtlIHRoaXM6XG4gICAgICAgIC8vIC5hIHtcbiAgICAgICAgLy8gICAvKiBjb21tICovXG4gICAgICAgIC8vICAgLmIge31cbiAgICAgICAgLy8gfVxuICAgICAgICAvL1xuICAgICAgICAvLyBidXQgdGhhdCBpcyBmaW5lXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGl0IHdvdWxkIGJlIHRoZSBlYXNpZXN0IHRvIGNoYW5nZSB0aGUgcGxhY2VtZW50IG9mIHRoZSBjb21tZW50IHRvIGJlIHRoZSBmaXJzdCBjaGlsZCBvZiB0aGUgcnVsZTpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC5iIHsgLyogY29tbSAqLyB9XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gd2l0aCBzdWNoIGlucHV0cyB3ZSB3b3VsZG4ndCBoYXZlIHRvIHNlYXJjaCBmb3IgdGhlIGNvbW1lbnQgYXQgYWxsXG4gICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGNoYW5naW5nIHRoaXMgY29tbWVudCBwbGFjZW1lbnQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvblxuXG5cbiAgICAgICAgaWYgKG5vZGUuY29sdW1uIDwgZWxlbWVudC5jb2x1bW4pIHtcbiAgICAgICAgICBpZiAoaXNJZ25vcmluZ0NvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB1bnNhZmVQc2V1ZG9DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKHVuc2FmZVBzZXVkb0NsYXNzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBpc0ltcG9ydFJ1bGUgPSBmdW5jdGlvbiBpc0ltcG9ydFJ1bGUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC50eXBlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgwKSA9PT0gNjQ7XG59O1xuXG52YXIgaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzID0gZnVuY3Rpb24gaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmICghaXNJbXBvcnRSdWxlKGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTsgLy8gdXNlIHRoaXMgdG8gcmVtb3ZlIGluY29ycmVjdCBlbGVtZW50cyBmcm9tIGZ1cnRoZXIgcHJvY2Vzc2luZ1xuLy8gc28gdGhleSBkb24ndCBnZXQgaGFuZGVkIHRvIHRoZSBgc2hlZXRgIChvciBhbnl0aGluZyBlbHNlKVxuLy8gYXMgdGhhdCBjb3VsZCBwb3RlbnRpYWxseSBsZWFkIHRvIGFkZGl0aW9uYWwgbG9ncyB3aGljaCBpbiB0dXJuIGNvdWxkIGJlIG92ZXJoZWxtaW5nIHRvIHRoZSB1c2VyXG5cblxudmFyIG51bGxpZnlFbGVtZW50ID0gZnVuY3Rpb24gbnVsbGlmeUVsZW1lbnQoZWxlbWVudCkge1xuICBlbGVtZW50LnR5cGUgPSAnJztcbiAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICBlbGVtZW50W1wicmV0dXJuXCJdID0gJyc7XG4gIGVsZW1lbnQuY2hpbGRyZW4gPSAnJztcbiAgZWxlbWVudC5wcm9wcyA9ICcnO1xufTtcblxudmFyIGluY29ycmVjdEltcG9ydEFsYXJtID0gZnVuY3Rpb24gaW5jb3JyZWN0SW1wb3J0QWxhcm0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGlmICghaXNJbXBvcnRSdWxlKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQucGFyZW50KSB7XG4gICAgY29uc29sZS5lcnJvcihcImBAaW1wb3J0YCBydWxlcyBjYW4ndCBiZSBuZXN0ZWQgaW5zaWRlIG90aGVyIHJ1bGVzLiBQbGVhc2UgbW92ZSBpdCB0byB0aGUgdG9wIGxldmVsIGFuZCBwdXQgaXQgYmVmb3JlIHJlZ3VsYXIgcnVsZXMuIEtlZXAgaW4gbWluZCB0aGF0IHRoZXkgY2FuIG9ubHkgYmUgdXNlZCB3aXRoaW4gZ2xvYmFsIHN0eWxlcy5cIik7XG4gICAgbnVsbGlmeUVsZW1lbnQoZWxlbWVudCk7XG4gIH0gZWxzZSBpZiAoaXNQcmVwZW5kZWRXaXRoUmVndWxhclJ1bGVzKGluZGV4LCBjaGlsZHJlbikpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIGFmdGVyIG90aGVyIHJ1bGVzLiBQbGVhc2UgcHV0IHlvdXIgYEBpbXBvcnRgIHJ1bGVzIGJlZm9yZSB5b3VyIG90aGVyIHJ1bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfVxufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cblxuZnVuY3Rpb24gcHJlZml4KHZhbHVlLCBsZW5ndGgpIHtcbiAgc3dpdGNoIChoYXNoKHZhbHVlLCBsZW5ndGgpKSB7XG4gICAgLy8gY29sb3ItYWRqdXN0XG4gICAgY2FzZSA1MTAzOlxuICAgICAgcmV0dXJuIFdFQktJVCArICdwcmludC0nICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhbmltYXRpb24sIGFuaW1hdGlvbi0oZGVsYXl8ZGlyZWN0aW9ufGR1cmF0aW9ufGZpbGwtbW9kZXxpdGVyYXRpb24tY291bnR8bmFtZXxwbGF5LXN0YXRlfHRpbWluZy1mdW5jdGlvbilcblxuICAgIGNhc2UgNTczNzpcbiAgICBjYXNlIDQyMDE6XG4gICAgY2FzZSAzMTc3OlxuICAgIGNhc2UgMzQzMzpcbiAgICBjYXNlIDE2NDE6XG4gICAgY2FzZSA0NDU3OlxuICAgIGNhc2UgMjkyMTogLy8gdGV4dC1kZWNvcmF0aW9uLCBmaWx0ZXIsIGNsaXAtcGF0aCwgYmFja2ZhY2UtdmlzaWJpbGl0eSwgY29sdW1uLCBib3gtZGVjb3JhdGlvbi1icmVha1xuXG4gICAgY2FzZSA1NTcyOlxuICAgIGNhc2UgNjM1NjpcbiAgICBjYXNlIDU4NDQ6XG4gICAgY2FzZSAzMTkxOlxuICAgIGNhc2UgNjY0NTpcbiAgICBjYXNlIDMwMDU6IC8vIG1hc2ssIG1hc2staW1hZ2UsIG1hc2stKG1vZGV8Y2xpcHxzaXplKSwgbWFzay0ocmVwZWF0fG9yaWdpbiksIG1hc2stcG9zaXRpb24sIG1hc2stY29tcG9zaXRlLFxuXG4gICAgY2FzZSA2MzkxOlxuICAgIGNhc2UgNTg3OTpcbiAgICBjYXNlIDU2MjM6XG4gICAgY2FzZSA2MTM1OlxuICAgIGNhc2UgNDU5OTpcbiAgICBjYXNlIDQ4NTU6IC8vIGJhY2tncm91bmQtY2xpcCwgY29sdW1ucywgY29sdW1uLShjb3VudHxmaWxsfGdhcHxydWxlfHJ1bGUtY29sb3J8cnVsZS1zdHlsZXxydWxlLXdpZHRofHNwYW58d2lkdGgpXG5cbiAgICBjYXNlIDQyMTU6XG4gICAgY2FzZSA2Mzg5OlxuICAgIGNhc2UgNTEwOTpcbiAgICBjYXNlIDUzNjU6XG4gICAgY2FzZSA1NjIxOlxuICAgIGNhc2UgMzgyOTpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFwcGVhcmFuY2UsIHVzZXItc2VsZWN0LCB0cmFuc2Zvcm0sIGh5cGhlbnMsIHRleHQtc2l6ZS1hZGp1c3RcblxuICAgIGNhc2UgNTM0OTpcbiAgICBjYXNlIDQyNDY6XG4gICAgY2FzZSA0ODEwOlxuICAgIGNhc2UgNjk2ODpcbiAgICBjYXNlIDI3NTY6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNT1ogKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LCBmbGV4LWRpcmVjdGlvblxuXG4gICAgY2FzZSA2ODI4OlxuICAgIGNhc2UgNDI2ODpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBvcmRlclxuXG4gICAgY2FzZSA2MTY1OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC0nICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1pdGVtc1xuXG4gICAgY2FzZSA1MTg3OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgcmVwbGFjZSh2YWx1ZSwgLyhcXHcrKS4rKDpbXl0rKS8sIFdFQktJVCArICdib3gtJDEkMicgKyBNUyArICdmbGV4LSQxJDInKSArIHZhbHVlO1xuICAgIC8vIGFsaWduLXNlbGZcblxuICAgIGNhc2UgNTQ0MzpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgJ2ZsZXgtaXRlbS0nICsgcmVwbGFjZSh2YWx1ZSwgL2ZsZXgtfC1zZWxmLywgJycpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tY29udGVudFxuXG4gICAgY2FzZSA0Njc1OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1saW5lLXBhY2snICsgcmVwbGFjZSh2YWx1ZSwgL2FsaWduLWNvbnRlbnR8ZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LXNocmlua1xuXG4gICAgY2FzZSA1NTQ4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWJhc2lzXG5cbiAgICBjYXNlIDUyOTI6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgdmFsdWU7XG4gICAgLy8gZmxleC1ncm93XG5cbiAgICBjYXNlIDYwNjA6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ2JveC0nICsgcmVwbGFjZSh2YWx1ZSwgJy1ncm93JywgJycpICsgV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdncm93JywgJ3Bvc2l0aXZlJykgKyB2YWx1ZTtcbiAgICAvLyB0cmFuc2l0aW9uXG5cbiAgICBjYXNlIDQ1NTQ6XG4gICAgICByZXR1cm4gV0VCS0lUICsgcmVwbGFjZSh2YWx1ZSwgLyhbXi1dKSh0cmFuc2Zvcm0pL2csICckMScgKyBXRUJLSVQgKyAnJDInKSArIHZhbHVlO1xuICAgIC8vIGN1cnNvclxuXG4gICAgY2FzZSA2MTg3OlxuICAgICAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKHpvb20tfGdyYWIpLywgV0VCS0lUICsgJyQxJyksIC8oaW1hZ2Utc2V0KS8sIFdFQktJVCArICckMScpLCB2YWx1ZSwgJycpICsgdmFsdWU7XG4gICAgLy8gYmFja2dyb3VuZCwgYmFja2dyb3VuZC1pbWFnZVxuXG4gICAgY2FzZSA1NDk1OlxuICAgIGNhc2UgMzk1OTpcbiAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKGltYWdlLXNldFxcKFteXSopLywgV0VCS0lUICsgJyQxJyArICckYCQxJyk7XG4gICAgLy8ganVzdGlmeS1jb250ZW50XG5cbiAgICBjYXNlIDQ5Njg6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHZhbHVlLCAvKC4rOikoZmxleC0pPyguKikvLCBXRUJLSVQgKyAnYm94LXBhY2s6JDMnICsgTVMgKyAnZmxleC1wYWNrOiQzJyksIC9zListYlteO10rLywgJ2p1c3RpZnknKSArIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gKG1hcmdpbnxwYWRkaW5nKS1pbmxpbmUtKHN0YXJ0fGVuZClcblxuICAgIGNhc2UgNDA5NTpcbiAgICBjYXNlIDM1ODM6XG4gICAgY2FzZSA0MDY4OlxuICAgIGNhc2UgMjUzMjpcbiAgICAgIHJldHVybiByZXBsYWNlKHZhbHVlLCAvKC4rKS1pbmxpbmUoLispLywgV0VCS0lUICsgJyQxJDInKSArIHZhbHVlO1xuICAgIC8vIChtaW58bWF4KT8od2lkdGh8aGVpZ2h0fGlubGluZS1zaXplfGJsb2NrLXNpemUpXG5cbiAgICBjYXNlIDgxMTY6XG4gICAgY2FzZSA3MDU5OlxuICAgIGNhc2UgNTc1MzpcbiAgICBjYXNlIDU1MzU6XG4gICAgY2FzZSA1NDQ1OlxuICAgIGNhc2UgNTcwMTpcbiAgICBjYXNlIDQ5MzM6XG4gICAgY2FzZSA0Njc3OlxuICAgIGNhc2UgNTUzMzpcbiAgICBjYXNlIDU3ODk6XG4gICAgY2FzZSA1MDIxOlxuICAgIGNhc2UgNDc2NTpcbiAgICAgIC8vIHN0cmV0Y2gsIG1heC1jb250ZW50LCBtaW4tY29udGVudCwgZmlsbC1hdmFpbGFibGVcbiAgICAgIGlmIChzdHJsZW4odmFsdWUpIC0gMSAtIGxlbmd0aCA+IDYpIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxKSkge1xuICAgICAgICAvLyAobSlheC1jb250ZW50LCAobSlpbi1jb250ZW50XG4gICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgIC8vIC1cbiAgICAgICAgICBpZiAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyA0KSAhPT0gNDUpIGJyZWFrO1xuICAgICAgICAvLyAoZilpbGwtYXZhaWxhYmxlLCAoZilpdC1jb250ZW50XG5cbiAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KSguKyktKFteXSspLywgJyQxJyArIFdFQktJVCArICckMi0kMycgKyAnJDEnICsgTU9aICsgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMykgPT0gMTA4ID8gJyQzJyA6ICckMi0kMycpKSArIHZhbHVlO1xuICAgICAgICAvLyAocyl0cmV0Y2hcblxuICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICByZXR1cm4gfmluZGV4b2YodmFsdWUsICdzdHJldGNoJykgPyBwcmVmaXgocmVwbGFjZSh2YWx1ZSwgJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgbGVuZ3RoKSArIHZhbHVlIDogdmFsdWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICAvLyBwb3NpdGlvbjogc3RpY2t5XG5cbiAgICBjYXNlIDQ5NDk6XG4gICAgICAvLyAocyl0aWNreT9cbiAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpICE9PSAxMTUpIGJyZWFrO1xuICAgIC8vIGRpc3BsYXk6IChmbGV4fGlubGluZS1mbGV4KVxuXG4gICAgY2FzZSA2NDQ0OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIHN0cmxlbih2YWx1ZSkgLSAzIC0gKH5pbmRleG9mKHZhbHVlLCAnIWltcG9ydGFudCcpICYmIDEwKSkpIHtcbiAgICAgICAgLy8gc3RpYyhrKXlcbiAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsICc6JywgJzonICsgV0VCS0lUKSArIHZhbHVlO1xuICAgICAgICAvLyAoaW5saW5lLSk/ZmwoZSl4XG5cbiAgICAgICAgY2FzZSAxMDE6XG4gICAgICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLis6KShbXjshXSspKDt8IS4rKT8vLCAnJDEnICsgV0VCS0lUICsgKGNoYXJhdCh2YWx1ZSwgMTQpID09PSA0NSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gkMycgKyAnJDEnICsgV0VCS0lUICsgJyQyJDMnICsgJyQxJyArIE1TICsgJyQyYm94JDMnKSArIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICAvLyB3cml0aW5nLW1vZGVcblxuICAgIGNhc2UgNTkzNjpcbiAgICAgIHN3aXRjaCAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAxMSkpIHtcbiAgICAgICAgLy8gdmVydGljYWwtbChyKVxuICAgICAgICBjYXNlIDExNDpcbiAgICAgICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsIC9bc3ZoXVxcdystW3RibHJdezJ9LywgJ3RiJykgKyB2YWx1ZTtcbiAgICAgICAgLy8gdmVydGljYWwtcihsKVxuXG4gICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGItcmwnKSArIHZhbHVlO1xuICAgICAgICAvLyBob3Jpem9udGFsKC0pdGJcblxuICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAnbHInKSArIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHZhbHVlICsgdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBwcmVmaXhlciA9IGZ1bmN0aW9uIHByZWZpeGVyKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcbiAgaWYgKGVsZW1lbnQubGVuZ3RoID4gLTEpIGlmICghZWxlbWVudFtcInJldHVyblwiXSkgc3dpdGNoIChlbGVtZW50LnR5cGUpIHtcbiAgICBjYXNlIERFQ0xBUkFUSU9OOlxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9IHByZWZpeChlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxlbmd0aCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgS0VZRlJBTUVTOlxuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgIHZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKVxuICAgICAgfSldLCBjYWxsYmFjayk7XG5cbiAgICBjYXNlIFJVTEVTRVQ6XG4gICAgICBpZiAoZWxlbWVudC5sZW5ndGgpIHJldHVybiBjb21iaW5lKGVsZW1lbnQucHJvcHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKG1hdGNoKHZhbHVlLCAvKDo6cGxhY1xcdyt8OnJlYWQtXFx3KykvKSkge1xuICAgICAgICAgIC8vIDpyZWFkLShvbmx5fHdyaXRlKVxuICAgICAgICAgIGNhc2UgJzpyZWFkLW9ubHknOlxuICAgICAgICAgIGNhc2UgJzpyZWFkLXdyaXRlJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHJlYWQtXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV1cbiAgICAgICAgICAgIH0pXSwgY2FsbGJhY2spO1xuICAgICAgICAgIC8vIDpwbGFjZWhvbGRlclxuXG4gICAgICAgICAgY2FzZSAnOjpwbGFjZWhvbGRlcic6XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBXRUJLSVQgKyAnaW5wdXQtJDEnKV1cbiAgICAgICAgICAgIH0pLCBjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV1cbiAgICAgICAgICAgIH0pLCBjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgcHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCBNUyArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRTdHlsaXNQbHVnaW5zID0gW3ByZWZpeGVyXTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICB2YXIga2V5ID0gb3B0aW9ucy5rZXk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBoYXZlIHRvIGNvbmZpZ3VyZSBga2V5YCBmb3IgeW91ciBjYWNoZS4gUGxlYXNlIG1ha2Ugc3VyZSBpdCdzIHVuaXF1ZSAoYW5kIG5vdCBlcXVhbCB0byAnY3NzJykgYXMgaXQncyB1c2VkIGZvciBsaW5raW5nIHN0eWxlcyB0byB5b3VyIGNhY2hlLlxcblwiICsgXCJJZiBtdWx0aXBsZSBjYWNoZXMgc2hhcmUgdGhlIHNhbWUga2V5IHRoZXkgbWlnaHQgXFxcImZpZ2h0XFxcIiBmb3IgZWFjaCBvdGhlcidzIHN0eWxlIGVsZW1lbnRzLlwiKTtcbiAgfVxuXG4gIGlmICgga2V5ID09PSAnY3NzJykge1xuICAgIHZhciBzc3JTdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXTpub3QoW2RhdGEtc10pXCIpOyAvLyBnZXQgU1NSZWQgc3R5bGVzIG91dCBvZiB0aGUgd2F5IG9mIFJlYWN0J3MgaHlkcmF0aW9uXG4gICAgLy8gZG9jdW1lbnQuaGVhZCBpcyBhIHNhZmUgcGxhY2UgdG8gbW92ZSB0aGVtIHRvKHRob3VnaCBub3RlIGRvY3VtZW50LmhlYWQgaXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBsYXN0IHBsYWNlIHRoZXkgd2lsbCBiZSlcbiAgICAvLyBub3RlIHRoaXMgdmVyeSB2ZXJ5IGludGVudGlvbmFsbHkgdGFyZ2V0cyBhbGwgc3R5bGUgZWxlbWVudHMgcmVnYXJkbGVzcyBvZiB0aGUga2V5IHRvIGVuc3VyZVxuICAgIC8vIHRoYXQgY3JlYXRpbmcgYSBjYWNoZSB3b3JrcyBpbnNpZGUgb2YgcmVuZGVyIG9mIGEgUmVhY3QgY29tcG9uZW50XG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHNzclN0eWxlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIHdlIHdhbnQgdG8gb25seSBtb3ZlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBzcGFjZSBpbiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgLy8gYmVjYXVzZSB0aGF0IGluZGljYXRlcyB0aGF0IGl0IGlzIGFuIEVtb3Rpb24gMTEgc2VydmVyLXNpZGUgcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICAgIC8vIHdoaWxlIHdlIHdpbGwgYWxyZWFkeSBpZ25vcmUgRW1vdGlvbiAxMSBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgYmVjYXVzZSBvZiB0aGUgOm5vdChbZGF0YS1zXSkgcGFydCBpbiB0aGUgc2VsZWN0b3JcbiAgICAgIC8vIEVtb3Rpb24gMTAgY2xpZW50LXNpZGUgaW5zZXJ0ZWQgc3R5bGVzIGRpZCBub3QgaGF2ZSBkYXRhLXMgKGJ1dCBpbXBvcnRhbnRseSBkaWQgbm90IGhhdmUgYSBzcGFjZSBpbiB0aGVpciBkYXRhLWVtb3Rpb24gYXR0cmlidXRlcylcbiAgICAgIC8vIHNvIGNoZWNraW5nIGZvciB0aGUgc3BhY2UgZW5zdXJlcyB0aGF0IGxvYWRpbmcgRW1vdGlvbiAxMSBhZnRlciBFbW90aW9uIDEwIGhhcyBpbnNlcnRlZCBzb21lIHN0eWxlc1xuICAgICAgLy8gd2lsbCBub3QgcmVzdWx0IGluIHRoZSBFbW90aW9uIDEwIHN0eWxlcyBiZWluZyBkZXN0cm95ZWRcbiAgICAgIHZhciBkYXRhRW1vdGlvbkF0dHJpYnV0ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWVtb3Rpb24nKTtcblxuICAgICAgaWYgKGRhdGFFbW90aW9uQXR0cmlidXRlLmluZGV4T2YoJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgc3R5bGlzUGx1Z2lucyA9IG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCBkZWZhdWx0U3R5bGlzUGx1Z2lucztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307XG4gIHZhciBjb250YWluZXI7XG4gIHZhciBub2Rlc1RvSHlkcmF0ZSA9IFtdO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoIC8vIHRoaXMgbWVhbnMgd2Ugd2lsbCBpZ25vcmUgZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhIHNwYWNlIGluIHRoZW0gd2hpY2hcbiAgICAvLyBtZWFucyB0aGF0IHRoZSBzdHlsZSBlbGVtZW50cyB3ZSdyZSBsb29raW5nIGF0IGFyZSBvbmx5IEVtb3Rpb24gMTEgc2VydmVyLXJlbmRlcmVkIHN0eWxlIGVsZW1lbnRzXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInN0eWxlW2RhdGEtZW1vdGlvbl49XFxcIlwiICsga2V5ICsgXCIgXFxcIl1cIiksIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICB2YXIgYXR0cmliID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVtb3Rpb25cIikuc3BsaXQoJyAnKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGF0dHJpYi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpbnNlcnRlZFthdHRyaWJbaV1dID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZXNUb0h5ZHJhdGUucHVzaChub2RlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfaW5zZXJ0O1xuXG4gIHZhciBvbW5pcHJlc2VudFBsdWdpbnMgPSBbY29tcGF0LCByZW1vdmVMYWJlbF07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBvbW5pcHJlc2VudFBsdWdpbnMucHVzaChjcmVhdGVVbnNhZmVTZWxlY3RvcnNBbGFybSh7XG4gICAgICBnZXQgY29tcGF0KCkge1xuICAgICAgICByZXR1cm4gY2FjaGUuY29tcGF0O1xuICAgICAgfVxuXG4gICAgfSksIGluY29ycmVjdEltcG9ydEFsYXJtKTtcbiAgfVxuXG4gIHtcbiAgICB2YXIgY3VycmVudFNoZWV0O1xuICAgIHZhciBmaW5hbGl6aW5nUGx1Z2lucyA9IFtzdHJpbmdpZnksIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50LnJvb3QpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnRbXCJyZXR1cm5cIl0pO1xuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQudmFsdWUgJiYgZWxlbWVudC50eXBlICE9PSBDT01NRU5UKSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGVtcHR5IHJ1bGUgaW4gbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG4gICAgICAgICAgLy8gc28gQGVtb3Rpb24vamVzdCBjYW4gZ3JhYiBga2V5YCBmcm9tIHRoZSAoSlMpRE9NIGZvciBjYWNoZXMgd2l0aG91dCBhbnkgcnVsZXMgaW5zZXJ0ZWQgeWV0XG4gICAgICAgICAgY3VycmVudFNoZWV0Lmluc2VydChlbGVtZW50LnZhbHVlICsgXCJ7fVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gOiBydWxlc2hlZXQoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQocnVsZSk7XG4gICAgfSldO1xuICAgIHZhciBzZXJpYWxpemVyID0gbWlkZGxld2FyZShvbW5pcHJlc2VudFBsdWdpbnMuY29uY2F0KHN0eWxpc1BsdWdpbnMsIGZpbmFsaXppbmdQbHVnaW5zKSk7XG5cbiAgICB2YXIgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHN0eWxlcykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKHN0eWxlcyksIHNlcmlhbGl6ZXIpO1xuICAgIH07XG5cbiAgICBfaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHNlbGVjdG9yLCBzZXJpYWxpemVkLCBzaGVldCwgc2hvdWxkQ2FjaGUpIHtcbiAgICAgIGN1cnJlbnRTaGVldCA9IHNoZWV0O1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXJpYWxpemVkLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGN1cnJlbnRTaGVldCA9IHtcbiAgICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydChydWxlKSB7XG4gICAgICAgICAgICBzaGVldC5pbnNlcnQocnVsZSArIHNlcmlhbGl6ZWQubWFwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHN0eWxpcyhzZWxlY3RvciA/IHNlbGVjdG9yICsgXCJ7XCIgKyBzZXJpYWxpemVkLnN0eWxlcyArIFwifVwiIDogc2VyaWFsaXplZC5zdHlsZXMpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeSxcbiAgICAgIHByZXBlbmQ6IG9wdGlvbnMucHJlcGVuZCxcbiAgICAgIGluc2VydGlvblBvaW50OiBvcHRpb25zLmluc2VydGlvblBvaW50XG4gICAgfSksXG4gICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgaW5zZXJ0ZWQ6IGluc2VydGVkLFxuICAgIHJlZ2lzdGVyZWQ6IHt9LFxuICAgIGluc2VydDogX2luc2VydFxuICB9O1xuICBjYWNoZS5zaGVldC5oeWRyYXRlKG5vZGVzVG9IeWRyYXRlKTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJpbXBvcnQge01TLCBNT1osIFdFQktJVCwgUlVMRVNFVCwgS0VZRlJBTUVTLCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHttYXRjaCwgY2hhcmF0LCBzdWJzdHIsIHN0cmxlbiwgc2l6ZW9mLCByZXBsYWNlLCBjb21iaW5lfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge2NvcHksIHRva2VuaXplfSBmcm9tICcuL1Rva2VuaXplci5qcydcbmltcG9ydCB7c2VyaWFsaXplfSBmcm9tICcuL1NlcmlhbGl6ZXIuanMnXG5pbXBvcnQge3ByZWZpeH0gZnJvbSAnLi9QcmVmaXhlci5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uW119IGNvbGxlY3Rpb25cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZSAoY29sbGVjdGlvbikge1xuXHR2YXIgbGVuZ3RoID0gc2l6ZW9mKGNvbGxlY3Rpb24pXG5cblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdFx0dmFyIG91dHB1dCA9ICcnXG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdFx0b3V0cHV0ICs9IGNvbGxlY3Rpb25baV0oZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykgfHwgJydcblxuXHRcdHJldHVybiBvdXRwdXRcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzaGVldCAoY2FsbGJhY2spIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0aWYgKCFlbGVtZW50LnJvb3QpXG5cdFx0XHRpZiAoZWxlbWVudCA9IGVsZW1lbnQucmV0dXJuKVxuXHRcdFx0XHRjYWxsYmFjayhlbGVtZW50KVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVmaXhlciAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRpZiAoZWxlbWVudC5sZW5ndGggPiAtMSlcblx0XHRpZiAoIWVsZW1lbnQucmV0dXJuKVxuXHRcdFx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBERUNMQVJBVElPTjogZWxlbWVudC5yZXR1cm4gPSBwcmVmaXgoZWxlbWVudC52YWx1ZSwgZWxlbWVudC5sZW5ndGgsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHRjYXNlIEtFWUZSQU1FUzpcblx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHt2YWx1ZTogcmVwbGFjZShlbGVtZW50LnZhbHVlLCAnQCcsICdAJyArIFdFQktJVCl9KV0sIGNhbGxiYWNrKVxuXHRcdFx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQubGVuZ3RoKVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gOnJlYWQtKG9ubHl8d3JpdGUpXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnOnJlYWQtb25seSc6IGNhc2UgJzpyZWFkLXdyaXRlJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3Byb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdFx0XHRcdFx0Ly8gOnBsYWNlaG9sZGVyXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAnOjpwbGFjZWhvbGRlcic6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VyaWFsaXplKFtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBXRUJLSVQgKyAnaW5wdXQtJDEnKV19KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCAnOicgKyBNT1ogKyAnJDEnKV19KSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihwbGFjXFx3KykvLCBNUyArICdpbnB1dC0kMScpXX0pXG5cdFx0XHRcdFx0XHRcdFx0XHRdLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHJldHVybiAnJ1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICovXG5leHBvcnQgZnVuY3Rpb24gbmFtZXNwYWNlIChlbGVtZW50KSB7XG5cdHN3aXRjaCAoZWxlbWVudC50eXBlKSB7XG5cdFx0Y2FzZSBSVUxFU0VUOlxuXHRcdFx0ZWxlbWVudC5wcm9wcyA9IGVsZW1lbnQucHJvcHMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gY29tYmluZSh0b2tlbml6ZSh2YWx1ZSksIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0c3dpdGNoIChjaGFyYXQodmFsdWUsIDApKSB7XG5cdFx0XHRcdFx0XHQvLyBcXGZcblx0XHRcdFx0XHRcdGNhc2UgMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzdWJzdHIodmFsdWUsIDEsIHN0cmxlbih2YWx1ZSkpXG5cdFx0XHRcdFx0XHQvLyBcXDAgKCArID4gflxuXHRcdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDQwOiBjYXNlIDQzOiBjYXNlIDYyOiBjYXNlIDEyNjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHQvLyA6XG5cdFx0XHRcdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRcdFx0XHRpZiAoY2hpbGRyZW5bKytpbmRleF0gPT09ICdnbG9iYWwnKVxuXHRcdFx0XHRcdFx0XHRcdGNoaWxkcmVuW2luZGV4XSA9ICcnLCBjaGlsZHJlblsrK2luZGV4XSA9ICdcXGYnICsgc3Vic3RyKGNoaWxkcmVuW2luZGV4XSwgaW5kZXggPSAxLCAtMSlcblx0XHRcdFx0XHRcdC8vIFxcc1xuXHRcdFx0XHRcdFx0Y2FzZSAzMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGluZGV4ID09PSAxID8gJycgOiB2YWx1ZVxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChpbmRleCkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMDogZWxlbWVudCA9IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2l6ZW9mKGNoaWxkcmVuKSA+IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBpbmRleCA9IHNpemVvZihjaGlsZHJlbikgLSAxOiBjYXNlIDI6XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDIgPyB2YWx1ZSArIGVsZW1lbnQgKyBlbGVtZW50IDogdmFsdWUgKyBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0fVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IGhhc2hTdHJpbmcgZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG52YXIgVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IgPSBcIllvdSBoYXZlIHBhc3NlZCBpbiBmYWxzeSB2YWx1ZSBhcyBzdHlsZSBvYmplY3QncyBrZXkgKGNhbiBoYXBwZW4gd2hlbiBpbiBleGFtcGxlIHlvdSBwYXNzIHVuZXhwb3J0ZWQgY29tcG9uZW50IGFzIGNvbXB1dGVkIGtleSkuXCI7XG52YXIgaHlwaGVuYXRlUmVnZXggPSAvW0EtWl18Xm1zL2c7XG52YXIgYW5pbWF0aW9uUmVnZXggPSAvX0VNT18oW15fXSs/KV8oW15dKj8pX0VNT18vZztcblxudmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBmdW5jdGlvbiBpc0N1c3RvbVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDEpID09PSA0NTtcbn07XG5cbnZhciBpc1Byb2Nlc3NhYmxlVmFsdWUgPSBmdW5jdGlvbiBpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbic7XG59O1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaXNDdXN0b21Qcm9wZXJ0eShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogc3R5bGVOYW1lLnJlcGxhY2UoaHlwaGVuYXRlUmVnZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdhbmltYXRpb24nOlxuICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICBuYW1lOiBwMSxcbiAgICAgICAgICAgICAgc3R5bGVzOiBwMixcbiAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHAxO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNvbnRlbnRWYWx1ZVBhdHRlcm4gPSAvKHZhcnxhdHRyfGNvdW50ZXJzP3x1cmx8ZWxlbWVudHwoKChyZXBlYXRpbmctKT8obGluZWFyfHJhZGlhbCkpfGNvbmljKS1ncmFkaWVudClcXCh8KG5vLSk/KG9wZW58Y2xvc2UpLXF1b3RlLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcbiAgdmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgdmFyIGh5cGhlbmF0ZWRDYWNoZSA9IHt9O1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlID0gJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoICcgKyAnQGVtb3Rpb24vYmFiZWwtcGx1Z2luLCB0aGUgc3djIEVtb3Rpb24gcGx1Z2luLCBvciBhbm90aGVyIEVtb3Rpb24tYXdhcmUgJyArICdjb21waWxlciB0cmFuc2Zvcm0uJztcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0pICsgXCI7XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqKDt8JCkvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG52YXIgc3luY0ZhbGxiYWNrID0gZnVuY3Rpb24gc3luY0ZhbGxiYWNrKGNyZWF0ZSkge1xuICByZXR1cm4gY3JlYXRlKCk7XG59O1xuXG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0ID0gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gPyBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA6IGZhbHNlO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgPSAgdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgdXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUNvbnRleHQsIHVzZVJlZiwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IGggYXMgaGFzT3duUHJvcGVydHksIEUgYXMgRW1vdGlvbiwgYyBhcyBjcmVhdGVFbW90aW9uUHJvcHMsIHcgYXMgd2l0aEVtb3Rpb25DYWNoZSwgVCBhcyBUaGVtZUNvbnRleHQgfSBmcm9tICcuL2Vtb3Rpb24tZWxlbWVudC02YTg4M2RhOS5icm93c2VyLmVzbS5qcyc7XG5leHBvcnQgeyBDIGFzIENhY2hlUHJvdmlkZXIsIFQgYXMgVGhlbWVDb250ZXh0LCBhIGFzIFRoZW1lUHJvdmlkZXIsIF8gYXMgX191bnNhZmVfdXNlRW1vdGlvbkNhY2hlLCB1IGFzIHVzZVRoZW1lLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIGIgYXMgd2l0aFRoZW1lIH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0ICdAZW1vdGlvbi93ZWFrLW1lbW9pemUnO1xuaW1wb3J0ICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgJy4uL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzLCBnZXRSZWdpc3RlcmVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjaywgdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayB9IGZyb20gJ0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzJztcblxudmFyIHBrZyA9IHtcblx0bmFtZTogXCJAZW1vdGlvbi9yZWFjdFwiLFxuXHR2ZXJzaW9uOiBcIjExLjEwLjVcIixcblx0bWFpbjogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuY2pzLmpzXCIsXG5cdG1vZHVsZTogXCJkaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCIsXG5cdGJyb3dzZXI6IHtcblx0XHRcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmJyb3dzZXIuZXNtLmpzXCJcblx0fSxcblx0ZXhwb3J0czoge1xuXHRcdFwiLlwiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0Lndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LXJ1bnRpbWVcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL19pc29sYXRlZC1obnJzXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9qc3gtZGV2LXJ1bnRpbWVcIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LWRldi1ydW50aW1lL2Rpc3QvZW1vdGlvbi1yZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vcGFja2FnZS5qc29uXCI6IFwiLi9wYWNrYWdlLmpzb25cIixcblx0XHRcIi4vdHlwZXMvY3NzLXByb3BcIjogXCIuL3R5cGVzL2Nzcy1wcm9wLmQudHNcIixcblx0XHRcIi4vbWFjcm9cIjogXCIuL21hY3JvLmpzXCJcblx0fSxcblx0dHlwZXM6IFwidHlwZXMvaW5kZXguZC50c1wiLFxuXHRmaWxlczogW1xuXHRcdFwic3JjXCIsXG5cdFx0XCJkaXN0XCIsXG5cdFx0XCJqc3gtcnVudGltZVwiLFxuXHRcdFwianN4LWRldi1ydW50aW1lXCIsXG5cdFx0XCJfaXNvbGF0ZWQtaG5yc1wiLFxuXHRcdFwidHlwZXMvKi5kLnRzXCIsXG5cdFx0XCJtYWNyby5qc1wiLFxuXHRcdFwibWFjcm8uZC50c1wiLFxuXHRcdFwibWFjcm8uanMuZmxvd1wiXG5cdF0sXG5cdHNpZGVFZmZlY3RzOiBmYWxzZSxcblx0YXV0aG9yOiBcIkVtb3Rpb24gQ29udHJpYnV0b3JzXCIsXG5cdGxpY2Vuc2U6IFwiTUlUXCIsXG5cdHNjcmlwdHM6IHtcblx0XHRcInRlc3Q6dHlwZXNjcmlwdFwiOiBcImR0c2xpbnQgdHlwZXNcIlxuXHR9LFxuXHRkZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9ydW50aW1lXCI6IFwiXjcuMTguM1wiLFxuXHRcdFwiQGVtb3Rpb24vYmFiZWwtcGx1Z2luXCI6IFwiXjExLjEwLjVcIixcblx0XHRcIkBlbW90aW9uL2NhY2hlXCI6IFwiXjExLjEwLjVcIixcblx0XHRcIkBlbW90aW9uL3NlcmlhbGl6ZVwiOiBcIl4xLjEuMVwiLFxuXHRcdFwiQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3NcIjogXCJeMS4wLjBcIixcblx0XHRcIkBlbW90aW9uL3V0aWxzXCI6IFwiXjEuMi4wXCIsXG5cdFx0XCJAZW1vdGlvbi93ZWFrLW1lbW9pemVcIjogXCJeMC4zLjBcIixcblx0XHRcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI6IFwiXjMuMy4xXCJcblx0fSxcblx0cGVlckRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4wLjBcIixcblx0XHRyZWFjdDogXCI+PTE2LjguMFwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXNNZXRhOiB7XG5cdFx0XCJAYmFiZWwvY29yZVwiOiB7XG5cdFx0XHRvcHRpb25hbDogdHJ1ZVxuXHRcdH0sXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9XG5cdH0sXG5cdGRldkRlcGVuZGVuY2llczoge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjogXCJeNy4xOC41XCIsXG5cdFx0XCJAZGVmaW5pdGVseXR5cGVkL2R0c2xpbnRcIjogXCIwLjAuMTEyXCIsXG5cdFx0XCJAZW1vdGlvbi9jc3NcIjogXCIxMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9jc3MtcHJldHRpZmllclwiOiBcIjEuMS4xXCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJ2ZXJcIjogXCIxMS4xMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi9zdHlsZWRcIjogXCIxMS4xMC41XCIsXG5cdFx0XCJodG1sLXRhZy1uYW1lc1wiOiBcIl4xLjEuMlwiLFxuXHRcdHJlYWN0OiBcIjE2LjE0LjBcIixcblx0XHRcInN2Zy10YWctbmFtZXNcIjogXCJeMS4xLjFcIixcblx0XHR0eXBlc2NyaXB0OiBcIl40LjUuNVwiXG5cdH0sXG5cdHJlcG9zaXRvcnk6IFwiaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi90cmVlL21haW4vcGFja2FnZXMvcmVhY3RcIixcblx0cHVibGlzaENvbmZpZzoge1xuXHRcdGFjY2VzczogXCJwdWJsaWNcIlxuXHR9LFxuXHRcInVtZDptYWluXCI6IFwiZGlzdC9lbW90aW9uLXJlYWN0LnVtZC5taW4uanNcIixcblx0cHJlY29uc3RydWN0OiB7XG5cdFx0ZW50cnlwb2ludHM6IFtcblx0XHRcdFwiLi9pbmRleC5qc1wiLFxuXHRcdFx0XCIuL2pzeC1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vanN4LWRldi1ydW50aW1lLmpzXCIsXG5cdFx0XHRcIi4vX2lzb2xhdGVkLWhucnMuanNcIlxuXHRcdF0sXG5cdFx0dW1kTmFtZTogXCJlbW90aW9uUmVhY3RcIixcblx0XHRleHBvcnRzOiB7XG5cdFx0XHRlbnZDb25kaXRpb25zOiBbXG5cdFx0XHRcdFwiYnJvd3NlclwiLFxuXHRcdFx0XHRcIndvcmtlclwiXG5cdFx0XHRdLFxuXHRcdFx0ZXh0cmE6IHtcblx0XHRcdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XHRcdFwiLi9tYWNyb1wiOiBcIi4vbWFjcm8uanNcIlxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ2NzcycpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICB2YXIgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgY3JlYXRlRWxlbWVudEFyZ0FycmF5ID0gbmV3IEFycmF5KGFyZ3NMZW5ndGgpO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMF0gPSBFbW90aW9uO1xuICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbMV0gPSBjcmVhdGVFbW90aW9uUHJvcHModHlwZSwgcHJvcHMpO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlRWxlbWVudEFyZ0FycmF5W2ldID0gYXJnc1tpXTtcbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseShudWxsLCBjcmVhdGVFbGVtZW50QXJnQXJyYXkpO1xufTtcblxudmFyIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IGZhbHNlOyAvLyBtYWludGFpbiBwbGFjZSBvdmVyIHJlcmVuZGVycy5cbi8vIGluaXRpYWwgcmVuZGVyIGZyb20gYnJvd3NlciwgaW5zZXJ0QmVmb3JlIGNvbnRleHQuc2hlZXQudGFnc1swXSBvciBpZiBhIHN0eWxlIGhhc24ndCBiZWVuIGluc2VydGVkIHRoZXJlIHlldCwgYXBwZW5kQ2hpbGRcbi8vIGluaXRpYWwgY2xpZW50LXNpZGUgcmVuZGVyIGZyb20gU1NSLCB1c2UgcGxhY2Ugb2YgaHlkcmF0aW5nIHRhZ1xuXG52YXIgR2xvYmFsID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc3R5bGVzXSwgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuICAvLyBidXQgaXQgaXMgYmFzZWQgb24gYSBjb25zdGFudCB0aGF0IHdpbGwgbmV2ZXIgY2hhbmdlIGF0IHJ1bnRpbWVcbiAgLy8gaXQncyBlZmZlY3RpdmVseSBsaWtlIGhhdmluZyB0d28gaW1wbGVtZW50YXRpb25zIGFuZCBzd2l0Y2hpbmcgdGhlbSBvdXRcbiAgLy8gc28gaXQncyBub3QgYWN0dWFsbHkgYnJlYWtpbmcgYW55dGhpbmdcblxuXG4gIHZhciBzaGVldFJlZiA9IHVzZVJlZigpO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBrZXkgPSBjYWNoZS5rZXkgKyBcIi1nbG9iYWxcIjsgLy8gdXNlIGNhc2Ugb2YgaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9pc3N1ZXMvMjY3NVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IGNhY2hlLnNoZWV0LmNvbnN0cnVjdG9yKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgbm9uY2U6IGNhY2hlLnNoZWV0Lm5vbmNlLFxuICAgICAgY29udGFpbmVyOiBjYWNoZS5zaGVldC5jb250YWluZXIsXG4gICAgICBzcGVlZHk6IGNhY2hlLnNoZWV0LmlzU3BlZWR5XG4gICAgfSk7XG4gICAgdmFyIHJlaHlkcmF0aW5nID0gZmFsc2U7IC8vICRGbG93Rml4TWVcblxuICAgIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInN0eWxlW2RhdGEtZW1vdGlvbj1cXFwiXCIgKyBrZXkgKyBcIiBcIiArIHNlcmlhbGl6ZWQubmFtZSArIFwiXFxcIl1cIik7XG5cbiAgICBpZiAoY2FjaGUuc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGNhY2hlLnNoZWV0LnRhZ3NbMF07XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIHJlaHlkcmF0aW5nID0gdHJ1ZTsgLy8gY2xlYXIgdGhlIGhhc2ggc28gdGhpcyBub2RlIHdvbid0IGJlIHJlY29nbml6YWJsZSBhcyByZWh5ZHJhdGFibGUgYnkgb3RoZXIgPEdsb2JhbC8+c1xuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywga2V5KTtcbiAgICAgIHNoZWV0Lmh5ZHJhdGUoW25vZGVdKTtcbiAgICB9XG5cbiAgICBzaGVldFJlZi5jdXJyZW50ID0gW3NoZWV0LCByZWh5ZHJhdGluZ107XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNoZWV0LmZsdXNoKCk7XG4gICAgfTtcbiAgfSwgW2NhY2hlXSk7XG4gIHVzZUluc2VydGlvbkVmZmVjdFdpdGhMYXlvdXRGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNoZWV0UmVmQ3VycmVudCA9IHNoZWV0UmVmLmN1cnJlbnQ7XG4gICAgdmFyIHNoZWV0ID0gc2hlZXRSZWZDdXJyZW50WzBdLFxuICAgICAgICByZWh5ZHJhdGluZyA9IHNoZWV0UmVmQ3VycmVudFsxXTtcblxuICAgIGlmIChyZWh5ZHJhdGluZykge1xuICAgICAgc2hlZXRSZWZDdXJyZW50WzFdID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNlcmlhbGl6ZWQubmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpbnNlcnQga2V5ZnJhbWVzXG4gICAgICBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQubmV4dCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBpZiB0aGlzIGRvZXNuJ3QgZXhpc3QgdGhlbiBpdCB3aWxsIGJlIG51bGwgc28gdGhlIHN0eWxlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgdmFyIGVsZW1lbnQgPSBzaGVldC50YWdzW3NoZWV0LnRhZ3MubGVuZ3RoIC0gMV0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgc2hlZXQuYmVmb3JlID0gZWxlbWVudDtcbiAgICAgIHNoZWV0LmZsdXNoKCk7XG4gICAgfVxuXG4gICAgY2FjaGUuaW5zZXJ0KFwiXCIsIHNlcmlhbGl6ZWQsIHNoZWV0LCBmYWxzZSk7XG4gIH0sIFtjYWNoZSwgc2VyaWFsaXplZC5uYW1lXSk7XG4gIHJldHVybiBudWxsO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEdsb2JhbC5kaXNwbGF5TmFtZSA9ICdFbW90aW9uR2xvYmFsJztcbn1cblxuZnVuY3Rpb24gY3NzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZVN0eWxlcyhhcmdzKTtcbn1cblxudmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIGluc2VydGFibGUgPSBjc3MuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB2YXIgbmFtZSA9IFwiYW5pbWF0aW9uLVwiICsgaW5zZXJ0YWJsZS5uYW1lOyAvLyAkRmxvd0ZpeE1lXG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogXCJAa2V5ZnJhbWVzIFwiICsgbmFtZSArIFwie1wiICsgaW5zZXJ0YWJsZS5zdHlsZXMgKyBcIn1cIixcbiAgICBhbmltOiAxLFxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIl9FTU9fXCIgKyB0aGlzLm5hbWUgKyBcIl9cIiArIHRoaXMuc3R5bGVzICsgXCJfRU1PX1wiO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2xzID0gJyc7XG5cbiAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgIGlmIChhcmcgPT0gbnVsbCkgY29udGludWU7XG4gICAgdmFyIHRvQWRkID0gdm9pZCAwO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgYXJnKSB7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICB0b0FkZCA9IGNsYXNzbmFtZXMoYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnLnN0eWxlcyAhPT0gdW5kZWZpbmVkICYmIGFyZy5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignWW91IGhhdmUgcGFzc2VkIHN0eWxlcyBjcmVhdGVkIHdpdGggYGNzc2AgZnJvbSBgQGVtb3Rpb24vcmVhY3RgIHBhY2thZ2UgdG8gdGhlIGBjeGAuXFxuJyArICdgY3hgIGlzIG1lYW50IHRvIGNvbXBvc2UgY2xhc3MgbmFtZXMgKHN0cmluZ3MpIHNvIHlvdSBzaG91bGQgY29udmVydCB0aG9zZSBzdHlsZXMgdG8gYSBjbGFzcyBuYW1lIGJ5IHBhc3NpbmcgdGhlbSB0byB0aGUgYGNzc2AgcmVjZWl2ZWQgZnJvbSA8Q2xhc3NOYW1lcy8+IGNvbXBvbmVudC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG9BZGQgPSAnJztcblxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSAmJiBrKSB7XG4gICAgICAgICAgICAgICAgdG9BZGQgJiYgKHRvQWRkICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgdG9BZGQgKz0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0b0FkZCA9IGFyZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b0FkZCkge1xuICAgICAgY2xzICYmIChjbHMgKz0gJyAnKTtcbiAgICAgIGNscyArPSB0b0FkZDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xzO1xufTtcblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBJbnNlcnRpb24gPSBmdW5jdGlvbiBJbnNlcnRpb24oX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgc2VyaWFsaXplZEFyciA9IF9yZWYuc2VyaWFsaXplZEFycjtcbiAgdmFyIHJ1bGVzID0gdXNlSW5zZXJ0aW9uRWZmZWN0QWx3YXlzV2l0aFN5bmNGYWxsYmFjayhmdW5jdGlvbiAoKSB7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlcmlhbGl6ZWRBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciByZXMgPSBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWRBcnJbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIENsYXNzTmFtZXMgPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUpIHtcbiAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG4gIHZhciBzZXJpYWxpemVkQXJyID0gW107XG5cbiAgdmFyIGNzcyA9IGZ1bmN0aW9uIGNzcygpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQpO1xuICAgIHNlcmlhbGl6ZWRBcnIucHVzaChzZXJpYWxpemVkKTsgLy8gcmVnaXN0cmF0aW9uIGhhcyB0byBoYXBwZW4gaGVyZSBhcyB0aGUgcmVzdWx0IG9mIHRoaXMgbWlnaHQgZ2V0IGNvbnN1bWVkIGJ5IGBjeGBcblxuICAgIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N4IGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBtZXJnZShjYWNoZS5yZWdpc3RlcmVkLCBjc3MsIGNsYXNzbmFtZXMoYXJncykpO1xuICB9O1xuXG4gIHZhciBjb250ZW50ID0ge1xuICAgIGNzczogY3NzLFxuICAgIGN4OiBjeCxcbiAgICB0aGVtZTogdXNlQ29udGV4dChUaGVtZUNvbnRleHQpXG4gIH07XG4gIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgaGFzUmVuZGVyZWQgPSB0cnVlO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEluc2VydGlvbiwge1xuICAgIGNhY2hlOiBjYWNoZSxcbiAgICBzZXJpYWxpemVkQXJyOiBzZXJpYWxpemVkQXJyXG4gIH0pLCBlbGUpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIENsYXNzTmFtZXMuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNsYXNzTmFtZXMnO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7IC8vICMxNzI3LCAjMjkwNSBmb3Igc29tZSByZWFzb24gSmVzdCBhbmQgVml0ZXN0IGV2YWx1YXRlIG1vZHVsZXMgdHdpY2UgaWYgc29tZSBjb25zdW1pbmcgbW9kdWxlIGdldHMgbW9ja2VkXG5cbiAgdmFyIGlzVGVzdEVudiA9IHR5cGVvZiBqZXN0ICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmkgIT09ICd1bmRlZmluZWQnO1xuXG4gIGlmIChpc0Jyb3dzZXIgJiYgIWlzVGVzdEVudikge1xuICAgIC8vIGdsb2JhbFRoaXMgaGFzIHdpZGUgYnJvd3NlciBzdXBwb3J0IC0gaHR0cHM6Ly9jYW5pdXNlLmNvbS8/c2VhcmNoPWdsb2JhbFRoaXMsIE5vZGUuanMgMTIgYW5kIGxhdGVyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSAvLyAkRmxvd0lnbm9yZVxuICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgIDogaXNCcm93c2VyID8gd2luZG93IDogZ2xvYmFsO1xuICAgIHZhciBnbG9iYWxLZXkgPSBcIl9fRU1PVElPTl9SRUFDVF9cIiArIHBrZy52ZXJzaW9uLnNwbGl0KCcuJylbMF0gKyBcIl9fXCI7XG5cbiAgICBpZiAoZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1lvdSBhcmUgbG9hZGluZyBAZW1vdGlvbi9yZWFjdCB3aGVuIGl0IGlzIGFscmVhZHkgbG9hZGVkLiBSdW5uaW5nICcgKyAnbXVsdGlwbGUgaW5zdGFuY2VzIG1heSBjYXVzZSBwcm9ibGVtcy4gVGhpcyBjYW4gaGFwcGVuIGlmIG11bHRpcGxlICcgKyAndmVyc2lvbnMgYXJlIHVzZWQsIG9yIGlmIG11bHRpcGxlIGJ1aWxkcyBvZiB0aGUgc2FtZSB2ZXJzaW9uIGFyZSAnICsgJ3VzZWQuJyk7XG4gICAgfVxuXG4gICAgZ2xvYmFsQ29udGV4dFtnbG9iYWxLZXldID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBDbGFzc05hbWVzLCBHbG9iYWwsIGpzeCBhcyBjcmVhdGVFbGVtZW50LCBjc3MsIGpzeCwga2V5ZnJhbWVzIH07XG4iLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIGxldCB1cmwgPSAnaHR0cHM6Ly9tdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgZnJvbSBcIi4vZm9ybWF0TXVpRXJyb3JNZXNzYWdlXCI7XG4vLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGluIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYGNhcGl0YWxpemUoc3RyaW5nKVxcYCBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDcpKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8qKlxuICogQWRkIGtleXMsIHZhbHVlcyBvZiBgZGVmYXVsdFByb3BzYCB0aGF0IGRvZXMgbm90IGV4aXN0IGluIGBwcm9wc2BcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0UHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybnMge29iamVjdH0gcmVzb2x2ZWQgcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVzb2x2ZVByb3BzKGRlZmF1bHRQcm9wcywgcHJvcHMpIHtcbiAgY29uc3Qgb3V0cHV0ID0gX2V4dGVuZHMoe30sIHByb3BzKTtcbiAgT2JqZWN0LmtleXMoZGVmYXVsdFByb3BzKS5mb3JFYWNoKHByb3BOYW1lID0+IHtcbiAgICBpZiAocHJvcE5hbWUudG9TdHJpbmcoKS5tYXRjaCgvXihjb21wb25lbnRzfHNsb3RzKSQvKSkge1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdLCBvdXRwdXRbcHJvcE5hbWVdKTtcbiAgICB9IGVsc2UgaWYgKHByb3BOYW1lLnRvU3RyaW5nKCkubWF0Y2goL14oY29tcG9uZW50c1Byb3BzfHNsb3RQcm9wcykkLykpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRTbG90UHJvcHMgPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdIHx8IHt9O1xuICAgICAgY29uc3Qgc2xvdFByb3BzID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IHt9O1xuICAgICAgaWYgKCFzbG90UHJvcHMgfHwgIU9iamVjdC5rZXlzKHNsb3RQcm9wcykpIHtcbiAgICAgICAgLy8gUmVkdWNlIHRoZSBpdGVyYXRpb24gaWYgdGhlIHNsb3QgcHJvcHMgaXMgZW1wdHlcbiAgICAgICAgb3V0cHV0W3Byb3BOYW1lXSA9IGRlZmF1bHRTbG90UHJvcHM7XG4gICAgICB9IGVsc2UgaWYgKCFkZWZhdWx0U2xvdFByb3BzIHx8ICFPYmplY3Qua2V5cyhkZWZhdWx0U2xvdFByb3BzKSkge1xuICAgICAgICAvLyBSZWR1Y2UgdGhlIGl0ZXJhdGlvbiBpZiB0aGUgZGVmYXVsdCBzbG90IHByb3BzIGlzIGVtcHR5XG4gICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBzbG90UHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRbcHJvcE5hbWVdID0gX2V4dGVuZHMoe30sIHNsb3RQcm9wcyk7XG4gICAgICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTbG90UHJvcHMpLmZvckVhY2goc2xvdFByb3BOYW1lID0+IHtcbiAgICAgICAgICBvdXRwdXRbcHJvcE5hbWVdW3Nsb3RQcm9wTmFtZV0gPSByZXNvbHZlUHJvcHMoZGVmYXVsdFNsb3RQcm9wc1tzbG90UHJvcE5hbWVdLCBzbG90UHJvcHNbc2xvdFByb3BOYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0cHV0W3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXRbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCB7IGludGVybmFsX3Jlc29sdmVQcm9wcyBhcyByZXNvbHZlUHJvcHMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZSxcbiAgICBuYW1lLFxuICAgIHByb3BzXG4gIH0gPSBwYXJhbXM7XG4gIGlmICghdGhlbWUgfHwgIXRoZW1lLmNvbXBvbmVudHMgfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0gfHwgIXRoZW1lLmNvbXBvbmVudHNbbmFtZV0uZGVmYXVsdFByb3BzKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG4gIHJldHVybiByZXNvbHZlUHJvcHModGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMsIHByb3BzKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGRlZXBDbG9uZShzb3VyY2UpIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG4gIGNvbnN0IG91dHB1dCA9IHt9O1xuICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goa2V5ID0+IHtcbiAgICBvdXRwdXRba2V5XSA9IGRlZXBDbG9uZShzb3VyY2Vba2V5XSk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5jbG9uZSkge1xuICAgICAgICBvdXRwdXRba2V5XSA9IGlzUGxhaW5PYmplY3Qoc291cmNlW2tleV0pID8gZGVlcENsb25lKHNvdXJjZVtrZXldKSA6IHNvdXJjZVtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJ2YWx1ZXNcIiwgXCJ1bml0XCIsIFwic3RlcFwiXTtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCBjb25zdCBicmVha3BvaW50S2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTtcbmNvbnN0IHNvcnRCcmVha3BvaW50c1ZhbHVlcyA9IHZhbHVlcyA9PiB7XG4gIGNvbnN0IGJyZWFrcG9pbnRzQXNBcnJheSA9IE9iamVjdC5rZXlzKHZhbHVlcykubWFwKGtleSA9PiAoe1xuICAgIGtleSxcbiAgICB2YWw6IHZhbHVlc1trZXldXG4gIH0pKSB8fCBbXTtcbiAgLy8gU29ydCBpbiBhc2NlbmRpbmcgb3JkZXJcbiAgYnJlYWtwb2ludHNBc0FycmF5LnNvcnQoKGJyZWFrcG9pbnQxLCBicmVha3BvaW50MikgPT4gYnJlYWtwb2ludDEudmFsIC0gYnJlYWtwb2ludDIudmFsKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzQXNBcnJheS5yZWR1Y2UoKGFjYywgb2JqKSA9PiB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhY2MsIHtcbiAgICAgIFtvYmoua2V5XTogb2JqLnZhbFxuICAgIH0pO1xuICB9LCB7fSk7XG59O1xuXG4vLyBLZWVwIGluIG1pbmQgdGhhdCBAbWVkaWEgaXMgaW5jbHVzaXZlIGJ5IHRoZSBDU1Mgc3BlY2lmaWNhdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIGNvbnN0IHtcbiAgICAgIC8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuICAgICAgLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc20pLlxuICAgICAgdmFsdWVzID0ge1xuICAgICAgICB4czogMCxcbiAgICAgICAgLy8gcGhvbmVcbiAgICAgICAgc206IDYwMCxcbiAgICAgICAgLy8gdGFibGV0XG4gICAgICAgIG1kOiA5MDAsXG4gICAgICAgIC8vIHNtYWxsIGxhcHRvcFxuICAgICAgICBsZzogMTIwMCxcbiAgICAgICAgLy8gZGVza3RvcFxuICAgICAgICB4bDogMTUzNiAvLyBsYXJnZSBzY3JlZW5cbiAgICAgIH0sXG5cbiAgICAgIHVuaXQgPSAncHgnLFxuICAgICAgc3RlcCA9IDVcbiAgICB9ID0gYnJlYWtwb2ludHMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShicmVha3BvaW50cywgX2V4Y2x1ZGVkKTtcbiAgY29uc3Qgc29ydGVkVmFsdWVzID0gc29ydEJyZWFrcG9pbnRzVmFsdWVzKHZhbHVlcyk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3J0ZWRWYWx1ZXMpO1xuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWV9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGRvd24oa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1heC13aWR0aDoke3ZhbHVlIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gYmV0d2VlbihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcbiAgICByZXR1cm4gYEBtZWRpYSAobWluLXdpZHRoOiR7dHlwZW9mIHZhbHVlc1tzdGFydF0gPT09ICdudW1iZXInID8gdmFsdWVzW3N0YXJ0XSA6IHN0YXJ0fSR7dW5pdH0pIGFuZCBgICsgYChtYXgtd2lkdGg6JHsoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleF1dID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXlzW2VuZEluZGV4XV0gOiBlbmQpIC0gc3RlcCAvIDEwMH0ke3VuaXR9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgKyAxIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHVwKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbm90KGtleSkge1xuICAgIC8vIGhhbmRsZSBmaXJzdCBhbmQgbGFzdCBrZXkgc2VwYXJhdGVseSwgZm9yIGJldHRlciByZWFkYWJpbGl0eVxuICAgIGNvbnN0IGtleUluZGV4ID0ga2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGtleUluZGV4ID09PSAwKSB7XG4gICAgICByZXR1cm4gdXAoa2V5c1sxXSk7XG4gICAgfVxuICAgIGlmIChrZXlJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gZG93bihrZXlzW2tleUluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5c1trZXlzLmluZGV4T2Yoa2V5KSArIDFdKS5yZXBsYWNlKCdAbWVkaWEnLCAnQG1lZGlhIG5vdCBhbGwgYW5kJyk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzLFxuICAgIHZhbHVlczogc29ydGVkVmFsdWVzLFxuICAgIHVwLFxuICAgIGRvd24sXG4gICAgYmV0d2VlbixcbiAgICBvbmx5LFxuICAgIG5vdCxcbiAgICB1bml0XG4gIH0sIG90aGVyKTtcbn0iLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5cbi8vIFRoZSBicmVha3BvaW50ICoqc3RhcnQqKiBhdCB0aGlzIHZhbHVlLlxuLy8gRm9yIGluc3RhbmNlIHdpdGggdGhlIGZpcnN0IGJyZWFrcG9pbnQgeHM6IFt4cywgc21bLlxuZXhwb3J0IGNvbnN0IHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIC8vIHBob25lXG4gIHNtOiA2MDAsXG4gIC8vIHRhYmxldFxuICBtZDogOTAwLFxuICAvLyBzbWFsbCBsYXB0b3BcbiAgbGc6IDEyMDAsXG4gIC8vIGRlc2t0b3BcbiAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG59O1xuXG5jb25zdCBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBrZXkgPT4gYEBtZWRpYSAobWluLXdpZHRoOiR7dmFsdWVzW2tleV19cHgpYFxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5yZWR1Y2UoKGFjYywgaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKHRoZW1lQnJlYWtwb2ludHMua2V5c1tpbmRleF0pXSA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWVbaW5kZXhdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGNvbnN0IHRoZW1lQnJlYWtwb2ludHMgPSB0aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIC8vIGtleSBpcyBicmVha3BvaW50XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cy52YWx1ZXMgfHwgdmFsdWVzKS5pbmRleE9mKGJyZWFrcG9pbnQpICE9PSAtMSkge1xuICAgICAgICBjb25zdCBtZWRpYUtleSA9IHRoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCk7XG4gICAgICAgIGFjY1ttZWRpYUtleV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdLCBicmVha3BvaW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNzc0tleSA9IGJyZWFrcG9pbnQ7XG4gICAgICAgIGFjY1tjc3NLZXldID0gcHJvcFZhbHVlW2Nzc0tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBjb25zdCBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIGJyZWFrcG9pbnRzKHN0eWxlRnVuY3Rpb24pIHtcbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IG5ld1N0eWxlRnVuY3Rpb24gPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgICBjb25zdCBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICBjb25zdCBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCA9IHt9KSB7XG4gIHZhciBfYnJlYWtwb2ludHNJbnB1dCRrZXk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzSW5PcmRlciA9IChfYnJlYWtwb2ludHNJbnB1dCRrZXkgPSBicmVha3BvaW50c0lucHV0LmtleXMpID09IG51bGwgPyB2b2lkIDAgOiBfYnJlYWtwb2ludHNJbnB1dCRrZXkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRTdHlsZUtleSA9IGJyZWFrcG9pbnRzSW5wdXQudXAoa2V5KTtcbiAgICBhY2NbYnJlYWtwb2ludFN0eWxlS2V5XSA9IHt9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzSW5PcmRlciB8fCB7fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50S2V5cywgc3R5bGUpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50T3V0cHV0ID0gYWNjW2tleV07XG4gICAgY29uc3QgaXNCcmVha3BvaW50VW51c2VkID0gIWJyZWFrcG9pbnRPdXRwdXQgfHwgT2JqZWN0LmtleXMoYnJlYWtwb2ludE91dHB1dCkubGVuZ3RoID09PSAwO1xuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgc3R5bGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyKGJyZWFrcG9pbnRzSW5wdXQsIC4uLnN0eWxlcykge1xuICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBtZXJnZWRPdXRwdXQgPSBbZW1wdHlCcmVha3BvaW50cywgLi4uc3R5bGVzXS5yZWR1Y2UoKHByZXYsIG5leHQpID0+IGRlZXBtZXJnZShwcmV2LCBuZXh0KSwge30pO1xuICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyksIG1lcmdlZE91dHB1dCk7XG59XG5cbi8vIGNvbXB1dGUgYmFzZSBmb3IgcmVzcG9uc2l2ZSB2YWx1ZXM7IGUuZy4sXG4vLyBbMSwyLDNdID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuLy8ge3hzOiAxLCBzbTogMiwgbWQ6IDN9ID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cykge1xuICAvLyBmaXhlZCB2YWx1ZVxuICBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goKGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICAgIGlmIChpIDwgYnJlYWtwb2ludFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBpZiAoYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgdmFsdWVzOiBicmVha3BvaW50VmFsdWVzLFxuICBicmVha3BvaW50czogdGhlbWVCcmVha3BvaW50cyxcbiAgYmFzZTogY3VzdG9tQmFzZVxufSkge1xuICBjb25zdCBiYXNlID0gY3VzdG9tQmFzZSB8fCBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG4gIGxldCBwcmV2aW91cztcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1tpXSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1tpXSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGJyZWFrcG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGgob2JqLCBwYXRoLCBjaGVja1ZhcnMgPSB0cnVlKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIENTUyB2YXJpYWJsZXMgYXJlIHVzZWRcbiAgaWYgKG9iaiAmJiBvYmoudmFycyAmJiBjaGVja1ZhcnMpIHtcbiAgICBjb25zdCB2YWwgPSBgdmFycy4ke3BhdGh9YC5zcGxpdCgnLicpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiBhY2MgJiYgYWNjW2l0ZW1dID8gYWNjW2l0ZW1dIDogbnVsbCwgb2JqKTtcbiAgICBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IHtcbiAgICBpZiAoYWNjICYmIGFjY1tpdGVtXSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjW2l0ZW1dO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgb2JqKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCwgdXNlclZhbHVlID0gcHJvcFZhbHVlRmluYWwpIHtcbiAgbGV0IHZhbHVlO1xuICBpZiAodHlwZW9mIHRoZW1lTWFwcGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nKHByb3BWYWx1ZUZpbmFsKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRoZW1lTWFwcGluZykpIHtcbiAgICB2YWx1ZSA9IHRoZW1lTWFwcGluZ1twcm9wVmFsdWVGaW5hbF0gfHwgdXNlclZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gZ2V0UGF0aCh0aGVtZU1hcHBpbmcsIHByb3BWYWx1ZUZpbmFsKSB8fCB1c2VyVmFsdWU7XG4gIH1cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIHZhbHVlID0gdHJhbnNmb3JtKHZhbHVlLCB1c2VyVmFsdWUsIHRoZW1lTWFwcGluZyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJvcCxcbiAgICBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMucHJvcCxcbiAgICB0aGVtZUtleSxcbiAgICB0cmFuc2Zvcm1cbiAgfSA9IG9wdGlvbnM7XG5cbiAgLy8gZmFsc2UgcG9zaXRpdmVcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wc1twcm9wXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgIFtwcm9wXTogcmVzcG9uc2l2ZVByb3BUeXBlXG4gIH0gOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gbWVyZ2UoYWNjLCBpdGVtKSB7XG4gIGlmICghaXRlbSkge1xuICAgIHJldHVybiBhY2M7XG4gIH1cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQYXRoIH0gZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xuY29uc3QgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbmNvbnN0IGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG5jb25zdCBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07XG5cbi8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5leHBvcnQgY29uc3QgbWFyZ2luS2V5cyA9IFsnbScsICdtdCcsICdtcicsICdtYicsICdtbCcsICdteCcsICdteScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdtYXJnaW5JbmxpbmUnLCAnbWFyZ2luSW5saW5lU3RhcnQnLCAnbWFyZ2luSW5saW5lRW5kJywgJ21hcmdpbkJsb2NrJywgJ21hcmdpbkJsb2NrU3RhcnQnLCAnbWFyZ2luQmxvY2tFbmQnXTtcbmV4cG9ydCBjb25zdCBwYWRkaW5nS2V5cyA9IFsncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knLCAncGFkZGluZ0lubGluZScsICdwYWRkaW5nSW5saW5lU3RhcnQnLCAncGFkZGluZ0lubGluZUVuZCcsICdwYWRkaW5nQmxvY2snLCAncGFkZGluZ0Jsb2NrU3RhcnQnLCAncGFkZGluZ0Jsb2NrRW5kJ107XG5jb25zdCBzcGFjaW5nS2V5cyA9IFsuLi5tYXJnaW5LZXlzLCAuLi5wYWRkaW5nS2V5c107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlVbml0KHRoZW1lLCB0aGVtZUtleSwgZGVmYXVsdFZhbHVlLCBwcm9wTmFtZSkge1xuICB2YXIgX2dldFBhdGg7XG4gIGNvbnN0IHRoZW1lU3BhY2luZyA9IChfZ2V0UGF0aCA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5LCBmYWxzZSkpICE9IG51bGwgPyBfZ2V0UGF0aCA6IGRlZmF1bHRWYWx1ZTtcbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogRXhwZWN0ZWQgJHtwcm9wTmFtZX0gYXJndW1lbnQgdG8gYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcsIGdvdCAke2Fic30uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmcgKiBhYnM7XG4gICAgfTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGFicyA9PiB7XG4gICAgICBpZiAodHlwZW9mIGFicyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFicztcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihhYnMpKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIGFycmF5IHR5cGUgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggbm9uIGludGVnZXIgdmFsdWVzLmAgKyBgWW91IHNob3VsZCBlaXRoZXIgdXNlIGFuIGludGVnZXIgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCBhcyBpbmRleCwgb3IgZGVmaW5lIHRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcyBhIG51bWJlci5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKCR7YWJzfSkgb3ZlcmZsb3dzLmAsIGBUaGUgc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7SlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKX0uYCwgYCR7YWJzfSA+ICR7dGhlbWVTcGFjaW5nLmxlbmd0aCAtIDF9LCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYHRoZW1lLiR7dGhlbWVLZXl9XFxgIHZhbHVlICgke3RoZW1lU3BhY2luZ30pIGlzIGludmFsaWQuYCwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgcmV0dXJuIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgJ3NwYWNpbmcnLCA4LCAnc3BhY2luZycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuICBjb25zdCBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICBjb25zdCB0cmFuc2Zvcm1lZCA9IHRyYW5zZm9ybWVyKGFicyk7XG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cbiAgcmV0dXJuIGAtJHt0cmFuc2Zvcm1lZH1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcikge1xuICByZXR1cm4gcHJvcFZhbHVlID0+IGNzc1Byb3BlcnRpZXMucmVkdWNlKChhY2MsIGNzc1Byb3BlcnR5KSA9PiB7XG4gICAgYWNjW2Nzc1Byb3BlcnR5XSA9IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpIHtcbiAgLy8gVXNpbmcgYSBoYXNoIGNvbXB1dGF0aW9uIG92ZXIgYW4gYXJyYXkgaXRlcmF0aW9uIGNvdWxkIGJlIGZhc3RlciwgYnV0IHdpdGggb25seSAyOCBpdGVtcyxcbiAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgaWYgKGtleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xufVxuZnVuY3Rpb24gc3R5bGUocHJvcHMsIGtleXMpIHtcbiAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcocHJvcHMudGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChwcm9wID0+IHJlc29sdmVDc3NQcm9wZXJ0eShwcm9wcywga2V5cywgcHJvcCwgdHJhbnNmb3JtZXIpKS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXJnaW4ocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBtYXJnaW5LZXlzKTtcbn1cbm1hcmdpbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gbWFyZ2luS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5tYXJnaW4uZmlsdGVyUHJvcHMgPSBtYXJnaW5LZXlzO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIHN0eWxlKHByb3BzLCBwYWRkaW5nS2V5cyk7XG59XG5wYWRkaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwYWRkaW5nS2V5cy5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5wYWRkaW5nLmZpbHRlclByb3BzID0gcGFkZGluZ0tleXM7XG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgc3BhY2luZ0tleXMpO1xufVxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0ge307XG4gIHJldHVybiBhcmcgPT4ge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn0iLCJpbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5mdW5jdGlvbiBjb21wb3NlKC4uLnN0eWxlcykge1xuICBjb25zdCBoYW5kbGVycyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IHtcbiAgICBzdHlsZS5maWx0ZXJQcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgYWNjW3Byb3BdID0gc3R5bGU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIC8vIGZhbHNlIHBvc2l0aXZlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuICBjb25zdCBmbiA9IHByb3BzID0+IHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICBpZiAoaGFuZGxlcnNbcHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKGFjYywgaGFuZGxlcnNbcHJvcF0ocHJvcHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHN0eWxlLnByb3BUeXBlcyksIHt9KSA6IHt9O1xuICBmbi5maWx0ZXJQcm9wcyA9IHN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYy5jb25jYXQoc3R5bGUuZmlsdGVyUHJvcHMpLCBbXSk7XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2U7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGJvcmRlclRyYW5zZm9ybSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9cHggc29saWRgO1xufVxuZXhwb3J0IGNvbnN0IGJvcmRlciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlcicsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJUb3AgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3AnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyUmlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogYm9yZGVyVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJCb3R0b20gPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b20nLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyTGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnQnLFxuICB0aGVtZUtleTogJ2JvcmRlcnMnLFxuICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyVG9wQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodENvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyUmlnaHRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbUNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyQm90dG9tQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJMZWZ0Q29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnXG59KTtcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuYm9yZGVyUmFkaXVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBjcmVhdGVVbmFyeVVuaXQsIGdldFZhbHVlIH0gZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcblxuLy8gZmFsc2UgcG9zaXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mdW5jdGlvbi1jb21wb25lbnQtZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5cbi8vIGZhbHNlIHBvc2l0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZnVuY3Rpb24tY29tcG9uZW50LWRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBjb2x1bW5HYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5jb2x1bW5HYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5jb2x1bW5HYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAnY29sdW1uR2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICBjb2x1bW5HYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5jb2x1bW5HYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuY29sdW1uR2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIGNvbHVtbkdhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5jb2x1bW5HYXAuZmlsdGVyUHJvcHMgPSBbJ2NvbHVtbkdhcCddO1xuXG4vLyBmYWxzZSBwb3NpdGl2ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Z1bmN0aW9uLWNvbXBvbmVudC1kZWZpbml0aW9uXG5leHBvcnQgY29uc3Qgcm93R2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMucm93R2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMucm93R2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ3Jvd0dhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgcm93R2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMucm93R2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnJvd0dhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICByb3dHYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xucm93R2FwLmZpbHRlclByb3BzID0gWydyb3dHYXAnXTtcbmV4cG9ydCBjb25zdCBncmlkQ29sdW1uID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZENvbHVtbidcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRSb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkUm93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9GbG93ID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9GbG93J1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Db2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Db2x1bW5zJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZEF1dG9Sb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEF1dG9Sb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQ29sdW1ucyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVSb3dzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlUm93cydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZUFyZWFzID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQXJlYXMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXJlYSA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRBcmVhJ1xufSk7XG5jb25zdCBncmlkID0gY29tcG9zZShnYXAsIGNvbHVtbkdhcCwgcm93R2FwLCBncmlkQ29sdW1uLCBncmlkUm93LCBncmlkQXV0b0Zsb3csIGdyaWRBdXRvQ29sdW1ucywgZ3JpZEF1dG9Sb3dzLCBncmlkVGVtcGxhdGVDb2x1bW5zLCBncmlkVGVtcGxhdGVSb3dzLCBncmlkVGVtcGxhdGVBcmVhcywgZ3JpZEFyZWEpO1xuZXhwb3J0IGRlZmF1bHQgZ3JpZDsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhbGV0dGVUcmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSkge1xuICBpZiAodXNlclZhbHVlID09PSAnZ3JleScpIHtcbiAgICByZXR1cm4gdXNlclZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCBjb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2NvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiZ2NvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnYmdjb2xvcicsXG4gIGNzc1Byb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm06IHBhbGV0dGVUcmFuc2Zvcm1cbn0pO1xuY29uc3QgcGFsZXR0ZSA9IGNvbXBvc2UoY29sb3IsIGJnY29sb3IsIGJhY2tncm91bmRDb2xvcik7XG5leHBvcnQgZGVmYXVsdCBwYWxldHRlOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgdmFsdWVzIGFzIGJyZWFrcG9pbnRzVmFsdWVzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gc2l6aW5nVHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1heFdpZHRoID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5tYXhXaWR0aCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiB7XG4gICAgICB2YXIgX3Byb3BzJHRoZW1lLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2ksIF9wcm9wcyR0aGVtZSRicmVha3BvaTI7XG4gICAgICBjb25zdCBicmVha3BvaW50ID0gKChfcHJvcHMkdGhlbWUgPSBwcm9wcy50aGVtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IChfcHJvcHMkdGhlbWUkYnJlYWtwb2kgPSBfcHJvcHMkdGhlbWUuYnJlYWtwb2ludHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pMiA9IF9wcm9wcyR0aGVtZSRicmVha3BvaS52YWx1ZXMpID09IG51bGwgPyB2b2lkIDAgOiBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyW3Byb3BWYWx1ZV0pIHx8IGJyZWFrcG9pbnRzVmFsdWVzW3Byb3BWYWx1ZV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXhXaWR0aDogYnJlYWtwb2ludCB8fCBzaXppbmdUcmFuc2Zvcm0ocHJvcFZhbHVlKVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMubWF4V2lkdGgsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xubWF4V2lkdGguZmlsdGVyUHJvcHMgPSBbJ21heFdpZHRoJ107XG5leHBvcnQgY29uc3QgbWluV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5XaWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBoZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdoZWlnaHQnLFxuICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IG1pbkhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ21pbkhlaWdodCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplV2lkdGggPSBzdHlsZSh7XG4gIHByb3A6ICdzaXplJyxcbiAgY3NzUHJvcGVydHk6ICd3aWR0aCcsXG4gIHRyYW5zZm9ybTogc2l6aW5nVHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJveFNpemluZyA9IHN0eWxlKHtcbiAgcHJvcDogJ2JveFNpemluZydcbn0pO1xuY29uc3Qgc2l6aW5nID0gY29tcG9zZSh3aWR0aCwgbWF4V2lkdGgsIG1pbldpZHRoLCBoZWlnaHQsIG1heEhlaWdodCwgbWluSGVpZ2h0LCBib3hTaXppbmcpO1xuZXhwb3J0IGRlZmF1bHQgc2l6aW5nOyIsImltcG9ydCB7IHBhZGRpbmcsIG1hcmdpbiB9IGZyb20gJy4uL3NwYWNpbmcnO1xuaW1wb3J0IHsgYm9yZGVyUmFkaXVzLCBib3JkZXJUcmFuc2Zvcm0gfSBmcm9tICcuLi9ib3JkZXJzJztcbmltcG9ydCB7IGdhcCwgcm93R2FwLCBjb2x1bW5HYXAgfSBmcm9tICcuLi9jc3NHcmlkJztcbmltcG9ydCB7IHBhbGV0dGVUcmFuc2Zvcm0gfSBmcm9tICcuLi9wYWxldHRlJztcbmltcG9ydCB7IG1heFdpZHRoLCBzaXppbmdUcmFuc2Zvcm0gfSBmcm9tICcuLi9zaXppbmcnO1xuY29uc3QgZGVmYXVsdFN4Q29uZmlnID0ge1xuICAvLyBib3JkZXJzXG4gIGJvcmRlcjoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJSaWdodDoge1xuICAgIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gICAgdHJhbnNmb3JtOiBib3JkZXJUcmFuc2Zvcm1cbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgICB0cmFuc2Zvcm06IGJvcmRlclRyYW5zZm9ybVxuICB9LFxuICBib3JkZXJDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZSdcbiAgfSxcbiAgYm9yZGVyVG9wQ29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUNvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJ1xuICB9LFxuICBib3JkZXJMZWZ0Q29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnXG4gIH0sXG4gIGJvcmRlclJhZGl1czoge1xuICAgIHRoZW1lS2V5OiAnc2hhcGUuYm9yZGVyUmFkaXVzJyxcbiAgICBzdHlsZTogYm9yZGVyUmFkaXVzXG4gIH0sXG4gIC8vIHBhbGV0dGVcbiAgY29sb3I6IHtcbiAgICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICAgIHRyYW5zZm9ybTogcGFsZXR0ZVRyYW5zZm9ybVxuICB9LFxuICBiZ2NvbG9yOiB7XG4gICAgdGhlbWVLZXk6ICdwYWxldHRlJyxcbiAgICBjc3NQcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIGJhY2tncm91bmRDb2xvcjoge1xuICAgIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gICAgdHJhbnNmb3JtOiBwYWxldHRlVHJhbnNmb3JtXG4gIH0sXG4gIC8vIHNwYWNpbmdcbiAgcDoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHB0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHI6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYjoge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBsOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcHg6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBweToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmc6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nVG9wOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1JpZ2h0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0JvdHRvbToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdMZWZ0OiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ1g6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nWToge1xuICAgIHN0eWxlOiBwYWRkaW5nXG4gIH0sXG4gIHBhZGRpbmdJbmxpbmU6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lU3RhcnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nSW5saW5lRW5kOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrOiB7XG4gICAgc3R5bGU6IHBhZGRpbmdcbiAgfSxcbiAgcGFkZGluZ0Jsb2NrU3RhcnQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBwYWRkaW5nQmxvY2tFbmQ6IHtcbiAgICBzdHlsZTogcGFkZGluZ1xuICB9LFxuICBtOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtdDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXI6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1iOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtbDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbXg6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG15OiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW46IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpblRvcDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luUmlnaHQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIG1hcmdpbkJvdHRvbToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luTGVmdDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luWDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luWToge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5JbmxpbmVTdGFydDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luSW5saW5lRW5kOiB7XG4gICAgc3R5bGU6IG1hcmdpblxuICB9LFxuICBtYXJnaW5CbG9jazoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2tTdGFydDoge1xuICAgIHN0eWxlOiBtYXJnaW5cbiAgfSxcbiAgbWFyZ2luQmxvY2tFbmQ6IHtcbiAgICBzdHlsZTogbWFyZ2luXG4gIH0sXG4gIC8vIGRpc3BsYXlcbiAgZGlzcGxheVByaW50OiB7XG4gICAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICAgIHRyYW5zZm9ybTogdmFsdWUgPT4gKHtcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgZGlzcGxheToge30sXG4gIG92ZXJmbG93OiB7fSxcbiAgdGV4dE92ZXJmbG93OiB7fSxcbiAgdmlzaWJpbGl0eToge30sXG4gIHdoaXRlU3BhY2U6IHt9LFxuICAvLyBmbGV4Ym94XG4gIGZsZXhCYXNpczoge30sXG4gIGZsZXhEaXJlY3Rpb246IHt9LFxuICBmbGV4V3JhcDoge30sXG4gIGp1c3RpZnlDb250ZW50OiB7fSxcbiAgYWxpZ25JdGVtczoge30sXG4gIGFsaWduQ29udGVudDoge30sXG4gIG9yZGVyOiB7fSxcbiAgZmxleDoge30sXG4gIGZsZXhHcm93OiB7fSxcbiAgZmxleFNocmluazoge30sXG4gIGFsaWduU2VsZjoge30sXG4gIGp1c3RpZnlJdGVtczoge30sXG4gIGp1c3RpZnlTZWxmOiB7fSxcbiAgLy8gZ3JpZFxuICBnYXA6IHtcbiAgICBzdHlsZTogZ2FwXG4gIH0sXG4gIHJvd0dhcDoge1xuICAgIHN0eWxlOiByb3dHYXBcbiAgfSxcbiAgY29sdW1uR2FwOiB7XG4gICAgc3R5bGU6IGNvbHVtbkdhcFxuICB9LFxuICBncmlkQ29sdW1uOiB7fSxcbiAgZ3JpZFJvdzoge30sXG4gIGdyaWRBdXRvRmxvdzoge30sXG4gIGdyaWRBdXRvQ29sdW1uczoge30sXG4gIGdyaWRBdXRvUm93czoge30sXG4gIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IHt9LFxuICBncmlkVGVtcGxhdGVSb3dzOiB7fSxcbiAgZ3JpZFRlbXBsYXRlQXJlYXM6IHt9LFxuICBncmlkQXJlYToge30sXG4gIC8vIHBvc2l0aW9uc1xuICBwb3NpdGlvbjoge30sXG4gIHpJbmRleDoge1xuICAgIHRoZW1lS2V5OiAnekluZGV4J1xuICB9LFxuICB0b3A6IHt9LFxuICByaWdodDoge30sXG4gIGJvdHRvbToge30sXG4gIGxlZnQ6IHt9LFxuICAvLyBzaGFkb3dzXG4gIGJveFNoYWRvdzoge1xuICAgIHRoZW1lS2V5OiAnc2hhZG93cydcbiAgfSxcbiAgLy8gc2l6aW5nXG4gIHdpZHRoOiB7XG4gICAgdHJhbnNmb3JtOiBzaXppbmdUcmFuc2Zvcm1cbiAgfSxcbiAgbWF4V2lkdGg6IHtcbiAgICBzdHlsZTogbWF4V2lkdGhcbiAgfSxcbiAgbWluV2lkdGg6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBoZWlnaHQ6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtYXhIZWlnaHQ6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBtaW5IZWlnaHQ6IHtcbiAgICB0cmFuc2Zvcm06IHNpemluZ1RyYW5zZm9ybVxuICB9LFxuICBib3hTaXppbmc6IHt9LFxuICAvLyB0eXBvZ3JhcGh5XG4gIGZvbnRGYW1pbHk6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRTaXplOiB7XG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9LFxuICBmb250U3R5bGU6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGZvbnRXZWlnaHQ6IHtcbiAgICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG4gIH0sXG4gIGxldHRlclNwYWNpbmc6IHt9LFxuICB0ZXh0VHJhbnNmb3JtOiB7fSxcbiAgbGluZUhlaWdodDoge30sXG4gIHRleHRBbGlnbjoge30sXG4gIHR5cG9ncmFwaHk6IHtcbiAgICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gICAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFN4Q29uZmlnOyIsImltcG9ydCB7IHVuc3RhYmxlX2NhcGl0YWxpemUgYXMgY2FwaXRhbGl6ZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCB7IGdldFBhdGgsIGdldFN0eWxlVmFsdWUgYXMgZ2V0VmFsdWUgfSBmcm9tICcuLi9zdHlsZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cywgY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0LCByZW1vdmVVbnVzZWRCcmVha3BvaW50cyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuZnVuY3Rpb24gb2JqZWN0c0hhdmVTYW1lS2V5cyguLi5vYmplY3RzKSB7XG4gIGNvbnN0IGFsbEtleXMgPSBvYmplY3RzLnJlZHVjZSgoa2V5cywgb2JqZWN0KSA9PiBrZXlzLmNvbmNhdChPYmplY3Qua2V5cyhvYmplY3QpKSwgW10pO1xuICBjb25zdCB1bmlvbiA9IG5ldyBTZXQoYWxsS2V5cyk7XG4gIHJldHVybiBvYmplY3RzLmV2ZXJ5KG9iamVjdCA9PiB1bmlvbi5zaXplID09PSBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjYWxsSWZGbihtYXliZUZuLCBhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXliZUZuID09PSAnZnVuY3Rpb24nID8gbWF5YmVGbihhcmcpIDogbWF5YmVGbjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvblxuZXhwb3J0IGZ1bmN0aW9uIHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpIHtcbiAgZnVuY3Rpb24gZ2V0VGhlbWVWYWx1ZShwcm9wLCB2YWwsIHRoZW1lLCBjb25maWcpIHtcbiAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsLFxuICAgICAgdGhlbWVcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWdbcHJvcF07XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbcHJvcF06IHZhbFxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY3NzUHJvcGVydHkgPSBwcm9wLFxuICAgICAgdGhlbWVLZXksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBzdHlsZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHRoZW1lTWFwcGluZyA9IGdldFBhdGgodGhlbWUsIHRoZW1lS2V5KSB8fCB7fTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIHJldHVybiBzdHlsZShwcm9wcyk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZUZpbmFsID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBwcm9wVmFsdWVGaW5hbCk7XG4gICAgICBpZiAocHJvcFZhbHVlRmluYWwgPT09IHZhbHVlICYmIHR5cGVvZiBwcm9wVmFsdWVGaW5hbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gSGF2ZW4ndCBmb3VuZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgdmFsLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIGZ1bmN0aW9uIHN0eWxlRnVuY3Rpb25TeChwcm9wcykge1xuICAgIHZhciBfdGhlbWUkdW5zdGFibGVfc3hDb247XG4gICAgY29uc3Qge1xuICAgICAgc3gsXG4gICAgICB0aGVtZSA9IHt9XG4gICAgfSA9IHByb3BzIHx8IHt9O1xuICAgIGlmICghc3gpIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBFbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSAoX3RoZW1lJHVuc3RhYmxlX3N4Q29uID0gdGhlbWUudW5zdGFibGVfc3hDb25maWcpICE9IG51bGwgPyBfdGhlbWUkdW5zdGFibGVfc3hDb24gOiBkZWZhdWx0U3hDb25maWc7XG5cbiAgICAvKlxuICAgICAqIFJlY2VpdmUgYHN4SW5wdXRgIGFzIG9iamVjdCBvciBjYWxsYmFja1xuICAgICAqIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNoZWNrIGtleXMgJiB2YWx1ZXMgdG8gY3JlYXRlIG1lZGlhIHF1ZXJ5IG9iamVjdCBzdHlsZXMuXG4gICAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICAgIGxldCBzeE9iamVjdCA9IHN4SW5wdXQ7XG4gICAgICBpZiAodHlwZW9mIHN4SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3hPYmplY3QgPSBzeElucHV0KHRoZW1lKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIHZhbHVlXG4gICAgICAgIHJldHVybiBzeElucHV0O1xuICAgICAgfVxuICAgICAgaWYgKCFzeE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QodGhlbWUuYnJlYWtwb2ludHMpO1xuICAgICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgICBsZXQgY3NzID0gZW1wdHlCcmVha3BvaW50cztcbiAgICAgIE9iamVjdC5rZXlzKHN4T2JqZWN0KS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1tzdHlsZUtleV0pIHtcbiAgICAgICAgICAgICAgY3NzID0gbWVyZ2UoY3NzLCBnZXRUaGVtZVZhbHVlKHN0eWxlS2V5LCB2YWx1ZSwgdGhlbWUsIGNvbmZpZykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgYnJlYWtwb2ludHNWYWx1ZXMgPSBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgfSwgdmFsdWUsIHggPT4gKHtcbiAgICAgICAgICAgICAgICBbc3R5bGVLZXldOiB4XG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgaWYgKG9iamVjdHNIYXZlU2FtZUtleXMoYnJlYWtwb2ludHNWYWx1ZXMsIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNzc1tzdHlsZUtleV0gPSBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgICAgICAgICAgICAgc3g6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgdGhlbWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGJyZWFrcG9pbnRzVmFsdWVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3MgPSBtZXJnZShjc3MsIGdldFRoZW1lVmFsdWUoc3R5bGVLZXksIHZhbHVlLCB0aGVtZSwgY29uZmlnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHN4KSA/IHN4Lm1hcCh0cmF2ZXJzZSkgOiB0cmF2ZXJzZShzeCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeDtcbn1cbmNvbnN0IHN0eWxlRnVuY3Rpb25TeCA9IHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpO1xuc3R5bGVGdW5jdGlvblN4LmZpbHRlclByb3BzID0gWydzeCddO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVGdW5jdGlvblN4OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgc3R5bGVGdW5jdGlvblN4IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeC9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IGRlZmF1bHRTeENvbmZpZyBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gvZGVmYXVsdFN4Q29uZmlnJztcbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgICBicmVha3BvaW50czogYnJlYWtwb2ludHNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXQsXG4gICAgICBzaGFwZTogc2hhcGVJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBjb25zdCBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBzcGFjaW5nID0gY3JlYXRlU3BhY2luZyhzcGFjaW5nSW5wdXQpO1xuICBsZXQgbXVpVGhlbWUgPSBkZWVwbWVyZ2Uoe1xuICAgIGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgY29tcG9uZW50czoge30sXG4gICAgLy8gSW5qZWN0IGNvbXBvbmVudCBkZWZpbml0aW9ucy5cbiAgICBwYWxldHRlOiBfZXh0ZW5kcyh7XG4gICAgICBtb2RlOiAnbGlnaHQnXG4gICAgfSwgcGFsZXR0ZUlucHV0KSxcbiAgICBzcGFjaW5nLFxuICAgIHNoYXBlOiBfZXh0ZW5kcyh7fSwgc2hhcGUsIHNoYXBlSW5wdXQpXG4gIH0sIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIG11aVRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnID0gX2V4dGVuZHMoe30sIGRlZmF1bHRTeENvbmZpZywgb3RoZXIgPT0gbnVsbCA/IHZvaWQgMCA6IG90aGVyLnVuc3RhYmxlX3N4Q29uZmlnKTtcbiAgbXVpVGhlbWUudW5zdGFibGVfc3ggPSBmdW5jdGlvbiBzeChwcm9wcykge1xuICAgIHJldHVybiBzdHlsZUZ1bmN0aW9uU3goe1xuICAgICAgc3g6IHByb3BzLFxuICAgICAgdGhlbWU6IHRoaXNcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGhlbWU7IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG4vKiB0c2xpbnQ6ZW5hYmxlOnVuaWZpZWQtc2lnbmF0dXJlcyAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9XG5cbiAgLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbFxuICBjb25zdCB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcbiAgY29uc3Qgc3BhY2luZyA9ICguLi5hcmdzSW5wdXQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJnc0lucHV0Lmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgJHthcmdzSW5wdXQubGVuZ3RofWApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFRoZW1lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IGNyZWF0ZVRoZW1lIGZyb20gJy4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHVzZVRoZW1lV2l0aG91dERlZmF1bHQgZnJvbSAnLi91c2VUaGVtZVdpdGhvdXREZWZhdWx0JztcbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZnVuY3Rpb24gdXNlVGhlbWUoZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lKSB7XG4gIHJldHVybiB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KGRlZmF1bHRUaGVtZSk7XG59XG5leHBvcnQgZGVmYXVsdCB1c2VUaGVtZTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyBtdWlVc2VUaGVtZSB9IGZyb20gJ0BtdWkvcHJpdmF0ZS10aGVtaW5nJztcbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IG51bGwpIHtcbiAgY29uc3QgY29udGV4dFRoZW1lID0gbXVpVXNlVGhlbWUoKTtcbiAgcmV0dXJuICFjb250ZXh0VGhlbWUgfHwgaXNPYmplY3RFbXB0eShjb250ZXh0VGhlbWUpID8gZGVmYXVsdFRoZW1lIDogY29udGV4dFRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICR7dmFsdWV9IGlzIG91dCBvZiByYW5nZSBbJHttaW59LCAke21heH1dLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG4gIHJldHVybiBjb2xvcnMgPyBgcmdiJHtjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJyd9KCR7Y29sb3JzLm1hcCgobiwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyl9KWAgOiAnJztcbn1cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuICBjb25zdCBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIGNvbnN0IHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBVbnN1cHBvcnRlZCBcXGAke2NvbG9yfVxcYCBjb2xvci5cblRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDksIGNvbG9yKSk7XG4gIH1cbiAgbGV0IHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKTtcbiAgbGV0IGNvbG9yU3BhY2U7XG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdmFsdWVzLFxuICAgIGNvbG9yU3BhY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBjb2xvckNoYW5uZWwgPSBjb2xvciA9PiB7XG4gIGNvbnN0IGRlY29tcG9zZWRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGRlY29tcG9zZWRDb2xvci52YWx1ZXMuc2xpY2UoMCwgMykubWFwKCh2YWwsIGlkeCkgPT4gZGVjb21wb3NlZENvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xICYmIGlkeCAhPT0gMCA/IGAke3ZhbH0lYCA6IHZhbCkuam9pbignICcpO1xufTtcbmV4cG9ydCBjb25zdCBwcml2YXRlX3NhZmVDb2xvckNoYW5uZWwgPSAoY29sb3IsIHdhcm5pbmcpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gY29sb3JDaGFubmVsKGNvbG9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBjb2xvclNwYWNlXG4gIH0gPSBjb2xvcjtcbiAgbGV0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG4gIHJldHVybiBgJHt0eXBlfSgke3ZhbHVlc30pYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICBsZXQgdHlwZSA9ICdyZ2InO1xuICBjb25zdCByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGxldCByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyB8fCBjb2xvci50eXBlID09PSAnaHNsYScgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiAoKHZhbCArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQ7XG4gIH0pO1xuXG4gIC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdjb2xvcicpIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSBgLyR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUFscGhhKGNvbG9yLCB2YWx1ZSwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBhbHBoYShjb2xvciwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmICh3YXJuaW5nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKSwgY29sb3IoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSB8fCBjb2xvci50eXBlLmluZGV4T2YoJ2NvbG9yJykgIT09IC0xKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpdmF0ZV9zYWZlRGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCwgd2FybmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgxIC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50LCB3YXJuaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAod2FybmluZyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHByaXZhdGVfc2FmZUVtcGhhc2l6ZShjb2xvciwgY29lZmZpY2llbnQsIHdhcm5pbmcpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJpdmF0ZV9zYWZlRW1waGFzaXplKGNvbG9yLCBjb2VmZmljaWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKHdhcm5pbmcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cbn0iLCJjb25zdCBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiY29uc3QgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNmNWY1ZjUnLFxuICBBMjAwOiAnI2VlZWVlZScsXG4gIEE0MDA6ICcjYmRiZGJkJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJjb25zdCBwdXJwbGUgPSB7XG4gIDUwOiAnI2YzZTVmNScsXG4gIDEwMDogJyNlMWJlZTcnLFxuICAyMDA6ICcjY2U5M2Q4JyxcbiAgMzAwOiAnI2JhNjhjOCcsXG4gIDQwMDogJyNhYjQ3YmMnLFxuICA1MDA6ICcjOWMyN2IwJyxcbiAgNjAwOiAnIzhlMjRhYScsXG4gIDcwMDogJyM3YjFmYTInLFxuICA4MDA6ICcjNmExYjlhJyxcbiAgOTAwOiAnIzRhMTQ4YycsXG4gIEExMDA6ICcjZWE4MGZjJyxcbiAgQTIwMDogJyNlMDQwZmInLFxuICBBNDAwOiAnI2Q1MDBmOScsXG4gIEE3MDA6ICcjYWEwMGZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHB1cnBsZTsiLCJjb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHJlZDsiLCJjb25zdCBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJjb25zdCBibHVlID0ge1xuICA1MDogJyNlM2YyZmQnLFxuICAxMDA6ICcjYmJkZWZiJyxcbiAgMjAwOiAnIzkwY2FmOScsXG4gIDMwMDogJyM2NGI1ZjYnLFxuICA0MDA6ICcjNDJhNWY1JyxcbiAgNTAwOiAnIzIxOTZmMycsXG4gIDYwMDogJyMxZTg4ZTUnLFxuICA3MDA6ICcjMTk3NmQyJyxcbiAgODAwOiAnIzE1NjVjMCcsXG4gIDkwMDogJyMwZDQ3YTEnLFxuICBBMTAwOiAnIzgyYjFmZicsXG4gIEEyMDA6ICcjNDQ4YWZmJyxcbiAgQTQwMDogJyMyOTc5ZmYnLFxuICBBNzAwOiAnIzI5NjJmZidcbn07XG5leHBvcnQgZGVmYXVsdCBibHVlOyIsImNvbnN0IGxpZ2h0Qmx1ZSA9IHtcbiAgNTA6ICcjZTFmNWZlJyxcbiAgMTAwOiAnI2IzZTVmYycsXG4gIDIwMDogJyM4MWQ0ZmEnLFxuICAzMDA6ICcjNGZjM2Y3JyxcbiAgNDAwOiAnIzI5YjZmNicsXG4gIDUwMDogJyMwM2E5ZjQnLFxuICA2MDA6ICcjMDM5YmU1JyxcbiAgNzAwOiAnIzAyODhkMScsXG4gIDgwMDogJyMwMjc3YmQnLFxuICA5MDA6ICcjMDE1NzliJyxcbiAgQTEwMDogJyM4MGQ4ZmYnLFxuICBBMjAwOiAnIzQwYzRmZicsXG4gIEE0MDA6ICcjMDBiMGZmJyxcbiAgQTcwMDogJyMwMDkxZWEnXG59O1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRCbHVlOyIsImNvbnN0IGdyZWVuID0ge1xuICA1MDogJyNlOGY1ZTknLFxuICAxMDA6ICcjYzhlNmM5JyxcbiAgMjAwOiAnI2E1ZDZhNycsXG4gIDMwMDogJyM4MWM3ODQnLFxuICA0MDA6ICcjNjZiYjZhJyxcbiAgNTAwOiAnIzRjYWY1MCcsXG4gIDYwMDogJyM0M2EwNDcnLFxuICA3MDA6ICcjMzg4ZTNjJyxcbiAgODAwOiAnIzJlN2QzMicsXG4gIDkwMDogJyMxYjVlMjAnLFxuICBBMTAwOiAnI2I5ZjZjYScsXG4gIEEyMDA6ICcjNjlmMGFlJyxcbiAgQTQwMDogJyMwMGU2NzYnLFxuICBBNzAwOiAnIzAwYzg1Mydcbn07XG5leHBvcnQgZGVmYXVsdCBncmVlbjsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wibW9kZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgcHVycGxlIGZyb20gJy4uL2NvbG9ycy9wdXJwbGUnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgbGlnaHRCbHVlIGZyb20gJy4uL2NvbG9ycy9saWdodEJsdWUnO1xuaW1wb3J0IGdyZWVuIGZyb20gJy4uL2NvbG9ycy9ncmVlbic7XG5leHBvcnQgY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogY29tbW9uLndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogY29tbW9uLndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiAnIzEyMTIxMicsXG4gICAgZGVmYXVsdDogJyMxMjEyMTInXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogY29tbW9uLndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjE2KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjE2LFxuICAgIGRpc2FibGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4yNFxuICB9XG59O1xuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBjb25zdCB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSBsaWdodGVuKGludGVudC5tYWluLCB0b25hbE9mZnNldExpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9IGRhcmtlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXREYXJrKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRQcmltYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogYmx1ZVsyMDBdLFxuICAgICAgbGlnaHQ6IGJsdWVbNTBdLFxuICAgICAgZGFyazogYmx1ZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IGJsdWVbNzAwXSxcbiAgICBsaWdodDogYmx1ZVs0MDBdLFxuICAgIGRhcms6IGJsdWVbODAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHB1cnBsZVsyMDBdLFxuICAgICAgbGlnaHQ6IHB1cnBsZVs1MF0sXG4gICAgICBkYXJrOiBwdXJwbGVbNDAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBwdXJwbGVbNTAwXSxcbiAgICBsaWdodDogcHVycGxlWzMwMF0sXG4gICAgZGFyazogcHVycGxlWzcwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRFcnJvcihtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IHJlZFs1MDBdLFxuICAgICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgICAgZGFyazogcmVkWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogcmVkWzcwMF0sXG4gICAgbGlnaHQ6IHJlZFs0MDBdLFxuICAgIGRhcms6IHJlZFs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0SW5mbyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGxpZ2h0Qmx1ZVs0MDBdLFxuICAgICAgbGlnaHQ6IGxpZ2h0Qmx1ZVszMDBdLFxuICAgICAgZGFyazogbGlnaHRCbHVlWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogbGlnaHRCbHVlWzcwMF0sXG4gICAgbGlnaHQ6IGxpZ2h0Qmx1ZVs1MDBdLFxuICAgIGRhcms6IGxpZ2h0Qmx1ZVs5MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IGdyZWVuWzQwMF0sXG4gICAgICBsaWdodDogZ3JlZW5bMzAwXSxcbiAgICAgIGRhcms6IGdyZWVuWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogZ3JlZW5bODAwXSxcbiAgICBsaWdodDogZ3JlZW5bNTAwXSxcbiAgICBkYXJrOiBncmVlbls5MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0V2FybmluZyhtb2RlID0gJ2xpZ2h0Jykge1xuICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1haW46IG9yYW5nZVs0MDBdLFxuICAgICAgbGlnaHQ6IG9yYW5nZVszMDBdLFxuICAgICAgZGFyazogb3JhbmdlWzcwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogJyNlZDZjMDInLFxuICAgIC8vIGNsb3Nlc3QgdG8gb3JhbmdlWzgwMF0gdGhhdCBwYXNzIDM6MS5cbiAgICBsaWdodDogb3JhbmdlWzUwMF0sXG4gICAgZGFyazogb3JhbmdlWzkwMF1cbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICBjb25zdCB7XG4gICAgICBtb2RlID0gJ2xpZ2h0JyxcbiAgICAgIGNvbnRyYXN0VGhyZXNob2xkID0gMyxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gMC4yXG4gICAgfSA9IHBhbGV0dGUsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwYWxldHRlLCBfZXhjbHVkZWQpO1xuICBjb25zdCBwcmltYXJ5ID0gcGFsZXR0ZS5wcmltYXJ5IHx8IGdldERlZmF1bHRQcmltYXJ5KG1vZGUpO1xuICBjb25zdCBzZWNvbmRhcnkgPSBwYWxldHRlLnNlY29uZGFyeSB8fCBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUpO1xuICBjb25zdCBlcnJvciA9IHBhbGV0dGUuZXJyb3IgfHwgZ2V0RGVmYXVsdEVycm9yKG1vZGUpO1xuICBjb25zdCBpbmZvID0gcGFsZXR0ZS5pbmZvIHx8IGdldERlZmF1bHRJbmZvKG1vZGUpO1xuICBjb25zdCBzdWNjZXNzID0gcGFsZXR0ZS5zdWNjZXNzIHx8IGdldERlZmF1bHRTdWNjZXNzKG1vZGUpO1xuICBjb25zdCB3YXJuaW5nID0gcGFsZXR0ZS53YXJuaW5nIHx8IGdldERlZmF1bHRXYXJuaW5nKG1vZGUpO1xuXG4gIC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhc1xuICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gIC8vIGFuZCBtYXRlcmlhbC1jb21wb25lbnRzLXdlYiBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2FjNDZiODg2M2M0ZGFiOWZjMjJjNGM2NjJkYzZiZDFiNjVkZDY1MmYvcGFja2FnZXMvbWRjLXRoZW1lL19mdW5jdGlvbnMuc2NzcyNMNTRcbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICBjb25zdCBjb250cmFzdFRleHQgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGRhcmsudGV4dC5wcmltYXJ5KSA+PSBjb250cmFzdFRocmVzaG9sZCA/IGRhcmsudGV4dC5wcmltYXJ5IDogbGlnaHQudGV4dC5wcmltYXJ5O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBjb250cmFzdCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mICR7Y29udHJhc3R9OjEgZm9yICR7Y29udHJhc3RUZXh0fSBvbiAke2JhY2tncm91bmR9YCwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSBfZXh0ZW5kcyh7fSwgY29sb3IpO1xuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG4gICAgaWYgKCFjb2xvci5oYXNPd25Qcm9wZXJ0eSgnbWFpbicpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIFxcYG1haW5cXGAgcHJvcGVydHkgb3IgYSBcXGAke21haW5TaGFkZX1cXGAgcHJvcGVydHkuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTEsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgbWFpblNoYWRlKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sb3IubWFpbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuXFxgY29sb3IubWFpblxcYCBzaG91bGQgYmUgYSBzdHJpbmcsIGJ1dCBcXGAke0pTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pfVxcYCB3YXMgcHJvdmlkZWQgaW5zdGVhZC5cblxuRGlkIHlvdSBpbnRlbmQgdG8gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nIGFwcHJvYWNoZXM/XG5cbmltcG9ydCB7IGdyZWVuIH0gZnJvbSBcIkBtdWkvbWF0ZXJpYWwvY29sb3JzXCI7XG5cbmNvbnN0IHRoZW1lMSA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiBncmVlbixcbn0gfSk7XG5cbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xuICBwcmltYXJ5OiB7IG1haW46IGdyZWVuWzUwMF0gfSxcbn0gfSk7YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG4gIGNvbnN0IG1vZGVzID0ge1xuICAgIGRhcmssXG4gICAgbGlnaHRcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIW1vZGVzW21vZGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSBwYWxldHRlIG1vZGUgXFxgJHttb2RlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICAvLyBBIGNvbGxlY3Rpb24gb2YgY29tbW9uIGNvbG9ycy5cbiAgICBjb21tb246IF9leHRlbmRzKHt9LCBjb21tb24pLFxuICAgIC8vIHByZXZlbnQgbXV0YWJsZSBvYmplY3QuXG4gICAgLy8gVGhlIHBhbGV0dGUgbW9kZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgbW9kZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBwcmltYXJ5LFxuICAgICAgbmFtZTogJ3ByaW1hcnknXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBzZWNvbmRhcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgc2Vjb25kYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHNlY29uZGFyeSxcbiAgICAgIG5hbWU6ICdzZWNvbmRhcnknLFxuICAgICAgbWFpblNoYWRlOiAnQTQwMCcsXG4gICAgICBsaWdodFNoYWRlOiAnQTIwMCcsXG4gICAgICBkYXJrU2hhZGU6ICdBNzAwJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogZXJyb3IsXG4gICAgICBuYW1lOiAnZXJyb3InXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgYWN0aW9ucyBvciBpbXBvcnRhbnQgbWVzc2FnZXMuXG4gICAgd2FybmluZzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiB3YXJuaW5nLFxuICAgICAgbmFtZTogJ3dhcm5pbmcnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogaW5mbyxcbiAgICAgIG5hbWU6ICdpbmZvJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBpbmRpY2F0ZSB0aGUgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGFuIGFjdGlvbiB0aGF0IHVzZXIgdHJpZ2dlcmVkLlxuICAgIHN1Y2Nlc3M6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc3VjY2VzcyxcbiAgICAgIG5hbWU6ICdzdWNjZXNzJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBncmV5IGNvbG9ycy5cbiAgICBncmV5LFxuICAgIC8vIFVzZWQgYnkgYGdldENvbnRyYXN0VGV4dCgpYCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QgYmV0d2VlblxuICAgIC8vIHRoZSBiYWNrZ3JvdW5kIGFuZCB0aGUgdGV4dC5cbiAgICBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXRcbiAgfSwgbW9kZXNbbW9kZV0pLCBvdGhlcik7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJmb250RmFtaWx5XCIsIFwiZm9udFNpemVcIiwgXCJmb250V2VpZ2h0TGlnaHRcIiwgXCJmb250V2VpZ2h0UmVndWxhclwiLCBcImZvbnRXZWlnaHRNZWRpdW1cIiwgXCJmb250V2VpZ2h0Qm9sZFwiLCBcImh0bWxGb250U2l6ZVwiLCBcImFsbFZhcmlhbnRzXCIsIFwicHhUb1JlbVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuY29uc3QgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xuY29uc3QgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcblxuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICBjb25zdCBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICB7XG4gICAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgICAvLyBUaGUgZGVmYXVsdCBmb250IHNpemUgb2YgdGhlIE1hdGVyaWFsIFNwZWNpZmljYXRpb24uXG4gICAgICBmb250U2l6ZSA9IDE0LFxuICAgICAgLy8gcHhcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IDMwMCxcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gNDAwLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gNzAwLFxuICAgICAgLy8gVGVsbCBNVUkgd2hhdCdzIHRoZSBmb250LXNpemUgb24gdGhlIGh0bWwgZWxlbWVudC5cbiAgICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgICBodG1sRm9udFNpemUgPSAxNixcbiAgICAgIC8vIEFwcGx5IHRoZSBDU1MgcHJvcGVydGllcyB0byBhbGwgdGhlIHZhcmlhbnRzLlxuICAgICAgYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtOiBweFRvUmVtMlxuICAgIH0gPSBfcmVmLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgZm9udFNpemVgIGlzIHJlcXVpcmVkIHRvIGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogYGh0bWxGb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuICBjb25zdCBweFRvUmVtID0gcHhUb1JlbTIgfHwgKHNpemUgPT4gYCR7c2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWZ9cmVtYCk7XG4gIGNvbnN0IGJ1aWxkVmFyaWFudCA9IChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpID0+IF9leHRlbmRzKHtcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRXZWlnaHQsXG4gICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHBzOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdGhvdWdodHMvMjAwNi8wMi8wOC91bml0bGVzcy1saW5lLWhlaWdodHMvXG4gICAgbGluZUhlaWdodFxuICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICBsZXR0ZXJTcGFjaW5nOiBgJHtyb3VuZChsZXR0ZXJTcGFjaW5nIC8gc2l6ZSl9ZW1gXG4gIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIGNvbnN0IHZhcmlhbnRzID0ge1xuICAgIGgxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA5NiwgMS4xNjcsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMS4yLCAtMC41KSxcbiAgICBoMzogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCA0OCwgMS4xNjcsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjIzNSwgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzM0LCAwKSxcbiAgICBoNjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDIwLCAxLjYsIDAuMTUpLFxuICAgIHN1YnRpdGxlMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS43NSwgMC4xNSksXG4gICAgc3VidGl0bGUyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNTcsIDAuMSksXG4gICAgYm9keTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNSwgMC4xNSksXG4gICAgYm9keTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNDMsIDAuMTUpLFxuICAgIGJ1dHRvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjc1LCAwLjQsIGNhc2VBbGxDYXBzKSxcbiAgICBjYXB0aW9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTtcbiAgcmV0dXJuIGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuICB9KTtcbn0iLCJjb25zdCBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG5jb25zdCBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xuY29uc3Qgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuZnVuY3Rpb24gY3JlYXRlU2hhZG93KC4uLnB4KSB7XG4gIHJldHVybiBbYCR7cHhbMF19cHggJHtweFsxXX1weCAke3B4WzJdfXB4ICR7cHhbM119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbNF19cHggJHtweFs1XX1weCAke3B4WzZdfXB4ICR7cHhbN119cHggcmdiYSgwLDAsMCwke3NoYWRvd0tleVBlbnVtYnJhT3BhY2l0eX0pYCwgYCR7cHhbOF19cHggJHtweFs5XX1weCAke3B4WzEwXX1weCAke3B4WzExXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHl9KWBdLmpvaW4oJywnKTtcbn1cblxuLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5jb25zdCBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDIsIDEsIC0xLCAwLCAxLCAxLCAwLCAwLCAxLCAzLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDEsIC0yLCAwLCAyLCAyLCAwLCAwLCAxLCA1LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDMsIC0yLCAwLCAzLCA0LCAwLCAwLCAxLCA4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG5leHBvcnQgZGVmYXVsdCBzaGFkb3dzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgY29uc3QgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTtcblxuLy8gRm9sbG93IGh0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5leHBvcnQgY29uc3QgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIGAke01hdGgucm91bmQobWlsbGlzZWNvbmRzKX1tc2A7XG59XG5mdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3QgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjtcblxuICAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcbiAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIGNvbnN0YW50ICoqIDAuMjUgKyBjb25zdGFudCAvIDUpICogMTApO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbnMoaW5wdXRUcmFuc2l0aW9ucykge1xuICBjb25zdCBtZXJnZWRFYXNpbmcgPSBfZXh0ZW5kcyh7fSwgZWFzaW5nLCBpbnB1dFRyYW5zaXRpb25zLmVhc2luZyk7XG4gIGNvbnN0IG1lcmdlZER1cmF0aW9uID0gX2V4dGVuZHMoe30sIGR1cmF0aW9uLCBpbnB1dFRyYW5zaXRpb25zLmR1cmF0aW9uKTtcbiAgY29uc3QgY3JlYXRlID0gKHByb3BzID0gWydhbGwnXSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25PcHRpb24gPSBtZXJnZWREdXJhdGlvbi5zdGFuZGFyZCxcbiAgICAgICAgZWFzaW5nOiBlYXNpbmdPcHRpb24gPSBtZXJnZWRFYXNpbmcuZWFzZUluT3V0LFxuICAgICAgICBkZWxheSA9IDBcbiAgICAgIH0gPSBvcHRpb25zLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICAvLyBJRTExIHN1cHBvcnQsIHJlcGxhY2Ugd2l0aCBOdW1iZXIuaXNOYU5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICAgIGNvbnN0IGlzTnVtYmVyID0gdmFsdWUgPT4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGdldEF1dG9IZWlnaHREdXJhdGlvbixcbiAgICBjcmVhdGVcbiAgfSwgaW5wdXRUcmFuc2l0aW9ucywge1xuICAgIGVhc2luZzogbWVyZ2VkRWFzaW5nLFxuICAgIGR1cmF0aW9uOiBtZXJnZWREdXJhdGlvblxuICB9KTtcbn0iLCIvLyBXZSBuZWVkIHRvIGNlbnRyYWxpemUgdGhlIHpJbmRleCBkZWZpbml0aW9ucyBhcyB0aGV5IHdvcmtcbi8vIGxpa2UgZ2xvYmFsIHZhbHVlcyBpbiB0aGUgYnJvd3Nlci5cbmNvbnN0IHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgZmFiOiAxMDUwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwic3BhY2luZ1wiLCBcInBhbGV0dGVcIiwgXCJ0cmFuc2l0aW9uc1wiLCBcInR5cG9ncmFwaHlcIiwgXCJzaGFwZVwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlVGhlbWUgYXMgc3lzdGVtQ3JlYXRlVGhlbWUsIHVuc3RhYmxlX2RlZmF1bHRTeENvbmZpZyBhcyBkZWZhdWx0U3hDb25maWcsIHVuc3RhYmxlX3N0eWxlRnVuY3Rpb25TeCBhcyBzdHlsZUZ1bmN0aW9uU3ggfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbnMgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcbmZ1bmN0aW9uIGNyZWF0ZVRoZW1lKG9wdGlvbnMgPSB7fSwgLi4uYXJncykge1xuICBjb25zdCB7XG4gICAgICBtaXhpbnM6IG1peGluc0lucHV0ID0ge30sXG4gICAgICBwYWxldHRlOiBwYWxldHRlSW5wdXQgPSB7fSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9uc0lucHV0ID0ge30sXG4gICAgICB0eXBvZ3JhcGh5OiB0eXBvZ3JhcGh5SW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgaWYgKG9wdGlvbnMudmFycykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB2YXJzXFxgIGlzIGEgcHJpdmF0ZSBmaWVsZCB1c2VkIGZvciBDU1MgdmFyaWFibGVzIHN1cHBvcnQuXG5QbGVhc2UgdXNlIGFub3RoZXIgbmFtZS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxOCkpO1xuICB9XG4gIGNvbnN0IHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIGNvbnN0IHN5c3RlbVRoZW1lID0gc3lzdGVtQ3JlYXRlVGhlbWUob3B0aW9ucyk7XG4gIGxldCBtdWlUaGVtZSA9IGRlZXBtZXJnZShzeXN0ZW1UaGVtZSwge1xuICAgIG1peGluczogY3JlYXRlTWl4aW5zKHN5c3RlbVRoZW1lLmJyZWFrcG9pbnRzLCBtaXhpbnNJbnB1dCksXG4gICAgcGFsZXR0ZSxcbiAgICAvLyBEb24ndCB1c2UgWy4uLnNoYWRvd3NdIHVudGlsIHlvdSd2ZSB2ZXJpZmllZCBpdHMgdHJhbnNwaWxlZCBjb2RlIGlzIG5vdCBpbnZva2luZyB0aGUgaXRlcmF0b3IgcHJvdG9jb2wuXG4gICAgc2hhZG93czogc2hhZG93cy5zbGljZSgpLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICB0cmFuc2l0aW9uczogY3JlYXRlVHJhbnNpdGlvbnModHJhbnNpdGlvbnNJbnB1dCksXG4gICAgekluZGV4OiBfZXh0ZW5kcyh7fSwgekluZGV4KVxuICB9KTtcbiAgbXVpVGhlbWUgPSBkZWVwbWVyZ2UobXVpVGhlbWUsIG90aGVyKTtcbiAgbXVpVGhlbWUgPSBhcmdzLnJlZHVjZSgoYWNjLCBhcmd1bWVudCkgPT4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpLCBtdWlUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uc3Qgc3RhdGVDbGFzc2VzID0gWydhY3RpdmUnLCAnY2hlY2tlZCcsICdjb21wbGV0ZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXhwYW5kZWQnLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnc2VsZWN0ZWQnXTtcbiAgICBjb25zdCB0cmF2ZXJzZSA9IChub2RlLCBjb21wb25lbnQpID0+IHtcbiAgICAgIGxldCBrZXk7XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZVtrZXldO1xuICAgICAgICBpZiAoc3RhdGVDbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVDbGFzcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhtdWlUaGVtZS5jb21wb25lbnRzKS5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IG11aVRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XS5zdHlsZU92ZXJyaWRlcztcbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbXVpVGhlbWUudW5zdGFibGVfc3hDb25maWcgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFN4Q29uZmlnLCBvdGhlciA9PSBudWxsID8gdm9pZCAwIDogb3RoZXIudW5zdGFibGVfc3hDb25maWcpO1xuICBtdWlUaGVtZS51bnN0YWJsZV9zeCA9IGZ1bmN0aW9uIHN4KHByb3BzKSB7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICBzeDogcHJvcHMsXG4gICAgICB0aGVtZTogdGhpc1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlVGhlbWUoLi4uYXJncyk7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWVcbn0pIHtcbiAgcmV0dXJuIHN5c3RlbVVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzLFxuICAgIG5hbWUsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufSIsImltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWVcbn0pIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTsgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IGNhbGwgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSBpbiBkZXZlbG9wbWVudCBhbmQgd2hlblxuICAvLyB0aGUgbGFiZWwgaGFzbid0IGFscmVhZHkgYmVlbiBjb21wdXRlZFxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEhcHJvcHMuY3NzICYmICh0eXBlb2YgcHJvcHMuY3NzICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcHMuY3NzLm5hbWUgIT09ICdzdHJpbmcnIHx8IHByb3BzLmNzcy5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpKSB7XG4gICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgaWYgKGxhYmVsKSBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IGxhYmVsO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgbmV3UHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufVxuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24gYXMgRSwgVGhlbWVDb250ZXh0IGFzIFQsIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSBhcyBfLCBUaGVtZVByb3ZpZGVyIGFzIGEsIHdpdGhUaGVtZSBhcyBiLCBjcmVhdGVFbW90aW9uUHJvcHMgYXMgYywgaGFzT3duUHJvcGVydHkgYXMgaCwgdXNlVGhlbWUgYXMgdSwgd2l0aEVtb3Rpb25DYWNoZSBhcyB3IH07XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdICsgXCI7XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciByZWdpc3RlclN0eWxlcyA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICkgJiYgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgfVxufTtcbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBzZXJpYWxpemVkO1xuXG4gICAgZG8ge1xuICAgICAgdmFyIG1heWJlU3R5bGVzID0gY2FjaGUuaW5zZXJ0KHNlcmlhbGl6ZWQgPT09IGN1cnJlbnQgPyBcIi5cIiArIGNsYXNzTmFtZSA6ICcnLCBjdXJyZW50LCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG5cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgfSB3aGlsZSAoY3VycmVudCAhPT0gdW5kZWZpbmVkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcyB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgRmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChGaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBGaW5hbFRhZyA9PT0gJ3N0cmluZydcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGaW5hbFRhZywgbmV3UHJvcHMpKTtcbiAgICB9KTtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmRlZmF1bHRQcm9wcyA9IHRhZy5kZWZhdWx0UHJvcHM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9yZWFsID0gU3R5bGVkO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fYmFzZSA9IGJhc2VUYWc7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHlsZWQsICd0b1N0cmluZycsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUic7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZTogY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0eWxlZDtcbiIsImltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBjcmVhdGVTdHlsZWQgZnJvbSAnLi4vYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBuZXdTdHlsZWQ7XG4iLCIvKiogQGxpY2Vuc2UgTVVJIHY1LjExLjBcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBlbVN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBjb25zdCBzdHlsZXNGYWN0b3J5ID0gZW1TdHlsZWQodGFnLCBvcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKC4uLnN0eWxlcykgPT4ge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgPyBgXCIke3RhZ31cImAgOiAnY29tcG9uZW50JztcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFNlZW1zIGxpa2UgeW91IGNhbGxlZCBcXGBzdHlsZWQoJHtjb21wb25lbnR9KSgpXFxgIHdpdGhvdXQgYSBcXGBzdHlsZVxcYCBhcmd1bWVudC5gLCAnWW91IG11c3QgcHJvdmlkZSBhIGBzdHlsZXNgIGFyZ3VtZW50OiBgc3R5bGVkKFwiZGl2XCIpKHN0eWxlWW91Rm9yZ290VG9QYXNzKWAuJ10uam9pbignXFxuJykpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMuc29tZShzdHlsZSA9PiBzdHlsZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IHRoZSBzdHlsZWQoJHtjb21wb25lbnR9KSguLi5hcmdzKSBBUEkgcmVxdWlyZXMgYWxsIGl0cyBhcmdzIHRvIGJlIGRlZmluZWQuYCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3R5bGVzRmFjdG9yeSguLi5zdHlsZXMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0eWxlc0ZhY3Rvcnk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBpbnRlcm5hbF9wcm9jZXNzU3R5bGVzID0gKHRhZywgcHJvY2Vzc29yKSA9PiB7XG4gIC8vIEVtb3Rpb24gYXR0YWNoZXMgYWxsIHRoZSBzdHlsZXMgYXMgYF9fZW1vdGlvbl9zdHlsZXNgLlxuICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vYmxvYi8xNmQ5NzFkMGRhMjI5NTk2ZDZiY2MzOWQyODJiYTk3NTNjOWVlN2NmL3BhY2thZ2VzL3N0eWxlZC9zcmMvYmFzZS5qcyNMMTg2XG4gIGlmIChBcnJheS5pc0FycmF5KHRhZy5fX2Vtb3Rpb25fc3R5bGVzKSkge1xuICAgIHRhZy5fX2Vtb3Rpb25fc3R5bGVzID0gcHJvY2Vzc29yKHRhZy5fX2Vtb3Rpb25fc3R5bGVzKTtcbiAgfVxufTtcbmV4cG9ydCB7IFRoZW1lQ29udGV4dCwga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFN0eWxlZEVuZ2luZVByb3ZpZGVyIH0gZnJvbSAnLi9TdHlsZWRFbmdpbmVQcm92aWRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEdsb2JhbFN0eWxlcyB9IGZyb20gJy4vR2xvYmFsU3R5bGVzJzsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhcmlhbnRcIl07XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBzdHJpbmcgY2xhc3NLZXkgYmFzZWQgb24gdGhlIHByb3BlcnRpZXMgcHJvdmlkZWQuIEl0IHN0YXJ0cyB3aXRoIHRoZVxuICogdmFyaWFudCBpZiBkZWZpbmVkLCBhbmQgdGhlbiBpdCBhcHBlbmRzIGFsbCBvdGhlciBwcm9wZXJ0aWVzIGluIGFscGhhYmV0aWNhbCBvcmRlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIHRoZSBwcm9wZXJ0aWVzIGZvciB3aGljaCB0aGUgY2xhc3NLZXkgc2hvdWxkIGJlIGNyZWF0ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BzVG9DbGFzc0tleShwcm9wcykge1xuICBjb25zdCB7XG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGxldCBjbGFzc0tleSA9IHZhcmlhbnQgfHwgJyc7XG4gIE9iamVjdC5rZXlzKG90aGVyKS5zb3J0KCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgPT09ICdjb2xvcicpIHtcbiAgICAgIGNsYXNzS2V5ICs9IGlzRW1wdHkoY2xhc3NLZXkpID8gcHJvcHNba2V5XSA6IGNhcGl0YWxpemUocHJvcHNba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzS2V5ICs9IGAke2lzRW1wdHkoY2xhc3NLZXkpID8ga2V5IDogY2FwaXRhbGl6ZShrZXkpfSR7Y2FwaXRhbGl6ZShwcm9wc1trZXldLnRvU3RyaW5nKCkpfWA7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsYXNzS2V5O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJuYW1lXCIsIFwic2xvdFwiLCBcInNraXBWYXJpYW50c1Jlc29sdmVyXCIsIFwic2tpcFN4XCIsIFwib3ZlcnJpZGVzUmVzb2x2ZXJcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJ0aGVtZVwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBzdHlsZWRFbmdpbmVTdHlsZWQsIHsgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyBhcyBwcm9jZXNzU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgcHJvcHNUb0NsYXNzS2V5IGZyb20gJy4vcHJvcHNUb0NsYXNzS2V5JztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3ggZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMjZkZWQ2MTA5ZmNkOGNhOTg3NWNjMmNlNDU2NGZlZTY3OGEzZjNjNS9wYWNrYWdlcy9zdHlsZWQvc3JjL3V0aWxzLmpzI0w0MFxuZnVuY3Rpb24gaXNTdHJpbmdUYWcodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJlxuICAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2O1xufVxuY29uc3QgZ2V0U3R5bGVPdmVycmlkZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgaWYgKHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0uc3R5bGVPdmVycmlkZXM7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuY29uc3QgZ2V0VmFyaWFudFN0eWxlcyA9IChuYW1lLCB0aGVtZSkgPT4ge1xuICBsZXQgdmFyaWFudHMgPSBbXTtcbiAgaWYgKHRoZW1lICYmIHRoZW1lLmNvbXBvbmVudHMgJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXSAmJiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzKSB7XG4gICAgdmFyaWFudHMgPSB0aGVtZS5jb21wb25lbnRzW25hbWVdLnZhcmlhbnRzO1xuICB9XG4gIGNvbnN0IHZhcmlhbnRzU3R5bGVzID0ge307XG4gIHZhcmlhbnRzLmZvckVhY2goZGVmaW5pdGlvbiA9PiB7XG4gICAgY29uc3Qga2V5ID0gcHJvcHNUb0NsYXNzS2V5KGRlZmluaXRpb24ucHJvcHMpO1xuICAgIHZhcmlhbnRzU3R5bGVzW2tleV0gPSBkZWZpbml0aW9uLnN0eWxlO1xuICB9KTtcbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcbmNvbnN0IHZhcmlhbnRzUmVzb2x2ZXIgPSAocHJvcHMsIHN0eWxlcywgdGhlbWUsIG5hbWUpID0+IHtcbiAgdmFyIF90aGVtZSRjb21wb25lbnRzLCBfdGhlbWUkY29tcG9uZW50cyRuYW07XG4gIGNvbnN0IHtcbiAgICBvd25lclN0YXRlID0ge31cbiAgfSA9IHByb3BzO1xuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IFtdO1xuICBjb25zdCB0aGVtZVZhcmlhbnRzID0gdGhlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyA9IHRoZW1lLmNvbXBvbmVudHMpID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMkbmFtID0gX3RoZW1lJGNvbXBvbmVudHNbbmFtZV0pID09IG51bGwgPyB2b2lkIDAgOiBfdGhlbWUkY29tcG9uZW50cyRuYW0udmFyaWFudHM7XG4gIGlmICh0aGVtZVZhcmlhbnRzKSB7XG4gICAgdGhlbWVWYXJpYW50cy5mb3JFYWNoKHRoZW1lVmFyaWFudCA9PiB7XG4gICAgICBsZXQgaXNNYXRjaCA9IHRydWU7XG4gICAgICBPYmplY3Qua2V5cyh0aGVtZVZhcmlhbnQucHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKG93bmVyU3RhdGVba2V5XSAhPT0gdGhlbWVWYXJpYW50LnByb3BzW2tleV0gJiYgcHJvcHNba2V5XSAhPT0gdGhlbWVWYXJpYW50LnByb3BzW2tleV0pIHtcbiAgICAgICAgICBpc01hdGNoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGlzTWF0Y2gpIHtcbiAgICAgICAgdmFyaWFudHNTdHlsZXMucHVzaChzdHlsZXNbcHJvcHNUb0NsYXNzS2V5KHRoZW1lVmFyaWFudC5wcm9wcyldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdmFyaWFudHNTdHlsZXM7XG59O1xuXG4vLyBVcGRhdGUgL3N5c3RlbS9zdHlsZWQvI2FwaSBpbiBjYXNlIGlmIHRoaXMgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEZvcndhcmRQcm9wKHByb3ApIHtcbiAgcmV0dXJuIHByb3AgIT09ICdvd25lclN0YXRlJyAmJiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJztcbn1cbmV4cG9ydCBjb25zdCBzeXN0ZW1EZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuY29uc3QgbG93ZXJjYXNlRmlyc3RMZXR0ZXIgPSBzdHJpbmcgPT4ge1xuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlZChpbnB1dCA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0VGhlbWUgPSBzeXN0ZW1EZWZhdWx0VGhlbWUsXG4gICAgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AsXG4gICAgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3BcbiAgfSA9IGlucHV0O1xuICBjb25zdCBzeXN0ZW1TeCA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeChfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHRoZW1lXG4gICAgfSkpO1xuICB9O1xuICBzeXN0ZW1TeC5fX211aV9zeXN0ZW1TeCA9IHRydWU7XG4gIHJldHVybiAodGFnLCBpbnB1dE9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIEZpbHRlciBvdXQgdGhlIGBzeGAgc3R5bGUgZnVuY3Rpb24gZnJvbSB0aGUgcHJldmlvdXMgc3R5bGVkIGNvbXBvbmVudCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHN0eWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICAgIHByb2Nlc3NTdHlsZXModGFnLCBzdHlsZXMgPT4gc3R5bGVzLmZpbHRlcihzdHlsZSA9PiAhKHN0eWxlICE9IG51bGwgJiYgc3R5bGUuX19tdWlfc3lzdGVtU3gpKSk7XG4gICAgY29uc3Qge1xuICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgICBzbG90OiBjb21wb25lbnRTbG90LFxuICAgICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgICAgb3ZlcnJpZGVzUmVzb2x2ZXJcbiAgICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQpO1xuXG4gICAgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOiBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAoc3R5bGVzQXJnID0+IHtcbiAgICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcgPyBfcmVmID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgICAgfSA9IF9yZWYsXG4gICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZDIpO1xuICAgICAgICAgIHJldHVybiBzdHlsZXNBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfSA6IHN0eWxlc0FyZztcbiAgICAgIH0pIDogW107XG4gICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHN0eWxlQXJnO1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgb3ZlcnJpZGVzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IGdldFN0eWxlT3ZlcnJpZGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKTtcbiAgICAgICAgICBpZiAoc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlT3ZlcnJpZGVzKS5mb3JFYWNoKChbc2xvdEtleSwgc2xvdFN0eWxlXSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gdHlwZW9mIHNsb3RTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHNsb3RTdHlsZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9KSkgOiBzbG90U3R5bGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmICFza2lwVmFyaWFudHNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCBnZXRWYXJpYW50U3R5bGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKSwgdGhlbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlQXJnID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICBzdHlsZUFyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVBcmcpIHtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IHRoZW1lLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgICB9ID0gX3JlZjIsXG4gICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcbiAgICAgICAgICByZXR1cm4gc3R5bGVBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NvbXBvbmVudFNsb3QgfHwgJyd9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYFN0eWxlZCgke2dldERpc3BsYXlOYW1lKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG4gICAgaWYgKGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnKSB7XG4gICAgICBtdWlTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTdHlsZWQsIHNob3VsZEZvcndhcmRQcm9wIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgY29uc3Qgcm9vdFNob3VsZEZvcndhcmRQcm9wID0gcHJvcCA9PiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSAmJiBwcm9wICE9PSAnY2xhc3Nlcyc7XG5leHBvcnQgY29uc3Qgc2xvdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3A7XG5jb25zdCBzdHlsZWQgPSBjcmVhdGVTdHlsZWQoe1xuICBkZWZhdWx0VGhlbWUsXG4gIHJvb3RTaG91bGRGb3J3YXJkUHJvcFxufSk7XG5leHBvcnQgZGVmYXVsdCBzdHlsZWQ7IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcbmNvbnN0IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciA9ICgpID0+IHtcbiAgbGV0IGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUoZ2VuZXJhdG9yKSB7XG4gICAgICBnZW5lcmF0ZSA9IGdlbmVyYXRvcjtcbiAgICB9LFxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgQ2xhc3NOYW1lR2VuZXJhdG9yIGZyb20gJy4uL0NsYXNzTmFtZUdlbmVyYXRvcic7XG5jb25zdCBnbG9iYWxTdGF0ZUNsYXNzZXNNYXBwaW5nID0ge1xuICBhY3RpdmU6ICdhY3RpdmUnLFxuICBjaGVja2VkOiAnY2hlY2tlZCcsXG4gIGNvbXBsZXRlZDogJ2NvbXBsZXRlZCcsXG4gIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuICBlcnJvcjogJ2Vycm9yJyxcbiAgZXhwYW5kZWQ6ICdleHBhbmRlZCcsXG4gIGZvY3VzZWQ6ICdmb2N1c2VkJyxcbiAgZm9jdXNWaXNpYmxlOiAnZm9jdXNWaXNpYmxlJyxcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHNlbGVjdGVkOiAnc2VsZWN0ZWQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCwgZ2xvYmFsU3RhdGVQcmVmaXggPSAnTXVpJykge1xuICBjb25zdCBnbG9iYWxTdGF0ZUNsYXNzID0gZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZ1tzbG90XTtcbiAgcmV0dXJuIGdsb2JhbFN0YXRlQ2xhc3MgPyBgJHtnbG9iYWxTdGF0ZVByZWZpeH0tJHtnbG9iYWxTdGF0ZUNsYXNzfWAgOiBgJHtDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGUoY29tcG9uZW50TmFtZSl9LSR7c2xvdH1gO1xufSIsImltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKGNvbXBvbmVudE5hbWUsIHNsb3RzLCBnbG9iYWxTdGF0ZVByZWZpeCA9ICdNdWknKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBzbG90cy5mb3JFYWNoKHNsb3QgPT4ge1xuICAgIHJlc3VsdFtzbG90XSA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNpcmN1bGFyUHJvZ3Jlc3MnLCBzbG90KTtcbn1cbmNvbnN0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcygnTXVpQ2lyY3VsYXJQcm9ncmVzcycsIFsncm9vdCcsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ2NvbG9yUHJpbWFyeScsICdjb2xvclNlY29uZGFyeScsICdzdmcnLCAnY2lyY2xlJywgJ2NpcmNsZURldGVybWluYXRlJywgJ2NpcmNsZUluZGV0ZXJtaW5hdGUnLCAnY2lyY2xlRGlzYWJsZVNocmluayddKTtcbmV4cG9ydCBkZWZhdWx0IGNpcmN1bGFyUHJvZ3Jlc3NDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVTaHJpbmtcIiwgXCJzaXplXCIsIFwic3R5bGVcIiwgXCJ0aGlja25lc3NcIiwgXCJ2YWx1ZVwiLCBcInZhcmlhbnRcIl07XG5sZXQgXyA9IHQgPT4gdCxcbiAgX3QsXG4gIF90MixcbiAgX3QzLFxuICBfdDQ7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsga2V5ZnJhbWVzLCBjc3MgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB1c2VUaGVtZVByb3BzIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZVByb3BzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnLi4vc3R5bGVzL3N0eWxlZCc7XG5pbXBvcnQgeyBnZXRDaXJjdWxhclByb2dyZXNzVXRpbGl0eUNsYXNzIH0gZnJvbSAnLi9jaXJjdWxhclByb2dyZXNzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgU0laRSA9IDQ0O1xuY29uc3QgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSA9IGtleWZyYW1lcyhfdCB8fCAoX3QgPSBfYFxuICAwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gIH1cblxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG5gKSk7XG5jb25zdCBjaXJjdWxhckRhc2hLZXlmcmFtZSA9IGtleWZyYW1lcyhfdDIgfHwgKF90MiA9IF9gXG4gIDAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICB9XG5cbiAgNTAlIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAxMDBweCwgMjAwcHg7XG4gICAgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xNXB4O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogMTAwcHgsIDIwMHB4O1xuICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAtMTI1cHg7XG4gIH1cbmApKTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3IsXG4gICAgZGlzYWJsZVNocmlua1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gXSxcbiAgICBzdmc6IFsnc3ZnJ10sXG4gICAgY2lyY2xlOiBbJ2NpcmNsZScsIGBjaXJjbGUke2NhcGl0YWxpemUodmFyaWFudCl9YCwgZGlzYWJsZVNocmluayAmJiAnY2lyY2xlRGlzYWJsZVNocmluayddXG4gIH07XG4gIHJldHVybiBjb21wb3NlQ2xhc3NlcyhzbG90cywgZ2V0Q2lyY3VsYXJQcm9ncmVzc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc1Jvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIHN0eWxlc1tvd25lclN0YXRlLnZhcmlhbnRdLCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiB7XG4gIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbn0sIG93bmVyU3RhdGUuY29sb3IgIT09ICdpbmhlcml0JyAmJiB7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gb3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgJiYgY3NzKF90MyB8fCAoX3QzID0gX2BcbiAgICAgIGFuaW1hdGlvbjogJHswfSAxLjRzIGxpbmVhciBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJSb3RhdGVLZXlmcmFtZSkpO1xuY29uc3QgQ2lyY3VsYXJQcm9ncmVzc1NWRyA9IHN0eWxlZCgnc3ZnJywge1xuICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdTdmcnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5zdmdcbn0pKHtcbiAgZGlzcGxheTogJ2Jsb2NrJyAvLyBLZWVwcyB0aGUgcHJvZ3Jlc3MgY2VudGVyZWRcbn0pO1xuXG5jb25zdCBDaXJjdWxhclByb2dyZXNzQ2lyY2xlID0gc3R5bGVkKCdjaXJjbGUnLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgc2xvdDogJ0NpcmNsZScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuY2lyY2xlLCBzdHlsZXNbYGNpcmNsZSR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLnZhcmlhbnQpfWBdLCBvd25lclN0YXRlLmRpc2FibGVTaHJpbmsgJiYgc3R5bGVzLmNpcmNsZURpc2FibGVTaHJpbmtdO1xuICB9XG59KSgoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4gX2V4dGVuZHMoe1xuICBzdHJva2U6ICdjdXJyZW50Q29sb3InXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3N0cm9rZS1kYXNob2Zmc2V0Jylcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnICYmIHtcbiAgLy8gU29tZSBkZWZhdWx0IHZhbHVlIHRoYXQgbG9va3MgZmluZSB3YWl0aW5nIGZvciB0aGUgYW5pbWF0aW9uIHRvIGtpY2tzIGluLlxuICBzdHJva2VEYXNoYXJyYXk6ICc4MHB4LCAyMDBweCcsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDAgLy8gQWRkIHRoZSB1bml0IHRvIGZpeCBhIEVkZ2UgMTYgYW5kIGJlbG93IGJ1Zy5cbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyAmJiAhb3duZXJTdGF0ZS5kaXNhYmxlU2hyaW5rICYmIGNzcyhfdDQgfHwgKF90NCA9IF9gXG4gICAgICBhbmltYXRpb246ICR7MH0gMS40cyBlYXNlLWluLW91dCBpbmZpbml0ZTtcbiAgICBgKSwgY2lyY3VsYXJEYXNoS2V5ZnJhbWUpKTtcblxuLyoqXG4gKiAjIyBBUklBXG4gKlxuICogSWYgdGhlIHByb2dyZXNzIGJhciBpcyBkZXNjcmliaW5nIHRoZSBsb2FkaW5nIHByb2dyZXNzIG9mIGEgcGFydGljdWxhciByZWdpb24gb2YgYSBwYWdlLFxuICogeW91IHNob3VsZCB1c2UgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIHBvaW50IHRvIHRoZSBwcm9ncmVzcyBiYXIsIGFuZCBzZXQgdGhlIGBhcmlhLWJ1c3lgXG4gKiBhdHRyaWJ1dGUgdG8gYHRydWVgIG9uIHRoYXQgcmVnaW9uIHVudGlsIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICovXG5jb25zdCBDaXJjdWxhclByb2dyZXNzID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ2lyY3VsYXJQcm9ncmVzcydcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gJ3ByaW1hcnknLFxuICAgICAgZGlzYWJsZVNocmluayA9IGZhbHNlLFxuICAgICAgc2l6ZSA9IDQwLFxuICAgICAgc3R5bGUsXG4gICAgICB0aGlja25lc3MgPSAzLjYsXG4gICAgICB2YWx1ZSA9IDAsXG4gICAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICBkaXNhYmxlU2hyaW5rLFxuICAgIHNpemUsXG4gICAgdGhpY2tuZXNzLFxuICAgIHZhbHVlLFxuICAgIHZhcmlhbnRcbiAgfSk7XG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlKTtcbiAgY29uc3QgY2lyY2xlU3R5bGUgPSB7fTtcbiAgY29uc3Qgcm9vdFN0eWxlID0ge307XG4gIGNvbnN0IHJvb3RQcm9wcyA9IHt9O1xuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJykge1xuICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqICgoU0laRSAtIHRoaWNrbmVzcykgLyAyKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gYCR7KCgxMDAgLSB2YWx1ZSkgLyAxMDAgKiBjaXJjdW1mZXJlbmNlKS50b0ZpeGVkKDMpfXB4YDtcbiAgICByb290U3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgtOTBkZWcpJztcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goQ2lyY3VsYXJQcm9ncmVzc1Jvb3QsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICB3aWR0aDogc2l6ZSxcbiAgICAgIGhlaWdodDogc2l6ZVxuICAgIH0sIHJvb3RTdHlsZSwgc3R5bGUpLFxuICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgcmVmOiByZWYsXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiXG4gIH0sIHJvb3RQcm9wcywgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ2lyY3VsYXJQcm9ncmVzc1NWRywge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnN2ZyxcbiAgICAgIG93bmVyU3RhdGU6IG93bmVyU3RhdGUsXG4gICAgICB2aWV3Qm94OiBgJHtTSVpFIC8gMn0gJHtTSVpFIC8gMn0gJHtTSVpFfSAke1NJWkV9YCxcbiAgICAgIGNoaWxkcmVuOiAvKiNfX1BVUkVfXyovX2pzeChDaXJjdWxhclByb2dyZXNzQ2lyY2xlLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jaXJjbGUsXG4gICAgICAgIHN0eWxlOiBjaXJjbGVTdHlsZSxcbiAgICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgICAgY3g6IFNJWkUsXG4gICAgICAgIGN5OiBTSVpFLFxuICAgICAgICByOiAoU0laRSAtIHRoaWNrbmVzcykgLyAyLFxuICAgICAgICBmaWxsOiBcIm5vbmVcIixcbiAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaWNrbmVzc1xuICAgICAgfSlcbiAgICB9KVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENpcmN1bGFyUHJvZ3Jlc3MucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jYWRkaW5nLW5ldy1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAnZXJyb3InLCAnaW5mbycsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNocmluayBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqIFRoaXMgb25seSB3b3JrcyBpZiB2YXJpYW50IGlzIGBpbmRldGVybWluYXRlYC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRpc2FibGVTaHJpbms6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ib29sLCBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLmRpc2FibGVTaHJpbmsgJiYgcHJvcHMudmFyaWFudCAmJiBwcm9wcy52YXJpYW50ICE9PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01VSTogWW91IGhhdmUgcHJvdmlkZWQgdGhlIGBkaXNhYmxlU2hyaW5rYCBwcm9wICcgKyAnd2l0aCBhIHZhcmlhbnQgb3RoZXIgdGhhbiBgaW5kZXRlcm1pbmF0ZWAuIFRoaXMgd2lsbCBoYXZlIG5vIGVmZmVjdC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pLFxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogSWYgdXNpbmcgYSBudW1iZXIsIHRoZSBwaXhlbCB1bml0IGlzIGFzc3VtZWQuXG4gICAqIElmIHVzaW5nIGEgc3RyaW5nLCB5b3UgbmVlZCB0byBwcm92aWRlIHRoZSBDU1MgdW5pdCwgZS5nICczcmVtJy5cbiAgICogQGRlZmF1bHQgNDBcbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogVGhlIHRoaWNrbmVzcyBvZiB0aGUgY2lyY2xlLlxuICAgKiBAZGVmYXVsdCAzLjZcbiAgICovXG4gIHRoaWNrbmVzczogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgdmFyaWFudC5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2RldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhclByb2dyZXNzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzeFwiXTtcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBkZWZhdWx0U3hDb25maWcgZnJvbSAnLi9kZWZhdWx0U3hDb25maWcnO1xuY29uc3Qgc3BsaXRQcm9wcyA9IHByb3BzID0+IHtcbiAgdmFyIF9wcm9wcyR0aGVtZSR1bnN0YWJsZSwgX3Byb3BzJHRoZW1lO1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc3lzdGVtUHJvcHM6IHt9LFxuICAgIG90aGVyUHJvcHM6IHt9XG4gIH07XG4gIGNvbnN0IGNvbmZpZyA9IChfcHJvcHMkdGhlbWUkdW5zdGFibGUgPSBwcm9wcyA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSA9IHByb3BzLnRoZW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lLnVuc3RhYmxlX3N4Q29uZmlnKSAhPSBudWxsID8gX3Byb3BzJHRoZW1lJHVuc3RhYmxlIDogZGVmYXVsdFN4Q29uZmlnO1xuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICBpZiAoY29uZmlnW3Byb3BdKSB7XG4gICAgICByZXN1bHQuc3lzdGVtUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0Lm90aGVyUHJvcHNbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZFN4UHJvcChwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBzeDogaW5TeFxuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCB7XG4gICAgc3lzdGVtUHJvcHMsXG4gICAgb3RoZXJQcm9wc1xuICB9ID0gc3BsaXRQcm9wcyhvdGhlcik7XG4gIGxldCBmaW5hbFN4O1xuICBpZiAoQXJyYXkuaXNBcnJheShpblN4KSkge1xuICAgIGZpbmFsU3ggPSBbc3lzdGVtUHJvcHMsIC4uLmluU3hdO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpblN4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZmluYWxTeCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBpblN4KC4uLmFyZ3MpO1xuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHN5c3RlbVByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgcmVzdWx0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGZpbmFsU3ggPSBfZXh0ZW5kcyh7fSwgc3lzdGVtUHJvcHMsIGluU3gpO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3RoZXJQcm9wcywge1xuICAgIHN4OiBmaW5hbFN4XG4gIH0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCBzdHlsZUZ1bmN0aW9uU3gsIHsgZXh0ZW5kU3hQcm9wIH0gZnJvbSAnLi9zdHlsZUZ1bmN0aW9uU3gnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4vdXNlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJveChvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBkZWZhdWx0Q2xhc3NOYW1lID0gJ011aUJveC1yb290JyxcbiAgICBnZW5lcmF0ZUNsYXNzTmFtZVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQm94Um9vdCA9IHN0eWxlZCgnZGl2Jywge1xuICAgIHNob3VsZEZvcndhcmRQcm9wOiBwcm9wID0+IHByb3AgIT09ICd0aGVtZScgJiYgcHJvcCAhPT0gJ3N4JyAmJiBwcm9wICE9PSAnYXMnXG4gIH0pKHN0eWxlRnVuY3Rpb25TeCk7XG4gIGNvbnN0IEJveCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJveChpblByb3BzLCByZWYpIHtcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKGRlZmF1bHRUaGVtZSk7XG4gICAgY29uc3QgX2V4dGVuZFN4UHJvcCA9IGV4dGVuZFN4UHJvcChpblByb3BzKSxcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2J1xuICAgICAgfSA9IF9leHRlbmRTeFByb3AsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9leHRlbmRTeFByb3AsIF9leGNsdWRlZCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEJveFJvb3QsIF9leHRlbmRzKHtcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc05hbWUsIGdlbmVyYXRlQ2xhc3NOYW1lID8gZ2VuZXJhdGVDbGFzc05hbWUoZGVmYXVsdENsYXNzTmFtZSkgOiBkZWZhdWx0Q2xhc3NOYW1lKSxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH0sIG90aGVyKSk7XG4gIH0pO1xuICByZXR1cm4gQm94O1xufSIsImltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm94LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgdXRjIGZyb20gJ2RheWpzL3BsdWdpbi91dGMnO1xuaW1wb3J0IHRpbWV6b25lIGZyb20gJ2RheWpzL3BsdWdpbi90aW1lem9uZSc7XG5pbXBvcnQgaXNTYW1lT3JBZnRlciBmcm9tICdkYXlqcy9wbHVnaW4vaXNTYW1lT3JBZnRlcic7XG5cbmRheWpzLmV4dGVuZCh1dGMpO1xuZGF5anMuZXh0ZW5kKHRpbWV6b25lKTtcbmRheWpzLmV4dGVuZChpc1NhbWVPckFmdGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5anM7XG4iLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUxpbmVhclByb2dyZXNzJywgc2xvdCk7XG59XG5jb25zdCBsaW5lYXJQcm9ncmVzc0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlMaW5lYXJQcm9ncmVzcycsIFsncm9vdCcsICdjb2xvclByaW1hcnknLCAnY29sb3JTZWNvbmRhcnknLCAnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdidWZmZXInLCAncXVlcnknLCAnZGFzaGVkJywgJ2Rhc2hlZENvbG9yUHJpbWFyeScsICdkYXNoZWRDb2xvclNlY29uZGFyeScsICdiYXInLCAnYmFyQ29sb3JQcmltYXJ5JywgJ2JhckNvbG9yU2Vjb25kYXJ5JywgJ2JhcjFJbmRldGVybWluYXRlJywgJ2JhcjFEZXRlcm1pbmF0ZScsICdiYXIxQnVmZmVyJywgJ2JhcjJJbmRldGVybWluYXRlJywgJ2JhcjJCdWZmZXInXSk7XG5leHBvcnQgZGVmYXVsdCBsaW5lYXJQcm9ncmVzc0NsYXNzZXM7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwidmFsdWVcIiwgXCJ2YWx1ZUJ1ZmZlclwiLCBcInZhcmlhbnRcIl07XG5sZXQgXyA9IHQgPT4gdCxcbiAgX3QsXG4gIF90MixcbiAgX3QzLFxuICBfdDQsXG4gIF90NSxcbiAgX3Q2O1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMgfSBmcm9tICdAbXVpL2Jhc2UnO1xuaW1wb3J0IHsga2V5ZnJhbWVzLCBjc3MsIGRhcmtlbiwgbGlnaHRlbiB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHsgZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MgfSBmcm9tICcuL2xpbmVhclByb2dyZXNzQ2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgVFJBTlNJVElPTl9EVVJBVElPTiA9IDQ7IC8vIHNlY29uZHNcbmNvbnN0IGluZGV0ZXJtaW5hdGUxS2V5ZnJhbWUgPSBrZXlmcmFtZXMoX3QgfHwgKF90ID0gX2BcbiAgMCUge1xuICAgIGxlZnQ6IC0zNSU7XG4gICAgcmlnaHQ6IDEwMCU7XG4gIH1cblxuICA2MCUge1xuICAgIGxlZnQ6IDEwMCU7XG4gICAgcmlnaHQ6IC05MCU7XG4gIH1cblxuICAxMDAlIHtcbiAgICBsZWZ0OiAxMDAlO1xuICAgIHJpZ2h0OiAtOTAlO1xuICB9XG5gKSk7XG5jb25zdCBpbmRldGVybWluYXRlMktleWZyYW1lID0ga2V5ZnJhbWVzKF90MiB8fCAoX3QyID0gX2BcbiAgMCUge1xuICAgIGxlZnQ6IC0yMDAlO1xuICAgIHJpZ2h0OiAxMDAlO1xuICB9XG5cbiAgNjAlIHtcbiAgICBsZWZ0OiAxMDclO1xuICAgIHJpZ2h0OiAtOCU7XG4gIH1cblxuICAxMDAlIHtcbiAgICBsZWZ0OiAxMDclO1xuICAgIHJpZ2h0OiAtOCU7XG4gIH1cbmApKTtcbmNvbnN0IGJ1ZmZlcktleWZyYW1lID0ga2V5ZnJhbWVzKF90MyB8fCAoX3QzID0gX2BcbiAgMCUge1xuICAgIG9wYWNpdHk6IDE7XG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAtMjNweDtcbiAgfVxuXG4gIDYwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIC0yM3B4O1xuICB9XG5cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjAwcHggLTIzcHg7XG4gIH1cbmApKTtcbmNvbnN0IHVzZVV0aWxpdHlDbGFzc2VzID0gb3duZXJTdGF0ZSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIHZhcmlhbnQsXG4gICAgY29sb3JcbiAgfSA9IG93bmVyU3RhdGU7XG4gIGNvbnN0IHNsb3RzID0ge1xuICAgIHJvb3Q6IFsncm9vdCcsIGBjb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudF0sXG4gICAgZGFzaGVkOiBbJ2Rhc2hlZCcsIGBkYXNoZWRDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YF0sXG4gICAgYmFyMTogWydiYXInLCBgYmFyQ29sb3Ike2NhcGl0YWxpemUoY29sb3IpfWAsICh2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgdmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgJ2JhcjFJbmRldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiAnYmFyMURldGVybWluYXRlJywgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgJ2JhcjFCdWZmZXInXSxcbiAgICBiYXIyOiBbJ2JhcicsIHZhcmlhbnQgIT09ICdidWZmZXInICYmIGBiYXJDb2xvciR7Y2FwaXRhbGl6ZShjb2xvcil9YCwgdmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYgYGNvbG9yJHtjYXBpdGFsaXplKGNvbG9yKX1gLCAodmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdxdWVyeScpICYmICdiYXIySW5kZXRlcm1pbmF0ZScsIHZhcmlhbnQgPT09ICdidWZmZXInICYmICdiYXIyQnVmZmVyJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRMaW5lYXJQcm9ncmVzc1V0aWxpdHlDbGFzcywgY2xhc3Nlcyk7XG59O1xuY29uc3QgZ2V0Q29sb3JTaGFkZSA9ICh0aGVtZSwgY29sb3IpID0+IHtcbiAgaWYgKGNvbG9yID09PSAnaW5oZXJpdCcpIHtcbiAgICByZXR1cm4gJ2N1cnJlbnRDb2xvcic7XG4gIH1cbiAgaWYgKHRoZW1lLnZhcnMpIHtcbiAgICByZXR1cm4gdGhlbWUudmFycy5wYWxldHRlLkxpbmVhclByb2dyZXNzW2Ake2NvbG9yfUJnYF07XG4gIH1cbiAgcmV0dXJuIHRoZW1lLnBhbGV0dGUubW9kZSA9PT0gJ2xpZ2h0JyA/IGxpZ2h0ZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC42MikgOiBkYXJrZW4odGhlbWUucGFsZXR0ZVtjb2xvcl0ubWFpbiwgMC41KTtcbn07XG5jb25zdCBMaW5lYXJQcm9ncmVzc1Jvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5yb290LCBzdHlsZXNbYGNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIGRpc3BsYXk6ICdibG9jaycsXG4gIGhlaWdodDogNCxcbiAgekluZGV4OiAwLFxuICAvLyBGaXggU2FmYXJpJ3MgYnVnIGR1cmluZyBjb21wb3NpdGlvbiBvZiBkaWZmZXJlbnQgcGFpbnQuXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgfSxcbiAgYmFja2dyb3VuZENvbG9yOiBnZXRDb2xvclNoYWRlKHRoZW1lLCBvd25lclN0YXRlLmNvbG9yKVxufSwgb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnICYmIG93bmVyU3RhdGUudmFyaWFudCAhPT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdub25lJyxcbiAgJyY6OmJlZm9yZSc6IHtcbiAgICBjb250ZW50OiAnXCJcIicsXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogMC4zXG4gIH1cbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2J1ZmZlcicgJiYge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbn0sIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JyAmJiB7XG4gIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xufSkpO1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NEYXNoZWQgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdEYXNoZWQnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLmRhc2hlZCwgc3R5bGVzW2BkYXNoZWRDb2xvciR7Y2FwaXRhbGl6ZShvd25lclN0YXRlLmNvbG9yKX1gXV07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiB7XG4gIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGdldENvbG9yU2hhZGUodGhlbWUsIG93bmVyU3RhdGUuY29sb3IpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIG1hcmdpblRvcDogMCxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiB7XG4gICAgb3BhY2l0eTogMC4zXG4gIH0sIHtcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IGByYWRpYWwtZ3JhZGllbnQoJHtiYWNrZ3JvdW5kQ29sb3J9IDAlLCAke2JhY2tncm91bmRDb2xvcn0gMTYlLCB0cmFuc3BhcmVudCA0MiUpYCxcbiAgICBiYWNrZ3JvdW5kU2l6ZTogJzEwcHggMTBweCcsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnMCAtMjNweCdcbiAgfSk7XG59LCBjc3MoX3Q0IHx8IChfdDQgPSBfYFxuICAgIGFuaW1hdGlvbjogJHswfSAzcyBpbmZpbml0ZSBsaW5lYXI7XG4gIGApLCBidWZmZXJLZXlmcmFtZSkpO1xuY29uc3QgTGluZWFyUHJvZ3Jlc3NCYXIxID0gc3R5bGVkKCdzcGFuJywge1xuICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnLFxuICBzbG90OiAnQmFyMScsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMuYmFyLCBzdHlsZXNbYGJhckNvbG9yJHtjYXBpdGFsaXplKG93bmVyU3RhdGUuY29sb3IpfWBdLCAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBzdHlsZXMuYmFyMUluZGV0ZXJtaW5hdGUsIG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyAmJiBzdHlsZXMuYmFyMURldGVybWluYXRlLCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHN0eWxlcy5iYXIxQnVmZmVyXTtcbiAgfVxufSkoKHtcbiAgb3duZXJTdGF0ZSxcbiAgdGhlbWVcbn0pID0+IF9leHRlbmRzKHtcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIGxlZnQ6IDAsXG4gIGJvdHRvbTogMCxcbiAgdG9wOiAwLFxuICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMgbGluZWFyJyxcbiAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCcsXG4gIGJhY2tncm91bmRDb2xvcjogb3duZXJTdGF0ZS5jb2xvciA9PT0gJ2luaGVyaXQnID8gJ2N1cnJlbnRDb2xvcicgOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZVtvd25lclN0YXRlLmNvbG9yXS5tYWluXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdkZXRlcm1pbmF0ZScgJiYge1xuICB0cmFuc2l0aW9uOiBgdHJhbnNmb3JtIC4ke1RSQU5TSVRJT05fRFVSQVRJT059cyBsaW5lYXJgXG59LCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdidWZmZXInICYmIHtcbiAgekluZGV4OiAxLFxuICB0cmFuc2l0aW9uOiBgdHJhbnNmb3JtIC4ke1RSQU5TSVRJT05fRFVSQVRJT059cyBsaW5lYXJgXG59KSwgKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4gKG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ2luZGV0ZXJtaW5hdGUnIHx8IG93bmVyU3RhdGUudmFyaWFudCA9PT0gJ3F1ZXJ5JykgJiYgY3NzKF90NSB8fCAoX3Q1ID0gX2BcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgYW5pbWF0aW9uOiAkezB9IDIuMXMgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIGluZmluaXRlO1xuICAgIGApLCBpbmRldGVybWluYXRlMUtleWZyYW1lKSk7XG5jb25zdCBMaW5lYXJQcm9ncmVzc0JhcjIgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlMaW5lYXJQcm9ncmVzcycsXG4gIHNsb3Q6ICdCYXIyJyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgb3duZXJTdGF0ZVxuICAgIH0gPSBwcm9wcztcbiAgICByZXR1cm4gW3N0eWxlcy5iYXIsIHN0eWxlc1tgYmFyQ29sb3Ike2NhcGl0YWxpemUob3duZXJTdGF0ZS5jb2xvcil9YF0sIChvd25lclN0YXRlLnZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyB8fCBvd25lclN0YXRlLnZhcmlhbnQgPT09ICdxdWVyeScpICYmIHN0eWxlcy5iYXIySW5kZXRlcm1pbmF0ZSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiBzdHlsZXMuYmFyMkJ1ZmZlcl07XG4gIH1cbn0pKCh7XG4gIG93bmVyU3RhdGUsXG4gIHRoZW1lXG59KSA9PiBfZXh0ZW5kcyh7XG4gIHdpZHRoOiAnMTAwJScsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICBsZWZ0OiAwLFxuICBib3R0b206IDAsXG4gIHRvcDogMCxcbiAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzIGxpbmVhcicsXG4gIHRyYW5zZm9ybU9yaWdpbjogJ2xlZnQnXG59LCBvd25lclN0YXRlLnZhcmlhbnQgIT09ICdidWZmZXInICYmIHtcbiAgYmFja2dyb3VuZENvbG9yOiBvd25lclN0YXRlLmNvbG9yID09PSAnaW5oZXJpdCcgPyAnY3VycmVudENvbG9yJyA6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlW293bmVyU3RhdGUuY29sb3JdLm1haW5cbn0sIG93bmVyU3RhdGUuY29sb3IgPT09ICdpbmhlcml0JyAmJiB7XG4gIG9wYWNpdHk6IDAuM1xufSwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAnYnVmZmVyJyAmJiB7XG4gIGJhY2tncm91bmRDb2xvcjogZ2V0Q29sb3JTaGFkZSh0aGVtZSwgb3duZXJTdGF0ZS5jb2xvciksXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gLiR7VFJBTlNJVElPTl9EVVJBVElPTn1zIGxpbmVhcmBcbn0pLCAoe1xuICBvd25lclN0YXRlXG59KSA9PiAob3duZXJTdGF0ZS52YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScgfHwgb3duZXJTdGF0ZS52YXJpYW50ID09PSAncXVlcnknKSAmJiBjc3MoX3Q2IHx8IChfdDYgPSBfYFxuICAgICAgd2lkdGg6IGF1dG87XG4gICAgICBhbmltYXRpb246ICR7MH0gMi4xcyBjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpIDEuMTVzIGluZmluaXRlO1xuICAgIGApLCBpbmRldGVybWluYXRlMktleWZyYW1lKSk7XG5cbi8qKlxuICogIyMgQVJJQVxuICpcbiAqIElmIHRoZSBwcm9ncmVzcyBiYXIgaXMgZGVzY3JpYmluZyB0aGUgbG9hZGluZyBwcm9ncmVzcyBvZiBhIHBhcnRpY3VsYXIgcmVnaW9uIG9mIGEgcGFnZSxcbiAqIHlvdSBzaG91bGQgdXNlIGBhcmlhLWRlc2NyaWJlZGJ5YCB0byBwb2ludCB0byB0aGUgcHJvZ3Jlc3MgYmFyLCBhbmQgc2V0IHRoZSBgYXJpYS1idXN5YFxuICogYXR0cmlidXRlIHRvIGB0cnVlYCBvbiB0aGF0IHJlZ2lvbiB1bnRpbCBpdCBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqL1xuY29uc3QgTGluZWFyUHJvZ3Jlc3MgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBMaW5lYXJQcm9ncmVzcyhpblByb3BzLCByZWYpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpTGluZWFyUHJvZ3Jlc3MnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgICBjbGFzc05hbWUsXG4gICAgICBjb2xvciA9ICdwcmltYXJ5JyxcbiAgICAgIHZhbHVlLFxuICAgICAgdmFsdWVCdWZmZXIsXG4gICAgICB2YXJpYW50ID0gJ2luZGV0ZXJtaW5hdGUnXG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb2xvcixcbiAgICB2YXJpYW50XG4gIH0pO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgY29uc3Qgcm9vdFByb3BzID0ge307XG4gIGNvbnN0IGlubGluZVN0eWxlcyA9IHtcbiAgICBiYXIxOiB7fSxcbiAgICBiYXIyOiB7fVxuICB9O1xuICBpZiAodmFyaWFudCA9PT0gJ2RldGVybWluYXRlJyB8fCB2YXJpYW50ID09PSAnYnVmZmVyJykge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByb290UHJvcHNbJ2FyaWEtdmFsdWVub3cnXSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbWluJ10gPSAwO1xuICAgICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbWF4J10gPSAxMDA7XG4gICAgICBsZXQgdHJhbnNmb3JtID0gdmFsdWUgLSAxMDA7XG4gICAgICBpZiAodGhlbWUuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICB0cmFuc2Zvcm0gPSAtdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaW5saW5lU3R5bGVzLmJhcjEudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2Zvcm19JSlgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWUgcHJvcCAnICsgJ3doZW4gdXNpbmcgdGhlIGRldGVybWluYXRlIG9yIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzIC4nKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPT09ICdidWZmZXInKSB7XG4gICAgaWYgKHZhbHVlQnVmZmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB0cmFuc2Zvcm0gPSAodmFsdWVCdWZmZXIgfHwgMCkgLSAxMDA7XG4gICAgICBpZiAodGhlbWUuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICB0cmFuc2Zvcm0gPSAtdHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaW5saW5lU3R5bGVzLmJhcjIudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHt0cmFuc2Zvcm19JSlgO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBZb3UgbmVlZCB0byBwcm92aWRlIGEgdmFsdWVCdWZmZXIgcHJvcCAnICsgJ3doZW4gdXNpbmcgdGhlIGJ1ZmZlciB2YXJpYW50IG9mIExpbmVhclByb2dyZXNzLicpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKExpbmVhclByb2dyZXNzUm9vdCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcbiAgfSwgcm9vdFByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBjaGlsZHJlbjogW3ZhcmlhbnQgPT09ICdidWZmZXInID8gLyojX19QVVJFX18qL19qc3goTGluZWFyUHJvZ3Jlc3NEYXNoZWQsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kYXNoZWQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlXG4gICAgfSkgOiBudWxsLCAvKiNfX1BVUkVfXyovX2pzeChMaW5lYXJQcm9ncmVzc0JhcjEsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5iYXIxLFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHN0eWxlOiBpbmxpbmVTdHlsZXMuYmFyMVxuICAgIH0pLCB2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnID8gbnVsbCA6IC8qI19fUFVSRV9fKi9fanN4KExpbmVhclByb2dyZXNzQmFyMiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmJhcjIsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgc3R5bGU6IGlubGluZVN0eWxlcy5iYXIyXG4gICAgfSldXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluZWFyUHJvZ3Jlc3MucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LlxuICAgKiBJdCBzdXBwb3J0cyBib3RoIGRlZmF1bHQgYW5kIGN1c3RvbSB0aGVtZSBjb2xvcnMsIHdoaWNoIGNhbiBiZSBhZGRlZCBhcyBzaG93biBpbiB0aGVcbiAgICogW3BhbGV0dGUgY3VzdG9taXphdGlvbiBndWlkZV0oaHR0cHM6Ly9tdWkuY29tL21hdGVyaWFsLXVpL2N1c3RvbWl6YXRpb24vcGFsZXR0ZS8jYWRkaW5nLW5ldy1jb2xvcnMpLlxuICAgKiBAZGVmYXVsdCAncHJpbWFyeSdcbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIGJ1ZmZlciB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm51bWJlcixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBmb3IgdGhlIGJ1ZmZlciB2YXJpYW50LlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlQnVmZmVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSBvciBxdWVyeSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKiBAZGVmYXVsdCAnaW5kZXRlcm1pbmF0ZSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2J1ZmZlcicsICdkZXRlcm1pbmF0ZScsICdpbmRldGVybWluYXRlJywgJ3F1ZXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTGluZWFyUHJvZ3Jlc3M7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlVGhlbWUgYXMgdXNlVGhlbWVTeXN0ZW0gfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lU3lzdGVtKGRlZmF1bHRUaGVtZSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IGdlbmVyYXRlVXRpbGl0eUNsYXNzIGZyb20gJy4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlUeXBvZ3JhcGh5Jywgc2xvdCk7XG59XG5jb25zdCB0eXBvZ3JhcGh5Q2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aVR5cG9ncmFwaHknLCBbJ3Jvb3QnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnc3VidGl0bGUxJywgJ3N1YnRpdGxlMicsICdib2R5MScsICdib2R5MicsICdpbmhlcml0JywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ292ZXJsaW5lJywgJ2FsaWduTGVmdCcsICdhbGlnblJpZ2h0JywgJ2FsaWduQ2VudGVyJywgJ2FsaWduSnVzdGlmeScsICdub1dyYXAnLCAnZ3V0dGVyQm90dG9tJywgJ3BhcmFncmFwaCddKTtcbmV4cG9ydCBkZWZhdWx0IHR5cG9ncmFwaHlDbGFzc2VzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhbGlnblwiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImd1dHRlckJvdHRvbVwiLCBcIm5vV3JhcFwiLCBcInBhcmFncmFwaFwiLCBcInZhcmlhbnRcIiwgXCJ2YXJpYW50TWFwcGluZ1wiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHVuc3RhYmxlX2V4dGVuZFN4UHJvcCBhcyBleHRlbmRTeFByb3AgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcyB9IGZyb20gJ0BtdWkvYmFzZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJy4uL3N0eWxlcy9zdHlsZWQnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHMgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzIH0gZnJvbSAnLi90eXBvZ3JhcGh5Q2xhc3Nlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSBvd25lclN0YXRlID0+IHtcbiAgY29uc3Qge1xuICAgIGFsaWduLFxuICAgIGd1dHRlckJvdHRvbSxcbiAgICBub1dyYXAsXG4gICAgcGFyYWdyYXBoLFxuICAgIHZhcmlhbnQsXG4gICAgY2xhc3Nlc1xuICB9ID0gb3duZXJTdGF0ZTtcbiAgY29uc3Qgc2xvdHMgPSB7XG4gICAgcm9vdDogWydyb290JywgdmFyaWFudCwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIGBhbGlnbiR7Y2FwaXRhbGl6ZShhbGlnbil9YCwgZ3V0dGVyQm90dG9tICYmICdndXR0ZXJCb3R0b20nLCBub1dyYXAgJiYgJ25vV3JhcCcsIHBhcmFncmFwaCAmJiAncGFyYWdyYXBoJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRUeXBvZ3JhcGh5VXRpbGl0eUNsYXNzLCBjbGFzc2VzKTtcbn07XG5leHBvcnQgY29uc3QgVHlwb2dyYXBoeVJvb3QgPSBzdHlsZWQoJ3NwYW4nLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5JyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvd25lclN0YXRlXG4gICAgfSA9IHByb3BzO1xuICAgIHJldHVybiBbc3R5bGVzLnJvb3QsIG93bmVyU3RhdGUudmFyaWFudCAmJiBzdHlsZXNbb3duZXJTdGF0ZS52YXJpYW50XSwgb3duZXJTdGF0ZS5hbGlnbiAhPT0gJ2luaGVyaXQnICYmIHN0eWxlc1tgYWxpZ24ke2NhcGl0YWxpemUob3duZXJTdGF0ZS5hbGlnbil9YF0sIG93bmVyU3RhdGUubm9XcmFwICYmIHN0eWxlcy5ub1dyYXAsIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHN0eWxlcy5ndXR0ZXJCb3R0b20sIG93bmVyU3RhdGUucGFyYWdyYXBoICYmIHN0eWxlcy5wYXJhZ3JhcGhdO1xuICB9XG59KSgoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4gX2V4dGVuZHMoe1xuICBtYXJnaW46IDBcbn0sIG93bmVyU3RhdGUudmFyaWFudCAmJiB0aGVtZS50eXBvZ3JhcGh5W293bmVyU3RhdGUudmFyaWFudF0sIG93bmVyU3RhdGUuYWxpZ24gIT09ICdpbmhlcml0JyAmJiB7XG4gIHRleHRBbGlnbjogb3duZXJTdGF0ZS5hbGlnblxufSwgb3duZXJTdGF0ZS5ub1dyYXAgJiYge1xuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbn0sIG93bmVyU3RhdGUuZ3V0dGVyQm90dG9tICYmIHtcbiAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xufSwgb3duZXJTdGF0ZS5wYXJhZ3JhcGggJiYge1xuICBtYXJnaW5Cb3R0b206IDE2XG59KSk7XG5jb25zdCBkZWZhdWx0VmFyaWFudE1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnLFxuICBpbmhlcml0OiAncCdcbn07XG5cbi8vIFRPRE8gdjY6IGRlcHJlY2F0ZSB0aGVzZSBjb2xvciB2YWx1ZXMgaW4gdjUueCBhbmQgcmVtb3ZlIHRoZSB0cmFuc2Zvcm1hdGlvbiBpbiB2NlxuY29uc3QgY29sb3JUcmFuc2Zvcm1hdGlvbnMgPSB7XG4gIHByaW1hcnk6ICdwcmltYXJ5Lm1haW4nLFxuICB0ZXh0UHJpbWFyeTogJ3RleHQucHJpbWFyeScsXG4gIHNlY29uZGFyeTogJ3NlY29uZGFyeS5tYWluJyxcbiAgdGV4dFNlY29uZGFyeTogJ3RleHQuc2Vjb25kYXJ5JyxcbiAgZXJyb3I6ICdlcnJvci5tYWluJ1xufTtcbmNvbnN0IHRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMgPSBjb2xvciA9PiB7XG4gIHJldHVybiBjb2xvclRyYW5zZm9ybWF0aW9uc1tjb2xvcl0gfHwgY29sb3I7XG59O1xuY29uc3QgVHlwb2dyYXBoeSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFR5cG9ncmFwaHkoaW5Qcm9wcywgcmVmKSB7XG4gIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpVHlwb2dyYXBoeSdcbiAgfSk7XG4gIGNvbnN0IGNvbG9yID0gdHJhbnNmb3JtRGVwcmVjYXRlZENvbG9ycyh0aGVtZVByb3BzLmNvbG9yKTtcbiAgY29uc3QgcHJvcHMgPSBleHRlbmRTeFByb3AoX2V4dGVuZHMoe30sIHRoZW1lUHJvcHMsIHtcbiAgICBjb2xvclxuICB9KSk7XG4gIGNvbnN0IHtcbiAgICAgIGFsaWduID0gJ2luaGVyaXQnLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgZ3V0dGVyQm90dG9tID0gZmFsc2UsXG4gICAgICBub1dyYXAgPSBmYWxzZSxcbiAgICAgIHBhcmFncmFwaCA9IGZhbHNlLFxuICAgICAgdmFyaWFudCA9ICdib2R5MScsXG4gICAgICB2YXJpYW50TWFwcGluZyA9IGRlZmF1bHRWYXJpYW50TWFwcGluZ1xuICAgIH0gPSBwcm9wcyxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBvd25lclN0YXRlID0gX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgYWxpZ24sXG4gICAgY29sb3IsXG4gICAgY2xhc3NOYW1lLFxuICAgIGNvbXBvbmVudCxcbiAgICBndXR0ZXJCb3R0b20sXG4gICAgbm9XcmFwLFxuICAgIHBhcmFncmFwaCxcbiAgICB2YXJpYW50LFxuICAgIHZhcmlhbnRNYXBwaW5nXG4gIH0pO1xuICBjb25zdCBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgKHBhcmFncmFwaCA/ICdwJyA6IHZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMob3duZXJTdGF0ZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChUeXBvZ3JhcGh5Um9vdCwgX2V4dGVuZHMoe1xuICAgIGFzOiBDb21wb25lbnQsXG4gICAgcmVmOiByZWYsXG4gICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFR5cG9ncmFwaHkucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqIEBkZWZhdWx0ICdpbmhlcml0J1xuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2NlbnRlcicsICdpbmhlcml0JywgJ2p1c3RpZnknLCAnbGVmdCcsICdyaWdodCddKSxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBndXR0ZXJCb3R0b206IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYSB0ZXh0IG92ZXJmbG93IGVsbGlwc2lzLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGV4dCBvdmVyZmxvdyBjYW4gb25seSBoYXBwZW4gd2l0aCBibG9jayBvciBpbmxpbmUtYmxvY2sgbGV2ZWwgZWxlbWVudHNcbiAgICogKHRoZSBlbGVtZW50IG5lZWRzIHRvIGhhdmUgYSB3aWR0aCBpbiBvcmRlciB0byBvdmVyZmxvdykuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBub1dyYXA6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZWxlbWVudCB3aWxsIGJlIGEgcGFyYWdyYXBoIGVsZW1lbnQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBwYXJhZ3JhcGg6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqIEBkZWZhdWx0ICdib2R5MSdcbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYm9keTEnLCAnYm9keTInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaW5oZXJpdCcsICdvdmVybGluZScsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJ10pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIHZhcmlhbnQgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBIVE1MIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgc3VidGl0bGUxIHRvIGA8aDY+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoYXQgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogQGRlZmF1bHQge1xuICAgKiAgIGgxOiAnaDEnLFxuICAgKiAgIGgyOiAnaDInLFxuICAgKiAgIGgzOiAnaDMnLFxuICAgKiAgIGg0OiAnaDQnLFxuICAgKiAgIGg1OiAnaDUnLFxuICAgKiAgIGg2OiAnaDYnLFxuICAgKiAgIHN1YnRpdGxlMTogJ2g2JyxcbiAgICogICBzdWJ0aXRsZTI6ICdoNicsXG4gICAqICAgYm9keTE6ICdwJyxcbiAgICogICBib2R5MjogJ3AnLFxuICAgKiAgIGluaGVyaXQ6ICdwJyxcbiAgICogfVxuICAgKi9cbiAgdmFyaWFudE1hcHBpbmc6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFR5cG9ncmFwaHk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBMaW5lYXJQcm9ncmVzcyBmcm9tICdAbXVpL21hdGVyaWFsL0xpbmVhclByb2dyZXNzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtdWkvbWF0ZXJpYWwvVHlwb2dyYXBoeSc7XG5pbXBvcnQgQm94IGZyb20gJ0BtdWkvbWF0ZXJpYWwvQm94JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwgKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEJveCBzeD17eyBkaXNwbGF5OiAnZmxleCcsIGFsaWduSXRlbXM6ICdjZW50ZXInIH19PlxuICAgICAgPEJveCBzeD17eyB3aWR0aDogJzEwMCUnLCBtcjogMSB9fT5cbiAgICAgICAgPExpbmVhclByb2dyZXNzIHZhcmlhbnQ9XCJkZXRlcm1pbmF0ZVwiIHsuLi5wcm9wc30gLz5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveCBzeD17eyBtaW5XaWR0aDogMzUgfX0+XG4gICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9XCJib2R5MlwiIGNvbG9yPVwidGV4dC5zZWNvbmRhcnlcIj5cbiAgICAgICAgICB7YCR7TWF0aC5yb3VuZChcbiAgICAgICAgICBwcm9wcy52YWx1ZVxuICAgICAgICApfSVgfVxuICAgICAgICA8L1R5cG9ncmFwaHk+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD5cbiAgKTtcbn1cblxuTGluZWFyUHJvZ3Jlc3NXaXRoTGFiZWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgZm9yIHRoZSBkZXRlcm1pbmF0ZSBhbmQgYnVmZmVyIHZhcmlhbnRzLlxuICAgKiBWYWx1ZSBiZXR3ZWVuIDAgYW5kIDEwMC5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL05hdi5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTmF2LnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZDUgZnJvbSAnY3J5cHRvLWpzL21kNSc7XG5pbXBvcnQgJy4vTmF2LnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBOYXYgKHsgZGF0YSwgc2V0RGF0YVNlbGVjdGlvbiwgZGF0YVNlbGVjdGlvbiB9KSB7XG4gIGZ1bmN0aW9uIGRpc3BsYXlfZmlsZV9uYW1lIChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGUuc3BsaXQoJy8nKS5wb3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGVuYW1lX2hhc2ggKGZpbGUpIHtcbiAgICByZXR1cm4gbWQ1KGZpbGUpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8bmF2PlxuICAgICAgPHVsPlxuICAgICAgICB7ZGF0YS5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgPGxpIGtleT17ZmlsZW5hbWVfaGFzaChpdGVtLmZpbGUpfT5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT17ZGF0YVNlbGVjdGlvbiA9PT0gaW5kZXggJiYgJ2FjdGl2ZSd9IG9uQ2xpY2s9eygpID0+IHNldERhdGFTZWxlY3Rpb24oaW5kZXgpfT5cbiAgICAgICAgICAgICAge2Rpc3BsYXlfZmlsZV9uYW1lKGl0ZW0uZmlsZSl9XG4gICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgIDxzdHJvbmc+XG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIHtNYXRoLnJvdW5kKGl0ZW0ub3V0cHV0LnBlcmNlbnQpfVxuICAgICAgICAgICAgICAgICUpXG4gICAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgIDwvbmF2PlxuICApO1xufVxuXG5OYXYucHJvcFR5cGVzID0ge1xuICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHNldERhdGFTZWxlY3Rpb246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRhdGFTZWxlY3Rpb246IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9Ib21lLnNjc3MnO1xuaW1wb3J0IENpcmN1bGFyUHJvZ3Jlc3MgZnJvbSAnQG11aS9tYXRlcmlhbC9DaXJjdWxhclByb2dyZXNzJztcbmltcG9ydCBCb3ggZnJvbSAnQG11aS9tYXRlcmlhbC9Cb3gnO1xuaW1wb3J0IGRheWpzIGZyb20gJy4uLy4uL2RheWpzJztcbmltcG9ydCBMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCBmcm9tICcuLi9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbC9MaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCc7XG4vLyBpbXBvcnQgQ2lyY3VsYXJQcm9ncmVzc1dpdGhMYWJlbCBmcm9tICcuLi9DaXJjdWxhclByb2dyZXNzV2l0aExhYmVsL0NpcmN1bGFyUHJvZ3Jlc3NXaXRoTGFiZWwnO1xuaW1wb3J0IE5hdiBmcm9tICcuLi9OYXZpZ2F0aW9uL05hdic7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERhdGEgKHNldERhdGEsIHNldEZpbGVMaXN0LCBzZXREaXNrcywgc2V0VXRpbGl6YXRpb24sIHNldFN0YXR1cykge1xuICB0cnkge1xuICAgIGNsZWFyVGltZW91dCh3aW5kb3cuZGF0YVRpbWVvdXQpO1xuICAgIGNvbnN0IGQgPSBhd2FpdCBmZXRjaCgnYWN0aXZlLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXREYXRhKGQpO1xuXG4gICAgY29uc3QgZiA9IGF3YWl0IGZldGNoKCdmaWxlbGlzdC5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0RmlsZUxpc3QoZik7XG5cbiAgICBjb25zdCBkaXNrcyA9IGF3YWl0IGZldGNoKCdkaXNrLmpzb24nKS50aGVuKChyKSA9PiByLmpzb24oKSk7XG5cbiAgICBzZXREaXNrcyhkaXNrcyk7XG5cbiAgICBjb25zdCB1dGlsaXphdGlvbiA9IGF3YWl0IGZldGNoKCd1dGlsaXphdGlvbi5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0VXRpbGl6YXRpb24odXRpbGl6YXRpb24pO1xuXG4gICAgY29uc3Qgc3RhdHVzID0gYXdhaXQgZmV0Y2goJ3N0YXR1cy5qc29uJykudGhlbigocikgPT4gci5qc29uKCkpO1xuXG4gICAgc2V0U3RhdHVzKHN0YXR1cyk7XG5cbiAgICB3aW5kb3cuZGF0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGdldERhdGEoLi4uYXJndW1lbnRzKTtcbiAgICB9LCAxICogMTAwMCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB3aW5kb3cuZGF0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGdldERhdGEoLi4uYXJndW1lbnRzKTtcbiAgICB9LCAxICogMTAwMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXN0aW1hdGVkX2xvY2FsX3RpbWUgKHNlY29uZHMpIHtcbiAgY29uc3QgZmluYWxfdGltZSA9IGRheWpzKCkuYWRkKHNlY29uZHMsICdzZWNvbmRzJyk7XG4gIGxldCBmbXRfc3RyaW5nID0gJ01NL0REL1lZWVkgSEg6bW06c3MnO1xuXG4gIGlmIChmaW5hbF90aW1lLmlzU2FtZShkYXlqcygpLCAnZGF5JykpIHtcbiAgICBmbXRfc3RyaW5nID0gJ0hIOm1tOnNzJztcbiAgfVxuICByZXR1cm4gZmluYWxfdGltZS5mb3JtYXQoZm10X3N0cmluZyk7XG59XG5cbmZ1bmN0aW9uIGh1bWFuX3NpemUgKHNpemUpIHtcbiAgY29uc3Qgb3JkZXIgPSBbJ2diJywgJ21iJywgJ2tiJ107XG4gIGNvbnN0IG91dHB1dF9zaXplID0gb3JkZXIuZmluZCgobykgPT4gc2l6ZVtvXSA+PSAxKTtcbiAgY29uc3Qgcm91bmRlZF9zaXplID0gTWF0aC5yb3VuZChzaXplW291dHB1dF9zaXplXSAqIDEwMCkgLyAxMDA7XG5cbiAgcmV0dXJuIHJvdW5kZWRfc2l6ZSArIG91dHB1dF9zaXplO1xufVxuXG5mdW5jdGlvbiBtYWtlX2h1bWFuX3JlYWRhYmxlIChzaXplKSB7XG4gIGxldCBjYWxjX3NpemUgPSArc2l6ZTtcbiAgY29uc3QgdW5pdHMgPSBbJ2tiJywgJ21iJywgJ2diJ107XG4gIGxldCB1bml0ID0gMDtcblxuICB3aGlsZSAoY2FsY19zaXplID4gMTAyNCkge1xuICAgIGNhbGNfc2l6ZSAvPSAxMDI0O1xuICAgIHVuaXQgKz0gMTtcbiAgfVxuXG4gIHJldHVybiBgJHtNYXRoLnJvdW5kKGNhbGNfc2l6ZSAqIDEwMCkgLyAxMDB9JHt1bml0c1t1bml0XX1gO1xufVxuXG5mdW5jdGlvbiBIb21lICgpIHtcbiAgY29uc3QgW2RhdGFTb3VyY2UsIHNldERhdGFdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZmlsZWxpc3QsIHNldEZpbGVMaXN0XSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW2Rpc2tzLCBzZXREaXNrc10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFt1dGlsaXphdGlvbiwgc2V0VXRpbGl6YXRpb25dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZGF0YVNlbGVjdGlvbiwgc2V0RGF0YVNlbGVjdGlvbl0gPSB1c2VTdGF0ZSgwKTtcblxuICBjb25zdCBtdnAgPSBbZGF0YVNvdXJjZSwgZmlsZWxpc3QsIGRpc2tzLCB1dGlsaXphdGlvbiwgc3RhdHVzXS5maWx0ZXIoKGQpID0+ICFkKTtcblxuICAvLyBpbnRlcmZhY2Ugd2FpdHMgZm9yIGFsbCBkYXRhIHRvIGJlIGxvYWRlZFxuICBpZiAobXZwLmxlbmd0aCA+IDApIHtcbiAgICBnZXREYXRhKHNldERhdGEsIHNldEZpbGVMaXN0LCBzZXREaXNrcywgc2V0VXRpbGl6YXRpb24sIHNldFN0YXR1cyk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggc3g9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxuICAgICAgICA8Q2lyY3VsYXJQcm9ncmVzcyAvPlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfVxuXG4gIGlmIChkYXRhU291cmNlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Qm94IHN4PXt7IGRpc3BsYXk6ICdmbGV4JyB9fT5cbiAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgLz5cbiAgICAgIDwvQm94PlxuICAgICk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gZGF0YVNvdXJjZVtkYXRhU2VsZWN0aW9uXTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIGltYWdlXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJsaW5lXCIgLz5cbiAgICAgIDxoMT5PcHRpbWl6ZWQgdmlkZW8gZW5jb2Rpbmc8L2gxPlxuICAgICAgPE5hdiBkYXRhPXtkYXRhU291cmNlfSBkYXRhU2VsZWN0aW9uPXtkYXRhU2VsZWN0aW9ufSBzZXREYXRhU2VsZWN0aW9uPXtzZXREYXRhU2VsZWN0aW9ufSAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgY2VudGVyXCI+XG4gICAgICAgIDxzdHJvbmc+e2RhdGEuZmlsZX08L3N0cm9uZz5cbiAgICAgICAgeycgJ31cbiAgICAgICAgKFxuICAgICAgICB7ZGF0YS52aWRlb19zdHJlYW0uY29kZWNfbmFtZX1cbiAgICAgICAgL1xuICAgICAgICB7ZGF0YS5hdWRpb19zdHJlYW0uY29kZWNfbmFtZX1cbiAgICAgICAgKVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXhcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPkNQVTwvc3Ryb25nPlxuICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17dXRpbGl6YXRpb24uY3B1fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPk1lbW9yeTwvc3Ryb25nPlxuICAgICAgICAgIDxMaW5lYXJQcm9ncmVzc1dpdGhMYWJlbCB2YWx1ZT17dXRpbGl6YXRpb24ubWVtb3J5fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5FbGFwc2VkPC9zdHJvbmc+XG4gICAgICAgICAge2RhdGEub3V0cHV0LnJ1bl90aW1lfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPlRpbWVjb2RlPC9zdHJvbmc+XG4gICAgICAgICAge2RhdGEub3V0cHV0LnRpbWVtYXJrfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPlByb2ZpbGU8L3N0cm9uZz5cbiAgICAgICAgICB7ZGF0YS5uYW1lfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5FeHBlY3RlZCBjb21wbGV0ZWQgdGltZTwvc3Ryb25nPlxuICAgICAgICAgIHtlc3RpbWF0ZWRfbG9jYWxfdGltZShkYXRhLm91dHB1dC5lc3RfY29tcGxldGVkX3NlY29uZHMpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRcIj5cbiAgICAgICAgICA8c3Ryb25nPkVUQTwvc3Ryb25nPlxuICAgICAgICAgIHtkYXRhLm91dHB1dC50aW1lX3JlbWFpbmluZ31cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgIDxzdHJvbmc+RmlsZXMgUmVtYWluaW5nPC9zdHJvbmc+XG4gICAgICAgICAge3N0YXR1cy51bnByb2Nlc3NlZF9maWxlcy50b0xvY2FsZVN0cmluZygpfVxuICAgICAgICAgIHsvKiA8Q2lyY3VsYXJQcm9ncmVzc1dpdGhMYWJlbCBudW1lcmF0b3I9e251bWVyYXRvcn0gZGVub21pbmF0b3I9e2Rlbm9taW5hdG9yfSAvPiAqL31cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5GaWxlIFByb2dyZXNzPC9zdHJvbmc+XG4gICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtkYXRhLm91dHB1dC5wZXJjZW50fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5MaWJyYXJ5IENvdmVyYWdlPC9zdHJvbmc+XG4gICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtNYXRoLnJvdW5kKHN0YXR1cy5saWJyYXJ5X2NvdmVyYWdlKX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0XCI+XG4gICAgICAgICAgPHN0cm9uZz5PcmlnaW5hbCBTaXplPC9zdHJvbmc+XG4gICAgICAgICAge2h1bWFuX3NpemUoZGF0YS5vdXRwdXQuc2l6ZS5vcmlnaW5hbCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgIDxzdHJvbmc+Q3VycmVudCBTaXplPC9zdHJvbmc+XG4gICAgICAgICAge2h1bWFuX3NpemUoZGF0YS5vdXRwdXQuc2l6ZS5wcm9ncmVzcyl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldFwiPlxuICAgICAgICAgIDxzdHJvbmc+RXN0LiBGaW5hbCBTaXplPC9zdHJvbmc+XG4gICAgICAgICAgPGVtPlxuICAgICAgICAgICAge2Ake1xuICAgICAgICAgICAgICBNYXRoLnJvdW5kKCtkYXRhLm91dHB1dC5zaXplLmVzdGltYXRlZF9maW5hbC5jaGFuZ2UucmVwbGFjZSgnJScsICcnKSAqIDEwMCkgLyAxMDBcbiAgICAgICAgICAgIH0lYH1cbiAgICAgICAgICA8L2VtPlxuICAgICAgICAgIHtodW1hbl9zaXplKGRhdGEub3V0cHV0LnNpemUuZXN0aW1hdGVkX2ZpbmFsKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXQgY2VudGVyXCI+XG4gICAgICAgIDxzdHJvbmc+Q29tbWFuZDwvc3Ryb25nPlxuICAgICAgICB7ZGF0YS5mZm1wZWdfY21kfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBxdWFydGVyIGRpc2tzXCI+XG4gICAgICAgIHshZGlza3M/Lm1hcCAmJiA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldCBjZW50ZXJcIj5Mb2FkaW5nLi4uPC9kaXY+fVxuICAgICAgICB7ZGlza3M/Lm1hcCAmJlxuICAgICAgICAgIGRpc2tzPy5tYXAoKGRpc2spID0+IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtbXCJ3aWRnZXRcIiwgZGlzay5hYm92ZV90aHJlc2hvbGQgJiYgXCJkYW5nZXJcIl0uZmlsdGVyKGMgPT4gYykuam9pbihcIiBcIil9PlxuICAgICAgICAgICAgICA8c3Ryb25nPntkaXNrLm1vdW50ZWR9PC9zdHJvbmc+XG4gICAgICAgICAgICAgIDxlbT57W2Rpc2sudXNlZCwgJ29mJywgZGlzay5zaXplXS5qb2luKCcgJyl9PC9lbT5cbiAgICAgICAgICAgICAgPExpbmVhclByb2dyZXNzV2l0aExhYmVsIHZhbHVlPXtkaXNrLnBlcmNlbnRfdXNlZH0gY2xhc3NOYW1lPXtbZGlzay5hYm92ZV90aHJlc2hvbGQgJiYgXCJkYW5nZXJcIl0uZmlsdGVyKGMgPT4gYykuam9pbihcIiBcIil9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZGdldCBsaXN0XCI+XG4gICAgICAgIHshZmlsZWxpc3Q/Lm1hcCAmJiA8ZW0+TG9hZGluZy4uLjwvZW0+fVxuICAgICAgICA8c3Ryb25nPlxuICAgICAgICAgIE5leHRcbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIHtmaWxlbGlzdC5sZW5ndGgudG9Mb2NhbGVTdHJpbmcoKX1cbiAgICAgICAgICB7JyAnfVxuICAgICAgICAgIHF1ZXVlZCBmaWxlc1xuICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvdmVyZmxvd1wiPlxuICAgICAgICAgIHtmaWxlbGlzdD8ubWFwICYmIChcbiAgICAgICAgICAgIDx0YWJsZT5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aD4jPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+UHJpb3JpdHk8L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5QYXRoPC90aD5cbiAgICAgICAgICAgICAgICA8dGg+U2l6ZTwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlJlc29sdXRpb248L3RoPlxuICAgICAgICAgICAgICAgIDx0aD5Db2RlYzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPkVuY29kZSB2ZXJzaW9uPC90aD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAge2ZpbGVsaXN0Lm1hcCgoZiwgaWR4KSA9PiAoXG4gICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgPHRkPntpZHggKyAxfTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e2YucHJpb3JpdHl9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5wYXRofTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8dGQ+e21ha2VfaHVtYW5fcmVhZGFibGUoZi5zaXplKX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPntmLnJlc29sdXRpb259PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZD57Zi5jb2RlY308L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkPntmLmVuY29kZV92ZXJzaW9ufTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW5hbWVkLWFzLWRlZmF1bHRcbmltcG9ydCBIb21lIGZyb20gJy4vY29tcG9uZW50cy9Ib21lL0hvbWUnO1xuXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1maWxlbmFtZS1leHRlbnNpb25cbnJvb3QucmVuZGVyKDxIb21lIC8+KTtcbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiQ3J5cHRvSlMiLCJtb2R1bGUiLCJleHBvcnRzIiwiTWF0aCIsInVuZGVmaW5lZCIsImNyeXB0byIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWxUaGlzIiwibXNDcnlwdG8iLCJnIiwiZXJyIiwiY3J5cHRvU2VjdXJlUmFuZG9tSW50IiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDMyQXJyYXkiLCJyYW5kb21CeXRlcyIsInJlYWRJbnQzMkxFIiwiRXJyb3IiLCJjcmVhdGUiLCJPYmplY3QiLCJGIiwib2JqIiwic3VidHlwZSIsInByb3RvdHlwZSIsIkMiLCJDX2xpYiIsImxpYiIsIkJhc2UiLCJleHRlbmQiLCJvdmVycmlkZXMiLCJ0aGlzIiwibWl4SW4iLCJoYXNPd25Qcm9wZXJ0eSIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImluc3RhbmNlIiwicHJvcGVydGllcyIsInByb3BlcnR5TmFtZSIsInRvU3RyaW5nIiwiY2xvbmUiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwibGVuZ3RoIiwiZW5jb2RlciIsIkhleCIsInN0cmluZ2lmeSIsImNvbmNhdCIsIndvcmRBcnJheSIsInRoaXNXb3JkcyIsInRoYXRXb3JkcyIsInRoaXNTaWdCeXRlcyIsInRoYXRTaWdCeXRlcyIsImNsYW1wIiwiaSIsInRoYXRCeXRlIiwiaiIsImNlaWwiLCJjYWxsIiwic2xpY2UiLCJyYW5kb20iLCJuQnl0ZXMiLCJwdXNoIiwiQ19lbmMiLCJlbmMiLCJoZXhDaGFycyIsImJpdGUiLCJqb2luIiwicGFyc2UiLCJoZXhTdHIiLCJoZXhTdHJMZW5ndGgiLCJwYXJzZUludCIsInN1YnN0ciIsIkxhdGluMSIsImxhdGluMUNoYXJzIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGF0aW4xU3RyIiwibGF0aW4xU3RyTGVuZ3RoIiwiY2hhckNvZGVBdCIsIlV0ZjgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJlIiwidXRmOFN0ciIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsInJlc2V0IiwiX2RhdGEiLCJfbkRhdGFCeXRlcyIsIl9hcHBlbmQiLCJkYXRhIiwiX3Byb2Nlc3MiLCJkb0ZsdXNoIiwicHJvY2Vzc2VkV29yZHMiLCJkYXRhV29yZHMiLCJkYXRhU2lnQnl0ZXMiLCJibG9ja1NpemUiLCJuQmxvY2tzUmVhZHkiLCJuV29yZHNSZWFkeSIsIm1heCIsIl9taW5CdWZmZXJTaXplIiwibkJ5dGVzUmVhZHkiLCJtaW4iLCJvZmZzZXQiLCJfZG9Qcm9jZXNzQmxvY2siLCJzcGxpY2UiLCJDX2FsZ28iLCJIYXNoZXIiLCJjZmciLCJfZG9SZXNldCIsInVwZGF0ZSIsIm1lc3NhZ2VVcGRhdGUiLCJmaW5hbGl6ZSIsIl9kb0ZpbmFsaXplIiwiX2NyZWF0ZUhlbHBlciIsImhhc2hlciIsIm1lc3NhZ2UiLCJfY3JlYXRlSG1hY0hlbHBlciIsImtleSIsIkhNQUMiLCJhbGdvIiwiVCIsImFicyIsInNpbiIsIk1ENSIsIl9oYXNoIiwiTSIsIm9mZnNldF9pIiwiTV9vZmZzZXRfaSIsIkgiLCJNX29mZnNldF8wIiwiTV9vZmZzZXRfMSIsIk1fb2Zmc2V0XzIiLCJNX29mZnNldF8zIiwiTV9vZmZzZXRfNCIsIk1fb2Zmc2V0XzUiLCJNX29mZnNldF82IiwiTV9vZmZzZXRfNyIsIk1fb2Zmc2V0XzgiLCJNX29mZnNldF85IiwiTV9vZmZzZXRfMTAiLCJNX29mZnNldF8xMSIsIk1fb2Zmc2V0XzEyIiwiTV9vZmZzZXRfMTMiLCJNX29mZnNldF8xNCIsIk1fb2Zmc2V0XzE1IiwiYSIsImIiLCJjIiwiZCIsIkZGIiwiR0ciLCJISCIsIklJIiwibkJpdHNUb3RhbCIsIm5CaXRzTGVmdCIsIm5CaXRzVG90YWxIIiwiZmxvb3IiLCJuQml0c1RvdGFsTCIsImhhc2giLCJIX2kiLCJ4IiwicyIsInQiLCJuIiwiSG1hY01ENSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsIkpTT04iLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiciIsInUiLCJvIiwiZiIsImgiLCJsIiwiJCIsInkiLCJuYW1lIiwid2Vla2RheXMiLCJzcGxpdCIsIm1vbnRocyIsIm9yZGluYWwiLCJtIiwiQXJyYXkiLCJ2IiwieiIsInV0Y09mZnNldCIsImRhdGUiLCJ5ZWFyIiwibW9udGgiLCJhZGQiLCJwIiwidyIsIkQiLCJtcyIsIlEiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJTIiwiXyIsIk8iLCJhcmdzIiwibG9jYWxlIiwiJEwiLCJ1dGMiLCIkdSIsIiR4IiwiJG9mZnNldCIsIiRkIiwiRGF0ZSIsIk5hTiIsInRlc3QiLCJtYXRjaCIsInN1YnN0cmluZyIsIlVUQyIsIiR5IiwiZ2V0RnVsbFllYXIiLCIkTSIsImdldE1vbnRoIiwiJEQiLCJnZXREYXRlIiwiJFciLCJnZXREYXkiLCIkSCIsImdldEhvdXJzIiwiJG0iLCJnZXRNaW51dGVzIiwiJHMiLCJnZXRTZWNvbmRzIiwiJG1zIiwiZ2V0TWlsbGlzZWNvbmRzIiwiJHV0aWxzIiwiaXNWYWxpZCIsImlzU2FtZSIsInN0YXJ0T2YiLCJlbmRPZiIsImlzQWZ0ZXIiLCJpc0JlZm9yZSIsIiRnIiwic2V0IiwidW5peCIsInZhbHVlT2YiLCJnZXRUaW1lIiwidG9EYXRlIiwiJGxvY2FsZSIsIndlZWtTdGFydCIsIiRzZXQiLCJkYXlzSW5Nb250aCIsImdldCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJpbnZhbGlkRGF0ZSIsIm1lcmlkaWVtIiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJnZXRUaW1lem9uZU9mZnNldCIsImRpZmYiLCJ0b0pTT04iLCJ0b0lTT1N0cmluZyIsInRvVVRDU3RyaW5nIiwiZm9yRWFjaCIsIiRpIiwiaXNEYXlqcyIsImVuIiwiTHMiLCJpc1NhbWVPckFmdGVyIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsInRpbWVab25lTmFtZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImhvdXIxMiIsInRpbWVab25lIiwiZm9ybWF0VG9QYXJ0cyIsInR5cGUiLCJ2YWx1ZSIsInR6IiwidG9Mb2NhbGVTdHJpbmciLCIkdGltZXpvbmUiLCJvZmZzZXROYW1lIiwiZ3Vlc3MiLCJmaW5kIiwicmVzb2x2ZWRPcHRpb25zIiwic2V0RGVmYXVsdCIsImxvY2FsIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENEYXkiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiJGxvY2FsT2Zmc2V0IiwiaXNVVEMiLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIlN5bWJvbCIsImZvciIsInEiLCIkJHR5cGVvZiIsIkEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wcyIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImFycmF5IiwiYmlnaW50IiwiYm9vbCIsImZ1bmMiLCJudW1iZXIiLCJvYmplY3QiLCJzdHJpbmciLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm5vZGUiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJiYSIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiaWEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsImthIiwibGEiLCJtYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwicWEiLCJyYSIsInRvVXBwZXJDYXNlIiwic2EiLCJvYSIsImlzTmFOIiwicGEiLCJuYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidGEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInVhIiwidmEiLCJ3YSIsInhhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJpdGVyYXRvciIsIkphIiwiS2EiLCJhc3NpZ24iLCJMYSIsInN0YWNrIiwidHJpbSIsIk1hIiwiTmEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbmNsdWRlcyIsIk9hIiwidGFnIiwiUGEiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJRYSIsIlJhIiwiU2EiLCJub2RlTmFtZSIsIlVhIiwiX3ZhbHVlVHJhY2tlciIsImNvbnN0cnVjdG9yIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJUYSIsIlZhIiwiY2hlY2tlZCIsIldhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJYYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWWEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWmEiLCIkYSIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZGIiLCJpc0FycmF5IiwiZWIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImZiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImdiIiwiaGIiLCJpYiIsInRleHRDb250ZW50IiwiamIiLCJrYiIsImxiIiwibWIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwib2IiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicGIiLCJxYiIsInJiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzYiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInRiIiwidWIiLCJpcyIsInZiIiwid2IiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieGIiLCJ5YiIsInpiIiwiQWIiLCJCYiIsInN0YXRlTm9kZSIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNYiIsIm9uRXJyb3IiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJVYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiVmIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIldiIiwiWWIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWGIiLCJaYiIsIiRiIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImFjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJiYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiY2MiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZGMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImVjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJmYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZ2MiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImhjIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJpYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImpjIiwia2MiLCJuYyIsImNsejMyIiwib2MiLCJwYyIsImxvZyIsIkxOMiIsInFjIiwicmMiLCJzYyIsInRjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInVjIiwid2MiLCJ4YyIsInljIiwiemMiLCJldmVudFRpbWVzIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJNYXAiLCJPYyIsIlBjIiwiUWMiLCJSYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlNjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlVjIiwiVmMiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJXYyIsIlhjIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiY2QiLCJkZCIsInRyYW5zaXRpb24iLCJlZCIsImZkIiwiZ2QiLCJoZCIsIlRjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsIm9kIiwicGQiLCJxZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInZkIiwid2QiLCJ4ZCIsInJkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwibm93IiwiaXNUcnVzdGVkIiwic2QiLCJ0ZCIsInZpZXciLCJkZXRhaWwiLCJ1ZCIsInpkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInlkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkFkIiwiQ2QiLCJkYXRhVHJhbnNmZXIiLCJFZCIsIkdkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkhkIiwiY2xpcGJvYXJkRGF0YSIsIklkIiwiS2QiLCJMZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJNZCIsIk5kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIk9kIiwiUGQiLCJjb2RlIiwicmVwZWF0Iiwid2hpY2giLCJRZCIsIlNkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiV2QiLCJYZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWWQiLCJaZCIsImFlIiwiZG9jdW1lbnRNb2RlIiwiYmUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJrZSIsImNvbG9yIiwiZGF0ZXRpbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJsZSIsIm1lIiwibmUiLCJldmVudCIsImxpc3RlbmVycyIsIm9lIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJvbmlucHV0IiwiemUiLCJkZXRhY2hFdmVudCIsIkFlIiwiQmUiLCJhdHRhY2hFdmVudCIsIkNlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJJZSIsIkplIiwibmV4dFNpYmxpbmciLCJLZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJMZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJNZSIsImNvbnRlbnRFZGl0YWJsZSIsIk5lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiT2UiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIldlIiwiWGUiLCJZZSIsImFuaW1hdGlvbiIsIlplIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImtmIiwibGYiLCJtZiIsIlRiIiwibGlzdGVuZXIiLCJuZiIsImhhcyIsIm9mIiwicGYiLCJxZiIsInJmIiwiYmluZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwiSiIsInNmIiwidGYiLCJwYXJlbnRXaW5kb3ciLCJ1ZiIsInZmIiwiWiIsInlhIiwiYWIiLCJjYSIsImllIiwiY2hhciIsImplIiwidW5zaGlmdCIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiRGYiLCJfX2h0bWwiLCJFZiIsInNldFRpbWVvdXQiLCJGZiIsImNsZWFyVGltZW91dCIsIkdmIiwiUHJvbWlzZSIsIklmIiwicXVldWVNaWNyb3Rhc2siLCJyZXNvbHZlIiwidGhlbiIsImNhdGNoIiwiSGYiLCJKZiIsIktmIiwiTGYiLCJwcmV2aW91c1NpYmxpbmciLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiRSIsIkciLCJVZiIsIlZmIiwiV2YiLCJYZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIllmIiwiWmYiLCIkZiIsImFnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiYmciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJfY3VycmVudFZhbHVlIiwicmciLCJjaGlsZExhbmVzIiwic2ciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInRnIiwidWciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJ2ZyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImludGVybGVhdmVkIiwiZWZmZWN0cyIsInlnIiwiemciLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJIZyIsIkNvbXBvbmVudCIsInJlZnMiLCJJZyIsIk1nIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSmciLCJLZyIsIkxnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIk5nIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJPZyIsInN0YXRlIiwidXBkYXRlciIsIlBnIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiUWciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJJIiwiZmgiLCJnaCIsImhoIiwiZGVsZXRpb25zIiwiaWgiLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiamgiLCJtb2RlIiwia2giLCJsaCIsIm1oIiwibWVtb2l6ZWRQcm9wcyIsIm5oIiwib2giLCJwaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJxaCIsInJoIiwic2giLCJpbmRleCIsInRoIiwidWgiLCJ2aCIsImltcGxlbWVudGF0aW9uIiwid2giLCJ4aCIsImRvbmUiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwidGFnTmFtZSIsIkdoIiwiSGgiLCJJaCIsIksiLCJKaCIsInJldmVhbE9yZGVyIiwiS2giLCJMaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiTWgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiTmgiLCJPaCIsIkwiLCJOIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJhaSIsImJpIiwiY2kiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImdldFNuYXBzaG90IiwiaWkiLCJqaSIsIlAiLCJraSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJsaSIsIm1pIiwibmkiLCJkZXN0cm95IiwiZGVwcyIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIkhpIiwiSWkiLCJjb25zb2xlIiwiZXJyb3IiLCJUaSIsIlZpIiwiV2kiLCJKaSIsIldlYWtNYXAiLCJLaSIsIkxpIiwiTWkiLCJOaSIsImNvbXBvbmVudERpZENhdGNoIiwiT2kiLCJjb21wb25lbnRTdGFjayIsIlBpIiwicGluZ0NhY2hlIiwiUWkiLCJSaSIsIlNpIiwiWGkiLCJ0YWlsTW9kZSIsInRhaWwiLCJzdWJ0cmVlRmxhZ3MiLCJZaSIsInBlbmRpbmdDb250ZXh0IiwiWmkiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJSIiwicmVuZGVyaW5nIiwiYWoiLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJpc0JhY2t3YXJkcyIsImxhc3QiLCJiaiIsImNqIiwiZGoiLCJSZWFjdEN1cnJlbnRPd25lciIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsImtqIiwibGoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsIm1qIiwibmoiLCJvaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInBqIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiZmFsbGJhY2siLCJ3aiIsInhqIiwieWoiLCJ6aiIsIl9yZWFjdFJldHJ5IiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkdqIiwiSGoiLCJJaiIsIldlYWtTZXQiLCJKaiIsIlUiLCJLaiIsIkxqIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiVWoiLCJWIiwiVmoiLCJXaiIsIlhqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIllqIiwiWmoiLCJhayIsImJrIiwiY2siLCJkayIsImRpc3BsYXkiLCJlayIsImZrIiwiZ2siLCJoayIsImlrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJVayIsImprIiwia2siLCJsayIsIm1rIiwiVyIsIlgiLCJZIiwibmsiLCJvayIsInBrIiwicWsiLCJyayIsIkluZmluaXR5Iiwic2siLCJ0ayIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsInZjIiwiY2FsbGJhY2tQcmlvcml0eSIsImhnIiwiRGsiLCJFayIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJPayIsInRpbWVvdXRIYW5kbGUiLCJQayIsIlFrIiwiUmsiLCJTayIsIlRrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkFjIiwiTWoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImxjIiwib25SZWNvdmVyYWJsZUVycm9yIiwiVmsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJXayIsIlhrIiwiWmsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiJGsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYWwiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJibCIsImNsIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsIkZqIiwiWWsiLCJqbCIsInJlcG9ydEVycm9yIiwia2wiLCJfaW50ZXJuYWxSb290IiwibGwiLCJtbCIsIm5sIiwib2wiLCJxbCIsInBsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJybCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInNsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ0bCIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwicmVjb25jaWxlclZlcnNpb24iLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ1bCIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiY3JlYXRlUm9vdCIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsImh5ZHJhdGUiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsIm5zIiwiZGVmIiwiZGVmaW5pdGlvbiIsIkZ1bmN0aW9uIiwicHJvcCIsInRvU3RyaW5nVGFnIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJjb21wb3NlQ2xhc3NlcyIsInNsb3RzIiwiZ2V0VXRpbGl0eUNsYXNzIiwiY2xhc3NlcyIsIm91dHB1dCIsInNsb3QiLCJyZWR1Y2UiLCJhY2MiLCJTdHlsZVNoZWV0IiwiX3RoaXMiLCJfaW5zZXJ0VGFnIiwiYmVmb3JlIiwidGFncyIsImluc2VydGlvblBvaW50IiwicHJlcGVuZCIsImNvbnRhaW5lciIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwiX3Byb3RvIiwibm9kZXMiLCJydWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNoZWV0Rm9yVGFnIiwiaW5zZXJ0UnVsZSIsImNzc1J1bGVzIiwiZmx1c2giLCJwYXR0ZXJuIiwicmVwbGFjZW1lbnQiLCJpbmRleG9mIiwiYmVnaW4iLCJsaW5lIiwiY29sdW1uIiwicG9zaXRpb24iLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJzIiwicm9vdCIsInBhcmVudCIsInByZXYiLCJwZWVrIiwiY2FyZXQiLCJ0b2tlbiIsImFsbG9jIiwiZGVhbGxvYyIsImRlbGltaXQiLCJkZWxpbWl0ZXIiLCJ3aGl0ZXNwYWNlIiwiZXNjYXBpbmciLCJjb21tZW50ZXIiLCJDT01NRU5UIiwiY29tcGlsZSIsInJ1bGVzIiwicnVsZXNldHMiLCJwc2V1ZG8iLCJwb2ludHMiLCJkZWNsYXJhdGlvbnMiLCJhdHJ1bGUiLCJwcm9wZXJ0eSIsInByZXZpb3VzIiwidmFyaWFibGUiLCJzY2FubmluZyIsImFtcGVyc2FuZCIsInJlZmVyZW5jZSIsImNvbW1lbnQiLCJkZWNsYXJhdGlvbiIsInJ1bGVzZXQiLCJwb3N0IiwiaWRlbnRpZmllcldpdGhQb2ludFRyYWNraW5nIiwiZml4ZWRFbGVtZW50cyIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImRlZmF1bHRTdHlsaXNQbHVnaW5zIiwiZXhlYyIsInNzclN0eWxlcyIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsImN1cnJlbnRTaGVldCIsImNvbGxlY3Rpb24iLCJmaW5hbGl6aW5nUGx1Z2lucyIsInNlcmlhbGl6ZXIiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsInJlZ2lzdGVyZWQiLCJzdHIiLCJsZW4iLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsImZuIiwiYXJnIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwicHJvY2Vzc1N0eWxlVmFsdWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsIl9fZW1vdGlvbl9zdHlsZXMiLCJhbmltIiwiX2tleSIsImludGVycG9sYXRlZCIsImNyZWF0ZVN0cmluZ0Zyb21PYmplY3QiLCJwcmV2aW91c0N1cnNvciIsImNhY2hlZCIsImxhYmVsUGF0dGVybiIsInN0cmluZ01vZGUiLCJzdHJpbmdzIiwicmF3IiwibGFzdEluZGV4IiwiaWRlbnRpZmllck5hbWUiLCJfbGVuIiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNhcGl0YWxpemUiLCJyZXNvbHZlUHJvcHMiLCJkZWZhdWx0U2xvdFByb3BzIiwic2xvdFByb3BzIiwic2xvdFByb3BOYW1lIiwiZ2V0VGhlbWVQcm9wcyIsInBhcmFtcyIsInRoZW1lIiwiY29tcG9uZW50cyIsImlzUGxhaW5PYmplY3QiLCJkZWVwQ2xvbmUiLCJfZXhjbHVkZWQiLCJib3JkZXJSYWRpdXMiLCJ2YWx1ZXMiLCJ4cyIsInNtIiwieGwiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJ1cCIsImhhbmRsZUJyZWFrcG9pbnRzIiwicHJvcFZhbHVlIiwic3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImNzc0tleSIsImdldFBhdGgiLCJwYXRoIiwiY2hlY2tWYXJzIiwidmFycyIsInZhbCIsImdldFN0eWxlVmFsdWUiLCJ0aGVtZU1hcHBpbmciLCJ0cmFuc2Zvcm0iLCJwcm9wVmFsdWVGaW5hbCIsInVzZXJWYWx1ZSIsImNzc1Byb3BlcnR5IiwidGhlbWVLZXkiLCJmaWx0ZXJQcm9wcyIsImRpcmVjdGlvbnMiLCJhbGlhc2VzIiwibWFyZ2luWCIsIm1hcmdpblkiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0Q3NzUHJvcGVydGllcyIsImRpcmVjdGlvbiIsImRpciIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwiX2dldFBhdGgiLCJ0aGVtZVNwYWNpbmciLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0cmFuc2Zvcm1lciIsInRyYW5zZm9ybWVkIiwiY3NzUHJvcGVydGllcyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsInJlc29sdmVDc3NQcm9wZXJ0eSIsIm1hcmdpbiIsInBhZGRpbmciLCJzcGFjaW5nIiwiaGFuZGxlcnMiLCJib3JkZXJUcmFuc2Zvcm0iLCJib3JkZXIiLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiZ2FwIiwiY29sdW1uR2FwIiwicm93R2FwIiwicGFsZXR0ZVRyYW5zZm9ybSIsInNpemluZ1RyYW5zZm9ybSIsIm1heFdpZHRoIiwiX3Byb3BzJHRoZW1lIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pIiwiX3Byb3BzJHRoZW1lJGJyZWFrcG9pMiIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibWluSGVpZ2h0IiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInB0IiwicHIiLCJweCIsInB5IiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdJbmxpbmUiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJtdCIsIm1yIiwibXgiLCJteSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpbklubGluZSIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwibWFyZ2luQmxvY2siLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJkaXNwbGF5UHJpbnQiLCJ0ZXh0T3ZlcmZsb3ciLCJ2aXNpYmlsaXR5Iiwid2hpdGVTcGFjZSIsImZsZXhCYXNpcyIsImZsZXhEaXJlY3Rpb24iLCJmbGV4V3JhcCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsImp1c3RpZnlJdGVtcyIsImp1c3RpZnlTZWxmIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJncmlkVGVtcGxhdGVBcmVhcyIsInJpZ2h0IiwiYm90dG9tIiwiYm94U2hhZG93IiwiYm94U2l6aW5nIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFN0eWxlIiwibGV0dGVyU3BhY2luZyIsInRleHRUcmFuc2Zvcm0iLCJ0ZXh0QWxpZ24iLCJ0eXBvZ3JhcGh5Iiwic3R5bGVGdW5jdGlvblN4IiwiZ2V0VGhlbWVWYWx1ZSIsImNvbmZpZyIsIl90aGVtZSR1bnN0YWJsZV9zeENvbiIsInN4IiwidW5zdGFibGVfc3hDb25maWciLCJ0cmF2ZXJzZSIsInN4SW5wdXQiLCJzeE9iamVjdCIsImVtcHR5QnJlYWtwb2ludHMiLCJicmVha3BvaW50c0lucHV0IiwiX2JyZWFrcG9pbnRzSW5wdXQka2V5IiwiY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0IiwiYnJlYWtwb2ludHNLZXlzIiwic3R5bGVLZXkiLCJtYXliZUZuIiwiYnJlYWtwb2ludHNWYWx1ZXMiLCJvYmplY3RzIiwiYWxsS2V5cyIsInVuaW9uIiwiZXZlcnkiLCJvYmplY3RzSGF2ZVNhbWVLZXlzIiwiYnJlYWtwb2ludE91dHB1dCIsInVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCIsInBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzcGFjaW5nSW5wdXQiLCJzaGFwZUlucHV0Iiwib3RoZXIiLCJ1bml0Iiwic3RlcCIsInNvcnRlZFZhbHVlcyIsImJyZWFrcG9pbnRzQXNBcnJheSIsInNvcnQiLCJicmVha3BvaW50MSIsImJyZWFrcG9pbnQyIiwic29ydEJyZWFrcG9pbnRzVmFsdWVzIiwiZG93biIsImJldHdlZW4iLCJlbmRJbmRleCIsIm5vdCIsImtleUluZGV4IiwiY3JlYXRlQnJlYWtwb2ludHMiLCJtdWkiLCJhcmdzSW5wdXQiLCJhcmd1bWVudCIsImNyZWF0ZVNwYWNpbmciLCJtdWlUaGVtZSIsInVuc3RhYmxlX3N4Iiwic3lzdGVtRGVmYXVsdFRoZW1lIiwiZGVmYXVsdFRoZW1lIiwiY29udGV4dFRoZW1lIiwidXNlVGhlbWVXaXRob3V0RGVmYXVsdCIsImRlY29tcG9zZUNvbG9yIiwiUmVnRXhwIiwiY29sb3JzIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJjb2xvclNwYWNlIiwicGFyc2VGbG9hdCIsInJlY29tcG9zZUNvbG9yIiwiZ2V0THVtaW5hbmNlIiwicmdiIiwiaHNsVG9SZ2IiLCJ0b0ZpeGVkIiwiZGFya2VuIiwiY29lZmZpY2llbnQiLCJsaWdodGVuIiwiYmxhY2siLCJ3aGl0ZSIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJsaWdodCIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiYWN0aXZlIiwiaG92ZXIiLCJob3Zlck9wYWNpdHkiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1c09wYWNpdHkiLCJhY3RpdmF0ZWRPcGFjaXR5IiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJ0b25hbE9mZnNldExpZ2h0IiwidG9uYWxPZmZzZXREYXJrIiwibWFpbiIsImNhc2VBbGxDYXBzIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiX3JlZiIsImZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRSZWd1bGFyIiwiZm9udFdlaWdodE1lZGl1bSIsImZvbnRXZWlnaHRCb2xkIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtIiwicHhUb1JlbTIiLCJjb2VmIiwiYnVpbGRWYXJpYW50IiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiY29uc3RhbnQiLCJjcmVhdGVUcmFuc2l0aW9ucyIsImlucHV0VHJhbnNpdGlvbnMiLCJtZXJnZWRFYXNpbmciLCJtZXJnZWREdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiZWFzaW5nT3B0aW9uIiwiYW5pbWF0ZWRQcm9wIiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwibWl4aW5zSW5wdXQiLCJ0cmFuc2l0aW9uc0lucHV0IiwidHlwb2dyYXBoeUlucHV0IiwiY29udHJhc3RUaHJlc2hvbGQiLCJnZXREZWZhdWx0UHJpbWFyeSIsImdldERlZmF1bHRTZWNvbmRhcnkiLCJnZXREZWZhdWx0RXJyb3IiLCJpbmZvIiwiZ2V0RGVmYXVsdEluZm8iLCJzdWNjZXNzIiwiZ2V0RGVmYXVsdFN1Y2Nlc3MiLCJ3YXJuaW5nIiwiZ2V0RGVmYXVsdFdhcm5pbmciLCJnZXRDb250cmFzdFRleHQiLCJjb250cmFzdFRleHQiLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJnZXRDb250cmFzdFJhdGlvIiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIm1vZGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJzeXN0ZW1UaGVtZSIsInRvb2xiYXIiLCJzaGFkb3dzIiwicmVhY3RQcm9wc1JlZ2V4IiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsIkhUTUxFbGVtZW50IiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJpc1N0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPblN0cmluZ1RhZyIsInRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCIsImdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHMiLCJpc1JlYWwiLCJzaG91bGRGb3J3YXJkUHJvcCIsIm9wdGlvbnNTaG91bGRGb3J3YXJkUHJvcCIsIl9fZW1vdGlvbl9mb3J3YXJkUHJvcCIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsIl9fZW1vdGlvbl9yZWFsIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwibGFiZWwiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiYXMiLCJjbGFzc0ludGVycG9sYXRpb25zIiwiZmluYWxTaG91bGRGb3J3YXJkUHJvcCIsIm5ld1Byb3BzIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsInN0eWxlZCIsImlzRW1wdHkiLCJwcm9wc1RvQ2xhc3NLZXkiLCJ2YXJpYW50IiwiY2xhc3NLZXkiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsInJvb3RTaG91bGRGb3J3YXJkUHJvcCIsInNsb3RTaG91bGRGb3J3YXJkUHJvcCIsInN5c3RlbVN4IiwiX19tdWlfc3lzdGVtU3giLCJpbnB1dE9wdGlvbnMiLCJwcm9jZXNzb3IiLCJmaWx0ZXIiLCJjb21wb25lbnRTbG90Iiwic2tpcFZhcmlhbnRzUmVzb2x2ZXIiLCJpbnB1dFNraXBWYXJpYW50c1Jlc29sdmVyIiwic2tpcFN4IiwiaW5wdXRTa2lwU3giLCJvdmVycmlkZXNSZXNvbHZlciIsInNob3VsZEZvcndhcmRQcm9wT3B0aW9uIiwiZGVmYXVsdFN0eWxlZFJlc29sdmVyIiwibXVpU3R5bGVkUmVzb2x2ZXIiLCJzdHlsZUFyZyIsImV4cHJlc3Npb25zIiwiZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lIiwic3R5bGVzQXJnIiwidGhlbWVJbnB1dCIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJzdHlsZU92ZXJyaWRlcyIsImdldFN0eWxlT3ZlcnJpZGVzIiwicmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyIsImVudHJpZXMiLCJzbG90S2V5Iiwic2xvdFN0eWxlIiwiX3RoZW1lJGNvbXBvbmVudHMiLCJfdGhlbWUkY29tcG9uZW50cyRuYW0iLCJvd25lclN0YXRlIiwidmFyaWFudHNTdHlsZXMiLCJ0aGVtZVZhcmlhbnRzIiwidGhlbWVWYXJpYW50IiwiaXNNYXRjaCIsInZhcmlhbnRzUmVzb2x2ZXIiLCJnZXRWYXJpYW50U3R5bGVzIiwibnVtT2ZDdXN0b21GbnNBcHBsaWVkIiwicGxhY2Vob2xkZXJzIiwiZmlsbCIsIl9yZWYyIiwid2l0aENvbmZpZyIsImRlZmF1bHRHZW5lcmF0b3IiLCJnZW5lcmF0ZSIsImNvbmZpZ3VyZSIsImdlbmVyYXRvciIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJjb21wbGV0ZWQiLCJleHBhbmRlZCIsImZvY3VzZWQiLCJmb2N1c1Zpc2libGUiLCJyZXF1aXJlZCIsImdlbmVyYXRlVXRpbGl0eUNsYXNzIiwiZ2xvYmFsU3RhdGVQcmVmaXgiLCJnbG9iYWxTdGF0ZUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsImdldENpcmN1bGFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdCIsIl90MiIsIl90MyIsIl90NCIsImNpcmN1bGFyUm90YXRlS2V5ZnJhbWUiLCJjaXJjdWxhckRhc2hLZXlmcmFtZSIsIkNpcmN1bGFyUHJvZ3Jlc3NSb290IiwiQ2lyY3VsYXJQcm9ncmVzc1NWRyIsInN2ZyIsIkNpcmN1bGFyUHJvZ3Jlc3NDaXJjbGUiLCJjaXJjbGUiLCJkaXNhYmxlU2hyaW5rIiwiY2lyY2xlRGlzYWJsZVNocmluayIsInN0cm9rZSIsImluUHJvcHMiLCJ0aGlja25lc3MiLCJ1c2VVdGlsaXR5Q2xhc3NlcyIsImNpcmNsZVN0eWxlIiwicm9vdFN0eWxlIiwicm9vdFByb3BzIiwiY2lyY3VtZmVyZW5jZSIsIlBJIiwicm9sZSIsInZpZXdCb3giLCJjeCIsImN5IiwiZXh0ZW5kU3hQcm9wIiwiaW5TeCIsInN5c3RlbVByb3BzIiwib3RoZXJQcm9wcyIsIl9wcm9wcyR0aGVtZSR1bnN0YWJsZSIsInNwbGl0UHJvcHMiLCJmaW5hbFN4IiwiQm94IiwiZGVmYXVsdENsYXNzTmFtZSIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiQm94Um9vdCIsIl9leHRlbmRTeFByb3AiLCJjcmVhdGVCb3giLCJkYXlqcyIsInRpbWV6b25lIiwiZ2V0TGluZWFyUHJvZ3Jlc3NVdGlsaXR5Q2xhc3MiLCJfdDUiLCJfdDYiLCJpbmRldGVybWluYXRlMUtleWZyYW1lIiwiaW5kZXRlcm1pbmF0ZTJLZXlmcmFtZSIsImJ1ZmZlcktleWZyYW1lIiwiZ2V0Q29sb3JTaGFkZSIsIkxpbmVhclByb2dyZXNzIiwiTGluZWFyUHJvZ3Jlc3NSb290IiwiY29sb3JBZGp1c3QiLCJMaW5lYXJQcm9ncmVzc0Rhc2hlZCIsImRhc2hlZCIsImJhY2tncm91bmRJbWFnZSIsImJhY2tncm91bmRTaXplIiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiTGluZWFyUHJvZ3Jlc3NCYXIxIiwiYmFyIiwiYmFyMUluZGV0ZXJtaW5hdGUiLCJiYXIxRGV0ZXJtaW5hdGUiLCJiYXIxQnVmZmVyIiwidHJhbnNmb3JtT3JpZ2luIiwiTGluZWFyUHJvZ3Jlc3NCYXIyIiwiYmFyMkluZGV0ZXJtaW5hdGUiLCJiYXIyQnVmZmVyIiwidmFsdWVCdWZmZXIiLCJiYXIxIiwiYmFyMiIsImlubGluZVN0eWxlcyIsImdldFR5cG9ncmFwaHlVdGlsaXR5Q2xhc3MiLCJUeXBvZ3JhcGh5Um9vdCIsImFsaWduIiwibm9XcmFwIiwiZ3V0dGVyQm90dG9tIiwicGFyYWdyYXBoIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiaW5oZXJpdCIsImNvbG9yVHJhbnNmb3JtYXRpb25zIiwidGV4dFByaW1hcnkiLCJ0ZXh0U2Vjb25kYXJ5IiwidGhlbWVQcm9wcyIsInRyYW5zZm9ybURlcHJlY2F0ZWRDb2xvcnMiLCJ2YXJpYW50TWFwcGluZyIsIkxpbmVhclByb2dyZXNzV2l0aExhYmVsIiwiTmF2Iiwic2V0RGF0YVNlbGVjdGlvbiIsImRhdGFTZWxlY3Rpb24iLCJmaWxlIiwibWQ1IiwiZGlzcGxheV9maWxlX25hbWUiLCJwZXJjZW50IiwiZ2V0RGF0YSIsInNldERhdGEiLCJzZXRGaWxlTGlzdCIsInNldERpc2tzIiwic2V0VXRpbGl6YXRpb24iLCJzZXRTdGF0dXMiLCJkYXRhVGltZW91dCIsImZldGNoIiwianNvbiIsImRpc2tzIiwidXRpbGl6YXRpb24iLCJzdGF0dXMiLCJodW1hbl9zaXplIiwib3V0cHV0X3NpemUiLCJkYXRhU291cmNlIiwiZmlsZWxpc3QiLCJzZWNvbmRzIiwiZmluYWxfdGltZSIsImZtdF9zdHJpbmciLCJ2aWRlb19zdHJlYW0iLCJjb2RlY19uYW1lIiwiYXVkaW9fc3RyZWFtIiwiY3B1IiwibWVtb3J5IiwicnVuX3RpbWUiLCJ0aW1lbWFyayIsImVzdF9jb21wbGV0ZWRfc2Vjb25kcyIsInRpbWVfcmVtYWluaW5nIiwidW5wcm9jZXNzZWRfZmlsZXMiLCJsaWJyYXJ5X2NvdmVyYWdlIiwib3JpZ2luYWwiLCJwcm9ncmVzcyIsImVzdGltYXRlZF9maW5hbCIsImNoYW5nZSIsImZmbXBlZ19jbWQiLCJkaXNrIiwiYWJvdmVfdGhyZXNob2xkIiwibW91bnRlZCIsInVzZWQiLCJwZXJjZW50X3VzZWQiLCJpZHgiLCJjYWxjX3NpemUiLCJtYWtlX2h1bWFuX3JlYWRhYmxlIiwicmVzb2x1dGlvbiIsImNvZGVjIiwiZW5jb2RlX3ZlcnNpb24iLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=
